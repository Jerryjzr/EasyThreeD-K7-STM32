###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rot.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW59B0.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rot.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_rot.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_rot.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rot.c
      1          /*
      2          
      3            u8g_rot.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          uint8_t u8g_dev_rot90_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
     40          uint8_t u8g_dev_rot180_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
     41          uint8_t u8g_dev_rot270_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
     42          /*
     43          uint8_t u8g_dev_rot_dummy_fn(void *u8g, void *dev, uint8_t msg, void *arg)
     44          {
     45            return 0;
     46          }
     47          */

   \                                 In section .text, align 2, keep-with-next
     48          uint8_t u8g_dev_rot_dummy_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     49          {
     50            return 0;
   \                     u8g_dev_rot_dummy_fn: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     51          }
     52          

   \                                 In section .data, align 4
     53          u8g_dev_t u8g_dev_rot = { u8g_dev_rot_dummy_fn, NULL, NULL };
   \                     u8g_dev_rot:
   \   00000000   0x........         DC32 u8g_dev_rot_dummy_fn, 0H, 0H
   \              0x00000000   
   \              0x00000000   
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void u8g_UndoRotation(u8g_t *u8g)
     56          {
     57            if ( u8g->dev != &u8g_dev_rot )
   \                     u8g_UndoRotation: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x428A             CMP      R2,R1
   \   00000006   0xD103             BNE.N    ??u8g_UndoRotation_0
     58              return;
     59            u8g->dev = u8g_dev_rot.dev_mem;
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x6041             STR      R1,[R0, #+4]
     60            u8g_UpdateDimension(u8g);
   \   0000000C   0x.... 0x....      B.W      u8g_UpdateDimension
   \                     ??u8g_UndoRotation_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void u8g_SetRot90(u8g_t *u8g)
     64          {
     65            if ( u8g->dev != &u8g_dev_rot )
   \                     u8g_SetRot90: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x....             LDR.N    R2,??DataTable4
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD001             BEQ.N    ??u8g_SetRot90_0
     66            {
     67              u8g_dev_rot.dev_mem = u8g->dev;
   \   00000008   0x6051             STR      R1,[R2, #+4]
     68              u8g->dev = &u8g_dev_rot;
   \   0000000A   0x6042             STR      R2,[R0, #+4]
     69            }
     70            u8g_dev_rot.dev_fn = u8g_dev_rot90_fn;
   \                     ??u8g_SetRot90_0: (+1)
   \   0000000C   0x.... 0x....      ADR.W    R1,u8g_dev_rot90_fn
   \   00000010   0x6011             STR      R1,[R2, #+0]
     71            u8g_UpdateDimension(u8g);
   \   00000012   0x.... 0x....      B.W      u8g_UpdateDimension
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void u8g_SetRot180(u8g_t *u8g)
     75          {
     76            if ( u8g->dev != &u8g_dev_rot )
   \                     u8g_SetRot180: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x....             LDR.N    R2,??DataTable4
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD001             BEQ.N    ??u8g_SetRot180_0
     77            {
     78              u8g_dev_rot.dev_mem = u8g->dev;
   \   00000008   0x6051             STR      R1,[R2, #+4]
     79              u8g->dev = &u8g_dev_rot;
   \   0000000A   0x6042             STR      R2,[R0, #+4]
     80            }
     81            u8g_dev_rot.dev_fn = u8g_dev_rot180_fn;
   \                     ??u8g_SetRot180_0: (+1)
   \   0000000C   0x.... 0x....      ADR.W    R1,u8g_dev_rot180_fn
   \   00000010   0x6011             STR      R1,[R2, #+0]
     82            u8g_UpdateDimension(u8g);
   \   00000012   0x.... 0x....      B.W      u8g_UpdateDimension
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void u8g_SetRot270(u8g_t *u8g)
     86          {
     87            if ( u8g->dev != &u8g_dev_rot )
   \                     u8g_SetRot270: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x....             LDR.N    R2,??DataTable4
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD001             BEQ.N    ??u8g_SetRot270_0
     88            {
     89              u8g_dev_rot.dev_mem = u8g->dev;
   \   00000008   0x6051             STR      R1,[R2, #+4]
     90              u8g->dev = &u8g_dev_rot;
   \   0000000A   0x6042             STR      R2,[R0, #+4]
     91            }
     92            u8g_dev_rot.dev_fn = u8g_dev_rot270_fn;
   \                     ??u8g_SetRot270_0: (+1)
   \   0000000C   0x.... 0x....      ADR.W    R1,u8g_dev_rot270_fn
   \   00000010   0x6011             STR      R1,[R2, #+0]
     93            u8g_UpdateDimension(u8g);
   \   00000012   0x.... 0x....      B.W      u8g_UpdateDimension
     94          }
     95          

   \                                 In section .text, align 4, keep-with-next
     96          uint8_t u8g_dev_rot90_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     97          {
   \                     u8g_dev_rot90_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0x461E             MOV      R6,R3
     98            u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
   \   0000000A   0x684F             LDR      R7,[R1, #+4]
     99            switch(msg)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x2817             CMP      R0,#+23
   \   00000010   0xD011             BEQ.N    ??u8g_dev_rot90_fn_0
   \   00000012   0x282C             CMP      R0,#+44
   \   00000014   0xD027             BEQ.N    ??u8g_dev_rot90_fn_1
   \   00000016   0x282D             CMP      R0,#+45
   \   00000018   0xD038             BEQ.N    ??u8g_dev_rot90_fn_2
   \   0000001A   0x2832             CMP      R0,#+50
   \   0000001C   0xD023             BEQ.N    ??u8g_dev_rot90_fn_1
   \   0000001E   0x283B             CMP      R0,#+59
   \   00000020   0xD034             BEQ.N    ??u8g_dev_rot90_fn_2
   \   00000022   0x2846             CMP      R0,#+70
   \   00000024   0xD015             BEQ.N    ??u8g_dev_rot90_fn_3
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xD017             BEQ.N    ??u8g_dev_rot90_fn_4
    100            {
    101              default:
    102              /*
    103              case U8G_DEV_MSG_INIT:
    104              case U8G_DEV_MSG_STOP:
    105              case U8G_DEV_MSG_PAGE_FIRST:
    106              case U8G_DEV_MSG_PAGE_NEXT:
    107              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    108              case U8G_DEV_MSG_SET_XY_CB:
    109              */
    110                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   0000002E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000032   0x.... 0x....      B.W      u8g_call_dev_fn
    111          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    112              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    113                {
    114                  u8g_dev_arg_bbx_t *bbx = (u8g_dev_arg_bbx_t *)arg;
    115                  u8g_uint_t x, y, tmp;
    116                  
    117                  /* transform the reference point */
    118                  y = bbx->x;
    119                  x = u8g->height;
    120                  /* x = u8g_GetWidthLL(u8g, rotation_chain); */
    121                  x -= bbx->y; 
    122                  x--;
    123                  
    124                  /* adjust point to be the uppler left corner again */
    125                  x -= bbx->h;
    126                  x++;
    127                  
    128                  /* swap box dimensions */        
    129                  tmp = bbx->w;
    130                  bbx->w = bbx->h;
    131                  bbx->h = tmp;
    132                  
    133                  /* store x,y */
    134                  bbx->x = x;
    135                  bbx->y = y;
    136                }
    137                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    138          #endif /* U8G_DEV_MSG_IS_BBX_INTERSECTION */
    139              case U8G_DEV_MSG_GET_PAGE_BOX:
    140                /* get page size from next device in the chain */
    141                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \                     ??u8g_dev_rot90_fn_0: (+1)
   \   00000036   0x2217             MOVS     R2,#+23
   \   00000038   0x4639             MOV      R1,R7
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       u8g_call_dev_fn
    142                //printf("pre x: %3d..%3d y: %3d..%3d   ", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    143                {
    144          	u8g_box_t new_box;
    145          	//new_box.x0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
    146          	//new_box.x1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
    147          	
    148          	new_box.x0 = ((u8g_box_t *)arg)->y0;
   \   00000040   0x7870             LDRB     R0,[R6, #+1]
    149          	new_box.x1 = ((u8g_box_t *)arg)->y1;
   \   00000042   0x78F1             LDRB     R1,[R6, #+3]
    150          	new_box.y0 = ((u8g_box_t *)arg)->x0;
   \   00000044   0x7832             LDRB     R2,[R6, #+0]
    151          	new_box.y1 = ((u8g_box_t *)arg)->x1;
   \   00000046   0x78B3             LDRB     R3,[R6, #+2]
    152          	*((u8g_box_t *)arg) = new_box;
   \   00000048   0x7030             STRB     R0,[R6, #+0]
   \   0000004A   0x7072             STRB     R2,[R6, #+1]
   \   0000004C   0x70B1             STRB     R1,[R6, #+2]
   \   0000004E   0x70F3             STRB     R3,[R6, #+3]
    153          	//printf("post x: %3d..%3d y: %3d..%3d\n", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    154                }
    155                break;
   \   00000050   0xE034             B.N      ??u8g_dev_rot90_fn_5
    156              case U8G_DEV_MSG_GET_WIDTH:
    157                *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g,rotation_chain);
   \                     ??u8g_dev_rot90_fn_3: (+1)
   \   00000052   0x4639             MOV      R1,R7
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       u8g_GetHeightLL
   \   0000005A   0x7030             STRB     R0,[R6, #+0]
    158                break;
   \   0000005C   0xE02E             B.N      ??u8g_dev_rot90_fn_5
    159              case U8G_DEV_MSG_GET_HEIGHT:
    160                *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g, rotation_chain);
   \                     ??u8g_dev_rot90_fn_4: (+1)
   \   0000005E   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000062   0x7030             STRB     R0,[R6, #+0]
    161                break;
   \   00000064   0xE02A             B.N      ??u8g_dev_rot90_fn_5
    162              case U8G_DEV_MSG_SET_PIXEL:
    163              case U8G_DEV_MSG_SET_TPIXEL:
    164                {
    165                  u8g_uint_t x, y;
    166                  y = ((u8g_dev_arg_pixel_t *)arg)->x;
   \                     ??u8g_dev_rot90_fn_1: (+1)
   \   00000066   0xF896 0x8000      LDRB     R8,[R6, #+0]
    167                  x = u8g_GetWidthLL(u8g, rotation_chain);
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_GetWidthLL
    168                  x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
    169                  x--;
    170                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   00000072   0x7871             LDRB     R1,[R6, #+1]
   \   00000074   0x1A40             SUBS     R0,R0,R1
   \   00000076   0x1E40             SUBS     R0,R0,#+1
   \   00000078   0x7030             STRB     R0,[R6, #+0]
    171                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   0000007A   0xF886 0x8001      STRB     R8,[R6, #+1]
    172                }
    173                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   0000007E   0x4633             MOV      R3,R6
   \   00000080   0x462A             MOV      R2,R5
   \   00000082   0x4639             MOV      R1,R7
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0x.... 0x....      BL       u8g_call_dev_fn
    174                break;
   \   0000008A   0xE017             B.N      ??u8g_dev_rot90_fn_5
    175              case U8G_DEV_MSG_SET_8PIXEL:
    176              case U8G_DEV_MSG_SET_4TPIXEL:
    177                {
    178                  u8g_uint_t x, y;
    179          	//uint16_t x,y;
    180                  y = ((u8g_dev_arg_pixel_t *)arg)->x;
   \                     ??u8g_dev_rot90_fn_2: (+1)
   \   0000008C   0xF896 0x8000      LDRB     R8,[R6, #+0]
    181                  x = u8g_GetWidthLL(u8g, rotation_chain);
   \   00000090   0x4639             MOV      R1,R7
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       u8g_GetWidthLL
    182                  x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
    183                  x--;
    184                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   00000098   0x7871             LDRB     R1,[R6, #+1]
   \   0000009A   0x1A40             SUBS     R0,R0,R1
   \   0000009C   0x1E40             SUBS     R0,R0,#+1
   \   0000009E   0x7030             STRB     R0,[R6, #+0]
    185                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000A0   0xF886 0x8001      STRB     R8,[R6, #+1]
    186                  ((u8g_dev_arg_pixel_t *)arg)->dir+=1;
   \   000000A4   0x78F0             LDRB     R0,[R6, #+3]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x70F0             STRB     R0,[R6, #+3]
    187                  ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
   \   000000AA   0xF000 0x0003      AND      R0,R0,#0x3
   \   000000AE   0x70F0             STRB     R0,[R6, #+3]
    188                }
    189                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   000000B0   0x4633             MOV      R3,R6
   \   000000B2   0x462A             MOV      R2,R5
   \   000000B4   0x4639             MOV      R1,R7
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0x.... 0x....      BL       u8g_call_dev_fn
    190                break;
    191            }
    192            return 1;
   \                     ??u8g_dev_rot90_fn_5: (+1)
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    193          }
    194          

   \                                 In section .text, align 4, keep-with-next
    195          uint8_t u8g_dev_rot180_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    196          {
   \                     u8g_dev_rot180_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0x461E             MOV      R6,R3
    197            u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
   \   0000000A   0x684F             LDR      R7,[R1, #+4]
    198            switch(msg)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x2817             CMP      R0,#+23
   \   00000010   0xD012             BEQ.N    ??u8g_dev_rot180_fn_0
   \   00000012   0x282C             CMP      R0,#+44
   \   00000014   0xD044             BEQ.N    ??u8g_dev_rot180_fn_1
   \   00000016   0x282D             CMP      R0,#+45
   \   00000018   0xD05C             BEQ.N    ??u8g_dev_rot180_fn_2
   \   0000001A   0x2832             CMP      R0,#+50
   \   0000001C   0xD040             BEQ.N    ??u8g_dev_rot180_fn_1
   \   0000001E   0x283B             CMP      R0,#+59
   \   00000020   0xD058             BEQ.N    ??u8g_dev_rot180_fn_2
   \   00000022   0x2846             CMP      R0,#+70
   \   00000024   0xD032             BEQ.N    ??u8g_dev_rot180_fn_3
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xD034             BEQ.N    ??u8g_dev_rot180_fn_4
    199            {
    200              default:
    201              /*
    202              case U8G_DEV_MSG_INIT:
    203              case U8G_DEV_MSG_STOP:
    204              case U8G_DEV_MSG_PAGE_FIRST:
    205              case U8G_DEV_MSG_PAGE_NEXT:
    206              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    207              case U8G_DEV_MSG_SET_XY_CB:
    208              */
    209                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   0000002E   0xB001             ADD      SP,SP,#+4
   \   00000030   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   00000034   0x.... 0x....      B.W      u8g_call_dev_fn
    210          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    211              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    212                {
    213                  u8g_dev_arg_bbx_t *bbx = (u8g_dev_arg_bbx_t *)arg;
    214                  u8g_uint_t x, y;
    215                  
    216                  /* transform the reference point */
    217                  //y = u8g_GetHeightLL(u8g, rotation_chain);
    218                  y = u8g->height;
    219                  y -= bbx->y; 
    220                  y--;
    221                  
    222                  //x = u8g_GetWidthLL(u8g, rotation_chain);
    223                  x = u8g->width;
    224                  x -= bbx->x; 
    225                  x--;
    226                  
    227                  /* adjust point to be the uppler left corner again */
    228                  y -= bbx->h;
    229                  y++;
    230                  
    231                  x -= bbx->w;
    232                  x++;
    233                          
    234                  /* store x,y */
    235                  bbx->x = x;
    236                  bbx->y = y;
    237                }
    238                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    239          #endif /* U8G_DEV_MSG_IS_BBX_INTERSECTION */
    240              case U8G_DEV_MSG_GET_PAGE_BOX:
    241                /* get page size from next device in the chain */
    242                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \                     ??u8g_dev_rot180_fn_0: (+1)
   \   00000038   0x2217             MOVS     R2,#+23
   \   0000003A   0x4639             MOV      R1,R7
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_call_dev_fn
    243                //printf("pre x: %3d..%3d y: %3d..%3d   ", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    244                {
    245          	u8g_box_t new_box;
    246          	
    247          	new_box.x0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
   \   00000042   0x4639             MOV      R1,R7
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       u8g_GetWidthLL
   \   0000004A   0x78B1             LDRB     R1,[R6, #+2]
   \   0000004C   0x1A40             SUBS     R0,R0,R1
   \   0000004E   0x1E45             SUBS     R5,R0,#+1
    248          	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
   \   00000050   0x4639             MOV      R1,R7
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000058   0x7831             LDRB     R1,[R6, #+0]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
   \   0000005C   0xF1A0 0x0801      SUB      R8,R0,#+1
    249          	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
   \   00000060   0x4639             MOV      R1,R7
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000068   0x78F1             LDRB     R1,[R6, #+3]
   \   0000006A   0x1A40             SUBS     R0,R0,R1
   \   0000006C   0xF1A0 0x0901      SUB      R9,R0,#+1
    250          	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
   \   00000070   0x4639             MOV      R1,R7
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000078   0x7871             LDRB     R1,[R6, #+1]
   \   0000007A   0x1A40             SUBS     R0,R0,R1
   \   0000007C   0x1E40             SUBS     R0,R0,#+1
    251          	*((u8g_box_t *)arg) = new_box;
   \   0000007E   0x7035             STRB     R5,[R6, #+0]
   \   00000080   0xF886 0x9001      STRB     R9,[R6, #+1]
   \   00000084   0xF886 0x8002      STRB     R8,[R6, #+2]
   \   00000088   0x70F0             STRB     R0,[R6, #+3]
    252          	//printf("post x: %3d..%3d y: %3d..%3d\n", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    253                }
    254                break;
   \   0000008A   0xE042             B.N      ??u8g_dev_rot180_fn_5
    255              case U8G_DEV_MSG_GET_WIDTH:
    256                *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g,rotation_chain);
   \                     ??u8g_dev_rot180_fn_3: (+1)
   \   0000008C   0x4639             MOV      R1,R7
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000094   0x7030             STRB     R0,[R6, #+0]
    257                break;
   \   00000096   0xE03C             B.N      ??u8g_dev_rot180_fn_5
    258              case U8G_DEV_MSG_GET_HEIGHT:
    259                *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g, rotation_chain);
   \                     ??u8g_dev_rot180_fn_4: (+1)
   \   00000098   0x.... 0x....      BL       u8g_GetHeightLL
   \   0000009C   0x7030             STRB     R0,[R6, #+0]
    260                break;
   \   0000009E   0xE038             B.N      ??u8g_dev_rot180_fn_5
    261              case U8G_DEV_MSG_SET_PIXEL:
    262              case U8G_DEV_MSG_SET_TPIXEL:
    263                {
    264                  u8g_uint_t x, y;
    265          
    266                  y = u8g_GetHeightLL(u8g, rotation_chain);
   \                     ??u8g_dev_rot180_fn_1: (+1)
   \   000000A0   0x4639             MOV      R1,R7
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       u8g_GetHeightLL
   \   000000A8   0x4680             MOV      R8,R0
    267                  y -= ((u8g_dev_arg_pixel_t *)arg)->y; 
   \   000000AA   0x7870             LDRB     R0,[R6, #+1]
   \   000000AC   0xEBA8 0x0800      SUB      R8,R8,R0
    268                  y--;
    269                  
    270                  x = u8g_GetWidthLL(u8g, rotation_chain);
   \   000000B0   0x4639             MOV      R1,R7
   \   000000B2   0x4620             MOV      R0,R4
   \   000000B4   0x.... 0x....      BL       u8g_GetWidthLL
    271                  x -= ((u8g_dev_arg_pixel_t *)arg)->x; 
    272                  x--;
    273                  
    274                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000B8   0x7831             LDRB     R1,[R6, #+0]
   \   000000BA   0x1A40             SUBS     R0,R0,R1
   \   000000BC   0x1E40             SUBS     R0,R0,#+1
   \   000000BE   0x7030             STRB     R0,[R6, #+0]
    275                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000C0   0xF1A8 0x0001      SUB      R0,R8,#+1
   \   000000C4   0x7070             STRB     R0,[R6, #+1]
    276                }
    277                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   000000C6   0x4633             MOV      R3,R6
   \   000000C8   0x462A             MOV      R2,R5
   \   000000CA   0x4639             MOV      R1,R7
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       u8g_call_dev_fn
    278                break;
   \   000000D2   0xE01E             B.N      ??u8g_dev_rot180_fn_5
    279              case U8G_DEV_MSG_SET_8PIXEL:
    280              case U8G_DEV_MSG_SET_4TPIXEL:
    281                {
    282                  u8g_uint_t x, y;
    283                  
    284                  y = u8g_GetHeightLL(u8g, rotation_chain);
   \                     ??u8g_dev_rot180_fn_2: (+1)
   \   000000D4   0x4639             MOV      R1,R7
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       u8g_GetHeightLL
   \   000000DC   0x4680             MOV      R8,R0
    285                  y -= ((u8g_dev_arg_pixel_t *)arg)->y; 
   \   000000DE   0x7870             LDRB     R0,[R6, #+1]
   \   000000E0   0xEBA8 0x0800      SUB      R8,R8,R0
    286                  y--;
    287                  
    288                  x = u8g_GetWidthLL(u8g, rotation_chain);
   \   000000E4   0x4639             MOV      R1,R7
   \   000000E6   0x4620             MOV      R0,R4
   \   000000E8   0x.... 0x....      BL       u8g_GetWidthLL
    289                  x -= ((u8g_dev_arg_pixel_t *)arg)->x; 
    290                  x--;
    291                  
    292                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000EC   0x7831             LDRB     R1,[R6, #+0]
   \   000000EE   0x1A40             SUBS     R0,R0,R1
   \   000000F0   0x1E40             SUBS     R0,R0,#+1
   \   000000F2   0x7030             STRB     R0,[R6, #+0]
    293                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000F4   0xF1A8 0x0001      SUB      R0,R8,#+1
   \   000000F8   0x7070             STRB     R0,[R6, #+1]
    294                  ((u8g_dev_arg_pixel_t *)arg)->dir+=2;
   \   000000FA   0x78F0             LDRB     R0,[R6, #+3]
   \   000000FC   0x1C80             ADDS     R0,R0,#+2
   \   000000FE   0x70F0             STRB     R0,[R6, #+3]
    295                  ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
   \   00000100   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000104   0x70F0             STRB     R0,[R6, #+3]
    296                }
    297                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   00000106   0x4633             MOV      R3,R6
   \   00000108   0x462A             MOV      R2,R5
   \   0000010A   0x4639             MOV      R1,R7
   \   0000010C   0x4620             MOV      R0,R4
   \   0000010E   0x.... 0x....      BL       u8g_call_dev_fn
    298                break;
    299            }
    300            return 1;
   \                     ??u8g_dev_rot180_fn_5: (+1)
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    301          }
    302          

   \                                 In section .text, align 4, keep-with-next
    303          uint8_t u8g_dev_rot270_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    304          {
   \                     u8g_dev_rot270_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0x461E             MOV      R6,R3
    305            u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
   \   0000000A   0x684F             LDR      R7,[R1, #+4]
    306            switch(msg)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x2817             CMP      R0,#+23
   \   00000010   0xD012             BEQ.N    ??u8g_dev_rot270_fn_0
   \   00000012   0x282C             CMP      R0,#+44
   \   00000014   0xD044             BEQ.N    ??u8g_dev_rot270_fn_1
   \   00000016   0x282D             CMP      R0,#+45
   \   00000018   0xD055             BEQ.N    ??u8g_dev_rot270_fn_2
   \   0000001A   0x2832             CMP      R0,#+50
   \   0000001C   0xD040             BEQ.N    ??u8g_dev_rot270_fn_1
   \   0000001E   0x283B             CMP      R0,#+59
   \   00000020   0xD051             BEQ.N    ??u8g_dev_rot270_fn_2
   \   00000022   0x2846             CMP      R0,#+70
   \   00000024   0xD032             BEQ.N    ??u8g_dev_rot270_fn_3
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xD034             BEQ.N    ??u8g_dev_rot270_fn_4
    307            {
    308              default:
    309              /*
    310              case U8G_DEV_MSG_INIT:
    311              case U8G_DEV_MSG_STOP:
    312              case U8G_DEV_MSG_PAGE_FIRST:
    313              case U8G_DEV_MSG_PAGE_NEXT:
    314              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    315              case U8G_DEV_MSG_SET_XY_CB:
    316              */
    317                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   0000002E   0xB001             ADD      SP,SP,#+4
   \   00000030   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   00000034   0x.... 0x....      B.W      u8g_call_dev_fn
    318          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    319              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    320                {
    321                  u8g_dev_arg_bbx_t *bbx = (u8g_dev_arg_bbx_t *)arg;
    322                  u8g_uint_t x, y, tmp;
    323                  
    324                  /* transform the reference point */
    325                  x = bbx->y;
    326                  
    327                  y = u8g->width;
    328                  /* y = u8g_GetHeightLL(u8g, rotation_chain); */
    329                  y -= bbx->x; 
    330                  y--;
    331                          
    332                  /* adjust point to be the uppler left corner again */
    333                  y -= bbx->w;
    334                  y++;
    335                  
    336                  /* swap box dimensions */        
    337                  tmp = bbx->w;
    338                  bbx->w = bbx->h;
    339                  bbx->h = tmp;
    340                  
    341                  /* store x,y */
    342                  bbx->x = x;
    343                  bbx->y = y;
    344                }
    345                return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    346          #endif /* U8G_DEV_MSG_IS_BBX_INTERSECTION */
    347              case U8G_DEV_MSG_GET_PAGE_BOX:
    348                /* get page size from next device in the chain */
    349                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \                     ??u8g_dev_rot270_fn_0: (+1)
   \   00000038   0x2217             MOVS     R2,#+23
   \   0000003A   0x4639             MOV      R1,R7
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_call_dev_fn
    350                //printf("pre x: %3d..%3d y: %3d..%3d   ", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    351                {
    352          	u8g_box_t new_box;
    353          	
    354          	new_box.x0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
   \   00000042   0x4639             MOV      R1,R7
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       u8g_GetHeightLL
   \   0000004A   0x78F1             LDRB     R1,[R6, #+3]
   \   0000004C   0x1A40             SUBS     R0,R0,R1
   \   0000004E   0x1E45             SUBS     R5,R0,#+1
    355          	new_box.x1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
   \   00000050   0x4639             MOV      R1,R7
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000058   0x7871             LDRB     R1,[R6, #+1]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
   \   0000005C   0xF1A0 0x0801      SUB      R8,R0,#+1
    356          	new_box.y0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
   \   00000060   0x4639             MOV      R1,R7
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000068   0x78B1             LDRB     R1,[R6, #+2]
   \   0000006A   0x1A40             SUBS     R0,R0,R1
   \   0000006C   0xF1A0 0x0901      SUB      R9,R0,#+1
    357          	new_box.y1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
   \   00000070   0x4639             MOV      R1,R7
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000078   0x7831             LDRB     R1,[R6, #+0]
   \   0000007A   0x1A40             SUBS     R0,R0,R1
   \   0000007C   0x1E40             SUBS     R0,R0,#+1
    358          	*((u8g_box_t *)arg) = new_box;
   \   0000007E   0x7035             STRB     R5,[R6, #+0]
   \   00000080   0xF886 0x9001      STRB     R9,[R6, #+1]
   \   00000084   0xF886 0x8002      STRB     R8,[R6, #+2]
   \   00000088   0x70F0             STRB     R0,[R6, #+3]
    359          	//printf("post x: %3d..%3d y: %3d..%3d\n", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
    360                }
    361                break;
   \   0000008A   0xE034             B.N      ??u8g_dev_rot270_fn_5
    362              case U8G_DEV_MSG_GET_WIDTH:
    363                *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g,rotation_chain);
   \                     ??u8g_dev_rot270_fn_3: (+1)
   \   0000008C   0x4639             MOV      R1,R7
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000094   0x7030             STRB     R0,[R6, #+0]
    364                break;
   \   00000096   0xE02E             B.N      ??u8g_dev_rot270_fn_5
    365              case U8G_DEV_MSG_GET_HEIGHT:
    366                *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g, rotation_chain);
   \                     ??u8g_dev_rot270_fn_4: (+1)
   \   00000098   0x.... 0x....      BL       u8g_GetWidthLL
   \   0000009C   0x7030             STRB     R0,[R6, #+0]
    367                break;
   \   0000009E   0xE02A             B.N      ??u8g_dev_rot270_fn_5
    368              case U8G_DEV_MSG_SET_PIXEL:
    369              case U8G_DEV_MSG_SET_TPIXEL:
    370                {
    371                  u8g_uint_t x, y;
    372                  x = ((u8g_dev_arg_pixel_t *)arg)->y;
   \                     ??u8g_dev_rot270_fn_1: (+1)
   \   000000A0   0xF896 0x8001      LDRB     R8,[R6, #+1]
    373                  
    374                  y = u8g_GetHeightLL(u8g, rotation_chain);
   \   000000A4   0x4639             MOV      R1,R7
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_GetHeightLL
    375                  y -= ((u8g_dev_arg_pixel_t *)arg)->x; 
   \   000000AC   0x7831             LDRB     R1,[R6, #+0]
   \   000000AE   0x1A40             SUBS     R0,R0,R1
    376                  y--;
    377                    
    378                  /*
    379                  x = u8g_GetWidthLL(u8g, rotation_chain);
    380                  x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
    381                  x--;
    382                  */
    383                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000B0   0xF886 0x8000      STRB     R8,[R6, #+0]
    384                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000B4   0x1E40             SUBS     R0,R0,#+1
   \   000000B6   0x7070             STRB     R0,[R6, #+1]
    385                }
    386                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   000000B8   0x4633             MOV      R3,R6
   \   000000BA   0x462A             MOV      R2,R5
   \   000000BC   0x4639             MOV      R1,R7
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       u8g_call_dev_fn
    387                break;
   \   000000C4   0xE017             B.N      ??u8g_dev_rot270_fn_5
    388              case U8G_DEV_MSG_SET_8PIXEL:
    389              case U8G_DEV_MSG_SET_4TPIXEL:
    390                {
    391                  u8g_uint_t x, y;
    392                  x = ((u8g_dev_arg_pixel_t *)arg)->y;
   \                     ??u8g_dev_rot270_fn_2: (+1)
   \   000000C6   0xF896 0x8001      LDRB     R8,[R6, #+1]
    393                  
    394                  y = u8g_GetHeightLL(u8g, rotation_chain);
   \   000000CA   0x4639             MOV      R1,R7
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       u8g_GetHeightLL
    395                  y -= ((u8g_dev_arg_pixel_t *)arg)->x; 
   \   000000D2   0x7831             LDRB     R1,[R6, #+0]
   \   000000D4   0x1A40             SUBS     R0,R0,R1
    396                  y--;
    397                    
    398                  /*
    399                  x = u8g_GetWidthLL(u8g, rotation_chain);
    400                  x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
    401                  x--;
    402                  */
    403                  ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000D6   0xF886 0x8000      STRB     R8,[R6, #+0]
    404                  ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000DA   0x1E40             SUBS     R0,R0,#+1
   \   000000DC   0x7070             STRB     R0,[R6, #+1]
    405                  ((u8g_dev_arg_pixel_t *)arg)->dir+=3;
   \   000000DE   0x78F0             LDRB     R0,[R6, #+3]
   \   000000E0   0x1CC0             ADDS     R0,R0,#+3
   \   000000E2   0x70F0             STRB     R0,[R6, #+3]
    406                  ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
   \   000000E4   0xF000 0x0003      AND      R0,R0,#0x3
   \   000000E8   0x70F0             STRB     R0,[R6, #+3]
    407                }
    408                u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
   \   000000EA   0x4633             MOV      R3,R6
   \   000000EC   0x462A             MOV      R2,R5
   \   000000EE   0x4639             MOV      R1,R7
   \   000000F0   0x4620             MOV      R0,R4
   \   000000F2   0x.... 0x....      BL       u8g_call_dev_fn
    409                break;
    410            }
    411            return 1;
   \                     ??u8g_dev_rot270_fn_5: (+1)
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    412          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     u8g_dev_rot
    413          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_SetRot180
         0   -> u8g_UpdateDimension
       0   u8g_SetRot270
         0   -> u8g_UpdateDimension
       0   u8g_SetRot90
         0   -> u8g_UpdateDimension
       0   u8g_UndoRotation
         0   -> u8g_UpdateDimension
      32   u8g_dev_rot180_fn
        32   -> u8g_GetHeightLL
        32   -> u8g_GetWidthLL
         0   -> u8g_call_dev_fn
        32   -> u8g_call_dev_fn
      32   u8g_dev_rot270_fn
        32   -> u8g_GetHeightLL
        32   -> u8g_GetWidthLL
         0   -> u8g_call_dev_fn
        32   -> u8g_call_dev_fn
      24   u8g_dev_rot90_fn
        24   -> u8g_GetHeightLL
        24   -> u8g_GetWidthLL
         0   -> u8g_call_dev_fn
        24   -> u8g_call_dev_fn
       0   u8g_dev_rot_dummy_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      22  u8g_SetRot180
      22  u8g_SetRot270
      22  u8g_SetRot90
      18  u8g_UndoRotation
      12  u8g_dev_rot
     280  u8g_dev_rot180_fn
     252  u8g_dev_rot270_fn
     194  u8g_dev_rot90_fn
       4  u8g_dev_rot_dummy_fn

 
  12 bytes in section .data
 818 bytes in section .text
 
 818 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
