###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:06
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_bitmap.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW3EFA.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_bitmap.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_bitmap.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_bitmap.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_bitmap.c
      1          /*
      2          
      3            u8g_bitmap.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34          
     35          */
     36          
     37          #include "u8g.h"
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
     40          {
   \                     u8g_DrawHBitmap: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xE00B             B.N      ??u8g_DrawHBitmap_0
     41            while( cnt > 0 )
     42            {
     43              u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
   \                     ??u8g_DrawHBitmap_1: (+1)
   \   00000012   0xF818 0x0B01      LDRB     R0,[R8], #+1
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       u8g_Draw8Pixel
     44              bitmap++;
     45              cnt--;
   \   00000026   0x1E7F             SUBS     R7,R7,#+1
     46              x+=8;
   \   00000028   0x3508             ADDS     R5,R5,#+8
     47            }
   \                     ??u8g_DrawHBitmap_0: (+1)
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1EF             BNE.N    ??u8g_DrawHBitmap_1
     48          }
   \   00000032   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
     51          {
   \                     u8g_DrawBitmap: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x461D             MOV      R5,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xF8DD 0x9024      LDR      R9,[SP, #+36]
     52            if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x00EB             LSLS     R3,R5,#+3
   \   0000001A   0xB2DB             UXTB     R3,R3
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD10E             BNE.N    ??u8g_DrawBitmap_0
     53              return;
   \   00000026   0xE011             B.N      ??u8g_DrawBitmap_1
     54            while( h > 0 )
     55            {
     56              u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
   \                     ??u8g_DrawBitmap_2: (+1)
   \   00000028   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   0000002C   0x462B             MOV      R3,R5
   \   0000002E   0x4622             MOV      R2,R4
   \   00000030   0xB2D2             UXTB     R2,R2
   \   00000032   0x4639             MOV      R1,R7
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0x.... 0x....      BL       u8g_DrawHBitmap
     57              bitmap += cnt;
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x4481             ADD      R9,R9,R0
     58              y++;
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
     59              h--;
   \   00000040   0xF1A8 0x0801      SUB      R8,R8,#+1
     60            }
   \                     ??u8g_DrawBitmap_0: (+1)
   \   00000044   0x4640             MOV      R0,R8
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1ED             BNE.N    ??u8g_DrawBitmap_2
     61          }
   \                     ??u8g_DrawBitmap_1: (+1)
   \   0000004C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     62          
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
     65          {
   \                     u8g_DrawHBitmapP: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xE00B             B.N      ??u8g_DrawHBitmapP_0
     66            while( cnt > 0 )
     67            {
     68              u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
   \                     ??u8g_DrawHBitmapP_1: (+1)
   \   00000012   0xF818 0x0B01      LDRB     R0,[R8], #+1
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       u8g_Draw8Pixel
     69              bitmap++;
     70              cnt--;
   \   00000026   0x1E7F             SUBS     R7,R7,#+1
     71              x+=8;
   \   00000028   0x3508             ADDS     R5,R5,#+8
     72            }
   \                     ??u8g_DrawHBitmapP_0: (+1)
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1EF             BNE.N    ??u8g_DrawHBitmapP_1
     73          }
   \   00000032   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
     76          {
   \                     u8g_DrawBitmapP: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x461D             MOV      R5,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xF8DD 0x9024      LDR      R9,[SP, #+36]
     77            if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x00EB             LSLS     R3,R5,#+3
   \   0000001A   0xB2DB             UXTB     R3,R3
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD10E             BNE.N    ??u8g_DrawBitmapP_0
     78              return;
   \   00000026   0xE011             B.N      ??u8g_DrawBitmapP_1
     79            while( h > 0 )
     80            {
     81              u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
   \                     ??u8g_DrawBitmapP_2: (+1)
   \   00000028   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   0000002C   0x462B             MOV      R3,R5
   \   0000002E   0x4622             MOV      R2,R4
   \   00000030   0xB2D2             UXTB     R2,R2
   \   00000032   0x4639             MOV      R1,R7
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0x.... 0x....      BL       u8g_DrawHBitmapP
     82              bitmap += cnt;
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x4481             ADD      R9,R9,R0
     83              y++;
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
     84              h--;
   \   00000040   0xF1A8 0x0801      SUB      R8,R8,#+1
     85            }
   \                     ??u8g_DrawBitmapP_0: (+1)
   \   00000044   0x4640             MOV      R0,R8
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1ED             BNE.N    ??u8g_DrawBitmapP_2
     86          }
   \                     ??u8g_DrawBitmapP_1: (+1)
   \   0000004C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     87          
     88          /*=========================================================================*/
     89          

   \                                 In section .text, align 2, keep-with-next
     90          static void u8g_DrawHXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const uint8_t *bitmap)
     91          {
   \                     u8g_DrawHXBM: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
     92            uint8_t d;
     93            x+=7;
   \   00000010   0x1DFF             ADDS     R7,R7,#+7
   \   00000012   0xE00B             B.N      ??u8g_DrawHXBM_0
     94            while( w >= 8 )
     95            {
     96              u8g_Draw8Pixel(u8g, x, y, 2, *bitmap);
   \                     ??u8g_DrawHXBM_1: (+1)
   \   00000014   0xF818 0x0B01      LDRB     R0,[R8], #+1
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x2302             MOVS     R3,#+2
   \   0000001C   0x462A             MOV      R2,R5
   \   0000001E   0x4639             MOV      R1,R7
   \   00000020   0xB2C9             UXTB     R1,R1
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       u8g_Draw8Pixel
     97              bitmap++;
     98              w-= 8;
   \   00000028   0x3E08             SUBS     R6,R6,#+8
     99              x+=8;
   \   0000002A   0x3708             ADDS     R7,R7,#+8
    100            }
   \                     ??u8g_DrawHXBM_0: (+1)
   \   0000002C   0x4630             MOV      R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2808             CMP      R0,#+8
   \   00000032   0xDAEF             BGE.N    ??u8g_DrawHXBM_1
    101            if ( w > 0 )
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD013             BEQ.N    ??u8g_DrawHXBM_2
    102            {
    103              d = *bitmap;
   \   0000003C   0xF898 0x8000      LDRB     R8,[R8, #+0]
    104              x -= 7;
   \   00000040   0x1FFF             SUBS     R7,R7,#+7
    105              do
    106              {
    107                if ( d & 1 )
   \                     ??u8g_DrawHXBM_3: (+1)
   \   00000042   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000046   0xD505             BPL.N    ??u8g_DrawHXBM_4
    108                  u8g_DrawPixel(u8g, x, y);
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x4639             MOV      R1,R7
   \   0000004C   0xB2C9             UXTB     R1,R1
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_DrawPixel
    109                x++;
   \                     ??u8g_DrawHXBM_4: (+1)
   \   00000054   0x1C7F             ADDS     R7,R7,#+1
    110                w--;
   \   00000056   0x1E76             SUBS     R6,R6,#+1
    111                d >>= 1;      
   \   00000058   0xEA4F 0x0858      LSR      R8,R8,#+1
    112              } while ( w > 0 );
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0xB2C0             UXTB     R0,R0
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1EE             BNE.N    ??u8g_DrawHXBM_3
    113            }
    114          }
   \                     ??u8g_DrawHXBM_2: (+1)
   \   00000064   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void u8g_DrawXBM(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const uint8_t *bitmap)
    117          {
   \                     u8g_DrawXBM: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x461C             MOV      R4,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \   00000010   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    118            u8g_uint_t b;
    119            b = w;
    120            b += 7;
    121            b >>= 3;
   \   00000014   0xF104 0x0A07      ADD      R10,R4,#+7
   \   00000018   0xFA5F 0xFA8A      UXTB     R10,R10
    122            
    123            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD10E             BNE.N    ??u8g_DrawXBM_0
    124              return;
   \   0000002A   0xE011             B.N      ??u8g_DrawXBM_1
    125            
    126            while( h > 0 )
    127            {
    128              u8g_DrawHXBM(u8g, x, y, w, bitmap);
   \                     ??u8g_DrawXBM_2: (+1)
   \   0000002C   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   00000030   0x4623             MOV      R3,R4
   \   00000032   0x463A             MOV      R2,R7
   \   00000034   0xB2D2             UXTB     R2,R2
   \   00000036   0x4631             MOV      R1,R6
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       u8g_DrawHXBM
    129              bitmap += b;
   \   0000003E   0xEB09 0x09DA      ADD      R9,R9,R10, LSR #+3
    130              y++;
   \   00000042   0x1C7F             ADDS     R7,R7,#+1
    131              h--;
   \   00000044   0xF1A8 0x0801      SUB      R8,R8,#+1
    132            }
   \                     ??u8g_DrawXBM_0: (+1)
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD1ED             BNE.N    ??u8g_DrawXBM_2
    133          }
   \                     ??u8g_DrawXBM_1: (+1)
   \   00000050   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    134          

   \                                 In section .text, align 2, keep-with-next
    135          static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
    136          {
   \                     u8g_DrawHXBMP: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    137            uint8_t d;
    138            x+=7;
   \   00000010   0x1DFF             ADDS     R7,R7,#+7
   \   00000012   0xE00B             B.N      ??u8g_DrawHXBMP_0
    139            while( w >= 8 )
    140            {
    141              u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
   \                     ??u8g_DrawHXBMP_1: (+1)
   \   00000014   0xF818 0x0B01      LDRB     R0,[R8], #+1
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x2302             MOVS     R3,#+2
   \   0000001C   0x462A             MOV      R2,R5
   \   0000001E   0x4639             MOV      R1,R7
   \   00000020   0xB2C9             UXTB     R1,R1
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       u8g_Draw8Pixel
    142              bitmap++;
    143              w-= 8;
   \   00000028   0x3E08             SUBS     R6,R6,#+8
    144              x+=8;
   \   0000002A   0x3708             ADDS     R7,R7,#+8
    145            }
   \                     ??u8g_DrawHXBMP_0: (+1)
   \   0000002C   0x4630             MOV      R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2808             CMP      R0,#+8
   \   00000032   0xDAEF             BGE.N    ??u8g_DrawHXBMP_1
    146            if ( w > 0 )
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD013             BEQ.N    ??u8g_DrawHXBMP_2
    147            {
    148              d = u8g_pgm_read(bitmap);
   \   0000003C   0xF898 0x8000      LDRB     R8,[R8, #+0]
    149              x -= 7;
   \   00000040   0x1FFF             SUBS     R7,R7,#+7
    150              do
    151              {
    152                if ( d & 1 )
   \                     ??u8g_DrawHXBMP_3: (+1)
   \   00000042   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000046   0xD505             BPL.N    ??u8g_DrawHXBMP_4
    153                  u8g_DrawPixel(u8g, x, y);
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x4639             MOV      R1,R7
   \   0000004C   0xB2C9             UXTB     R1,R1
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_DrawPixel
    154                x++;
   \                     ??u8g_DrawHXBMP_4: (+1)
   \   00000054   0x1C7F             ADDS     R7,R7,#+1
    155                w--;
   \   00000056   0x1E76             SUBS     R6,R6,#+1
    156                d >>= 1;      
   \   00000058   0xEA4F 0x0858      LSR      R8,R8,#+1
    157              } while ( w > 0 );
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0xB2C0             UXTB     R0,R0
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1EE             BNE.N    ??u8g_DrawHXBMP_3
    158            }
    159          }
   \                     ??u8g_DrawHXBMP_2: (+1)
   \   00000064   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
    162          {
   \                     u8g_DrawXBMP: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x461C             MOV      R4,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \   00000010   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    163            u8g_uint_t b;
    164            b = w;
    165            b += 7;
    166            b >>= 3;
   \   00000014   0xF104 0x0A07      ADD      R10,R4,#+7
   \   00000018   0xFA5F 0xFA8A      UXTB     R10,R10
    167            
    168            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD10E             BNE.N    ??u8g_DrawXBMP_0
    169              return;
   \   0000002A   0xE011             B.N      ??u8g_DrawXBMP_1
    170            while( h > 0 )
    171            {
    172              u8g_DrawHXBMP(u8g, x, y, w, bitmap);
   \                     ??u8g_DrawXBMP_2: (+1)
   \   0000002C   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   00000030   0x4623             MOV      R3,R4
   \   00000032   0x463A             MOV      R2,R7
   \   00000034   0xB2D2             UXTB     R2,R2
   \   00000036   0x4631             MOV      R1,R6
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       u8g_DrawHXBMP
    173              bitmap += b;
   \   0000003E   0xEB09 0x09DA      ADD      R9,R9,R10, LSR #+3
    174              y++;
   \   00000042   0x1C7F             ADDS     R7,R7,#+1
    175              h--;
   \   00000044   0xF1A8 0x0801      SUB      R8,R8,#+1
    176            }
   \                     ??u8g_DrawXBMP_0: (+1)
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD1ED             BNE.N    ??u8g_DrawXBMP_2
    177          }
   \                     ??u8g_DrawXBMP_1: (+1)
   \   00000050   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_DrawBitmap
        32   -> u8g_DrawHBitmap
        32   -> u8g_IsBBXIntersection
      32   u8g_DrawBitmapP
        32   -> u8g_DrawHBitmapP
        32   -> u8g_IsBBXIntersection
      32   u8g_DrawHBitmap
        32   -> u8g_Draw8Pixel
      32   u8g_DrawHBitmapP
        32   -> u8g_Draw8Pixel
      32   u8g_DrawHXBM
        32   -> u8g_Draw8Pixel
        32   -> u8g_DrawPixel
      32   u8g_DrawHXBMP
        32   -> u8g_Draw8Pixel
        32   -> u8g_DrawPixel
      40   u8g_DrawXBM
        40   -> u8g_DrawHXBM
        40   -> u8g_IsBBXIntersection
      40   u8g_DrawXBMP
        40   -> u8g_DrawHXBMP
        40   -> u8g_IsBBXIntersection


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      80  u8g_DrawBitmap
      80  u8g_DrawBitmapP
      54  u8g_DrawHBitmap
      54  u8g_DrawHBitmapP
     104  u8g_DrawHXBM
     104  u8g_DrawHXBMP
      84  u8g_DrawXBM
      84  u8g_DrawXBMP

 
 644 bytes in section .text
 
 644 bytes of CODE memory

Errors: none
Warnings: none
