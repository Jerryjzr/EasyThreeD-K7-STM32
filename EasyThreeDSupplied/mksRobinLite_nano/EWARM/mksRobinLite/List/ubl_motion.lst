###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:15
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_motion.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EWADD6.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_motion.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\ubl_motion.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\ubl_motion.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_motion.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          #include "MarlinConfig.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")
     23          
     24          //#if ENABLED(AUTO_BED_LEVELING_UBL)
     25          #if 1
     26            #include "Marlin.h"

   \                                 In section .text, align 2
   \   __interwork __softfp bool isinf(float)
   \                     _Z5isinff: (+1)
   \        0x0   0x0042             LSLS     R2,R0,#+1
   \        0x2   0x4611             MOV      R1,R2
   \        0x4   0x1609             ASRS     R1,R1,#+24
   \        0x6   0x1C49             ADDS     R1,R1,#+1
   \        0x8   0xD001             BEQ.N    ??isinf_0
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0xE000             B.N      ??isinf_1
   \                     ??isinf_0: (+1)
   \        0xE   0x0212             LSLS     R2,R2,#+8
   \                     ??isinf_1: (+1)
   \       0x10   0x2A00             CMP      R2,#+0
   \       0x12   0xD10E             BNE.N    ??isinf_2
   \       0x14   0x0041             LSLS     R1,R0,#+1
   \       0x16   0x1609             ASRS     R1,R1,#+24
   \       0x18   0x1C49             ADDS     R1,R1,#+1
   \       0x1A   0xD001             BEQ.N    ??isinf_3
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xE003             B.N      ??isinf_4
   \                     ??isinf_3: (+1)
   \       0x20   0x0240             LSLS     R0,R0,#+9
   \       0x22   0x1E40             SUBS     R0,R0,#+1
   \       0x24   0x4180             SBCS     R0,R0,R0
   \       0x26   0x0FC0             LSRS     R0,R0,#+31
   \                     ??isinf_4: (+1)
   \       0x28   0x1E40             SUBS     R0,R0,#+1
   \       0x2A   0x4180             SBCS     R0,R0,R0
   \       0x2C   0x43C0             MVNS     R0,R0
   \       0x2E   0x0FC0             LSRS     R0,R0,#+31
   \       0x30   0x4770             BX       LR
   \                     ??isinf_2: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool isnan(float)
   \                     _Z5isnanf: (+1)
   \        0x0   0x0040             LSLS     R0,R0,#+1
   \        0x2   0x4601             MOV      R1,R0
   \        0x4   0x1609             ASRS     R1,R1,#+24
   \        0x6   0x1C49             ADDS     R1,R1,#+1
   \        0x8   0xD001             BEQ.N    ??isnan_0
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE000             B.N      ??isnan_1
   \                     ??isnan_0: (+1)
   \        0xE   0x0200             LSLS     R0,R0,#+8
   \                     ??isnan_1: (+1)
   \       0x10   0x1E40             SUBS     R0,R0,#+1
   \       0x12   0x4180             SBCS     R0,R0,R0
   \       0x14   0x43C0             MVNS     R0,R0
   \       0x16   0x0FC0             LSRS     R0,R0,#+31
   \       0x18   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(uint8_t)
   \                     _ZN12MarlinSerial5writeEh: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x.... 0x....      BL       BSP_UartIfQueueTxData
   \        0xA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(char const *)
   \                     _ZN12MarlinSerial5writeEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xB2D2             UXTB     R2,R2
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x18   0x.... 0x....      B.W      BSP_UartIfQueueTxData

   \                                 In section .text, align 4
   \   __interwork __softfp void MarlinSerial::print(char const *)
   \                     _ZN12MarlinSerial5printEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD013             BEQ.N    ??print_1
   \       0x10   0x480A             LDR.N    R0,??print_0
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD105             BNE.N    ??print_2
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x20   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??print_2: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x.... 0x....      BL       strlen
   \       0x2A   0x4602             MOV      R2,R0
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0x2002             MOVS     R0,#+2
   \       0x30   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x34   0x.... 0x....      B.W      package_to_wifi
   \                     ??print_1: (+1)
   \       0x38   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \       0x3A   0xBF00             Nop      
   \                     ??print_0:
   \       0x3C   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \        0x0   0x4601             MOV      R1,R0
   \        0x2   0x4805             LDR.N    R0,??serialprintPGM_0
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD102             BNE.N    ??serialprintPGM_1
   \        0xA   0x4804             LDR.N    R0,??serialprintPGM_0+0x4
   \        0xC   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??serialprintPGM_1: (+1)
   \       0x10   0x4803             LDR.N    R0,??serialprintPGM_0+0x8
   \       0x12   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc
   \       0x16   0xBF00             Nop      
   \                     ??serialprintPGM_0:
   \       0x18   0x....'....        DC32     from_wifi_flag
   \       0x1C   0x....'....        DC32     customizedSerial
   \       0x20   0x....'....        DC32     serial2

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     27            #include "ubl.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void Planner::buffer_line(float, float, float, float const &, float const &, uint8_t)
   \                     _ZN7Planner11buffer_lineEfffRKfS1_h: (+1)
   \        0x0   0xB517             PUSH     {R0-R2,R4,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
   \        0x4   0x461C             MOV      R4,R3
   \        0x6   0x480D             LDR.N    R0,??buffer_line_0
   \        0x8   0x7801             LDRB     R1,[R0, #+0]
   \        0xA   0xF011 0x0F2E      TST      R1,#0x2E
   \        0xE   0xD008             BEQ.N    ??buffer_line_1
   \       0x10   0xF9B0 0x0018      LDRSH    R0,[R0, #+24]
   \       0x14   0x2801             CMP      R0,#+1
   \       0x16   0xD104             BNE.N    ??buffer_line_1
   \       0x18   0xAA05             ADD      R2,SP,#+20
   \       0x1A   0xA904             ADD      R1,SP,#+16
   \       0x1C   0xA803             ADD      R0,SP,#+12
   \       0x1E   0x.... 0x....      BL       _ZN7Planner14apply_levelingERfS0_S0_
   \                     ??buffer_line_1: (+1)
   \       0x22   0x9809             LDR      R0,[SP, #+36]
   \       0x24   0x9908             LDR      R1,[SP, #+32]
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0x6808             LDR      R0,[R1, #+0]
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0x4623             MOV      R3,R4
   \       0x2E   0xAA05             ADD      R2,SP,#+20
   \       0x30   0xA904             ADD      R1,SP,#+16
   \       0x32   0xA803             ADD      R0,SP,#+12
   \       0x34   0x.... 0x....      BL       _ZN7Planner12_buffer_lineERKfS1_S1_S1_fh
   \       0x38   0xB006             ADD      SP,SP,#+24
   \       0x3A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??buffer_line_0:
   \       0x3C   0x....'....        DC32     mksCfg+0x40

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_x(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_xERKf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4689             MOV      R9,R1

          const int8_t cx = (x - (UBL_MESH_MIN_X)) * (1.0 / (MESH_X_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",180  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \        0x6   0x4E21             LDR.N    R6,??get_cell_index_x_0
   \        0x8   0xF106 0x0460      ADD      R4,R6,#+96
   \        0xC   0xF9B4 0x0054      LDRSH    R0,[R4, #+84]
   \       0x10   0x.... 0x....      BL       __aeabi_i2f
   \       0x14   0x4607             MOV      R7,R0
   \       0x16   0x68B0             LDR      R0,[R6, #+8]
   \       0x18   0x4639             MOV      R1,R7
   \       0x1A   0x.... 0x....      BL       __aeabi_fadd
   \       0x1E   0x4680             MOV      R8,R0
   \       0x20   0x7824             LDRB     R4,[R4, #+0]
   \       0x22   0x4625             MOV      R5,R4
   \       0x24   0x1E6D             SUBS     R5,R5,#+1
   \       0x26   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x2A   0x4641             MOV      R1,R8
   \       0x2C   0x.... 0x....      BL       __aeabi_fsub
   \       0x30   0x.... 0x....      BL       __aeabi_f2d
   \       0x34   0x4682             MOV      R10,R0
   \       0x36   0x468B             MOV      R11,R1
   \       0x38   0x6970             LDR      R0,[R6, #+20]
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0x.... 0x....      BL       __aeabi_fsub
   \       0x40   0x4641             MOV      R1,R8
   \       0x42   0x.... 0x....      BL       __aeabi_fsub
   \       0x46   0x4606             MOV      R6,R0
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x.... 0x....      BL       __aeabi_i2f
   \       0x4E   0x4601             MOV      R1,R0
   \       0x50   0x4630             MOV      R0,R6
   \       0x52   0x.... 0x....      BL       __aeabi_fdiv
   \       0x56   0x.... 0x....      BL       __aeabi_f2d
   \       0x5A   0x4602             MOV      R2,R0
   \       0x5C   0x460B             MOV      R3,R1
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x490B             LDR.N    R1,??get_cell_index_x_0+0x4  ;; 0x3ff00000
   \       0x62   0x.... 0x....      BL       __aeabi_ddiv
   \       0x66   0x4652             MOV      R2,R10
   \       0x68   0x465B             MOV      R3,R11
   \       0x6A   0x.... 0x....      BL       __aeabi_dmul
   \       0x6E   0x.... 0x....      BL       __aeabi_d2iz
   \       0x72   0x4601             MOV      R1,R0
   \       0x74   0xB249             SXTB     R1,R1
   \       0x76   0x2900             CMP      R1,#+0
   \       0x78   0xD501             BPL.N    ??get_cell_index_x_1
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xE002             B.N      ??get_cell_index_x_2
   \                     ??get_cell_index_x_1: (+1)
   \       0x7E   0x428D             CMP      R5,R1
   \       0x80   0xDA00             BGE.N    ??get_cell_index_x_2
   \       0x82   0x1E60             SUBS     R0,R4,#+1
   \                     ??get_cell_index_x_2: (+1)
   \       0x84   0xB240             SXTB     R0,R0
   \       0x86   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \       0x8A   0xBF00             Nop      
   \                     ??get_cell_index_x_0:
   \       0x8C   0x....'....        DC32     mksCfg
   \       0x90   0x3FF0'0000        DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_y(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_yERKf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4689             MOV      R9,R1

          const int8_t cy = (y - (UBL_MESH_MIN_Y)) * (1.0 / (MESH_Y_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",187  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \        0x6   0x4E20             LDR.N    R6,??get_cell_index_y_0
   \        0x8   0xF896 0x4061      LDRB     R4,[R6, #+97]
   \        0xC   0x4625             MOV      R5,R4
   \        0xE   0x1E6D             SUBS     R5,R5,#+1
   \       0x10   0xF9B6 0x00B4      LDRSH    R0,[R6, #+180]
   \       0x14   0x.... 0x....      BL       __aeabi_i2f
   \       0x18   0x4607             MOV      R7,R0
   \       0x1A   0x68F0             LDR      R0,[R6, #+12]
   \       0x1C   0x4639             MOV      R1,R7
   \       0x1E   0x.... 0x....      BL       __aeabi_fadd
   \       0x22   0x4680             MOV      R8,R0
   \       0x24   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x28   0x4641             MOV      R1,R8
   \       0x2A   0x.... 0x....      BL       __aeabi_fsub
   \       0x2E   0x.... 0x....      BL       __aeabi_f2d
   \       0x32   0x4682             MOV      R10,R0
   \       0x34   0x468B             MOV      R11,R1
   \       0x36   0x69B0             LDR      R0,[R6, #+24]
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0x.... 0x....      BL       __aeabi_fsub
   \       0x3E   0x4641             MOV      R1,R8
   \       0x40   0x.... 0x....      BL       __aeabi_fsub
   \       0x44   0x4606             MOV      R6,R0
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x.... 0x....      BL       __aeabi_i2f
   \       0x4C   0x4601             MOV      R1,R0
   \       0x4E   0x4630             MOV      R0,R6
   \       0x50   0x.... 0x....      BL       __aeabi_fdiv
   \       0x54   0x.... 0x....      BL       __aeabi_f2d
   \       0x58   0x4602             MOV      R2,R0
   \       0x5A   0x460B             MOV      R3,R1
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x490B             LDR.N    R1,??get_cell_index_y_0+0x4  ;; 0x3ff00000
   \       0x60   0x.... 0x....      BL       __aeabi_ddiv
   \       0x64   0x4652             MOV      R2,R10
   \       0x66   0x465B             MOV      R3,R11
   \       0x68   0x.... 0x....      BL       __aeabi_dmul
   \       0x6C   0x.... 0x....      BL       __aeabi_d2iz
   \       0x70   0x4601             MOV      R1,R0
   \       0x72   0xB249             SXTB     R1,R1
   \       0x74   0x2900             CMP      R1,#+0
   \       0x76   0xD501             BPL.N    ??get_cell_index_y_1
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xE002             B.N      ??get_cell_index_y_2
   \                     ??get_cell_index_y_1: (+1)
   \       0x7C   0x428D             CMP      R5,R1
   \       0x7E   0xDA00             BGE.N    ??get_cell_index_y_2
   \       0x80   0x1E60             SUBS     R0,R4,#+1
   \                     ??get_cell_index_y_2: (+1)
   \       0x82   0xB240             SXTB     R0,R0
   \       0x84   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??get_cell_index_y_0:
   \       0x88   0x....'....        DC32     mksCfg
   \       0x8C   0x3FF0'0000        DC32     0x3ff00000

          const int8_t px = (x - (UBL_MESH_MIN_X) + (MESH_X_DIST) * 0.5) * (1.0 / (MESH_X_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer

          const int8_t py = (y - (UBL_MESH_MIN_Y) + (MESH_Y_DIST) * 0.5) * (1.0 / (MESH_Y_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",200  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
   \                     _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x468A             MOV      R10,R1
   \        0x6   0x4693             MOV      R11,R2
   \        0x8   0x461C             MOV      R4,R3
   \        0xA   0xF1BB 0x0F00      CMP      R11,#+0
   \        0xE   0xD40E             BMI.N    ??z_correction_for_x_on_horizontal_mesh_line_1
   \       0x10   0x4F44             LDR.N    R7,??z_correction_for_x_on_horizontal_mesh_line_0
   \       0x12   0xF107 0x0060      ADD      R0,R7,#+96
   \       0x16   0xF890 0x8000      LDRB     R8,[R0, #+0]
   \       0x1A   0xF1A8 0x0801      SUB      R8,R8,#+1
   \       0x1E   0x45D8             CMP      R8,R11
   \       0x20   0xDB05             BLT.N    ??z_correction_for_x_on_horizontal_mesh_line_1
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD403             BMI.N    ??z_correction_for_x_on_horizontal_mesh_line_1
   \       0x26   0x7841             LDRB     R1,[R0, #+1]
   \       0x28   0x1E49             SUBS     R1,R1,#+1
   \       0x2A   0x42A1             CMP      R1,R4
   \       0x2C   0xDA2A             BGE.N    ??z_correction_for_x_on_horizontal_mesh_line_2
   \                     ??z_correction_for_x_on_horizontal_mesh_line_1: (+1)
   \       0x2E   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \       0x32   0x483D             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x4
   \       0x34   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \       0x38   0x4659             MOV      R1,R11
   \       0x3A   0x483C             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x8
   \       0x3C   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0x40   0x4621             MOV      R1,R4
   \       0x42   0x483B             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0xC
   \       0x44   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0x48   0x4C3A             LDR.N    R4,??z_correction_for_x_on_horizontal_mesh_line_0+0x10
   \       0x4A   0x7820             LDRB     R0,[R4, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD104             BNE.N    ??z_correction_for_x_on_horizontal_mesh_line_3
   \       0x50   0x2129             MOVS     R1,#+41
   \       0x52   0x4839             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x14
   \       0x54   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x58   0xE004             B.N      ??z_correction_for_x_on_horizontal_mesh_line_4
   \                     ??z_correction_for_x_on_horizontal_mesh_line_3: (+1)
   \       0x5A   0x2200             MOVS     R2,#+0
   \       0x5C   0x2129             MOVS     R1,#+41
   \       0x5E   0x4837             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x18
   \       0x60   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??z_correction_for_x_on_horizontal_mesh_line_4: (+1)
   \       0x64   0x7820             LDRB     R0,[R4, #+0]
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD104             BNE.N    ??z_correction_for_x_on_horizontal_mesh_line_5
   \       0x6A   0x210A             MOVS     R1,#+10
   \       0x6C   0x4832             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x14
   \       0x6E   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x72   0xE004             B.N      ??z_correction_for_x_on_horizontal_mesh_line_6
   \                     ??z_correction_for_x_on_horizontal_mesh_line_5: (+1)
   \       0x74   0x2200             MOVS     R2,#+0
   \       0x76   0x210A             MOVS     R1,#+10
   \       0x78   0x4830             LDR.N    R0,??z_correction_for_x_on_horizontal_mesh_line_0+0x18
   \       0x7A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??z_correction_for_x_on_horizontal_mesh_line_6: (+1)
   \       0x7E   0xF06F 0x4000      MVN      R0,#-2147483648
   \       0x82   0xE04C             B.N      ??z_correction_for_x_on_horizontal_mesh_line_7
   \                     ??z_correction_for_x_on_horizontal_mesh_line_2: (+1)
   \       0x84   0x492E             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_0+0x1C
   \       0x86   0xEB11 0x158B      ADDS     R5,R1,R11, LSL #+6
   \       0x8A   0xF855 0x6024      LDR      R6,[R5, R4, LSL #+2]
   \       0x8E   0xF9B0 0x0054      LDRSH    R0,[R0, #+84]
   \       0x92   0x.... 0x....      BL       __aeabi_i2f
   \       0x96   0x4681             MOV      R9,R0
   \       0x98   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x9C   0x4929             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_0+0x20
   \       0x9E   0x6809             LDR      R1,[R1, #+0]
   \       0xA0   0x.... 0x....      BL       __aeabi_fsub
   \       0xA4   0x4928             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_0+0x24
   \       0xA6   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \       0xAA   0x.... 0x....      BL       __aeabi_fsub
   \       0xAE   0x.... 0x....      BL       __aeabi_f2d
   \       0xB2   0x4682             MOV      R10,R0
   \       0xB4   0x468B             MOV      R11,R1
   \       0xB6   0x6978             LDR      R0,[R7, #+20]
   \       0xB8   0x4649             MOV      R1,R9
   \       0xBA   0x.... 0x....      BL       __aeabi_fsub
   \       0xBE   0x9000             STR      R0,[SP, #+0]
   \       0xC0   0x68B9             LDR      R1,[R7, #+8]
   \       0xC2   0x4648             MOV      R0,R9
   \       0xC4   0x.... 0x....      BL       __aeabi_fadd
   \       0xC8   0x4601             MOV      R1,R0
   \       0xCA   0x9800             LDR      R0,[SP, #+0]
   \       0xCC   0x.... 0x....      BL       __aeabi_fsub
   \       0xD0   0x4607             MOV      R7,R0
   \       0xD2   0x4640             MOV      R0,R8
   \       0xD4   0x.... 0x....      BL       __aeabi_i2f
   \       0xD8   0x4601             MOV      R1,R0
   \       0xDA   0x4638             MOV      R0,R7
   \       0xDC   0x.... 0x....      BL       __aeabi_fdiv
   \       0xE0   0x.... 0x....      BL       __aeabi_f2d
   \       0xE4   0x4602             MOV      R2,R0
   \       0xE6   0x460B             MOV      R3,R1
   \       0xE8   0x2000             MOVS     R0,#+0
   \       0xEA   0x4918             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_0+0x28  ;; 0x3ff00000
   \       0xEC   0x.... 0x....      BL       __aeabi_ddiv
   \       0xF0   0x4652             MOV      R2,R10
   \       0xF2   0x465B             MOV      R3,R11
   \       0xF4   0x.... 0x....      BL       __aeabi_dmul
   \       0xF8   0x.... 0x....      BL       __aeabi_d2f
   \       0xFC   0x4607             MOV      R7,R0
   \       0xFE   0xEB05 0x0084      ADD      R0,R5,R4, LSL #+2
   \      0x102   0x6C00             LDR      R0,[R0, #+64]
   \      0x104   0x4631             MOV      R1,R6
   \      0x106   0x.... 0x....      BL       __aeabi_fsub
   \      0x10A   0x4601             MOV      R1,R0
   \      0x10C   0x4638             MOV      R0,R7
   \      0x10E   0x.... 0x....      BL       __aeabi_fmul
   \      0x112   0x4601             MOV      R1,R0
   \      0x114   0x4630             MOV      R0,R6
   \      0x116   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \      0x11A   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??z_correction_for_x_on_horizontal_mesh_line_7: (+1)
   \      0x11E   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \      0x122   0xBF00             Nop      
   \                     ??z_correction_for_x_on_horizontal_mesh_line_0:
   \      0x124   0x....'....        DC32     mksCfg
   \      0x128   0x....'....        DC32     _ZZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfiiEs
   \      0x12C   0x....'....        DC32     _ZZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfiiEs_0
   \      0x130   0x....'....        DC32     _ZZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfiiEs_1
   \      0x134   0x....'....        DC32     from_wifi_flag
   \      0x138   0x....'....        DC32     customizedSerial
   \      0x13C   0x....'....        DC32     serial2
   \      0x140   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE
   \      0x144   0x....'....        DC32     workspace_offset
   \      0x148   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE
   \      0x14C   0x3FF0'0000        DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
   \                     _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x468A             MOV      R10,R1
   \        0x6   0x4615             MOV      R5,R2
   \        0x8   0x461C             MOV      R4,R3
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD40E             BMI.N    ??z_correction_for_y_on_vertical_mesh_line_1
   \        0xE   0x4F44             LDR.N    R7,??z_correction_for_y_on_vertical_mesh_line_0
   \       0x10   0xF107 0x0060      ADD      R0,R7,#+96
   \       0x14   0x7801             LDRB     R1,[R0, #+0]
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \       0x18   0x42A9             CMP      R1,R5
   \       0x1A   0xDB07             BLT.N    ??z_correction_for_y_on_vertical_mesh_line_1
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD405             BMI.N    ??z_correction_for_y_on_vertical_mesh_line_1
   \       0x20   0xF890 0x8001      LDRB     R8,[R0, #+1]
   \       0x24   0xF1A8 0x0801      SUB      R8,R8,#+1
   \       0x28   0x45A0             CMP      R8,R4
   \       0x2A   0xDA2A             BGE.N    ??z_correction_for_y_on_vertical_mesh_line_2
   \                     ??z_correction_for_y_on_vertical_mesh_line_1: (+1)
   \       0x2C   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \       0x30   0x483C             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x4
   \       0x32   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \       0x36   0x4629             MOV      R1,R5
   \       0x38   0x483B             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x8
   \       0x3A   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0x3E   0x4621             MOV      R1,R4
   \       0x40   0x483A             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0xC
   \       0x42   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0x46   0x4C3A             LDR.N    R4,??z_correction_for_y_on_vertical_mesh_line_0+0x10
   \       0x48   0x7820             LDRB     R0,[R4, #+0]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD104             BNE.N    ??z_correction_for_y_on_vertical_mesh_line_3
   \       0x4E   0x2129             MOVS     R1,#+41
   \       0x50   0x4838             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x14
   \       0x52   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x56   0xE004             B.N      ??z_correction_for_y_on_vertical_mesh_line_4
   \                     ??z_correction_for_y_on_vertical_mesh_line_3: (+1)
   \       0x58   0x2200             MOVS     R2,#+0
   \       0x5A   0x2129             MOVS     R1,#+41
   \       0x5C   0x4836             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x18
   \       0x5E   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??z_correction_for_y_on_vertical_mesh_line_4: (+1)
   \       0x62   0x7820             LDRB     R0,[R4, #+0]
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD104             BNE.N    ??z_correction_for_y_on_vertical_mesh_line_5
   \       0x68   0x210A             MOVS     R1,#+10
   \       0x6A   0x4832             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x14
   \       0x6C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x70   0xE004             B.N      ??z_correction_for_y_on_vertical_mesh_line_6
   \                     ??z_correction_for_y_on_vertical_mesh_line_5: (+1)
   \       0x72   0x2200             MOVS     R2,#+0
   \       0x74   0x210A             MOVS     R1,#+10
   \       0x76   0x4830             LDR.N    R0,??z_correction_for_y_on_vertical_mesh_line_0+0x18
   \       0x78   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??z_correction_for_y_on_vertical_mesh_line_6: (+1)
   \       0x7C   0xF06F 0x4000      MVN      R0,#-2147483648
   \       0x80   0xE04C             B.N      ??z_correction_for_y_on_vertical_mesh_line_7
   \                     ??z_correction_for_y_on_vertical_mesh_line_2: (+1)
   \       0x82   0x492E             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_0+0x1C
   \       0x84   0xEB01 0x1585      ADD      R5,R1,R5, LSL #+6
   \       0x88   0xF855 0x6024      LDR      R6,[R5, R4, LSL #+2]
   \       0x8C   0xF9B0 0x0054      LDRSH    R0,[R0, #+84]
   \       0x90   0x.... 0x....      BL       __aeabi_i2f
   \       0x94   0x4681             MOV      R9,R0
   \       0x96   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x9A   0x4929             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_0+0x20
   \       0x9C   0x6849             LDR      R1,[R1, #+4]
   \       0x9E   0x.... 0x....      BL       __aeabi_fsub
   \       0xA2   0x4928             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_0+0x24
   \       0xA4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \       0xA8   0x.... 0x....      BL       __aeabi_fsub
   \       0xAC   0x.... 0x....      BL       __aeabi_f2d
   \       0xB0   0x4682             MOV      R10,R0
   \       0xB2   0x468B             MOV      R11,R1
   \       0xB4   0x69B8             LDR      R0,[R7, #+24]
   \       0xB6   0x4649             MOV      R1,R9
   \       0xB8   0x.... 0x....      BL       __aeabi_fsub
   \       0xBC   0x9000             STR      R0,[SP, #+0]
   \       0xBE   0x68F9             LDR      R1,[R7, #+12]
   \       0xC0   0x4648             MOV      R0,R9
   \       0xC2   0x.... 0x....      BL       __aeabi_fadd
   \       0xC6   0x4601             MOV      R1,R0
   \       0xC8   0x9800             LDR      R0,[SP, #+0]
   \       0xCA   0x.... 0x....      BL       __aeabi_fsub
   \       0xCE   0x4607             MOV      R7,R0
   \       0xD0   0x4640             MOV      R0,R8
   \       0xD2   0x.... 0x....      BL       __aeabi_i2f
   \       0xD6   0x4601             MOV      R1,R0
   \       0xD8   0x4638             MOV      R0,R7
   \       0xDA   0x.... 0x....      BL       __aeabi_fdiv
   \       0xDE   0x.... 0x....      BL       __aeabi_f2d
   \       0xE2   0x4602             MOV      R2,R0
   \       0xE4   0x460B             MOV      R3,R1
   \       0xE6   0x2000             MOVS     R0,#+0
   \       0xE8   0x4917             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_0+0x28  ;; 0x3ff00000
   \       0xEA   0x.... 0x....      BL       __aeabi_ddiv
   \       0xEE   0x4652             MOV      R2,R10
   \       0xF0   0x465B             MOV      R3,R11
   \       0xF2   0x.... 0x....      BL       __aeabi_dmul
   \       0xF6   0x.... 0x....      BL       __aeabi_d2f
   \       0xFA   0x4607             MOV      R7,R0
   \       0xFC   0xEB05 0x0084      ADD      R0,R5,R4, LSL #+2
   \      0x100   0x6840             LDR      R0,[R0, #+4]
   \      0x102   0x4631             MOV      R1,R6
   \      0x104   0x.... 0x....      BL       __aeabi_fsub
   \      0x108   0x4601             MOV      R1,R0
   \      0x10A   0x4638             MOV      R0,R7
   \      0x10C   0x.... 0x....      BL       __aeabi_fmul
   \      0x110   0x4601             MOV      R1,R0
   \      0x112   0x4630             MOV      R0,R6
   \      0x114   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \      0x118   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??z_correction_for_y_on_vertical_mesh_line_7: (+1)
   \      0x11C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??z_correction_for_y_on_vertical_mesh_line_0:
   \      0x120   0x....'....        DC32     mksCfg
   \      0x124   0x....'....        DC32     _ZZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfiiEs
   \      0x128   0x....'....        DC32     _ZZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfiiEs_0
   \      0x12C   0x....'....        DC32     _ZZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfiiEs_1
   \      0x130   0x....'....        DC32     from_wifi_flag
   \      0x134   0x....'....        DC32     customizedSerial
   \      0x138   0x....'....        DC32     serial2
   \      0x13C   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE
   \      0x140   0x....'....        DC32     workspace_offset
   \      0x144   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE
   \      0x148   0x3FF0'0000        DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::fade_scaling_factor_for_z(float const &)
   \                     _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x460A             MOV      R2,R1
   \        0x4   0x4816             LDR.N    R0,??fade_scaling_factor_for_z_0
   \        0x6   0x6804             LDR      R4,[R0, #+0]
   \        0x8   0x4620             MOV      R0,R4
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0x10   0xD102             BNE.N    ??fade_scaling_factor_for_z_1
   \       0x12   0xF04F 0x507E      MOV      R0,#+1065353216
   \       0x16   0xBD70             POP      {R4-R6,PC}
   \                     ??fade_scaling_factor_for_z_1: (+1)
   \       0x18   0x6810             LDR      R0,[R2, #+0]
   \       0x1A   0x4912             LDR.N    R1,??fade_scaling_factor_for_z_0+0x4
   \       0x1C   0x6889             LDR      R1,[R1, #+8]
   \       0x1E   0x.... 0x....      BL       __aeabi_fsub
   \       0x22   0x4605             MOV      R5,R0
   \       0x24   0x4E10             LDR.N    R6,??fade_scaling_factor_for_z_0+0x8
   \       0x26   0x4A11             LDR.N    R2,??fade_scaling_factor_for_z_0+0xC
   \       0x28   0x6810             LDR      R0,[R2, #+0]
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0x30   0xD013             BEQ.N    ??fade_scaling_factor_for_z_2
   \       0x32   0x6015             STR      R5,[R2, #+0]
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x4621             MOV      R1,R4
   \       0x38   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x3C   0xD20B             BCS.N    ??fade_scaling_factor_for_z_3
   \       0x3E   0x480C             LDR.N    R0,??fade_scaling_factor_for_z_0+0x10
   \       0x40   0x6800             LDR      R0,[R0, #+0]
   \       0x42   0x4629             MOV      R1,R5
   \       0x44   0x.... 0x....      BL       __aeabi_fmul
   \       0x48   0x4601             MOV      R1,R0
   \       0x4A   0xF04F 0x507E      MOV      R0,#+1065353216
   \       0x4E   0x.... 0x....      BL       __aeabi_fsub
   \       0x52   0x6030             STR      R0,[R6, #+0]
   \       0x54   0xE001             B.N      ??fade_scaling_factor_for_z_2
   \                     ??fade_scaling_factor_for_z_3: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x6030             STR      R0,[R6, #+0]
   \                     ??fade_scaling_factor_for_z_2: (+1)
   \       0x5A   0x6830             LDR      R0,[R6, #+0]
   \       0x5C   0xBD70             POP      {R4-R6,PC}       ;; return
   \       0x5E   0xBF00             Nop      
   \                     ??fade_scaling_factor_for_z_0:
   \       0x60   0x....'....        DC32     _ZN7Planner13z_fade_heightE
   \       0x64   0x....'....        DC32     workspace_offset
   \       0x68   0x....'....        DC32     _ZZN20unified_bed_leveling25fade_scaling_factor_for_zERKfE19fade_scaling_factor
   \       0x6C   0x....'....        DC32     _ZN20unified_bed_leveling16last_specified_zE
   \       0x70   0x....'....        DC32     _ZN7Planner21inverse_z_fade_heightE

   \                                 In section .data, align 4
   \   __absolute float fade_scaling_factor
   \                     _ZZN20unified_bed_leveling25fade_scaling_factor_for_zERKfE19fade_scaling_factor:
   \        0x0   0x3F80'0000        DC32 3F800000H
     28            #include "planner.h"
     29          //  #include <avr/io.h>
     30            #include <math.h>
     31          
     32            extern float destination[XYZE];
     33            extern void set_current_to_destination();
     34          

   \                                 In section .text, align 2, keep-with-next
     35            static void debug_echo_axis(const AxisEnum axis) {
   \                     _ZN36_INTERNAL_14_ubl_motion_cpp_3594c21515debug_echo_axisE8AxisEnum: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x4601             MOV      R1,R0
     36              if (current_position[axis] == destination[axis])
   \        0x4   0x.... 0x....      LDR.W    R2,??DataTable18
   \        0x8   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \        0xC   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \       0x10   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \       0x14   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0x18   0xD105             BNE.N    ??debug_echo_axis_0
     37          {  SERIAL_ECHOPGM("-------------");}
   \       0x1A   0x.... 0x....      ADR.W    R0,?_0
   \       0x1E   0xE8BD 0x4002      POP      {R1,LR}
   \       0x22   0x.... 0x....      B.W      _Z14serialprintPGMPKc
     38              else
     39          {  SERIAL_ECHO_F(destination[X_AXIS], 6);}
   \                     ??debug_echo_axis_0: (+1)
   \       0x26   0x6810             LDR      R0,[R2, #+0]
   \       0x28   0x.... 0x....      BL       __aeabi_f2d
   \       0x2C   0x.... 0x....      LDR.W    R2,??DataTable18_2
   \       0x30   0x7812             LDRB     R2,[R2, #+0]
   \       0x32   0x2A00             CMP      R2,#+0
   \       0x34   0xD108             BNE.N    ??debug_echo_axis_1
   \       0x36   0x2206             MOVS     R2,#+6
   \       0x38   0x9200             STR      R2,[SP, #+0]
   \       0x3A   0x4602             MOV      R2,R0
   \       0x3C   0x460B             MOV      R3,R1
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \       0x42   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0x46   0xBD01             POP      {R0,PC}
   \                     ??debug_echo_axis_1: (+1)
   \       0x48   0x2206             MOVS     R2,#+6
   \       0x4A   0x9200             STR      R2,[SP, #+0]
   \       0x4C   0x4602             MOV      R2,R0
   \       0x4E   0x460B             MOV      R3,R1
   \       0x50   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \       0x54   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     40            }
   \       0x58   0xBD01             POP      {R0,PC}          ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42            void debug_current_and_destination(const char *title) {
   \                     _Z29debug_current_and_destinationPKc: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4681             MOV      R9,R0
     43          
     44              // if the title message starts with a '!' it is so important, we are going to
     45              // ignore the status of the g26_debug_flag
     46              if (*title != '!' && !ubl.g26_debug_flag) return;
   \        0x6   0xF999 0x0000      LDRSB    R0,[R9, #+0]
   \        0xA   0x2821             CMP      R0,#+33
   \        0xC   0xD005             BEQ.N    ??debug_current_and_destination_0
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xF000 0x80FC      BEQ.W    ??debug_current_and_destination_1
     47          
     48              const float de = destination[E_AXIS] - current_position[E_AXIS];
   \                     ??debug_current_and_destination_0: (+1)
   \       0x1A   0x.... 0x....      LDR.W    R4,??DataTable18_1
   \       0x1E   0x.... 0x....      LDR.W    R5,??DataTable18
   \       0x22   0x68E8             LDR      R0,[R5, #+12]
   \       0x24   0x68E1             LDR      R1,[R4, #+12]
   \       0x26   0x.... 0x....      BL       __aeabi_fsub
   \       0x2A   0x4607             MOV      R7,R0
     49          
     50              if (de == 0.0) return;
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0x32   0xF000 0x80EE      BEQ.W    ??debug_current_and_destination_1
     51          
     52              const float dx = current_position[X_AXIS] - destination[X_AXIS],
     53                          dy = current_position[Y_AXIS] - destination[Y_AXIS],
   \       0x36   0x6860             LDR      R0,[R4, #+4]
   \       0x38   0x6869             LDR      R1,[R5, #+4]
   \       0x3A   0x.... 0x....      BL       __aeabi_fsub
   \       0x3E   0x4682             MOV      R10,R0
     54                          xy_dist = HYPOT(dx, dy);
   \       0x40   0x6820             LDR      R0,[R4, #+0]
   \       0x42   0x6829             LDR      R1,[R5, #+0]
   \       0x44   0x.... 0x....      BL       __aeabi_fsub
   \       0x48   0x4683             MOV      R11,R0
   \       0x4A   0x2602             MOVS     R6,#+2
   \       0x4C   0xF04F 0x587E      MOV      R8,#+1065353216
   \       0x50   0x4645             MOV      R5,R8
   \       0x52   0xE004             B.N      ??debug_current_and_destination_2
   \                     ??debug_current_and_destination_3: (+1)
   \       0x54   0x4658             MOV      R0,R11
   \       0x56   0x4659             MOV      R1,R11
   \       0x58   0x.... 0x....      BL       __aeabi_fmul
   \       0x5C   0x4683             MOV      R11,R0
   \                     ??debug_current_and_destination_2: (+1)
   \       0x5E   0x07F0             LSLS     R0,R6,#+31
   \       0x60   0xD504             BPL.N    ??debug_current_and_destination_4
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x4659             MOV      R1,R11
   \       0x66   0x.... 0x....      BL       __aeabi_fmul
   \       0x6A   0x4605             MOV      R5,R0
   \                     ??debug_current_and_destination_4: (+1)
   \       0x6C   0x0876             LSRS     R6,R6,#+1
   \       0x6E   0xD1F1             BNE.N    ??debug_current_and_destination_3
   \       0x70   0x2602             MOVS     R6,#+2
   \       0x72   0xE004             B.N      ??debug_current_and_destination_5
   \                     ??debug_current_and_destination_6: (+1)
   \       0x74   0x4650             MOV      R0,R10
   \       0x76   0x4651             MOV      R1,R10
   \       0x78   0x.... 0x....      BL       __aeabi_fmul
   \       0x7C   0x4682             MOV      R10,R0
   \                     ??debug_current_and_destination_5: (+1)
   \       0x7E   0x07F0             LSLS     R0,R6,#+31
   \       0x80   0xD504             BPL.N    ??debug_current_and_destination_7
   \       0x82   0x4640             MOV      R0,R8
   \       0x84   0x4651             MOV      R1,R10
   \       0x86   0x.... 0x....      BL       __aeabi_fmul
   \       0x8A   0x4680             MOV      R8,R0
   \                     ??debug_current_and_destination_7: (+1)
   \       0x8C   0x0876             LSRS     R6,R6,#+1
   \       0x8E   0xD1F1             BNE.N    ??debug_current_and_destination_6
   \       0x90   0x4628             MOV      R0,R5
   \       0x92   0x4641             MOV      R1,R8
   \       0x94   0x.... 0x....      BL       __aeabi_fadd
   \       0x98   0x.... 0x....      BL       sqrtf
   \       0x9C   0x4605             MOV      R5,R0
     55          
     56              if (xy_dist == 0.0) {
   \       0x9E   0x2100             MOVS     R1,#+0
   \       0xA0   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0xA4   0xF000 0x80B5      BEQ.W    ??debug_current_and_destination_1
     57                return;
     58                //SERIAL_ECHOPGM("   FPMM=");
     59                //const float fpmm = de / xy_dist;
     60                //SERIAL_PROTOCOL_F(fpmm, 6);
     61              }
     62              else {
     63                SERIAL_ECHOPGM("   fpmm=");
   \       0xA8   0x.... 0x....      ADR.W    R0,?_1
   \       0xAC   0x.... 0x....      BL       _Z14serialprintPGMPKc
     64                const float fpmm = de / xy_dist;
   \       0xB0   0x4638             MOV      R0,R7
   \       0xB2   0x4629             MOV      R1,R5
   \       0xB4   0x.... 0x....      BL       __aeabi_fdiv
     65                SERIAL_ECHO_F(fpmm, 6);
   \       0xB8   0x.... 0x....      BL       __aeabi_f2d
   \       0xBC   0x4602             MOV      R2,R0
   \       0xBE   0x460B             MOV      R3,R1
   \       0xC0   0x.... 0x....      LDR.W    R5,??DataTable18_4
   \       0xC4   0x.... 0x....      LDR.W    R6,??DataTable18_3
   \       0xC8   0x.... 0x....      LDR.W    R7,??DataTable18_2
   \       0xCC   0x7838             LDRB     R0,[R7, #+0]
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD105             BNE.N    ??debug_current_and_destination_8
   \       0xD2   0x2006             MOVS     R0,#+6
   \       0xD4   0x9000             STR      R0,[SP, #+0]
   \       0xD6   0x4630             MOV      R0,R6
   \       0xD8   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0xDC   0xE004             B.N      ??debug_current_and_destination_9
   \                     ??debug_current_and_destination_8: (+1)
   \       0xDE   0x2006             MOVS     R0,#+6
   \       0xE0   0x9000             STR      R0,[SP, #+0]
   \       0xE2   0x4628             MOV      R0,R5
   \       0xE4   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     66              }
     67          
     68              SERIAL_ECHOPGM("    current=( ");
   \                     ??debug_current_and_destination_9: (+1)
   \       0xE8   0x.... 0x....      ADR.W    R0,?_2
   \       0xEC   0x.... 0x....      BL       _Z14serialprintPGMPKc
     69              SERIAL_ECHO_F(current_position[X_AXIS], 6);
   \       0xF0   0x6820             LDR      R0,[R4, #+0]
   \       0xF2   0x.... 0x....      BL       __aeabi_f2d
   \       0xF6   0x4602             MOV      R2,R0
   \       0xF8   0x460B             MOV      R3,R1
   \       0xFA   0x7838             LDRB     R0,[R7, #+0]
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD105             BNE.N    ??debug_current_and_destination_10
   \      0x100   0x2006             MOVS     R0,#+6
   \      0x102   0x9000             STR      R0,[SP, #+0]
   \      0x104   0x4630             MOV      R0,R6
   \      0x106   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x10A   0xE004             B.N      ??debug_current_and_destination_11
   \                     ??debug_current_and_destination_10: (+1)
   \      0x10C   0x2006             MOVS     R0,#+6
   \      0x10E   0x9000             STR      R0,[SP, #+0]
   \      0x110   0x4628             MOV      R0,R5
   \      0x112   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     70              SERIAL_ECHOPGM(", ");
   \                     ??debug_current_and_destination_11: (+1)
   \      0x116   0x.... 0x....      ADR.W    R8,??DataTable17  ;; 0x2C, 0x20, 0x00, 0x00
   \      0x11A   0x4640             MOV      R0,R8
   \      0x11C   0x.... 0x....      BL       _Z14serialprintPGMPKc
     71              SERIAL_ECHO_F(current_position[Y_AXIS], 6);
   \      0x120   0x6860             LDR      R0,[R4, #+4]
   \      0x122   0x.... 0x....      BL       __aeabi_f2d
   \      0x126   0x4602             MOV      R2,R0
   \      0x128   0x460B             MOV      R3,R1
   \      0x12A   0x7838             LDRB     R0,[R7, #+0]
   \      0x12C   0x2800             CMP      R0,#+0
   \      0x12E   0xD105             BNE.N    ??debug_current_and_destination_12
   \      0x130   0x2006             MOVS     R0,#+6
   \      0x132   0x9000             STR      R0,[SP, #+0]
   \      0x134   0x4630             MOV      R0,R6
   \      0x136   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x13A   0xE004             B.N      ??debug_current_and_destination_13
   \                     ??debug_current_and_destination_12: (+1)
   \      0x13C   0x2006             MOVS     R0,#+6
   \      0x13E   0x9000             STR      R0,[SP, #+0]
   \      0x140   0x4628             MOV      R0,R5
   \      0x142   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     72              SERIAL_ECHOPGM(", ");
   \                     ??debug_current_and_destination_13: (+1)
   \      0x146   0x4640             MOV      R0,R8
   \      0x148   0x.... 0x....      BL       _Z14serialprintPGMPKc
     73              SERIAL_ECHO_F(current_position[Z_AXIS], 6);
   \      0x14C   0x68A0             LDR      R0,[R4, #+8]
   \      0x14E   0x.... 0x....      BL       __aeabi_f2d
   \      0x152   0x4602             MOV      R2,R0
   \      0x154   0x460B             MOV      R3,R1
   \      0x156   0x7838             LDRB     R0,[R7, #+0]
   \      0x158   0x2800             CMP      R0,#+0
   \      0x15A   0xD105             BNE.N    ??debug_current_and_destination_14
   \      0x15C   0x2006             MOVS     R0,#+6
   \      0x15E   0x9000             STR      R0,[SP, #+0]
   \      0x160   0x4630             MOV      R0,R6
   \      0x162   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x166   0xE004             B.N      ??debug_current_and_destination_15
   \                     ??debug_current_and_destination_14: (+1)
   \      0x168   0x2006             MOVS     R0,#+6
   \      0x16A   0x9000             STR      R0,[SP, #+0]
   \      0x16C   0x4628             MOV      R0,R5
   \      0x16E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     74              SERIAL_ECHOPGM(", ");
   \                     ??debug_current_and_destination_15: (+1)
   \      0x172   0x4640             MOV      R0,R8
   \      0x174   0x.... 0x....      BL       _Z14serialprintPGMPKc
     75              SERIAL_ECHO_F(current_position[E_AXIS], 6);
   \      0x178   0x68E0             LDR      R0,[R4, #+12]
   \      0x17A   0x.... 0x....      BL       __aeabi_f2d
   \      0x17E   0x783A             LDRB     R2,[R7, #+0]
   \      0x180   0x2A00             CMP      R2,#+0
   \      0x182   0xD107             BNE.N    ??debug_current_and_destination_16
   \      0x184   0x2206             MOVS     R2,#+6
   \      0x186   0x9200             STR      R2,[SP, #+0]
   \      0x188   0x4602             MOV      R2,R0
   \      0x18A   0x460B             MOV      R3,R1
   \      0x18C   0x4630             MOV      R0,R6
   \      0x18E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x192   0xE006             B.N      ??debug_current_and_destination_17
   \                     ??debug_current_and_destination_16: (+1)
   \      0x194   0x2206             MOVS     R2,#+6
   \      0x196   0x9200             STR      R2,[SP, #+0]
   \      0x198   0x4602             MOV      R2,R0
   \      0x19A   0x460B             MOV      R3,R1
   \      0x19C   0x4628             MOV      R0,R5
   \      0x19E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     76              SERIAL_ECHOPGM(" )   destination=( ");
   \                     ??debug_current_and_destination_17: (+1)
   \      0x1A2   0x.... 0x....      ADR.W    R0,?_4
   \      0x1A6   0x.... 0x....      BL       _Z14serialprintPGMPKc
     77              debug_echo_axis(X_AXIS);
   \      0x1AA   0x2000             MOVS     R0,#+0
   \      0x1AC   0x.... 0x....      BL       _ZN36_INTERNAL_14_ubl_motion_cpp_3594c21515debug_echo_axisE8AxisEnum
     78              SERIAL_ECHOPGM(", ");
   \      0x1B0   0x4640             MOV      R0,R8
   \      0x1B2   0x.... 0x....      BL       _Z14serialprintPGMPKc
     79              debug_echo_axis(Y_AXIS);
   \      0x1B6   0x2001             MOVS     R0,#+1
   \      0x1B8   0x.... 0x....      BL       _ZN36_INTERNAL_14_ubl_motion_cpp_3594c21515debug_echo_axisE8AxisEnum
     80              SERIAL_ECHOPGM(", ");
   \      0x1BC   0x4640             MOV      R0,R8
   \      0x1BE   0x.... 0x....      BL       _Z14serialprintPGMPKc
     81              debug_echo_axis(Z_AXIS);
   \      0x1C2   0x2002             MOVS     R0,#+2
   \      0x1C4   0x.... 0x....      BL       _ZN36_INTERNAL_14_ubl_motion_cpp_3594c21515debug_echo_axisE8AxisEnum
     82              SERIAL_ECHOPGM(", ");
   \      0x1C8   0x4640             MOV      R0,R8
   \      0x1CA   0x.... 0x....      BL       _Z14serialprintPGMPKc
     83              debug_echo_axis(E_AXIS);
   \      0x1CE   0x2003             MOVS     R0,#+3
   \      0x1D0   0x.... 0x....      BL       _ZN36_INTERNAL_14_ubl_motion_cpp_3594c21515debug_echo_axisE8AxisEnum
     84              SERIAL_ECHOPGM(" )   ");
   \      0x1D4   0x.... 0x....      ADR.W    R0,?_5
   \      0x1D8   0x.... 0x....      BL       _Z14serialprintPGMPKc
     85              SERIAL_ECHO(title);
   \      0x1DC   0x7838             LDRB     R0,[R7, #+0]
   \      0x1DE   0x2800             CMP      R0,#+0
   \      0x1E0   0x4649             MOV      R1,R9
   \      0x1E2   0xD103             BNE.N    ??debug_current_and_destination_18
   \      0x1E4   0x4630             MOV      R0,R6
   \      0x1E6   0x.... 0x....      BL       _ZN12MarlinSerial5printEPKc
   \      0x1EA   0xE002             B.N      ??debug_current_and_destination_19
   \                     ??debug_current_and_destination_18: (+1)
   \      0x1EC   0x4628             MOV      R0,R5
   \      0x1EE   0x.... 0x....      BL       _ZN12MarlinSerial5printEPKc
     86              SERIAL_EOL;
   \                     ??debug_current_and_destination_19: (+1)
   \      0x1F2   0x7838             LDRB     R0,[R7, #+0]
   \      0x1F4   0x2800             CMP      R0,#+0
   \      0x1F6   0xD105             BNE.N    ??debug_current_and_destination_20
   \      0x1F8   0x210A             MOVS     R1,#+10
   \      0x1FA   0x4630             MOV      R0,R6
   \      0x1FC   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \      0x200   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEh
   \                     ??debug_current_and_destination_20: (+1)
   \      0x204   0x2200             MOVS     R2,#+0
   \      0x206   0x210A             MOVS     R1,#+10
   \      0x208   0x4628             MOV      R0,R5
   \      0x20A   0xE8BD 0x4FF8      POP      {R3-R11,LR}
   \      0x20E   0x.... 0x....      B.W      _ZN12MarlinSerial5printEci
     87          
     88            }
   \                     ??debug_current_and_destination_1: (+1)
   \      0x212   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
     89          

   \                                 In section .text, align 4, keep-with-next
     90            void ubl_line_to_destination(const float &feed_rate, uint8_t extruder) {
   \                     _Z23ubl_line_to_destinationRKfh: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB09E             SUB      SP,SP,#+120
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460E             MOV      R6,R1
     91          
     92              /**
     93               * Much of the nozzle movement will be within the same cell. So we will do as little computation
     94               * as possible to determine if this is the case. If this move is within the same cell, we will
     95               * just do the required Z-Height correction, call the Planner's buffer_line() routine, and leave
     96               */
     97              const float start[XYZE] = {
     98                            current_position[X_AXIS],
     99                            current_position[Y_AXIS],
    100                            current_position[Z_AXIS],
    101                            current_position[E_AXIS]
    102                          },
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \        0xE   0x6800             LDR      R0,[R0, #+0]
   \       0x10   0x9004             STR      R0,[SP, #+16]
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x16   0x6840             LDR      R0,[R0, #+4]
   \       0x18   0x9005             STR      R0,[SP, #+20]
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x1E   0x6880             LDR      R0,[R0, #+8]
   \       0x20   0x900B             STR      R0,[SP, #+44]
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x26   0x68C0             LDR      R0,[R0, #+12]
   \       0x28   0x900A             STR      R0,[SP, #+40]
    103                          end[XYZE] = {
    104                            destination[X_AXIS],
    105                            destination[Y_AXIS],
    106                            destination[Z_AXIS],
    107                            destination[E_AXIS]
    108                          };
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable18
   \       0x2E   0x6801             LDR      R1,[R0, #+0]
   \       0x30   0x9111             STR      R1,[SP, #+68]
   \       0x32   0x6847             LDR      R7,[R0, #+4]
   \       0x34   0x9712             STR      R7,[SP, #+72]
   \       0x36   0x6881             LDR      R1,[R0, #+8]
   \       0x38   0x9113             STR      R1,[SP, #+76]
   \       0x3A   0x68C0             LDR      R0,[R0, #+12]
   \       0x3C   0x9014             STR      R0,[SP, #+80]
    109          
    110              const int cell_start_xi = ubl.get_cell_index_x(RAW_X_POSITION(start[X_AXIS])),
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \       0x42   0x9010             STR      R0,[SP, #+64]
   \       0x44   0xF8D0 0x9000      LDR      R9,[R0, #+0]
   \       0x48   0x9804             LDR      R0,[SP, #+16]
   \       0x4A   0x4649             MOV      R1,R9
   \       0x4C   0x.... 0x....      BL       __aeabi_fsub
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \       0x56   0x9006             STR      R0,[SP, #+24]
   \       0x58   0x4669             MOV      R1,SP
   \       0x5A   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \       0x5E   0x9015             STR      R0,[SP, #+84]
    111                        cell_start_yi = ubl.get_cell_index_y(RAW_Y_POSITION(start[Y_AXIS])),
   \       0x60   0x9810             LDR      R0,[SP, #+64]
   \       0x62   0xF8D0 0x8004      LDR      R8,[R0, #+4]
   \       0x66   0x9805             LDR      R0,[SP, #+20]
   \       0x68   0x4641             MOV      R1,R8
   \       0x6A   0x.... 0x....      BL       __aeabi_fsub
   \       0x6E   0x9000             STR      R0,[SP, #+0]
   \       0x70   0x4669             MOV      R1,SP
   \       0x72   0x9806             LDR      R0,[SP, #+24]
   \       0x74   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \       0x78   0x4605             MOV      R5,R0
    112                        cell_dest_xi  = ubl.get_cell_index_x(RAW_X_POSITION(end[X_AXIS])),
   \       0x7A   0x9811             LDR      R0,[SP, #+68]
   \       0x7C   0x4649             MOV      R1,R9
   \       0x7E   0x.... 0x....      BL       __aeabi_fsub
   \       0x82   0x9000             STR      R0,[SP, #+0]
   \       0x84   0x4669             MOV      R1,SP
   \       0x86   0x9806             LDR      R0,[SP, #+24]
   \       0x88   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \       0x8C   0x900F             STR      R0,[SP, #+60]
    113                        cell_dest_yi  = ubl.get_cell_index_y(RAW_Y_POSITION(end[Y_AXIS]));
   \       0x8E   0x4638             MOV      R0,R7
   \       0x90   0x4641             MOV      R1,R8
   \       0x92   0x.... 0x....      BL       __aeabi_fsub
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0x4669             MOV      R1,SP
   \       0x9A   0x9806             LDR      R0,[SP, #+24]
   \       0x9C   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \       0xA0   0x900E             STR      R0,[SP, #+56]
    114          
    115              if (ubl.g26_debug_flag) {
   \       0xA2   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \       0xA6   0x7800             LDRB     R0,[R0, #+0]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD038             BEQ.N    ??ubl_line_to_destination_0
    116                SERIAL_ECHOPAIR(" ubl_line_to_destination(xe=", end[X_AXIS]);
   \       0xAC   0x9911             LDR      R1,[SP, #+68]
   \       0xAE   0x.... 0x....      ADR.W    R0,?_6
   \       0xB2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    117                SERIAL_ECHOPAIR(", ye=", end[Y_AXIS]);
   \       0xB6   0xAF11             ADD      R7,SP,#+68
   \       0xB8   0x6879             LDR      R1,[R7, #+4]
   \       0xBA   0x.... 0x....      ADR.W    R0,?_7
   \       0xBE   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    118                SERIAL_ECHOPAIR(", ze=", end[Z_AXIS]);
   \       0xC2   0x68B9             LDR      R1,[R7, #+8]
   \       0xC4   0x.... 0x....      ADR.W    R0,?_8
   \       0xC8   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    119                SERIAL_ECHOPAIR(", ee=", end[E_AXIS]);
   \       0xCC   0x68F9             LDR      R1,[R7, #+12]
   \       0xCE   0x.... 0x....      ADR.W    R0,?_9
   \       0xD2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    120                SERIAL_CHAR(')');
   \       0xD6   0x.... 0x....      LDR.W    R7,??DataTable18_2
   \       0xDA   0x7838             LDRB     R0,[R7, #+0]
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD105             BNE.N    ??ubl_line_to_destination_1
   \       0xE0   0x2129             MOVS     R1,#+41
   \       0xE2   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \       0xE6   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0xEA   0xE005             B.N      ??ubl_line_to_destination_2
   \                     ??ubl_line_to_destination_1: (+1)
   \       0xEC   0x2200             MOVS     R2,#+0
   \       0xEE   0x2129             MOVS     R1,#+41
   \       0xF0   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \       0xF4   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    121                SERIAL_EOL;
   \                     ??ubl_line_to_destination_2: (+1)
   \       0xF8   0x7838             LDRB     R0,[R7, #+0]
   \       0xFA   0x2800             CMP      R0,#+0
   \       0xFC   0xD105             BNE.N    ??ubl_line_to_destination_3
   \       0xFE   0x210A             MOVS     R1,#+10
   \      0x100   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \      0x104   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x108   0xE005             B.N      ??ubl_line_to_destination_4
   \                     ??ubl_line_to_destination_3: (+1)
   \      0x10A   0x2200             MOVS     R2,#+0
   \      0x10C   0x210A             MOVS     R1,#+10
   \      0x10E   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \      0x112   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    122                debug_current_and_destination(PSTR("Start of ubl_line_to_destination()"));
   \                     ??ubl_line_to_destination_4: (+1)
   \      0x116   0x.... 0x....      ADR.W    R0,?_10
   \      0x11A   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \                     ??ubl_line_to_destination_0: (+1)
   \      0x11E   0x9408             STR      R4,[SP, #+32]
   \      0x120   0xF88D 0x6008      STRB     R6,[SP, #+8]
    123              }
    124          
    125              if (cell_start_xi == cell_dest_xi && cell_start_yi == cell_dest_yi) { // if the whole move is within the same cell,
   \      0x124   0x9815             LDR      R0,[SP, #+84]
   \      0x126   0x990F             LDR      R1,[SP, #+60]
   \      0x128   0x4288             CMP      R0,R1
   \      0x12A   0xF040 0x8109      BNE.W    ??ubl_line_to_destination_5
   \      0x12E   0x980E             LDR      R0,[SP, #+56]
   \      0x130   0x4285             CMP      R5,R0
   \      0x132   0xF040 0x8105      BNE.W    ??ubl_line_to_destination_5
    126                /**
    127                 * we don't need to break up the move
    128                 *
    129                 * If we are moving off the print bed, we are going to allow the move at this level.
    130                 * But we detect it and isolate it. For now, we just pass along the request.
    131                 */
    132          
    133                if (!WITHIN(cell_dest_xi, 0, GRID_MAX_POINTS_X - 1) || !WITHIN(cell_dest_yi, 0, GRID_MAX_POINTS_Y - 1)) {
   \      0x136   0x980F             LDR      R0,[SP, #+60]
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xD40D             BMI.N    ??ubl_line_to_destination_6
   \      0x13C   0x.... 0x....      LDR.W    R0,??DataTable18_8
   \      0x140   0x7801             LDRB     R1,[R0, #+0]
   \      0x142   0x1E49             SUBS     R1,R1,#+1
   \      0x144   0x9A0F             LDR      R2,[SP, #+60]
   \      0x146   0x4291             CMP      R1,R2
   \      0x148   0xDB06             BLT.N    ??ubl_line_to_destination_6
   \      0x14A   0x990E             LDR      R1,[SP, #+56]
   \      0x14C   0x2900             CMP      R1,#+0
   \      0x14E   0xD403             BMI.N    ??ubl_line_to_destination_6
   \      0x150   0x7840             LDRB     R0,[R0, #+1]
   \      0x152   0x1E40             SUBS     R0,R0,#+1
   \      0x154   0x4288             CMP      R0,R1
   \      0x156   0xDA1F             BGE.N    ??ubl_line_to_destination_7
    134          
    135                  // Note: There is no Z Correction in this case. We are off the grid and don't know what
    136                  // a reasonable correction would be.
    137          
    138                  planner.buffer_line(end[X_AXIS], end[Y_AXIS], end[Z_AXIS] + ubl.state.z_offset, end[E_AXIS], feed_rate, extruder);
   \                     ??ubl_line_to_destination_6: (+1)
   \      0x158   0xAC11             ADD      R4,SP,#+68
   \      0x15A   0x4630             MOV      R0,R6
   \      0x15C   0x9001             STR      R0,[SP, #+4]
   \      0x15E   0x9808             LDR      R0,[SP, #+32]
   \      0x160   0x9000             STR      R0,[SP, #+0]
   \      0x162   0xAB14             ADD      R3,SP,#+80
   \      0x164   0x461D             MOV      R5,R3
   \      0x166   0x68A1             LDR      R1,[R4, #+8]
   \      0x168   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \      0x16C   0x6840             LDR      R0,[R0, #+4]
   \      0x16E   0x.... 0x....      BL       __aeabi_fadd
   \      0x172   0x4602             MOV      R2,R0
   \      0x174   0x462B             MOV      R3,R5
   \      0x176   0x6861             LDR      R1,[R4, #+4]
   \      0x178   0x9811             LDR      R0,[SP, #+68]
   \      0x17A   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
    139                  set_current_to_destination();
   \      0x17E   0x.... 0x....      BL       _Z26set_current_to_destinationv
    140          
    141                  if (ubl.g26_debug_flag)
   \      0x182   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \      0x186   0x7800             LDRB     R0,[R0, #+0]
   \      0x188   0x2800             CMP      R0,#+0
   \      0x18A   0xF000 0x8383      BEQ.W    ??ubl_line_to_destination_8
    142                    debug_current_and_destination(PSTR("out of bounds in ubl_line_to_destination()"));
   \      0x18E   0x.... 0x....      ADR.W    R0,?_11
   \      0x192   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
    143          
    144                  return;
   \      0x196   0xE37D             B.N      ??ubl_line_to_destination_8
    145                }
    146          
    147                FINAL_MOVE:
    148          
    149                /**
    150                 * Optimize some floating point operations here. We could call float get_z_correction(float x0, float y0) to
    151                 * generate the correction for us. But we can lighten the load on the CPU by doing a modified version of the function.
    152                 * We are going to only calculate the amount we are from the first mesh line towards the second mesh line once.
    153                 * We will use this fraction in both of the original two Z Height calculations for the bi-linear interpolation. And,
    154                 * instead of doing a generic divide of the distance, we know the distance is MESH_X_DIST so we can use the preprocessor
    155                 * to create a 1-over number for us. That will allow us to do a floating point multiply instead of a floating point divide.
    156                 */
    157          
    158                const float xratio = (RAW_X_POSITION(end[X_AXIS]) - ubl.mesh_index_to_xpos[cell_dest_xi]) * (1.0 / (MESH_X_DIST)),
   \                     ??ubl_line_to_destination_7: (+1)
   \      0x198   0x.... 0x....      LDR.W    R4,??DataTable18_10
   \      0x19C   0xF104 0x0960      ADD      R9,R4,#+96
   \      0x1A0   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x1A4   0x.... 0x....      BL       __aeabi_i2f
   \      0x1A8   0x4605             MOV      R5,R0
   \      0x1AA   0x.... 0x....      LDR.W    R6,??DataTable18_6
   \      0x1AE   0x9811             LDR      R0,[SP, #+68]
   \      0x1B0   0x6831             LDR      R1,[R6, #+0]
   \      0x1B2   0x.... 0x....      BL       __aeabi_fsub
   \      0x1B6   0x.... 0x....      LDR.W    R1,??DataTable18_11
   \      0x1BA   0x9A0F             LDR      R2,[SP, #+60]
   \      0x1BC   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \      0x1C0   0x.... 0x....      BL       __aeabi_fsub
   \      0x1C4   0x.... 0x....      BL       __aeabi_f2d
   \      0x1C8   0x4682             MOV      R10,R0
   \      0x1CA   0x468B             MOV      R11,R1
   \      0x1CC   0x6960             LDR      R0,[R4, #+20]
   \      0x1CE   0x4629             MOV      R1,R5
   \      0x1D0   0x.... 0x....      BL       __aeabi_fsub
   \      0x1D4   0x4607             MOV      R7,R0
   \      0x1D6   0x68A0             LDR      R0,[R4, #+8]
   \      0x1D8   0x4629             MOV      R1,R5
   \      0x1DA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1DE   0x4601             MOV      R1,R0
   \      0x1E0   0x4638             MOV      R0,R7
   \      0x1E2   0x.... 0x....      BL       __aeabi_fsub
   \      0x1E6   0x4607             MOV      R7,R0
   \      0x1E8   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x1EC   0x1E40             SUBS     R0,R0,#+1
   \      0x1EE   0x.... 0x....      BL       __aeabi_i2f
   \      0x1F2   0x4601             MOV      R1,R0
   \      0x1F4   0x4638             MOV      R0,R7
   \      0x1F6   0x.... 0x....      BL       __aeabi_fdiv
   \      0x1FA   0x.... 0x....      BL       __aeabi_f2d
   \      0x1FE   0x4602             MOV      R2,R0
   \      0x200   0x460B             MOV      R3,R1
   \      0x202   0x2000             MOVS     R0,#+0
   \      0x204   0x.... 0x....      LDR.W    R1,??DataTable18_12  ;; 0x3ff00000
   \      0x208   0x.... 0x....      BL       __aeabi_ddiv
   \      0x20C   0x4652             MOV      R2,R10
   \      0x20E   0x465B             MOV      R3,R11
   \      0x210   0x.... 0x....      BL       __aeabi_dmul
   \      0x214   0x.... 0x....      BL       __aeabi_d2f
   \      0x218   0x4683             MOV      R11,R0
    159                            z1 = ubl.z_values[cell_dest_xi    ][cell_dest_yi    ] + xratio *
    160                                (ubl.z_values[cell_dest_xi + 1][cell_dest_yi    ] - ubl.z_values[cell_dest_xi][cell_dest_yi    ]),
   \      0x21A   0x.... 0x....      LDR.W    R0,??DataTable18_13
   \      0x21E   0x990F             LDR      R1,[SP, #+60]
   \      0x220   0xEB00 0x1081      ADD      R0,R0,R1, LSL #+6
   \      0x224   0x990E             LDR      R1,[SP, #+56]
   \      0x226   0xEB00 0x0781      ADD      R7,R0,R1, LSL #+2
   \      0x22A   0xF8D7 0x8000      LDR      R8,[R7, #+0]
   \      0x22E   0x6C38             LDR      R0,[R7, #+64]
   \      0x230   0x4641             MOV      R1,R8
   \      0x232   0x.... 0x....      BL       __aeabi_fsub
   \      0x236   0x4659             MOV      R1,R11
   \      0x238   0x.... 0x....      BL       __aeabi_fmul
   \      0x23C   0x4641             MOV      R1,R8
   \      0x23E   0x.... 0x....      BL       __aeabi_fadd
   \      0x242   0x4682             MOV      R10,R0
    161                            z2 = ubl.z_values[cell_dest_xi    ][cell_dest_yi + 1] + xratio *
    162                                (ubl.z_values[cell_dest_xi + 1][cell_dest_yi + 1] - ubl.z_values[cell_dest_xi][cell_dest_yi + 1]);
    163          
    164                // we are done with the fractional X distance into the cell. Now with the two Z-Heights we have calculated, we
    165                // are going to apply the Y-Distance into the cell to interpolate the final Z correction.
    166          
    167                const float yratio = (RAW_Y_POSITION(end[Y_AXIS]) - ubl.mesh_index_to_ypos[cell_dest_yi]) * (1.0 / (MESH_Y_DIST));
   \      0x244   0xF10D 0x0844      ADD      R8,SP,#+68
   \      0x248   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \      0x24C   0x6871             LDR      R1,[R6, #+4]
   \      0x24E   0x.... 0x....      BL       __aeabi_fsub
   \      0x252   0x.... 0x....      LDR.W    R1,??DataTable18_14
   \      0x256   0x9A0E             LDR      R2,[SP, #+56]
   \      0x258   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \      0x25C   0x.... 0x....      BL       __aeabi_fsub
   \      0x260   0x.... 0x....      BL       __aeabi_f2d
   \      0x264   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \      0x268   0x69A0             LDR      R0,[R4, #+24]
   \      0x26A   0x4629             MOV      R1,R5
   \      0x26C   0x.... 0x....      BL       __aeabi_fsub
   \      0x270   0x4606             MOV      R6,R0
   \      0x272   0x68E0             LDR      R0,[R4, #+12]
   \      0x274   0x4629             MOV      R1,R5
   \      0x276   0x.... 0x....      BL       __aeabi_fadd
   \      0x27A   0x4601             MOV      R1,R0
   \      0x27C   0x4630             MOV      R0,R6
   \      0x27E   0x.... 0x....      BL       __aeabi_fsub
   \      0x282   0x4604             MOV      R4,R0
   \      0x284   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \      0x288   0x1E40             SUBS     R0,R0,#+1
   \      0x28A   0x.... 0x....      BL       __aeabi_i2f
   \      0x28E   0x4601             MOV      R1,R0
   \      0x290   0x4620             MOV      R0,R4
   \      0x292   0x.... 0x....      BL       __aeabi_fdiv
   \      0x296   0x.... 0x....      BL       __aeabi_f2d
   \      0x29A   0x4602             MOV      R2,R0
   \      0x29C   0x460B             MOV      R3,R1
   \      0x29E   0x2000             MOVS     R0,#+0
   \      0x2A0   0x.... 0x....      LDR.W    R1,??DataTable18_12  ;; 0x3ff00000
   \      0x2A4   0x.... 0x....      BL       __aeabi_ddiv
   \      0x2A8   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \      0x2AC   0x.... 0x....      BL       __aeabi_dmul
   \      0x2B0   0x.... 0x....      BL       __aeabi_d2f
   \      0x2B4   0x4604             MOV      R4,R0
    168          
    169                float z0 = z1 + (z2 - z1) * yratio;
    170          
    171                z0 *= ubl.fade_scaling_factor_for_z(end[Z_AXIS]);
   \      0x2B6   0xA913             ADD      R1,SP,#+76
   \      0x2B8   0x9806             LDR      R0,[SP, #+24]
   \      0x2BA   0x.... 0x....      BL       _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf
   \      0x2BE   0x4605             MOV      R5,R0
   \      0x2C0   0x687E             LDR      R6,[R7, #+4]
   \      0x2C2   0x6C78             LDR      R0,[R7, #+68]
   \      0x2C4   0x4631             MOV      R1,R6
   \      0x2C6   0x.... 0x....      BL       __aeabi_fsub
   \      0x2CA   0x4659             MOV      R1,R11
   \      0x2CC   0x.... 0x....      BL       __aeabi_fmul
   \      0x2D0   0x4631             MOV      R1,R6
   \      0x2D2   0x.... 0x....      BL       __aeabi_fadd
   \      0x2D6   0x4651             MOV      R1,R10
   \      0x2D8   0x.... 0x....      BL       __aeabi_fsub
   \      0x2DC   0x4621             MOV      R1,R4
   \      0x2DE   0x.... 0x....      BL       __aeabi_fmul
   \      0x2E2   0x4651             MOV      R1,R10
   \      0x2E4   0x.... 0x....      BL       __aeabi_fadd
   \      0x2E8   0x4629             MOV      R1,R5
   \      0x2EA   0x.... 0x....      BL       __aeabi_fmul
   \      0x2EE   0x4604             MOV      R4,R0
    172          
    173                /**
    174                 * If part of the Mesh is undefined, it will show up as NAN
    175                 * in z_values[][] and propagate through the
    176                 * calculations. If our correction is NAN, we throw it out
    177                 * because part of the Mesh is undefined and we don't have the
    178                 * information we need to complete the height correction.
    179                 */
    180                if (isnan(z0)) z0 = 0.0;
   \      0x2F0   0x.... 0x....      BL       _Z5isnanf
   \      0x2F4   0x2800             CMP      R0,#+0
   \      0x2F6   0xD000             BEQ.N    ??ubl_line_to_destination_9
   \      0x2F8   0x2400             MOVS     R4,#+0
    181          
    182                planner.buffer_line(end[X_AXIS], end[Y_AXIS], end[Z_AXIS] + z0 + ubl.state.z_offset, end[E_AXIS], feed_rate, extruder);
   \                     ??ubl_line_to_destination_9: (+1)
   \      0x2FA   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x2FE   0x9001             STR      R0,[SP, #+4]
   \      0x300   0x9808             LDR      R0,[SP, #+32]
   \      0x302   0x9000             STR      R0,[SP, #+0]
   \      0x304   0xAB14             ADD      R3,SP,#+80
   \      0x306   0x461D             MOV      R5,R3
   \      0x308   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \      0x30C   0x4621             MOV      R1,R4
   \      0x30E   0x.... 0x....      BL       __aeabi_fadd
   \      0x312   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \      0x316   0x6849             LDR      R1,[R1, #+4]
   \      0x318   0x.... 0x....      BL       __aeabi_fadd
   \      0x31C   0x4602             MOV      R2,R0
   \      0x31E   0x462B             MOV      R3,R5
   \      0x320   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x324   0x9811             LDR      R0,[SP, #+68]
   \      0x326   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
    183          
    184                if (ubl.g26_debug_flag)
   \      0x32A   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \      0x32E   0x7800             LDRB     R0,[R0, #+0]
   \      0x330   0x2800             CMP      R0,#+0
   \      0x332   0xF000 0x82AD      BEQ.W    ??ubl_line_to_destination_10
    185                  debug_current_and_destination(PSTR("FINAL_MOVE in ubl_line_to_destination()"));
   \      0x336   0x.... 0x....      ADR.W    R0,?_12
   \      0x33A   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \      0x33E   0xE2A7             B.N      ??ubl_line_to_destination_10
    186          
    187                set_current_to_destination();
    188                return;
    189              }
    190          
    191              /**
    192               * If we get here, we are processing a move that crosses at least one Mesh Line. We will check
    193               * for the simple case of just crossing X or just crossing Y Mesh Lines after we get all the details
    194               * of the move figured out. We can process the easy case of just crossing an X or Y Mesh Line with less
    195               * computation and in fact most lines are of this nature. We will check for that in the following
    196               * blocks of code:
    197               */
    198          
    199              const float dx = end[X_AXIS] - start[X_AXIS],
   \                     ??ubl_line_to_destination_5: (+1)
   \      0x340   0x9811             LDR      R0,[SP, #+68]
   \      0x342   0x9904             LDR      R1,[SP, #+16]
   \      0x344   0x.... 0x....      BL       __aeabi_fsub
   \      0x348   0x4682             MOV      R10,R0
    200                          dy = end[Y_AXIS] - start[Y_AXIS];
   \      0x34A   0x9812             LDR      R0,[SP, #+72]
   \      0x34C   0x9905             LDR      R1,[SP, #+20]
   \      0x34E   0x.... 0x....      BL       __aeabi_fsub
   \      0x352   0x4683             MOV      R11,R0
    201          
    202              const int left_flag = dx < 0.0 ? 1 : 0,
   \      0x354   0x4650             MOV      R0,R10
   \      0x356   0x2100             MOVS     R1,#+0
   \      0x358   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x35C   0xD201             BCS.N    ??ubl_line_to_destination_11
   \      0x35E   0x2601             MOVS     R6,#+1
   \      0x360   0xE000             B.N      ??ubl_line_to_destination_12
   \                     ??ubl_line_to_destination_11: (+1)
   \      0x362   0x460E             MOV      R6,R1
    203                        down_flag = dy < 0.0 ? 1 : 0;
   \                     ??ubl_line_to_destination_12: (+1)
   \      0x364   0x4658             MOV      R0,R11
   \      0x366   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x36A   0xD201             BCS.N    ??ubl_line_to_destination_13
   \      0x36C   0x2701             MOVS     R7,#+1
   \      0x36E   0xE000             B.N      ??ubl_line_to_destination_14
   \                     ??ubl_line_to_destination_13: (+1)
   \      0x370   0x460F             MOV      R7,R1
    204          
    205              const float adx = left_flag ? -dx : dx,
   \                     ??ubl_line_to_destination_14: (+1)
   \      0x372   0x2E00             CMP      R6,#+0
   \      0x374   0x4651             MOV      R1,R10
   \      0x376   0xD001             BEQ.N    ??ubl_line_to_destination_15
   \      0x378   0xF081 0x4100      EOR      R1,R1,#0x80000000
    206                          ady = down_flag ? -dy : dy;
   \                     ??ubl_line_to_destination_15: (+1)
   \      0x37C   0x2F00             CMP      R7,#+0
   \      0x37E   0xD001             BEQ.N    ??ubl_line_to_destination_16
   \      0x380   0xF080 0x4000      EOR      R0,R0,#0x80000000
    207          
    208              const int dxi = cell_start_xi == cell_dest_xi ? 0 : left_flag ? -1 : 1,
   \                     ??ubl_line_to_destination_16: (+1)
   \      0x384   0x9A15             LDR      R2,[SP, #+84]
   \      0x386   0x9B0F             LDR      R3,[SP, #+60]
   \      0x388   0x429A             CMP      R2,R3
   \      0x38A   0xD102             BNE.N    ??ubl_line_to_destination_17
   \      0x38C   0xF04F 0x0800      MOV      R8,#+0
   \      0x390   0xE006             B.N      ??ubl_line_to_destination_18
   \                     ??ubl_line_to_destination_17: (+1)
   \      0x392   0x2E00             CMP      R6,#+0
   \      0x394   0xD002             BEQ.N    ??ubl_line_to_destination_19
   \      0x396   0xF04F 0x38FF      MOV      R8,#-1
   \      0x39A   0xE001             B.N      ??ubl_line_to_destination_18
   \                     ??ubl_line_to_destination_19: (+1)
   \      0x39C   0xF04F 0x0801      MOV      R8,#+1
    209                        dyi = cell_start_yi == cell_dest_yi ? 0 : down_flag ? -1 : 1;
   \                     ??ubl_line_to_destination_18: (+1)
   \      0x3A0   0x9A0E             LDR      R2,[SP, #+56]
   \      0x3A2   0x4295             CMP      R5,R2
   \      0x3A4   0xD102             BNE.N    ??ubl_line_to_destination_20
   \      0x3A6   0xF04F 0x0900      MOV      R9,#+0
   \      0x3AA   0xE006             B.N      ??ubl_line_to_destination_21
   \                     ??ubl_line_to_destination_20: (+1)
   \      0x3AC   0x2F00             CMP      R7,#+0
   \      0x3AE   0xD002             BEQ.N    ??ubl_line_to_destination_22
   \      0x3B0   0xF04F 0x39FF      MOV      R9,#-1
   \      0x3B4   0xE001             B.N      ??ubl_line_to_destination_21
   \                     ??ubl_line_to_destination_22: (+1)
   \      0x3B6   0xF04F 0x0901      MOV      R9,#+1
    210          
    211              /**
    212               * Compute the scaling factor for the extruder for each partial move.
    213               * We need to watch out for zero length moves because it will cause us to
    214               * have an infinate scaling factor. We are stuck doing a floating point
    215               * divide to get our scaling factor, but after that, we just multiply by this
    216               * number. We also pick our scaling factor based on whether the X or Y
    217               * component is larger. We use the biggest of the two to preserve precision.
    218               */
    219          
    220              const bool use_x_dist = adx > ady;
   \                     ??ubl_line_to_destination_21: (+1)
   \      0x3BA   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x3BE   0xD202             BCS.N    ??ubl_line_to_destination_23
   \      0x3C0   0x2001             MOVS     R0,#+1
   \      0x3C2   0x9007             STR      R0,[SP, #+28]
   \      0x3C4   0xE001             B.N      ??ubl_line_to_destination_24
   \                     ??ubl_line_to_destination_23: (+1)
   \      0x3C6   0x2000             MOVS     R0,#+0
   \      0x3C8   0x9007             STR      R0,[SP, #+28]
    221          
    222              float on_axis_distance = use_x_dist ? dx : dy,
   \                     ??ubl_line_to_destination_24: (+1)
   \      0x3CA   0x9807             LDR      R0,[SP, #+28]
   \      0x3CC   0x2800             CMP      R0,#+0
   \      0x3CE   0xD002             BEQ.N    ??ubl_line_to_destination_25
   \      0x3D0   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x3D4   0xE001             B.N      ??ubl_line_to_destination_26
   \                     ??ubl_line_to_destination_25: (+1)
   \      0x3D6   0xF8CD 0xB000      STR      R11,[SP, #+0]
    223                    e_position = end[E_AXIS] - start[E_AXIS],
   \                     ??ubl_line_to_destination_26: (+1)
   \      0x3DA   0xAC11             ADD      R4,SP,#+68
   \      0x3DC   0x68E0             LDR      R0,[R4, #+12]
   \      0x3DE   0x990A             LDR      R1,[SP, #+40]
   \      0x3E0   0x.... 0x....      BL       __aeabi_fsub
   \      0x3E4   0x9003             STR      R0,[SP, #+12]
    224                    z_position = end[Z_AXIS] - start[Z_AXIS];
   \      0x3E6   0x68A0             LDR      R0,[R4, #+8]
   \      0x3E8   0x990B             LDR      R1,[SP, #+44]
   \      0x3EA   0x.... 0x....      BL       __aeabi_fsub
   \      0x3EE   0x9001             STR      R0,[SP, #+4]
    225          
    226              const float e_normalized_dist = e_position / on_axis_distance,
   \      0x3F0   0x9803             LDR      R0,[SP, #+12]
   \      0x3F2   0x9900             LDR      R1,[SP, #+0]
   \      0x3F4   0x.... 0x....      BL       __aeabi_fdiv
   \      0x3F8   0x9009             STR      R0,[SP, #+36]
    227                          z_normalized_dist = z_position / on_axis_distance;
   \      0x3FA   0x9801             LDR      R0,[SP, #+4]
   \      0x3FC   0x9900             LDR      R1,[SP, #+0]
   \      0x3FE   0x.... 0x....      BL       __aeabi_fdiv
   \      0x402   0x900D             STR      R0,[SP, #+52]
    228          
    229              int current_xi = cell_start_xi, 
    230                  current_yi = cell_start_yi;
    231          
    232              const float m = dy / dx,
   \      0x404   0x4658             MOV      R0,R11
   \      0x406   0x4651             MOV      R1,R10
   \      0x408   0x.... 0x....      BL       __aeabi_fdiv
   \      0x40C   0x4682             MOV      R10,R0
    233                          c = start[Y_AXIS] - m * start[X_AXIS];
   \      0x40E   0x9804             LDR      R0,[SP, #+16]
   \      0x410   0x4651             MOV      R1,R10
   \      0x412   0x.... 0x....      BL       __aeabi_fmul
   \      0x416   0x4601             MOV      R1,R0
   \      0x418   0x9805             LDR      R0,[SP, #+20]
   \      0x41A   0x.... 0x....      BL       __aeabi_fsub
   \      0x41E   0x4683             MOV      R11,R0
    234          
    235              const bool inf_normalized_flag = isinf(e_normalized_dist),
   \      0x420   0x9809             LDR      R0,[SP, #+36]
   \      0x422   0x.... 0x....      BL       _Z5isinff
   \      0x426   0x900C             STR      R0,[SP, #+48]
    236                         inf_m_flag = isinf(m);
   \      0x428   0x4650             MOV      R0,R10
   \      0x42A   0x.... 0x....      BL       _Z5isinff
   \      0x42E   0x4601             MOV      R1,R0
    237              /**
    238               * This block handles vertical lines. These are lines that stay within the same
    239               * X Cell column. They do not need to be perfectly vertical. They just can
    240               * not cross into another X Cell column.
    241               */
    242              if (dxi == 0) {       // Check for a vertical line
   \      0x430   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x434   0xF040 0x8085      BNE.W    ??ubl_line_to_destination_27
    243                current_yi += down_flag;  // Line is heading down, we just want to go to the bottom
   \      0x438   0x197D             ADDS     R5,R7,R5
   \      0x43A   0x4628             MOV      R0,R5
   \      0x43C   0x9D08             LDR      R5,[SP, #+32]
   \      0x43E   0xF89D 0x6008      LDRB     R6,[SP, #+8]
   \      0x442   0xF8DD 0x8038      LDR      R8,[SP, #+56]
   \      0x446   0x971A             STR      R7,[SP, #+104]
   \      0x448   0xF8CD 0x9060      STR      R9,[SP, #+96]
   \      0x44C   0xF8CD 0xA058      STR      R10,[SP, #+88]
   \      0x450   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x454   0x910E             STR      R1,[SP, #+56]
   \      0x456   0x4607             MOV      R7,R0
   \      0x458   0xE015             B.N      ??ubl_line_to_destination_28
    244                while (current_yi != cell_dest_yi + down_flag) {
    245                  current_yi += dyi;
    246                  const float next_mesh_line_y = LOGICAL_Y_POSITION(ubl.mesh_index_to_ypos[current_yi]);
    247          
    248                  /**
    249                   * if the slope of the line is infinite, we won't do the calculations
    250                   * else, we know the next X is the same so we can recover and continue!
    251                   * Calculate X at the next Y mesh line
    252                   */
    253                  const float x = inf_m_flag ? start[X_AXIS] : (next_mesh_line_y - c) / m;
    254          
    255                  float z0 = ubl.z_correction_for_x_on_horizontal_mesh_line(x, current_xi, current_yi);
    256          
    257                  z0 *= ubl.fade_scaling_factor_for_z(end[Z_AXIS]);
    258          
    259                  /**
    260                   * If part of the Mesh is undefined, it will show up as NAN
    261                   * in z_values[][] and propagate through the
    262                   * calculations. If our correction is NAN, we throw it out
    263                   * because part of the Mesh is undefined and we don't have the
    264                   * information we need to complete the height correction.
    265                   */
    266                  if (isnan(z0)) z0 = 0.0;
    267          
    268                  const float y = LOGICAL_Y_POSITION(ubl.mesh_index_to_ypos[current_yi]);
    269          
    270                  /**
    271                   * Without this check, it is possible for the algorithm to generate a zero length move in the case
    272                   * where the line is heading down and it is starting right on a Mesh Line boundary. For how often that
    273                   * happens, it might be best to remove the check and always 'schedule' the move because
    274                   * the planner.buffer_line() routine will filter it if that happens.
    275                   */
    276                  if (y != start[Y_AXIS]) {
    277                    if (!inf_normalized_flag) {
    278          
    279                      //on_axis_distance = y - start[Y_AXIS];
    280                      on_axis_distance = use_x_dist ? x - start[X_AXIS] : y - start[Y_AXIS];
    281          
    282                      //on_axis_distance = use_x_dist ? next_mesh_line_x - start[X_AXIS] : y - start[Y_AXIS];
    283                      //on_axis_distance = use_x_dist ? x - start[X_AXIS] : next_mesh_line_y - start[Y_AXIS];
    284          
    285                      //on_axis_distance = use_x_dist ? next_mesh_line_x - start[X_AXIS] : y - start[Y_AXIS];
    286                      //on_axis_distance = use_x_dist ? x - start[X_AXIS] : next_mesh_line_y - start[Y_AXIS];
    287          
    288                      e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
    289                      z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
    290                    }
    291                    else {
    292                      e_position = end[E_AXIS];
   \                     ??ubl_line_to_destination_29: (+1)
   \      0x45A   0x68E0             LDR      R0,[R4, #+12]
   \      0x45C   0x9003             STR      R0,[SP, #+12]
    293                      z_position = end[Z_AXIS];
   \      0x45E   0x68A0             LDR      R0,[R4, #+8]
    294                    }
    295          
    296                    planner.buffer_line(x, y, z_position + z0 + ubl.state.z_offset, e_position, feed_rate, extruder);
   \                     ??ubl_line_to_destination_30: (+1)
   \      0x460   0x4631             MOV      R1,R6
   \      0x462   0x9101             STR      R1,[SP, #+4]
   \      0x464   0x9500             STR      R5,[SP, #+0]
   \      0x466   0xAB03             ADD      R3,SP,#+12
   \      0x468   0x469B             MOV      R11,R3
   \      0x46A   0x4649             MOV      R1,R9
   \      0x46C   0x.... 0x....      BL       __aeabi_fadd
   \      0x470   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \      0x474   0x6849             LDR      R1,[R1, #+4]
   \      0x476   0x.... 0x....      BL       __aeabi_fadd
   \      0x47A   0x4602             MOV      R2,R0
   \      0x47C   0x465B             MOV      R3,R11
   \      0x47E   0x4651             MOV      R1,R10
   \      0x480   0x9808             LDR      R0,[SP, #+32]
   \      0x482   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
   \                     ??ubl_line_to_destination_28: (+1)
   \      0x486   0x981A             LDR      R0,[SP, #+104]
   \      0x488   0x4440             ADD      R0,R0,R8
   \      0x48A   0x4287             CMP      R7,R0
   \      0x48C   0xF000 0x81D0      BEQ.W    ??ubl_line_to_destination_31
   \      0x490   0x9818             LDR      R0,[SP, #+96]
   \      0x492   0x19C7             ADDS     R7,R0,R7
   \      0x494   0x980E             LDR      R0,[SP, #+56]
   \      0x496   0x2800             CMP      R0,#+0
   \      0x498   0xD002             BEQ.N    ??ubl_line_to_destination_32
   \      0x49A   0x9804             LDR      R0,[SP, #+16]
   \      0x49C   0x9008             STR      R0,[SP, #+32]
   \      0x49E   0xE00E             B.N      ??ubl_line_to_destination_33
   \                     ??ubl_line_to_destination_32: (+1)
   \      0x4A0   0x.... 0x....      LDR.W    R0,??DataTable18_14
   \      0x4A4   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \      0x4A8   0x9910             LDR      R1,[SP, #+64]
   \      0x4AA   0x6849             LDR      R1,[R1, #+4]
   \      0x4AC   0x.... 0x....      BL       __aeabi_fadd
   \      0x4B0   0x9902             LDR      R1,[SP, #+8]
   \      0x4B2   0x.... 0x....      BL       __aeabi_fsub
   \      0x4B6   0x9916             LDR      R1,[SP, #+88]
   \      0x4B8   0x.... 0x....      BL       __aeabi_fdiv
   \      0x4BC   0x9008             STR      R0,[SP, #+32]
   \                     ??ubl_line_to_destination_33: (+1)
   \      0x4BE   0x463B             MOV      R3,R7
   \      0x4C0   0x9A15             LDR      R2,[SP, #+84]
   \      0x4C2   0xA908             ADD      R1,SP,#+32
   \      0x4C4   0x9806             LDR      R0,[SP, #+24]
   \      0x4C6   0x.... 0x....      BL       _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii
   \      0x4CA   0x4681             MOV      R9,R0
   \      0x4CC   0xA913             ADD      R1,SP,#+76
   \      0x4CE   0x9806             LDR      R0,[SP, #+24]
   \      0x4D0   0x.... 0x....      BL       _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf
   \      0x4D4   0x4649             MOV      R1,R9
   \      0x4D6   0x.... 0x....      BL       __aeabi_fmul
   \      0x4DA   0x4681             MOV      R9,R0
   \      0x4DC   0x.... 0x....      BL       _Z5isnanf
   \      0x4E0   0x2800             CMP      R0,#+0
   \      0x4E2   0xD001             BEQ.N    ??ubl_line_to_destination_34
   \      0x4E4   0xF04F 0x0900      MOV      R9,#+0
   \                     ??ubl_line_to_destination_34: (+1)
   \      0x4E8   0x.... 0x....      LDR.W    R0,??DataTable18_14
   \      0x4EC   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \      0x4F0   0x9910             LDR      R1,[SP, #+64]
   \      0x4F2   0x6849             LDR      R1,[R1, #+4]
   \      0x4F4   0x.... 0x....      BL       __aeabi_fadd
   \      0x4F8   0x4682             MOV      R10,R0
   \      0x4FA   0x9905             LDR      R1,[SP, #+20]
   \      0x4FC   0x.... 0x....      BL       __aeabi_cfcmpeq
   \      0x500   0xD0C1             BEQ.N    ??ubl_line_to_destination_28
   \      0x502   0x980C             LDR      R0,[SP, #+48]
   \      0x504   0x2800             CMP      R0,#+0
   \      0x506   0xD1A8             BNE.N    ??ubl_line_to_destination_29
   \      0x508   0x9807             LDR      R0,[SP, #+28]
   \      0x50A   0x2800             CMP      R0,#+0
   \      0x50C   0xD005             BEQ.N    ??ubl_line_to_destination_35
   \      0x50E   0x9808             LDR      R0,[SP, #+32]
   \      0x510   0x9904             LDR      R1,[SP, #+16]
   \      0x512   0x.... 0x....      BL       __aeabi_fsub
   \      0x516   0x4683             MOV      R11,R0
   \      0x518   0xE003             B.N      ??ubl_line_to_destination_36
   \                     ??ubl_line_to_destination_35: (+1)
   \      0x51A   0x4650             MOV      R0,R10
   \      0x51C   0x.... 0x....      BL       __aeabi_fsub
   \      0x520   0x4683             MOV      R11,R0
   \                     ??ubl_line_to_destination_36: (+1)
   \      0x522   0x9809             LDR      R0,[SP, #+36]
   \      0x524   0x4659             MOV      R1,R11
   \      0x526   0x.... 0x....      BL       __aeabi_fmul
   \      0x52A   0x990A             LDR      R1,[SP, #+40]
   \      0x52C   0x.... 0x....      BL       __aeabi_fadd
   \      0x530   0x9003             STR      R0,[SP, #+12]
   \      0x532   0x980D             LDR      R0,[SP, #+52]
   \      0x534   0x4659             MOV      R1,R11
   \      0x536   0x.... 0x....      BL       __aeabi_fmul
   \      0x53A   0x990B             LDR      R1,[SP, #+44]
   \      0x53C   0x.... 0x....      BL       __aeabi_fadd
   \      0x540   0xE78E             B.N      ??ubl_line_to_destination_30
    297                  } //else printf("FIRST MOVE PRUNED  ");
    298                }
    299          
    300                if (ubl.g26_debug_flag)
    301                  debug_current_and_destination(PSTR("vertical move done in ubl_line_to_destination()"));
    302          
    303                //
    304                // Check if we are at the final destination. Usually, we won't be, but if it is on a Y Mesh Line, we are done.
    305                //
    306                if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
    307                  goto FINAL_MOVE;
    308          
    309                set_current_to_destination();
    310                return;
    311              }
    312          
    313              /**
    314               *
    315               * This block handles horizontal lines. These are lines that stay within the same
    316               * Y Cell row. They do not need to be perfectly horizontal. They just can
    317               * not cross into another Y Cell row.
    318               *
    319               */
    320          
    321              if (dyi == 0) {             // Check for a horizontal line
   \                     ??ubl_line_to_destination_27: (+1)
   \      0x542   0x9B15             LDR      R3,[SP, #+84]
   \      0x544   0x18F3             ADDS     R3,R6,R3
   \      0x546   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x54A   0xD178             BNE.N    ??ubl_line_to_destination_37
    322                current_xi += left_flag;  // Line is heading left, we just want to go to the left
   \      0x54C   0x9F08             LDR      R7,[SP, #+32]
   \      0x54E   0xF89D 0x9008      LDRB     R9,[SP, #+8]
   \      0x552   0x9517             STR      R5,[SP, #+92]
   \      0x554   0x9D0F             LDR      R5,[SP, #+60]
   \      0x556   0x9615             STR      R6,[SP, #+84]
   \      0x558   0xF8CD 0x8064      STR      R8,[SP, #+100]
   \      0x55C   0xF8CD 0xA058      STR      R10,[SP, #+88]
   \      0x560   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x564   0x461E             MOV      R6,R3
   \      0x566   0xE014             B.N      ??ubl_line_to_destination_38
    323                                          // edge of this cell for the first move.
    324                while (current_xi != cell_dest_xi + left_flag) {
    325                  current_xi += dxi;
    326                  const float next_mesh_line_x = LOGICAL_X_POSITION(ubl.mesh_index_to_xpos[current_xi]),
    327                              y = m * next_mesh_line_x + c;   // Calculate Y at the next X mesh line
    328          
    329                  float z0 = ubl.z_correction_for_y_on_vertical_mesh_line(y, current_xi, current_yi);
    330          
    331                  z0 *= ubl.fade_scaling_factor_for_z(end[Z_AXIS]);
    332          
    333                  /**
    334                   * If part of the Mesh is undefined, it will show up as NAN
    335                   * in z_values[][] and propagate through the
    336                   * calculations. If our correction is NAN, we throw it out
    337                   * because part of the Mesh is undefined and we don't have the
    338                   * information we need to complete the height correction.
    339                   */
    340                  if (isnan(z0)) z0 = 0.0;
    341          
    342                  const float x = LOGICAL_X_POSITION(ubl.mesh_index_to_xpos[current_xi]);
    343          
    344                  /**
    345                   * Without this check, it is possible for the algorithm to generate a zero length move in the case
    346                   * where the line is heading left and it is starting right on a Mesh Line boundary. For how often
    347                   * that happens, it might be best to remove the check and always 'schedule' the move because
    348                   * the planner.buffer_line() routine will filter it if that happens.
    349                   */
    350                  if (x != start[X_AXIS]) {
    351                    if (!inf_normalized_flag) {
    352          
    353                      //on_axis_distance = x - start[X_AXIS];
    354                      on_axis_distance = use_x_dist ? x - start[X_AXIS] : y - start[Y_AXIS];
    355          
    356                      //on_axis_distance = use_x_dist ? next_mesh_line_x - start[X_AXIS] : y - start[Y_AXIS];
    357                      //on_axis_distance = use_x_dist ? x - start[X_AXIS] : next_mesh_line_y - start[Y_AXIS];
    358          
    359                      e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;  // is based on X or Y because this is a horizontal move
    360                      z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
    361                    }
    362                    else {
    363                      e_position = end[E_AXIS];
   \                     ??ubl_line_to_destination_39: (+1)
   \      0x568   0x68E0             LDR      R0,[R4, #+12]
   \      0x56A   0x9003             STR      R0,[SP, #+12]
    364                      z_position = end[Z_AXIS];
   \      0x56C   0x68A0             LDR      R0,[R4, #+8]
    365                    }
    366          
    367                    planner.buffer_line(x, y, z_position + z0 + ubl.state.z_offset, e_position, feed_rate, extruder);
   \                     ??ubl_line_to_destination_40: (+1)
   \      0x56E   0x4649             MOV      R1,R9
   \      0x570   0x9101             STR      R1,[SP, #+4]
   \      0x572   0x9700             STR      R7,[SP, #+0]
   \      0x574   0xAB03             ADD      R3,SP,#+12
   \      0x576   0x469B             MOV      R11,R3
   \      0x578   0x4641             MOV      R1,R8
   \      0x57A   0x.... 0x....      BL       __aeabi_fadd
   \      0x57E   0x....             LDR.N    R1,??DataTable18_9
   \      0x580   0x6849             LDR      R1,[R1, #+4]
   \      0x582   0x.... 0x....      BL       __aeabi_fadd
   \      0x586   0x4602             MOV      R2,R0
   \      0x588   0x465B             MOV      R3,R11
   \      0x58A   0x9908             LDR      R1,[SP, #+32]
   \      0x58C   0x4650             MOV      R0,R10
   \      0x58E   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
   \                     ??ubl_line_to_destination_38: (+1)
   \      0x592   0x9815             LDR      R0,[SP, #+84]
   \      0x594   0x1940             ADDS     R0,R0,R5
   \      0x596   0x4286             CMP      R6,R0
   \      0x598   0xF000 0x8158      BEQ.W    ??ubl_line_to_destination_41
   \      0x59C   0x9819             LDR      R0,[SP, #+100]
   \      0x59E   0x1986             ADDS     R6,R0,R6
   \      0x5A0   0x.... 0x....      LDR.W    R10,??DataTable18_11
   \      0x5A4   0xF85A 0x0026      LDR      R0,[R10, R6, LSL #+2]
   \      0x5A8   0x9910             LDR      R1,[SP, #+64]
   \      0x5AA   0x6809             LDR      R1,[R1, #+0]
   \      0x5AC   0x.... 0x....      BL       __aeabi_fadd
   \      0x5B0   0x9916             LDR      R1,[SP, #+88]
   \      0x5B2   0x.... 0x....      BL       __aeabi_fmul
   \      0x5B6   0x9902             LDR      R1,[SP, #+8]
   \      0x5B8   0x.... 0x....      BL       __aeabi_fadd
   \      0x5BC   0x9008             STR      R0,[SP, #+32]
   \      0x5BE   0x9B17             LDR      R3,[SP, #+92]
   \      0x5C0   0x4632             MOV      R2,R6
   \      0x5C2   0xA908             ADD      R1,SP,#+32
   \      0x5C4   0x9806             LDR      R0,[SP, #+24]
   \      0x5C6   0x.... 0x....      BL       _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii
   \      0x5CA   0x4680             MOV      R8,R0
   \      0x5CC   0xA913             ADD      R1,SP,#+76
   \      0x5CE   0x9806             LDR      R0,[SP, #+24]
   \      0x5D0   0x.... 0x....      BL       _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf
   \      0x5D4   0x4641             MOV      R1,R8
   \      0x5D6   0x.... 0x....      BL       __aeabi_fmul
   \      0x5DA   0x4680             MOV      R8,R0
   \      0x5DC   0x.... 0x....      BL       _Z5isnanf
   \      0x5E0   0x2800             CMP      R0,#+0
   \      0x5E2   0xD001             BEQ.N    ??ubl_line_to_destination_42
   \      0x5E4   0xF04F 0x0800      MOV      R8,#+0
   \                     ??ubl_line_to_destination_42: (+1)
   \      0x5E8   0xF85A 0x0026      LDR      R0,[R10, R6, LSL #+2]
   \      0x5EC   0x9910             LDR      R1,[SP, #+64]
   \      0x5EE   0x6809             LDR      R1,[R1, #+0]
   \      0x5F0   0x.... 0x....      BL       __aeabi_fadd
   \      0x5F4   0x4682             MOV      R10,R0
   \      0x5F6   0x9904             LDR      R1,[SP, #+16]
   \      0x5F8   0x.... 0x....      BL       __aeabi_cfcmpeq
   \      0x5FC   0xD0C9             BEQ.N    ??ubl_line_to_destination_38
   \      0x5FE   0x980C             LDR      R0,[SP, #+48]
   \      0x600   0x2800             CMP      R0,#+0
   \      0x602   0xD1B1             BNE.N    ??ubl_line_to_destination_39
   \      0x604   0x9807             LDR      R0,[SP, #+28]
   \      0x606   0x2800             CMP      R0,#+0
   \      0x608   0xD004             BEQ.N    ??ubl_line_to_destination_43
   \      0x60A   0x4650             MOV      R0,R10
   \      0x60C   0x.... 0x....      BL       __aeabi_fsub
   \      0x610   0x4683             MOV      R11,R0
   \      0x612   0xE004             B.N      ??ubl_line_to_destination_44
   \                     ??ubl_line_to_destination_43: (+1)
   \      0x614   0x9808             LDR      R0,[SP, #+32]
   \      0x616   0x9905             LDR      R1,[SP, #+20]
   \      0x618   0x.... 0x....      BL       __aeabi_fsub
   \      0x61C   0x4683             MOV      R11,R0
   \                     ??ubl_line_to_destination_44: (+1)
   \      0x61E   0x9809             LDR      R0,[SP, #+36]
   \      0x620   0x4659             MOV      R1,R11
   \      0x622   0x.... 0x....      BL       __aeabi_fmul
   \      0x626   0x990A             LDR      R1,[SP, #+40]
   \      0x628   0x.... 0x....      BL       __aeabi_fadd
   \      0x62C   0x9003             STR      R0,[SP, #+12]
   \      0x62E   0x980D             LDR      R0,[SP, #+52]
   \      0x630   0x4659             MOV      R1,R11
   \      0x632   0x.... 0x....      BL       __aeabi_fmul
   \      0x636   0x990B             LDR      R1,[SP, #+44]
   \      0x638   0x.... 0x....      BL       __aeabi_fadd
   \      0x63C   0xE797             B.N      ??ubl_line_to_destination_40
    368                  } //else printf("FIRST MOVE PRUNED  ");
    369                }
    370          
    371                if (ubl.g26_debug_flag)
    372                  debug_current_and_destination(PSTR("horizontal move done in ubl_line_to_destination()"));
    373          
    374                if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
    375                  goto FINAL_MOVE;
    376          
    377                set_current_to_destination();
    378                return;
    379              }
    380          
    381              /**
    382               *
    383               * This block handles the generic case of a line crossing both X and Y Mesh lines.
    384               *s
    385               */
    386          
    387              int xi_cnt = cell_start_xi - cell_dest_xi,
   \                     ??ubl_line_to_destination_37: (+1)
   \      0x63E   0x9915             LDR      R1,[SP, #+84]
   \      0x640   0x980F             LDR      R0,[SP, #+60]
   \      0x642   0x1A08             SUBS     R0,R1,R0
    388                  yi_cnt = cell_start_yi - cell_dest_yi;
   \      0x644   0x990E             LDR      R1,[SP, #+56]
   \      0x646   0x1A69             SUBS     R1,R5,R1
    389          
    390              if (xi_cnt < 0) xi_cnt = -xi_cnt;
   \      0x648   0x0002             MOVS     R2,R0
   \      0x64A   0xD500             BPL.N    ??ubl_line_to_destination_45
   \      0x64C   0x4252             RSBS     R2,R2,#+0
    391              if (yi_cnt < 0) yi_cnt = -yi_cnt;
   \                     ??ubl_line_to_destination_45: (+1)
   \      0x64E   0x2900             CMP      R1,#+0
   \      0x650   0xD500             BPL.N    ??ubl_line_to_destination_46
   \      0x652   0x4249             RSBS     R1,R1,#+0
    392          
    393              current_xi += left_flag;
    394              current_yi += down_flag;
   \                     ??ubl_line_to_destination_46: (+1)
   \      0x654   0x197D             ADDS     R5,R7,R5
   \      0x656   0x4628             MOV      R0,R5
   \      0x658   0xF89D 0x5008      LDRB     R5,[SP, #+8]
   \      0x65C   0x9615             STR      R6,[SP, #+84]
   \      0x65E   0x971A             STR      R7,[SP, #+104]
   \      0x660   0xF8CD 0x8064      STR      R8,[SP, #+100]
   \      0x664   0xF8CD 0x9060      STR      R9,[SP, #+96]
   \      0x668   0xF8CD 0xA058      STR      R10,[SP, #+88]
   \      0x66C   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x670   0x4680             MOV      R8,R0
   \      0x672   0x469A             MOV      R10,R3
   \      0x674   0x4616             MOV      R6,R2
   \      0x676   0x460F             MOV      R7,R1
   \      0x678   0xE018             B.N      ??ubl_line_to_destination_47
    395          
    396              while (xi_cnt > 0 || yi_cnt > 0) {
    397          
    398                const float next_mesh_line_x = LOGICAL_X_POSITION(ubl.mesh_index_to_xpos[current_xi + dxi]),
    399                            next_mesh_line_y = LOGICAL_Y_POSITION(ubl.mesh_index_to_ypos[current_yi + dyi]),
    400                            y = m * next_mesh_line_x + c,   // Calculate Y at the next X mesh line
    401                            x = (next_mesh_line_y - c) / m; // Calculate X at the next Y mesh line
    402                                                            // (No need to worry about m being zero.
    403                                                            //  If that was the case, it was already detected
    404                                                            //  as a vertical line move above.)
    405          
    406                if (left_flag == (x > next_mesh_line_x)) { // Check if we hit the Y line first
                                     ^
Warning[Pa118]: mixing boolean and non-boolean types in a comparison results in
          the boolean being promoted
    407                  //
    408                  // Yes!  Crossing a Y Mesh Line next
    409                  //
    410                  float z0 = ubl.z_correction_for_x_on_horizontal_mesh_line(x, current_xi - left_flag, current_yi + dyi);
    411          
    412                  z0 *= ubl.fade_scaling_factor_for_z(end[Z_AXIS]);
    413          
    414                  /**
    415                   * If part of the Mesh is undefined, it will show up as NAN
    416                   * in z_values[][] and propagate through the
    417                   * calculations. If our correction is NAN, we throw it out
    418                   * because part of the Mesh is undefined and we don't have the
    419                   * information we need to complete the height correction.
    420                   */
    421                  if (isnan(z0)) z0 = 0.0;
    422          
    423                  if (!inf_normalized_flag) {
    424                    on_axis_distance = use_x_dist ? x - start[X_AXIS] : next_mesh_line_y - start[Y_AXIS];
    425                    e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
    426                    z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
    427                  }
    428                  else {
    429                    e_position = end[E_AXIS];
   \                     ??ubl_line_to_destination_48: (+1)
   \      0x67A   0x68E0             LDR      R0,[R4, #+12]
   \      0x67C   0x9003             STR      R0,[SP, #+12]
    430                    z_position = end[Z_AXIS];
   \      0x67E   0x68A0             LDR      R0,[R4, #+8]
    431                  }
    432                  planner.buffer_line(x, next_mesh_line_y, z_position + z0 + ubl.state.z_offset, e_position, feed_rate, extruder);
   \                     ??ubl_line_to_destination_49: (+1)
   \      0x680   0x4629             MOV      R1,R5
   \      0x682   0x9101             STR      R1,[SP, #+4]
   \      0x684   0x9908             LDR      R1,[SP, #+32]
   \      0x686   0x9100             STR      R1,[SP, #+0]
   \      0x688   0xAB03             ADD      R3,SP,#+12
   \      0x68A   0x4699             MOV      R9,R3
   \      0x68C   0x4641             MOV      R1,R8
   \      0x68E   0x.... 0x....      BL       __aeabi_fadd
   \      0x692   0x....             LDR.N    R1,??DataTable18_9
   \      0x694   0x6849             LDR      R1,[R1, #+4]
   \      0x696   0x.... 0x....      BL       __aeabi_fadd
   \      0x69A   0x4602             MOV      R2,R0
   \      0x69C   0x464B             MOV      R3,R9
   \      0x69E   0x4659             MOV      R1,R11
   \      0x6A0   0x9817             LDR      R0,[SP, #+92]
   \      0x6A2   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
    433                  current_yi += dyi;
   \      0x6A6   0xF8DD 0x8070      LDR      R8,[SP, #+112]
    434                  yi_cnt--;
   \      0x6AA   0x1E7F             SUBS     R7,R7,#+1
   \                     ??ubl_line_to_destination_47: (+1)
   \      0x6AC   0x2E00             CMP      R6,#+0
   \      0x6AE   0xDC02             BGT.N    ??ubl_line_to_destination_50
   \      0x6B0   0x2F00             CMP      R7,#+0
   \      0x6B2   0xF340 0x80D7      BLE.W    ??ubl_line_to_destination_51
   \                     ??ubl_line_to_destination_50: (+1)
   \      0x6B6   0x9819             LDR      R0,[SP, #+100]
   \      0x6B8   0x4450             ADD      R0,R0,R10
   \      0x6BA   0x901B             STR      R0,[SP, #+108]
   \      0x6BC   0x....             LDR.N    R0,??DataTable18_11
   \      0x6BE   0x991B             LDR      R1,[SP, #+108]
   \      0x6C0   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \      0x6C4   0x9910             LDR      R1,[SP, #+64]
   \      0x6C6   0x6809             LDR      R1,[R1, #+0]
   \      0x6C8   0x.... 0x....      BL       __aeabi_fadd
   \      0x6CC   0x4681             MOV      R9,R0
   \      0x6CE   0x9818             LDR      R0,[SP, #+96]
   \      0x6D0   0x4440             ADD      R0,R0,R8
   \      0x6D2   0x901C             STR      R0,[SP, #+112]
   \      0x6D4   0x....             LDR.N    R0,??DataTable18_14
   \      0x6D6   0x991C             LDR      R1,[SP, #+112]
   \      0x6D8   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \      0x6DC   0x9910             LDR      R1,[SP, #+64]
   \      0x6DE   0x6849             LDR      R1,[R1, #+4]
   \      0x6E0   0x.... 0x....      BL       __aeabi_fadd
   \      0x6E4   0x4683             MOV      R11,R0
   \      0x6E6   0x9816             LDR      R0,[SP, #+88]
   \      0x6E8   0x4649             MOV      R1,R9
   \      0x6EA   0x.... 0x....      BL       __aeabi_fmul
   \      0x6EE   0x9902             LDR      R1,[SP, #+8]
   \      0x6F0   0x.... 0x....      BL       __aeabi_fadd
   \      0x6F4   0x901D             STR      R0,[SP, #+116]
   \      0x6F6   0x4658             MOV      R0,R11
   \      0x6F8   0x9902             LDR      R1,[SP, #+8]
   \      0x6FA   0x.... 0x....      BL       __aeabi_fsub
   \      0x6FE   0x9916             LDR      R1,[SP, #+88]
   \      0x700   0x.... 0x....      BL       __aeabi_fdiv
   \      0x704   0x9017             STR      R0,[SP, #+92]
   \      0x706   0x4648             MOV      R0,R9
   \      0x708   0x9917             LDR      R1,[SP, #+92]
   \      0x70A   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x70E   0xD201             BCS.N    ??ubl_line_to_destination_52
   \      0x710   0x2001             MOVS     R0,#+1
   \      0x712   0xE000             B.N      ??ubl_line_to_destination_53
   \                     ??ubl_line_to_destination_52: (+1)
   \      0x714   0x2000             MOVS     R0,#+0
   \                     ??ubl_line_to_destination_53: (+1)
   \      0x716   0x9915             LDR      R1,[SP, #+84]
   \      0x718   0x4281             CMP      R1,R0
   \      0x71A   0xD137             BNE.N    ??ubl_line_to_destination_54
   \      0x71C   0x9B1C             LDR      R3,[SP, #+112]
   \      0x71E   0x460A             MOV      R2,R1
   \      0x720   0xEBAA 0x0202      SUB      R2,R10,R2
   \      0x724   0xA917             ADD      R1,SP,#+92
   \      0x726   0x9806             LDR      R0,[SP, #+24]
   \      0x728   0x.... 0x....      BL       _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii
   \      0x72C   0x4680             MOV      R8,R0
   \      0x72E   0xA913             ADD      R1,SP,#+76
   \      0x730   0x9806             LDR      R0,[SP, #+24]
   \      0x732   0x.... 0x....      BL       _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf
   \      0x736   0x4641             MOV      R1,R8
   \      0x738   0x.... 0x....      BL       __aeabi_fmul
   \      0x73C   0x4680             MOV      R8,R0
   \      0x73E   0x.... 0x....      BL       _Z5isnanf
   \      0x742   0x2800             CMP      R0,#+0
   \      0x744   0xD001             BEQ.N    ??ubl_line_to_destination_55
   \      0x746   0xF04F 0x0800      MOV      R8,#+0
   \                     ??ubl_line_to_destination_55: (+1)
   \      0x74A   0x980C             LDR      R0,[SP, #+48]
   \      0x74C   0x2800             CMP      R0,#+0
   \      0x74E   0xD194             BNE.N    ??ubl_line_to_destination_48
   \      0x750   0x9807             LDR      R0,[SP, #+28]
   \      0x752   0x2800             CMP      R0,#+0
   \      0x754   0xD005             BEQ.N    ??ubl_line_to_destination_56
   \      0x756   0x9817             LDR      R0,[SP, #+92]
   \      0x758   0x9904             LDR      R1,[SP, #+16]
   \      0x75A   0x.... 0x....      BL       __aeabi_fsub
   \      0x75E   0x4681             MOV      R9,R0
   \      0x760   0xE004             B.N      ??ubl_line_to_destination_57
   \                     ??ubl_line_to_destination_56: (+1)
   \      0x762   0x4658             MOV      R0,R11
   \      0x764   0x9905             LDR      R1,[SP, #+20]
   \      0x766   0x.... 0x....      BL       __aeabi_fsub
   \      0x76A   0x4681             MOV      R9,R0
   \                     ??ubl_line_to_destination_57: (+1)
   \      0x76C   0x9809             LDR      R0,[SP, #+36]
   \      0x76E   0x4649             MOV      R1,R9
   \      0x770   0x.... 0x....      BL       __aeabi_fmul
   \      0x774   0x990A             LDR      R1,[SP, #+40]
   \      0x776   0x.... 0x....      BL       __aeabi_fadd
   \      0x77A   0x9003             STR      R0,[SP, #+12]
   \      0x77C   0x980D             LDR      R0,[SP, #+52]
   \      0x77E   0x4649             MOV      R1,R9
   \      0x780   0x.... 0x....      BL       __aeabi_fmul
   \      0x784   0x990B             LDR      R1,[SP, #+44]
   \      0x786   0x.... 0x....      BL       __aeabi_fadd
   \      0x78A   0xE779             B.N      ??ubl_line_to_destination_49
    435                }
    436                else {
    437                  //
    438                  // Yes!  Crossing a X Mesh Line next
    439                  //
    440                  float z0 = ubl.z_correction_for_y_on_vertical_mesh_line(y, current_xi + dxi, current_yi - down_flag);
   \                     ??ubl_line_to_destination_54: (+1)
   \      0x78C   0x9B1A             LDR      R3,[SP, #+104]
   \      0x78E   0xEBA8 0x0303      SUB      R3,R8,R3
   \      0x792   0x9A1B             LDR      R2,[SP, #+108]
   \      0x794   0xA91D             ADD      R1,SP,#+116
   \      0x796   0x9806             LDR      R0,[SP, #+24]
   \      0x798   0x.... 0x....      BL       _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii
   \      0x79C   0x4682             MOV      R10,R0
    441          
    442                  z0 *= ubl.fade_scaling_factor_for_z(end[Z_AXIS]);
   \      0x79E   0xA913             ADD      R1,SP,#+76
   \      0x7A0   0x9806             LDR      R0,[SP, #+24]
   \      0x7A2   0x.... 0x....      BL       _ZN20unified_bed_leveling25fade_scaling_factor_for_zERKf
   \      0x7A6   0x4651             MOV      R1,R10
   \      0x7A8   0x.... 0x....      BL       __aeabi_fmul
   \      0x7AC   0x4682             MOV      R10,R0
    443          
    444                  /**
    445                   * If part of the Mesh is undefined, it will show up as NAN
    446                   * in z_values[][] and propagate through the
    447                   * calculations. If our correction is NAN, we throw it out
    448                   * because part of the Mesh is undefined and we don't have the
    449                   * information we need to complete the height correction.
    450                   */
    451                  if (isnan(z0)) z0 = 0.0;
   \      0x7AE   0x.... 0x....      BL       _Z5isnanf
   \      0x7B2   0x2800             CMP      R0,#+0
   \      0x7B4   0xD001             BEQ.N    ??ubl_line_to_destination_58
   \      0x7B6   0xF04F 0x0A00      MOV      R10,#+0
    452          
    453                  if (!inf_normalized_flag) {
   \                     ??ubl_line_to_destination_58: (+1)
   \      0x7BA   0x980C             LDR      R0,[SP, #+48]
   \      0x7BC   0x2800             CMP      R0,#+0
   \      0x7BE   0xD11D             BNE.N    ??ubl_line_to_destination_59
    454                    on_axis_distance = use_x_dist ? next_mesh_line_x - start[X_AXIS] : y - start[Y_AXIS];
   \      0x7C0   0x9807             LDR      R0,[SP, #+28]
   \      0x7C2   0x2800             CMP      R0,#+0
   \      0x7C4   0xD005             BEQ.N    ??ubl_line_to_destination_60
   \      0x7C6   0x4648             MOV      R0,R9
   \      0x7C8   0x9904             LDR      R1,[SP, #+16]
   \      0x7CA   0x.... 0x....      BL       __aeabi_fsub
   \      0x7CE   0x4683             MOV      R11,R0
   \      0x7D0   0xE004             B.N      ??ubl_line_to_destination_61
   \                     ??ubl_line_to_destination_60: (+1)
   \      0x7D2   0x981D             LDR      R0,[SP, #+116]
   \      0x7D4   0x9905             LDR      R1,[SP, #+20]
   \      0x7D6   0x.... 0x....      BL       __aeabi_fsub
   \      0x7DA   0x4683             MOV      R11,R0
    455                    e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
   \                     ??ubl_line_to_destination_61: (+1)
   \      0x7DC   0x9809             LDR      R0,[SP, #+36]
   \      0x7DE   0x4659             MOV      R1,R11
   \      0x7E0   0x.... 0x....      BL       __aeabi_fmul
   \      0x7E4   0x990A             LDR      R1,[SP, #+40]
   \      0x7E6   0x.... 0x....      BL       __aeabi_fadd
   \      0x7EA   0x9003             STR      R0,[SP, #+12]
    456                    z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
   \      0x7EC   0x980D             LDR      R0,[SP, #+52]
   \      0x7EE   0x4659             MOV      R1,R11
   \      0x7F0   0x.... 0x....      BL       __aeabi_fmul
   \      0x7F4   0x990B             LDR      R1,[SP, #+44]
   \      0x7F6   0x.... 0x....      BL       __aeabi_fadd
   \      0x7FA   0xE002             B.N      ??ubl_line_to_destination_62
    457                  }
    458                  else {
    459                    e_position = end[E_AXIS];
   \                     ??ubl_line_to_destination_59: (+1)
   \      0x7FC   0x68E0             LDR      R0,[R4, #+12]
   \      0x7FE   0x9003             STR      R0,[SP, #+12]
    460                    z_position = end[Z_AXIS];
   \      0x800   0x68A0             LDR      R0,[R4, #+8]
    461                  }
    462          
    463                  planner.buffer_line(next_mesh_line_x, y, z_position + z0 + ubl.state.z_offset, e_position, feed_rate, extruder);
   \                     ??ubl_line_to_destination_62: (+1)
   \      0x802   0x4629             MOV      R1,R5
   \      0x804   0x9101             STR      R1,[SP, #+4]
   \      0x806   0x9908             LDR      R1,[SP, #+32]
   \      0x808   0x9100             STR      R1,[SP, #+0]
   \      0x80A   0xAB03             ADD      R3,SP,#+12
   \      0x80C   0x469B             MOV      R11,R3
   \      0x80E   0x4651             MOV      R1,R10
   \      0x810   0x.... 0x....      BL       __aeabi_fadd
   \      0x814   0x....             LDR.N    R1,??DataTable18_9
   \      0x816   0x6849             LDR      R1,[R1, #+4]
   \      0x818   0x.... 0x....      BL       __aeabi_fadd
   \      0x81C   0x4602             MOV      R2,R0
   \      0x81E   0x465B             MOV      R3,R11
   \      0x820   0x991D             LDR      R1,[SP, #+116]
   \      0x822   0x4648             MOV      R0,R9
   \      0x824   0x.... 0x....      BL       _ZN7Planner11buffer_lineEfffRKfS1_h
    464                  current_xi += dxi;
   \      0x828   0xF8DD 0xA06C      LDR      R10,[SP, #+108]
    465                  xi_cnt--;
   \      0x82C   0x1E76             SUBS     R6,R6,#+1
   \      0x82E   0xE73D             B.N      ??ubl_line_to_destination_47
    466                }
    467              }
   \                     ??ubl_line_to_destination_31: (+1)
   \      0x830   0x9508             STR      R5,[SP, #+32]
   \      0x832   0xF88D 0x6008      STRB     R6,[SP, #+8]
   \      0x836   0xF8CD 0x8038      STR      R8,[SP, #+56]
   \      0x83A   0x....             LDR.N    R0,??DataTable18_5
   \      0x83C   0x7800             LDRB     R0,[R0, #+0]
   \      0x83E   0x2800             CMP      R0,#+0
   \      0x840   0xD019             BEQ.N    ??ubl_line_to_destination_63
   \      0x842   0xBF00             Nop      
   \      0x844   0x....             ADR.N    R0,?_13
   \      0x846   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \      0x84A   0xE014             B.N      ??ubl_line_to_destination_63
   \                     ??ubl_line_to_destination_41: (+1)
   \      0x84C   0x9708             STR      R7,[SP, #+32]
   \      0x84E   0xF88D 0x9008      STRB     R9,[SP, #+8]
   \      0x852   0x950F             STR      R5,[SP, #+60]
   \      0x854   0x....             LDR.N    R0,??DataTable18_5
   \      0x856   0x7800             LDRB     R0,[R0, #+0]
   \      0x858   0x2800             CMP      R0,#+0
   \      0x85A   0xD00C             BEQ.N    ??ubl_line_to_destination_63
   \      0x85C   0x....             ADR.N    R0,?_14
   \      0x85E   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \      0x862   0xE008             B.N      ??ubl_line_to_destination_63
   \                     ??ubl_line_to_destination_51: (+1)
   \      0x864   0xF88D 0x5008      STRB     R5,[SP, #+8]
    468          
    469              if (ubl.g26_debug_flag)
   \      0x868   0x....             LDR.N    R0,??DataTable18_5
   \      0x86A   0x7800             LDRB     R0,[R0, #+0]
   \      0x86C   0x2800             CMP      R0,#+0
   \      0x86E   0xD002             BEQ.N    ??ubl_line_to_destination_63
    470                debug_current_and_destination(PSTR("generic move done in ubl_line_to_destination()"));
   \      0x870   0x....             ADR.N    R0,?_15
   \      0x872   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
    471          
    472              if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
   \                     ??ubl_line_to_destination_63: (+1)
   \      0x876   0x....             LDR.N    R2,??DataTable18_1
   \      0x878   0x6810             LDR      R0,[R2, #+0]
   \      0x87A   0x9911             LDR      R1,[SP, #+68]
   \      0x87C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \      0x880   0xF47F 0xAC8A      BNE.W    ??ubl_line_to_destination_7
   \      0x884   0x6850             LDR      R0,[R2, #+4]
   \      0x886   0x6861             LDR      R1,[R4, #+4]
   \      0x888   0x.... 0x....      BL       __aeabi_cfcmpeq
   \      0x88C   0xF47F 0xAC84      BNE.W    ??ubl_line_to_destination_7
    473                goto FINAL_MOVE;
    474          
    475              set_current_to_destination();
   \                     ??ubl_line_to_destination_10: (+1)
   \      0x890   0x.... 0x....      BL       _Z26set_current_to_destinationv
    476            }
   \                     ??ubl_line_to_destination_8: (+1)
   \      0x894   0xB01F             ADD      SP,SP,#+124
   \      0x896   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0x....'....        DC32     destination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \        0x0   0x....'....        DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling14g26_debug_flagE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \        0x0   0x....'....        DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \        0x0   0x....'....        DC32     ubl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \        0x0   0x....'....        DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling5stateE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \        0x0   0x....'....        DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \        0x0   0x3FF0'0000        DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-------------"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x20 0x20          DC8 "   fpmm="
   \              0x20 0x66    
   \              0x70 0x6D    
   \              0x6D 0x3D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x20 0x20          DC8 "    current=( "
   \              0x20 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x3D    
   \              0x28 0x20    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x20 0x29          DC8 " )   destination=( "
   \              0x20 0x20    
   \              0x20 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3D 0x28    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \        0x0   0x20 0x29          DC8 " )   "
   \              0x20 0x20    
   \              0x20 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x20 0x75          DC8 " ubl_line_to_destination(xe="
   \              0x62 0x6C    
   \              0x5F 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x28 0x78    
   \              0x65 0x3D    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x2C 0x20          DC8 ", ye="
   \              0x79 0x65    
   \              0x3D 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \        0x0   0x2C 0x20          DC8 ", ze="
   \              0x7A 0x65    
   \              0x3D 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \        0x0   0x2C 0x20          DC8 ", ee="
   \              0x65 0x65    
   \              0x3D 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \        0x0   0x53 0x74          DC8 "Start of ubl_line_to_destination()"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x75    
   \              0x62 0x6C    
   \              0x5F 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x28 0x29    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \        0x0   0x6F 0x75          DC8 "out of bounds in ubl_line_to_destination()"
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x62    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x75    
   \              0x62 0x6C    
   \              0x5F 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x28 0x29    
   \              0x00         
   \       0x2B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \        0x0   0x46 0x49          DC8 "FINAL_MOVE in ubl_line_to_destination()"
   \              0x4E 0x41    
   \              0x4C 0x5F    
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x75 0x62    
   \              0x6C 0x5F    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x5F 0x74    
   \              0x6F 0x5F    
   \              0x64 0x65    
   \              0x73 0x74    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x28    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \        0x0   0x76 0x65          DC8 "vertical move done in ubl_line_to_destination()"
   \              0x72 0x74    
   \              0x69 0x63    
   \              0x61 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x75 0x62    
   \              0x6C 0x5F    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x5F 0x74    
   \              0x6F 0x5F    
   \              0x64 0x65    
   \              0x73 0x74    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x28    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \        0x0   0x68 0x6F          DC8 "horizontal move done in ubl_line_to_destination()"
   \              0x72 0x69    
   \              0x7A 0x6F    
   \              0x6E 0x74    
   \              0x61 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x75 0x62    
   \              0x6C 0x5F    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x5F 0x74    
   \              0x6F 0x5F    
   \              0x64 0x65    
   \              0x73 0x74    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x28    
   \              0x29 0x00    
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \        0x0   0x67 0x65          DC8 "generic move done in ubl_line_to_destination()"
   \              0x6E 0x65    
   \              0x72 0x69    
   \              0x63 0x20    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x20 0x64    
   \              0x6F 0x6E    
   \              0x65 0x20    
   \              0x69 0x6E    
   \              0x20 0x75    
   \              0x62 0x6C    
   \              0x5F 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x28 0x29    
   \              0x00         
   \       0x2F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x2C 0x20          DC8 ", "
   \              0x00         
   \        0x3   0x00               DC8 0
    477          
    478          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
         0   -> package_to_wifi
        16   -> strlen
      16   MarlinSerial::write(char const *)
         0   -> BSP_UartIfQueueTxData
        16   -> strlen
       8   MarlinSerial::write(uint8_t)
         8   -> BSP_UartIfQueueTxData
      32   Planner::buffer_line(float, float, float, float const &, float const &, uint8_t)
        32   -> Planner::_buffer_line(float const &, float const &, float const &, float const &, float, uint8_t)
        32   -> Planner::apply_leveling(float &, float &, float &)
      40   debug_current_and_destination(char const *)
        40   -> MarlinSerial::print(char const *)
         0   -> MarlinSerial::print(char, int)
        40   -> MarlinSerial::print(double, int)
         0   -> MarlinSerial::write(uint8_t)
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> debug_echo_axis(AxisEnum)
        40   -> serialprintPGM(char const *)
        40   -> sqrtf
        40 __aeabi_cfcmpeq
       8   debug_echo_axis(AxisEnum)
         8   -> MarlinSerial::print(double, int)
         8   -> __aeabi_f2d
         0   -> serialprintPGM(char const *)
         8 __aeabi_cfcmpeq
       0   isinf(float)
       0   isnan(float)
       0   serialprintPGM(char const *)
         0   -> MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
     160   ubl_line_to_destination(float const &, uint8_t)
       160   -> MarlinSerial::print(char, int)
       160   -> MarlinSerial::write(uint8_t)
       160   -> Planner::buffer_line(float, float, float, float const &, float const &, uint8_t)
       160   -> __aeabi_d2f
       160   -> __aeabi_ddiv
       160   -> __aeabi_dmul
       160   -> __aeabi_f2d
       160   -> __aeabi_fadd
       160   -> __aeabi_fdiv
       160   -> __aeabi_fmul
       160   -> __aeabi_fsub
       160   -> __aeabi_i2f
       160   -> debug_current_and_destination(char const *)
       160   -> isinf(float)
       160   -> isnan(float)
       160   -> serial_echopair_P(char const *, float)
       160   -> set_current_to_destination()
       160   -> unified_bed_leveling::fade_scaling_factor_for_z(float const &)
       160   -> unified_bed_leveling::get_cell_index_x(float const &)
       160   -> unified_bed_leveling::get_cell_index_y(float const &)
       160   -> unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
       160   -> unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
       160 __aeabi_cfcmpeq
       160 __aeabi_cfcmple
      16   unified_bed_leveling::fade_scaling_factor_for_z(float const &)
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16 __aeabi_cfcmpeq
        16 __aeabi_cfcmple
      40   unified_bed_leveling::get_cell_index_x(float const &)
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
      40   unified_bed_leveling::get_cell_index_y(float const &)
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
      40   unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
        40   -> MarlinSerial::print(char, int)
        40   -> MarlinSerial::write(uint8_t)
        40   -> __aeabi_d2f
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> serial_echopair_P(char const *, float)
        40   -> serial_echopair_P(char const *, int)
      40   unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
        40   -> MarlinSerial::print(char, int)
        40   -> MarlinSerial::write(uint8_t)
        40   -> __aeabi_d2f
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> serial_echopair_P(char const *, float)
        40   -> serial_echopair_P(char const *, int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
      16  ?_0
      12  ?_1
      36  ?_10
      44  ?_11
      40  ?_12
      48  ?_13
      52  ?_14
      48  ?_15
      16  ?_2
       4  ?_3
      20  ?_4
       8  ?_5
      32  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
      64  MarlinSerial::print(char const *)
      28  MarlinSerial::write(char const *)
      12  MarlinSerial::write(uint8_t)
      64  Planner::buffer_line(float, float, float, float const &, float const &, uint8_t)
     534  debug_current_and_destination(char const *)
      90  debug_echo_axis(AxisEnum)
       4  fade_scaling_factor
      54  isinf(float)
      26  isnan(float)
      36  serialprintPGM(char const *)
    2202  ubl_line_to_destination(float const &, uint8_t)
     116  unified_bed_leveling::fade_scaling_factor_for_z(float const &)
     148  unified_bed_leveling::get_cell_index_x(float const &)
     144  unified_bed_leveling::get_cell_index_y(float const &)
     336  unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
     332  unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
     156  -- Other

 
     4 bytes in section .data
   160 bytes in section .rodata
 4 646 bytes in section .text
 
 3 286 bytes of CODE  memory (+ 1 360 bytes shared)
     4 bytes of CONST memory (+   156 bytes shared)
     0 bytes of DATA  memory (+     4 bytes shared)

Errors: none
Warnings: 8
