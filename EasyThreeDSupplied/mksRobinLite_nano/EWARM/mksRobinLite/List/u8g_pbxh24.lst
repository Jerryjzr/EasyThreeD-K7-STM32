###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pbxh24.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW57C9.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pbxh24.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_pbxh24.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_pbxh24.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pbxh24.c
      1          /*
      2          
      3            u8g_pbxh24.c
      4            
      5            x lines per page, horizontal, 24 bits per pixel (true color modes)
      6            
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2013, olikraus@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35          
     36          
     37          struct _u8g_pb_t
     38          {
     39            u8g_page_t p;
     40            u8g_uint_t width;
     41            void *buf;
     42          };
     43          typedef struct _u8g_pb_t u8g_pb_t;
     44          
     45          
     46          uint8_t u8g_index_color_xh16_buf[2*WIDTH*PAGE_HEIGHT] U8G_NOCOMMON ; 
     47          u8g_pb_t u8g_index_color_xh16_pb = { {PAGE_HEIGHT, HEIGHT, 0, 0, 0},  WIDTH, u8g_index_color_xh16_buf}; 
     48          u8g_dev_t name = { dev_fn, &u8g_index_color_xh16_pb , com_fn }
     49          
     50          */
     51          
     52          #include "u8g.h"
     53          
     54          /*
     55          #define WIDTH_BITS 7
     56          #define WIDTH (1<<WIDTH_BITS)
     57          #define PAGE_HEIGHT_BITS 3
     58          #define PAGE_HEIGHT (1<<PAGE_HEIGHT_BITS)
     59          */
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void u8g_pbxh24_Clear(u8g_pb_t *b)
     62          {
   \                     u8g_pbxh24_Clear: (+1)
   \   00000000   0xB410             PUSH     {R4}
     63            uint8_t *ptr = (uint8_t *)b->buf;
   \   00000002   0x6881             LDR      R1,[R0, #+8]
     64            uint8_t *end_ptr = ptr;
   \   00000004   0x460A             MOV      R2,R1
     65            uint8_t cnt = b->p.page_height;
   \   00000006   0x7803             LDRB     R3,[R0, #+0]
     66            do
     67            {
     68              end_ptr += b->width*3;
   \                     ??u8g_pbxh24_Clear_0: (+1)
   \   00000008   0x7944             LDRB     R4,[R0, #+5]
   \   0000000A   0xEB04 0x0444      ADD      R4,R4,R4, LSL #+1
   \   0000000E   0x4422             ADD      R2,R2,R4
     69              cnt--;
   \   00000010   0x1E5B             SUBS     R3,R3,#+1
     70            } while( cnt > 0 );
   \   00000012   0x461C             MOV      R4,R3
   \   00000014   0xB2E4             UXTB     R4,R4
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD1F6             BNE.N    ??u8g_pbxh24_Clear_0
     71            do
     72            {
     73              *ptr++ = 0;
   \                     ??u8g_pbxh24_Clear_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF801 0x0B01      STRB     R0,[R1], #+1
     74            } while( ptr != end_ptr );
   \   00000020   0x4291             CMP      R1,R2
   \   00000022   0xD1FA             BNE.N    ??u8g_pbxh24_Clear_1
     75          }
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
     76          
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void u8g_pbxh24_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
     79          {
     80            b->buf = buf;
   \                     u8g_pbxh24_Init: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
     81            b->width = width;
   \   00000002   0x7142             STRB     R2,[R0, #+5]
     82            u8g_pbxh24_Clear(b);
   \   00000004   0x....             B.N      u8g_pbxh24_Clear
     83          }
     84          
     85          #ifdef OBSOLETE
     86          static void u8g_pbxh24_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t r, uint8_t g, uint8_t b)
     87          {
     88            uint16_t tmp;
     89            uint8_t *ptr = b->buf;
     90            y -= b->p.page_y0;
     91            tmp = y;
     92            tmp *= b->width;
     93            tmp += x;
     94            tmp *= 3;
     95            ptr += tmp;
     96            *ptr = r;
     97            ptr++;
     98            *ptr = g;
     99            ptr++;
    100            *ptr = b;
    101          }
    102          #endif
    103          
    104          /*
    105            intensity
    106              0..3		intensity value
    107              4			replace color
    108          */

   \                                 In section .text, align 2, keep-with-next
    109          static void u8g_pbxh24_set_tpixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t red, uint8_t green, uint8_t blue, uint8_t intensity)
    110          {
   \                     u8g_pbxh24_set_tpixel: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
   \   00000002   0x9E07             LDR      R6,[SP, #+28]
    111            uint16_t tmp;
    112            uint8_t *ptr = b->buf;
    113            
    114            if ( intensity == 0 )
   \   00000004   0x0034             MOVS     R4,R6
   \   00000006   0xD044             BEQ.N    ??u8g_pbxh24_set_tpixel_0
    115              return;
   \   00000008   0x9C06             LDR      R4,[SP, #+24]
   \   0000000A   0x9D05             LDR      R5,[SP, #+20]
    116            
    117            y -= b->p.page_y0;
    118            tmp = y;
    119            tmp *= b->width;
    120            tmp += x;
    121            tmp *= 3;
    122            ptr += tmp;
   \   0000000C   0xF8D0 0xC008      LDR      R12,[R0, #+8]
   \   00000010   0x7887             LDRB     R7,[R0, #+2]
   \   00000012   0x1BD2             SUBS     R2,R2,R7
   \   00000014   0xB2D2             UXTB     R2,R2
   \   00000016   0x7940             LDRB     R0,[R0, #+5]
   \   00000018   0xFB00 0x1102      MLA      R1,R0,R2,R1
   \   0000001C   0xB289             UXTH     R1,R1
   \   0000001E   0xEB01 0x0141      ADD      R1,R1,R1, LSL #+1
   \   00000022   0xB289             UXTH     R1,R1
   \   00000024   0xEB0C 0x0001      ADD      R0,R12,R1
    123            
    124            if ( intensity == 4 )
   \   00000028   0x2E04             CMP      R6,#+4
   \   0000002A   0xD103             BNE.N    ??u8g_pbxh24_set_tpixel_1
    125            {
    126              *ptr = red;
   \   0000002C   0x7003             STRB     R3,[R0, #+0]
    127              ptr++;
    128              *ptr = green;
   \   0000002E   0x7045             STRB     R5,[R0, #+1]
    129              ptr++;
    130              *ptr = blue;
   \   00000030   0x7084             STRB     R4,[R0, #+2]
    131              return;
   \   00000032   0xE02E             B.N      ??u8g_pbxh24_set_tpixel_0
    132            }
    133          
    134            if ( intensity == 2 )
   \                     ??u8g_pbxh24_set_tpixel_1: (+1)
   \   00000034   0x2E02             CMP      R6,#+2
   \   00000036   0xD103             BNE.N    ??u8g_pbxh24_set_tpixel_2
    135            {
    136              /*
    137              red = red/4 + red/2;
    138              green = green/4 + green/2;
    139              blue = blue/4 + blue/2;
    140              */
    141              red >>= 1;
   \   00000038   0x085B             LSRS     R3,R3,#+1
    142              green >>= 1;
   \   0000003A   0x086D             LSRS     R5,R5,#+1
    143              blue >>= 1;
   \   0000003C   0x0864             LSRS     R4,R4,#+1
   \   0000003E   0xE004             B.N      ??u8g_pbxh24_set_tpixel_3
    144            }
    145            else if ( intensity == 1 )
   \                     ??u8g_pbxh24_set_tpixel_2: (+1)
   \   00000040   0x2E01             CMP      R6,#+1
   \   00000042   0xD102             BNE.N    ??u8g_pbxh24_set_tpixel_3
    146            {
    147              red >>= 2;
   \   00000044   0x089B             LSRS     R3,R3,#+2
    148              green >>= 2;
   \   00000046   0x08AD             LSRS     R5,R5,#+2
    149              blue >>= 2;
   \   00000048   0x08A4             LSRS     R4,R4,#+2
    150            }
    151          
    152            if ( *ptr >= 255-red ) *ptr = 255; 
   \                     ??u8g_pbxh24_set_tpixel_3: (+1)
   \   0000004A   0x7801             LDRB     R1,[R0, #+0]
   \   0000004C   0x460A             MOV      R2,R1
   \   0000004E   0x461E             MOV      R6,R3
   \   00000050   0xF1C6 0x06FF      RSB      R6,R6,#+255
   \   00000054   0x42B2             CMP      R2,R6
   \   00000056   0xDB02             BLT.N    ??u8g_pbxh24_set_tpixel_4
   \   00000058   0x21FF             MOVS     R1,#+255
   \   0000005A   0x7001             STRB     R1,[R0, #+0]
   \   0000005C   0xE001             B.N      ??u8g_pbxh24_set_tpixel_5
    153            else *ptr += red;
   \                     ??u8g_pbxh24_set_tpixel_4: (+1)
   \   0000005E   0x185B             ADDS     R3,R3,R1
   \   00000060   0x7003             STRB     R3,[R0, #+0]
    154            ptr++;
    155          
    156            if ( *ptr >= 255-green ) *ptr = 255; 
   \                     ??u8g_pbxh24_set_tpixel_5: (+1)
   \   00000062   0x7841             LDRB     R1,[R0, #+1]
   \   00000064   0x460A             MOV      R2,R1
   \   00000066   0x462B             MOV      R3,R5
   \   00000068   0xF1C3 0x03FF      RSB      R3,R3,#+255
   \   0000006C   0x429A             CMP      R2,R3
   \   0000006E   0xDB02             BLT.N    ??u8g_pbxh24_set_tpixel_6
   \   00000070   0x21FF             MOVS     R1,#+255
   \   00000072   0x7041             STRB     R1,[R0, #+1]
   \   00000074   0xE001             B.N      ??u8g_pbxh24_set_tpixel_7
    157            else *ptr += green;
   \                     ??u8g_pbxh24_set_tpixel_6: (+1)
   \   00000076   0x186D             ADDS     R5,R5,R1
   \   00000078   0x7045             STRB     R5,[R0, #+1]
    158            ptr++;
    159          
    160            if ( *ptr >= 255-blue ) *ptr = 255; 
   \                     ??u8g_pbxh24_set_tpixel_7: (+1)
   \   0000007A   0x7881             LDRB     R1,[R0, #+2]
   \   0000007C   0x460A             MOV      R2,R1
   \   0000007E   0x4623             MOV      R3,R4
   \   00000080   0xF1C3 0x03FF      RSB      R3,R3,#+255
   \   00000084   0x429A             CMP      R2,R3
   \   00000086   0xDB02             BLT.N    ??u8g_pbxh24_set_tpixel_8
   \   00000088   0x21FF             MOVS     R1,#+255
   \   0000008A   0x7081             STRB     R1,[R0, #+2]
   \   0000008C   0xE001             B.N      ??u8g_pbxh24_set_tpixel_0
    161            else *ptr += blue;
   \                     ??u8g_pbxh24_set_tpixel_8: (+1)
   \   0000008E   0x1864             ADDS     R4,R4,R1
   \   00000090   0x7084             STRB     R4,[R0, #+2]
    162            
    163            /*
    164            if ( *ptr < red ) *ptr = red;
    165            ptr++;
    166            if ( *ptr < green ) *ptr = green;
    167            ptr++;
    168            if ( *ptr < blue ) *ptr = blue;
    169            */
    170            
    171            
    172          }
   \                     ??u8g_pbxh24_set_tpixel_0: (+1)
   \   00000092   0xBCF1             POP      {R0,R4-R7}
   \   00000094   0x4770             BX       LR               ;; return
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void u8g_pbxh24_SetTPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel, uint8_t intensity)
    175          {
   \                     u8g_pbxh24_SetTPixel: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x460B             MOV      R3,R1
    176            if ( arg_pixel->y < b->p.page_y0 )
   \   00000004   0x785C             LDRB     R4,[R3, #+1]
   \   00000006   0x7881             LDRB     R1,[R0, #+2]
   \   00000008   0x428C             CMP      R4,R1
   \   0000000A   0xD30F             BCC.N    ??u8g_pbxh24_SetTPixel_0
    177              return;
    178            if ( arg_pixel->y > b->p.page_y1 )
   \   0000000C   0x78C1             LDRB     R1,[R0, #+3]
   \   0000000E   0x42A1             CMP      R1,R4
   \   00000010   0xD30C             BCC.N    ??u8g_pbxh24_SetTPixel_0
    179              return;
    180            if ( arg_pixel->x >= b->width )
   \   00000012   0x7819             LDRB     R1,[R3, #+0]
   \   00000014   0x7945             LDRB     R5,[R0, #+5]
   \   00000016   0x42A9             CMP      R1,R5
   \   00000018   0xD208             BCS.N    ??u8g_pbxh24_SetTPixel_0
    181              return;
    182            u8g_pbxh24_set_tpixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color, arg_pixel->hi_color, arg_pixel->blue, intensity);
   \   0000001A   0x9202             STR      R2,[SP, #+8]
   \   0000001C   0x799A             LDRB     R2,[R3, #+6]
   \   0000001E   0x9201             STR      R2,[SP, #+4]
   \   00000020   0x795A             LDRB     R2,[R3, #+5]
   \   00000022   0x9200             STR      R2,[SP, #+0]
   \   00000024   0x791B             LDRB     R3,[R3, #+4]
   \   00000026   0x4622             MOV      R2,R4
   \   00000028   0x.... 0x....      BL       u8g_pbxh24_set_tpixel
    183          }
   \                     ??u8g_pbxh24_SetTPixel_0: (+1)
   \   0000002C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    184          
    185          

   \                                 In section .text, align 4, keep-with-next
    186          void u8g_pbxh24_Set8Pixel(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    187          {
   \                     u8g_pbxh24_Set8Pixel: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
    188            register uint8_t pixel = arg_pixel->pixel;
   \   00000008   0xF897 0x8002      LDRB     R8,[R7, #+2]
    189            u8g_uint_t dx = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
    190            u8g_uint_t dy = 0;
   \   0000000E   0x4625             MOV      R5,R4
    191            
    192            switch( arg_pixel->dir )
   \   00000010   0x78F8             LDRB     R0,[R7, #+3]
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD804             BHI.N    ??u8g_pbxh24_Set8Pixel_1
   \   00000016   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pbxh24_Set8Pixel_0:
   \   0000001A   0x02 0x19          DC8      0x2,0x19,0x1B,0x1D
   \              0x1B 0x1D    
    193            {
    194              case 0: dx++; break;
   \                     ??u8g_pbxh24_Set8Pixel_2: (+1)
   \   0000001E   0x2401             MOVS     R4,#+1
    195              case 1: dy++; break;
    196              case 2: dx--; break;
    197              case 3: dy--; break;
    198            }
    199            
    200            do
    201            {
    202              if ( pixel & 128 )
   \                     ??u8g_pbxh24_Set8Pixel_1: (+1)
   \   00000020   0xEA5F 0x6008      LSLS     R0,R8,#+24
   \   00000024   0xD504             BPL.N    ??u8g_pbxh24_Set8Pixel_3
    203                u8g_pbxh24_SetTPixel(b, arg_pixel, 4);
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       u8g_pbxh24_SetTPixel
    204              arg_pixel->x += dx;
   \                     ??u8g_pbxh24_Set8Pixel_3: (+1)
   \   00000030   0x7838             LDRB     R0,[R7, #+0]
   \   00000032   0x1820             ADDS     R0,R4,R0
   \   00000034   0x7038             STRB     R0,[R7, #+0]
    205              arg_pixel->y += dy;
   \   00000036   0x7878             LDRB     R0,[R7, #+1]
   \   00000038   0x1828             ADDS     R0,R5,R0
   \   0000003A   0x7078             STRB     R0,[R7, #+1]
    206              pixel <<= 1;
   \   0000003C   0xEA4F 0x0848      LSL      R8,R8,#+1
    207            } while( pixel != 0  );  
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD1EB             BNE.N    ??u8g_pbxh24_Set8Pixel_1
    208          }
   \   00000048   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_pbxh24_Set8Pixel_4: (+1)
   \   0000004C   0x2501             MOVS     R5,#+1
   \   0000004E   0xE7E7             B.N      ??u8g_pbxh24_Set8Pixel_1
   \                     ??u8g_pbxh24_Set8Pixel_5: (+1)
   \   00000050   0x24FF             MOVS     R4,#+255
   \   00000052   0xE7E5             B.N      ??u8g_pbxh24_Set8Pixel_1
   \                     ??u8g_pbxh24_Set8Pixel_6: (+1)
   \   00000054   0x25FF             MOVS     R5,#+255
   \   00000056   0xE7E3             B.N      ??u8g_pbxh24_Set8Pixel_1
    209          

   \                                 In section .text, align 4, keep-with-next
    210          void u8g_pbxh24_Set4TPixel(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    211          {
   \                     u8g_pbxh24_Set4TPixel: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    212            register uint8_t pixel = arg_pixel->pixel;
   \   00000008   0x78AE             LDRB     R6,[R5, #+2]
    213            u8g_uint_t dx = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    214            u8g_uint_t dy = 0;
   \   0000000C   0x46B8             MOV      R8,R7
    215            
    216            switch( arg_pixel->dir )
   \   0000000E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD804             BHI.N    ??u8g_pbxh24_Set4TPixel_1
   \   00000014   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pbxh24_Set4TPixel_0:
   \   00000018   0x02 0x17          DC8      0x2,0x17,0x1A,0x1C
   \              0x1A 0x1C    
    217            {
    218              case 0: dx++; break;
   \                     ??u8g_pbxh24_Set4TPixel_2: (+1)
   \   0000001C   0x2701             MOVS     R7,#+1
    219              case 1: dy++; break;
    220              case 2: dx--; break;
    221              case 3: dy--; break;
    222            }
    223            
    224            do
    225            {
    226              u8g_pbxh24_SetTPixel(b, arg_pixel, pixel >> 6);
   \                     ??u8g_pbxh24_Set4TPixel_1: (+1)
   \   0000001E   0x4632             MOV      R2,R6
   \   00000020   0xB2D2             UXTB     R2,R2
   \   00000022   0x0992             LSRS     R2,R2,#+6
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       u8g_pbxh24_SetTPixel
    227              arg_pixel->x += dx;
   \   0000002C   0x7828             LDRB     R0,[R5, #+0]
   \   0000002E   0x1838             ADDS     R0,R7,R0
   \   00000030   0x7028             STRB     R0,[R5, #+0]
    228              arg_pixel->y += dy;
   \   00000032   0x7868             LDRB     R0,[R5, #+1]
   \   00000034   0x4440             ADD      R0,R8,R0
   \   00000036   0x7068             STRB     R0,[R5, #+1]
    229              pixel <<= 2;
   \   00000038   0x00B6             LSLS     R6,R6,#+2
    230            } while( pixel != 0  );  
   \   0000003A   0x4630             MOV      R0,R6
   \   0000003C   0xB2C0             UXTB     R0,R0
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1ED             BNE.N    ??u8g_pbxh24_Set4TPixel_1
    231          }
   \   00000042   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_pbxh24_Set4TPixel_3: (+1)
   \   00000046   0xF04F 0x0801      MOV      R8,#+1
   \   0000004A   0xE7E8             B.N      ??u8g_pbxh24_Set4TPixel_1
   \                     ??u8g_pbxh24_Set4TPixel_4: (+1)
   \   0000004C   0x27FF             MOVS     R7,#+255
   \   0000004E   0xE7E6             B.N      ??u8g_pbxh24_Set4TPixel_1
   \                     ??u8g_pbxh24_Set4TPixel_5: (+1)
   \   00000050   0xF04F 0x08FF      MOV      R8,#+255
   \   00000054   0xE7E3             B.N      ??u8g_pbxh24_Set4TPixel_1
    232          
    233          

   \                                 In section .text, align 2, keep-with-next
    234          uint8_t u8g_dev_pbxh24_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    235          {
   \                     u8g_dev_pbxh24_base_fn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x461C             MOV      R4,R3
    236            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000004   0x684D             LDR      R5,[R1, #+4]
    237            switch(msg)
   \   00000006   0x2A14             CMP      R2,#+20
   \   00000008   0xD031             BEQ.N    ??u8g_dev_pbxh24_base_fn_0
   \   0000000A   0x2A15             CMP      R2,#+21
   \   0000000C   0xD036             BEQ.N    ??u8g_dev_pbxh24_base_fn_1
   \   0000000E   0x2A17             CMP      R2,#+23
   \   00000010   0xD03F             BEQ.N    ??u8g_dev_pbxh24_base_fn_2
   \   00000012   0x2A2C             CMP      R2,#+44
   \   00000014   0xD023             BEQ.N    ??u8g_dev_pbxh24_base_fn_3
   \   00000016   0x2A2D             CMP      R2,#+45
   \   00000018   0xD01C             BEQ.N    ??u8g_dev_pbxh24_base_fn_4
   \   0000001A   0x2A32             CMP      R2,#+50
   \   0000001C   0xD014             BEQ.N    ??u8g_dev_pbxh24_base_fn_5
   \   0000001E   0x2A3B             CMP      R2,#+59
   \   00000020   0xD006             BEQ.N    ??u8g_dev_pbxh24_base_fn_6
   \   00000022   0x2A46             CMP      R2,#+70
   \   00000024   0xD03A             BEQ.N    ??u8g_dev_pbxh24_base_fn_7
   \   00000026   0x2A47             CMP      R2,#+71
   \   00000028   0xD03B             BEQ.N    ??u8g_dev_pbxh24_base_fn_8
   \   0000002A   0x2A48             CMP      R2,#+72
   \   0000002C   0xD03C             BEQ.N    ??u8g_dev_pbxh24_base_fn_9
   \   0000002E   0xE009             B.N      ??u8g_dev_pbxh24_base_fn_10
    238            {
    239              case U8G_DEV_MSG_SET_8PIXEL:
    240                if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
   \                     ??u8g_dev_pbxh24_base_fn_6: (+1)
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       u8g_pb_Is8PixelVisible
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD003             BEQ.N    ??u8g_dev_pbxh24_base_fn_10
    241                  u8g_pbxh24_Set8Pixel(pb, (u8g_dev_arg_pixel_t *)arg);
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       u8g_pbxh24_Set8Pixel
    242                break;
    243              case U8G_DEV_MSG_SET_PIXEL:
    244                u8g_pbxh24_SetTPixel(pb, (u8g_dev_arg_pixel_t *)arg, 4);
    245                break;
    246              case U8G_DEV_MSG_SET_4TPIXEL:
    247                u8g_pbxh24_Set4TPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    248                break;
    249              case U8G_DEV_MSG_SET_TPIXEL:
    250                u8g_pbxh24_SetTPixel(pb, (u8g_dev_arg_pixel_t *)arg, ((u8g_dev_arg_pixel_t *)arg)->pixel&3);
    251                break;
    252              case U8G_DEV_MSG_INIT:
    253                break;
    254              case U8G_DEV_MSG_STOP:
    255                break;
    256              case U8G_DEV_MSG_PAGE_FIRST:
    257                u8g_pbxh24_Clear(pb);
    258                u8g_page_First(&(pb->p));
    259                break;
    260              case U8G_DEV_MSG_PAGE_NEXT:
    261                if ( u8g_page_Next(&(pb->p)) == 0 )
    262                  return 0;
    263                u8g_pbxh24_Clear(pb);
    264                break;
    265          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    266              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    267                return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
    268          #endif
    269              case U8G_DEV_MSG_GET_PAGE_BOX:
    270                u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    271                break;
    272              case U8G_DEV_MSG_GET_WIDTH:
    273                *((u8g_uint_t *)arg) = pb->width;
    274                break;
    275              case U8G_DEV_MSG_GET_HEIGHT:
    276                *((u8g_uint_t *)arg) = pb->p.total_height;
    277                break;
    278              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    279                break;
    280              case U8G_DEV_MSG_SET_XY_CB:
    281                break;
    282              case U8G_DEV_MSG_GET_MODE:
    283                return U8G_MODE_TRUECOLOR;
    284            }
    285            return 1;
   \                     ??u8g_dev_pbxh24_base_fn_10: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??u8g_dev_pbxh24_base_fn_5: (+1)
   \   00000048   0x2204             MOVS     R2,#+4
   \   0000004A   0x4621             MOV      R1,R4
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       u8g_pbxh24_SetTPixel
   \   00000052   0xE7F7             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_4: (+1)
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       u8g_pbxh24_Set4TPixel
   \   0000005C   0xE7F2             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_3: (+1)
   \   0000005E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000060   0xF002 0x0203      AND      R2,R2,#0x3
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       u8g_pbxh24_SetTPixel
   \   0000006C   0xE7EA             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_0: (+1)
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       u8g_pbxh24_Clear
   \   00000074   0x4628             MOV      R0,R5
   \   00000076   0x.... 0x....      BL       u8g_page_First
   \   0000007A   0xE7E3             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_1: (+1)
   \   0000007C   0x4628             MOV      R0,R5
   \   0000007E   0x.... 0x....      BL       u8g_page_Next
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD101             BNE.N    ??u8g_dev_pbxh24_base_fn_11
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??u8g_dev_pbxh24_base_fn_11: (+1)
   \   0000008A   0x4628             MOV      R0,R5
   \   0000008C   0x.... 0x....      BL       u8g_pbxh24_Clear
   \   00000090   0xE7D8             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_2: (+1)
   \   00000092   0x4621             MOV      R1,R4
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0x.... 0x....      BL       u8g_pb_GetPageBox
   \   0000009A   0xE7D3             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_7: (+1)
   \   0000009C   0x7968             LDRB     R0,[R5, #+5]
   \   0000009E   0x7020             STRB     R0,[R4, #+0]
   \   000000A0   0xE7D0             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_8: (+1)
   \   000000A2   0x7868             LDRB     R0,[R5, #+1]
   \   000000A4   0x7020             STRB     R0,[R4, #+0]
   \   000000A6   0xE7CD             B.N      ??u8g_dev_pbxh24_base_fn_10
   \                     ??u8g_dev_pbxh24_base_fn_9: (+1)
   \   000000A8   0x2038             MOVS     R0,#+56
   \   000000AA   0xBD32             POP      {R1,R4,R5,PC}
    286          }
    287          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_dev_pbxh24_base_fn
        16   -> u8g_page_First
        16   -> u8g_page_Next
        16   -> u8g_pb_GetPageBox
        16   -> u8g_pb_Is8PixelVisible
        16   -> u8g_pbxh24_Clear
        16   -> u8g_pbxh24_Set4TPixel
        16   -> u8g_pbxh24_Set8Pixel
        16   -> u8g_pbxh24_SetTPixel
       4   u8g_pbxh24_Clear
       0   u8g_pbxh24_Init
         0   -> u8g_pbxh24_Clear
      24   u8g_pbxh24_Set4TPixel
        24   -> u8g_pbxh24_SetTPixel
      24   u8g_pbxh24_Set8Pixel
        24   -> u8g_pbxh24_SetTPixel
      24   u8g_pbxh24_SetTPixel
        24   -> u8g_pbxh24_set_tpixel
      20   u8g_pbxh24_set_tpixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     172  u8g_dev_pbxh24_base_fn
      40  u8g_pbxh24_Clear
       6  u8g_pbxh24_Init
      86  u8g_pbxh24_Set4TPixel
      88  u8g_pbxh24_Set8Pixel
      46  u8g_pbxh24_SetTPixel
     150  u8g_pbxh24_set_tpixel

 
 588 bytes in section .text
 
 588 bytes of CODE memory

Errors: none
Warnings: none
