###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_line.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4F30.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_line.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_line.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_line.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_line.c
      1          /*
      2          
      3            u8g_line.h
      4            
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2012, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34          */
     35          
     36          #include "u8g.h"
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
     39          {
   \                     u8g_DrawLine: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x468B             MOV      R11,R1
     40            u8g_uint_t tmp;
     41            u8g_uint_t x,y;
     42            u8g_uint_t dx, dy;
     43            u8g_int_t err;
     44            u8g_int_t ystep;
     45          
     46            uint8_t swapxy = 0;
   \   00000008   0x2100             MOVS     R1,#+0
     47            
     48            /* no BBX intersection check at the moment, should be added... */
     49          
     50            if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
   \   0000000A   0x4618             MOV      R0,R3
   \   0000000C   0x465D             MOV      R5,R11
   \   0000000E   0x42A8             CMP      R0,R5
   \   00000010   0xD203             BCS.N    ??u8g_DrawLine_0
   \   00000012   0xEBAB 0x0503      SUB      R5,R11,R3
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0xE002             B.N      ??u8g_DrawLine_1
   \                     ??u8g_DrawLine_0: (+1)
   \   0000001A   0xEBA3 0x050B      SUB      R5,R3,R11
   \   0000001E   0xB2ED             UXTB     R5,R5
   \                     ??u8g_DrawLine_1: (+1)
   \   00000020   0xF8DD 0xC028      LDR      R12,[SP, #+40]
     51            if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
   \   00000024   0x4660             MOV      R0,R12
   \   00000026   0x4616             MOV      R6,R2
   \   00000028   0x42B0             CMP      R0,R6
   \   0000002A   0xD203             BCS.N    ??u8g_DrawLine_2
   \   0000002C   0xEBA2 0x060C      SUB      R6,R2,R12
   \   00000030   0xB2F6             UXTB     R6,R6
   \   00000032   0xE002             B.N      ??u8g_DrawLine_3
   \                     ??u8g_DrawLine_2: (+1)
   \   00000034   0xEBAC 0x0602      SUB      R6,R12,R2
   \   00000038   0xB2F6             UXTB     R6,R6
     52          
     53            if ( dy > dx ) 
   \                     ??u8g_DrawLine_3: (+1)
   \   0000003A   0x42B5             CMP      R5,R6
   \   0000003C   0xDA09             BGE.N    ??u8g_DrawLine_4
     54            {
     55              swapxy = 1;
   \   0000003E   0x2101             MOVS     R1,#+1
     56              tmp = dx; dx =dy; dy = tmp;
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x4635             MOV      R5,R6
   \   00000044   0x4606             MOV      R6,R0
     57              tmp = x1; x1 =y1; y1 = tmp;
   \   00000046   0x4658             MOV      R0,R11
   \   00000048   0x4693             MOV      R11,R2
   \   0000004A   0x4602             MOV      R2,R0
     58              tmp = x2; x2 =y2; y2 = tmp;
   \   0000004C   0x4618             MOV      R0,R3
   \   0000004E   0x4663             MOV      R3,R12
   \   00000050   0x4684             MOV      R12,R0
     59            }
     60            if ( x1 > x2 ) 
   \                     ??u8g_DrawLine_4: (+1)
   \   00000052   0x4618             MOV      R0,R3
   \   00000054   0x465F             MOV      R7,R11
   \   00000056   0x42B8             CMP      R0,R7
   \   00000058   0xD205             BCS.N    ??u8g_DrawLine_5
     61            {
     62              tmp = x1; x1 =x2; x2 = tmp;
   \   0000005A   0x4658             MOV      R0,R11
   \   0000005C   0x469B             MOV      R11,R3
   \   0000005E   0x4603             MOV      R3,R0
     63              tmp = y1; y1 =y2; y2 = tmp;
   \   00000060   0x4610             MOV      R0,R2
   \   00000062   0x4662             MOV      R2,R12
   \   00000064   0x4684             MOV      R12,R0
     64            }
     65            err = dx >> 1;
   \                     ??u8g_DrawLine_5: (+1)
   \   00000066   0x462F             MOV      R7,R5
   \   00000068   0x107F             ASRS     R7,R7,#+1
     66            if ( y2 > y1 ) ystep = 1; else ystep = -1;
   \   0000006A   0x4610             MOV      R0,R2
   \   0000006C   0x4560             CMP      R0,R12
   \   0000006E   0xD202             BCS.N    ??u8g_DrawLine_6
   \   00000070   0xF04F 0x0801      MOV      R8,#+1
   \   00000074   0xE001             B.N      ??u8g_DrawLine_7
   \                     ??u8g_DrawLine_6: (+1)
   \   00000076   0xF04F 0x38FF      MOV      R8,#-1
   \                     ??u8g_DrawLine_7: (+1)
   \   0000007A   0x46A2             MOV      R10,R4
     67            y = y1;
   \   0000007C   0x4691             MOV      R9,R2
     68            for( x = x1; x <= x2; x++ )
   \   0000007E   0xF88D 0x3000      STRB     R3,[SP, #+0]
   \   00000082   0x460C             MOV      R4,R1
   \                     ??u8g_DrawLine_8: (+1)
   \   00000084   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000088   0x4659             MOV      R1,R11
   \   0000008A   0xB2C9             UXTB     R1,R1
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD319             BCC.N    ??u8g_DrawLine_9
     69            {
     70              if ( swapxy == 0 ) 
   \   00000090   0x2C00             CMP      R4,#+0
   \   00000092   0xD007             BEQ.N    ??u8g_DrawLine_10
     71                u8g_DrawPixel(u8g, x, y); 
     72              else 
     73                u8g_DrawPixel(u8g, y, x); 
   \   00000094   0x465A             MOV      R2,R11
   \   00000096   0xB2D2             UXTB     R2,R2
   \   00000098   0x4649             MOV      R1,R9
   \   0000009A   0xB2C9             UXTB     R1,R1
   \   0000009C   0x4650             MOV      R0,R10
   \   0000009E   0x.... 0x....      BL       u8g_DrawPixel
   \   000000A2   0xE006             B.N      ??u8g_DrawLine_11
   \                     ??u8g_DrawLine_10: (+1)
   \   000000A4   0x464A             MOV      R2,R9
   \   000000A6   0xB2D2             UXTB     R2,R2
   \   000000A8   0x4659             MOV      R1,R11
   \   000000AA   0xB2C9             UXTB     R1,R1
   \   000000AC   0x4650             MOV      R0,R10
   \   000000AE   0x.... 0x....      BL       u8g_DrawPixel
     74              err -= (uint8_t)dy;
   \                     ??u8g_DrawLine_11: (+1)
   \   000000B2   0x1BBF             SUBS     R7,R7,R6
   \   000000B4   0xB27F             SXTB     R7,R7
     75              if ( err < 0 ) 
   \   000000B6   0x2F00             CMP      R7,#+0
   \   000000B8   0xD501             BPL.N    ??u8g_DrawLine_12
     76              {
     77                y += (u8g_uint_t)ystep;
   \   000000BA   0x44C1             ADD      R9,R8,R9
     78                err += (u8g_uint_t)dx;
   \   000000BC   0x19EF             ADDS     R7,R5,R7
     79              }
     80            }
   \                     ??u8g_DrawLine_12: (+1)
   \   000000BE   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   000000C2   0xE7DF             B.N      ??u8g_DrawLine_8
     81          }
   \                     ??u8g_DrawLine_9: (+1)
   \   000000C4   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   u8g_DrawLine
        40   -> u8g_DrawPixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     200  u8g_DrawLine

 
 200 bytes in section .text
 
 200 bytes of CODE memory

Errors: none
Warnings: none
