###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:16
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_G29.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EWACFA.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_G29.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\ubl_G29.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\ubl_G29.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl_G29.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "MarlinConfig.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")
     24          
     25          //#if ENABLED(AUTO_BED_LEVELING_UBL)
     26          #if 1
     27            //#include "vector_3.h"
     28            //#include "qr_solve.h"
     29          
     30            #include "ubl.h"

   \                                 In section .text, align 2
   \   __interwork __softfp bool isnan(float)
   \                     _Z5isnanf: (+1)
   \        0x0   0x0040             LSLS     R0,R0,#+1
   \        0x2   0x4601             MOV      R1,R0
   \        0x4   0x1609             ASRS     R1,R1,#+24
   \        0x6   0x1C49             ADDS     R1,R1,#+1
   \        0x8   0xD001             BEQ.N    ??isnan_0
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE000             B.N      ??isnan_1
   \                     ??isnan_0: (+1)
   \        0xE   0x0200             LSLS     R0,R0,#+8
   \                     ??isnan_1: (+1)
   \       0x10   0x1E40             SUBS     R0,R0,#+1
   \       0x12   0x4180             SBCS     R0,R0,R0
   \       0x14   0x43C0             MVNS     R0,R0
   \       0x16   0x0FC0             LSRS     R0,R0,#+31
   \       0x18   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(uint8_t)
   \                     _ZN12MarlinSerial5writeEh: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x.... 0x....      BL       BSP_UartIfQueueTxData
   \        0xA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(char const *)
   \                     _ZN12MarlinSerial5writeEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xB2D2             UXTB     R2,R2
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x18   0x.... 0x....      B.W      BSP_UartIfQueueTxData

   \                                 In section .text, align 4
   \   __interwork __softfp void MarlinSerial::print(char const *)
   \                     _ZN12MarlinSerial5printEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD013             BEQ.N    ??print_1
   \       0x10   0x480A             LDR.N    R0,??print_0
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD105             BNE.N    ??print_2
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x20   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??print_2: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x.... 0x....      BL       strlen
   \       0x2A   0x4602             MOV      R2,R0
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0x2002             MOVS     R0,#+2
   \       0x30   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x34   0x.... 0x....      B.W      package_to_wifi
   \                     ??print_1: (+1)
   \       0x38   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \       0x3A   0xBF00             Nop      
   \                     ??print_0:
   \       0x3C   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 2
   \   __interwork __softfp void serial_echopair_P(char const *, uint8_t)
   \                     _Z17serial_echopair_PPKch: (+1)
   \        0x0   0x.... 0x....      B.W      _Z17serial_echopair_PPKci

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \        0x0   0x4601             MOV      R1,R0
   \        0x2   0x4805             LDR.N    R0,??serialprintPGM_0
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD102             BNE.N    ??serialprintPGM_1
   \        0xA   0x4804             LDR.N    R0,??serialprintPGM_0+0x4
   \        0xC   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??serialprintPGM_1: (+1)
   \       0x10   0x4803             LDR.N    R0,??serialprintPGM_0+0x8
   \       0x12   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc
   \       0x16   0xBF00             Nop      
   \                     ??serialprintPGM_0:
   \       0x18   0x....'....        DC32     from_wifi_flag
   \       0x1C   0x....'....        DC32     customizedSerial
   \       0x20   0x....'....        DC32     serial2

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_x(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_xERKf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4689             MOV      R9,R1

          const int8_t cx = (x - (UBL_MESH_MIN_X)) * (1.0 / (MESH_X_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",180  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \        0x6   0x4E21             LDR.N    R6,??get_cell_index_x_0
   \        0x8   0xF106 0x0460      ADD      R4,R6,#+96
   \        0xC   0xF9B4 0x0054      LDRSH    R0,[R4, #+84]
   \       0x10   0x.... 0x....      BL       __aeabi_i2f
   \       0x14   0x4607             MOV      R7,R0
   \       0x16   0x68B0             LDR      R0,[R6, #+8]
   \       0x18   0x4639             MOV      R1,R7
   \       0x1A   0x.... 0x....      BL       __aeabi_fadd
   \       0x1E   0x4680             MOV      R8,R0
   \       0x20   0x7824             LDRB     R4,[R4, #+0]
   \       0x22   0x4625             MOV      R5,R4
   \       0x24   0x1E6D             SUBS     R5,R5,#+1
   \       0x26   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x2A   0x4641             MOV      R1,R8
   \       0x2C   0x.... 0x....      BL       __aeabi_fsub
   \       0x30   0x.... 0x....      BL       __aeabi_f2d
   \       0x34   0x4682             MOV      R10,R0
   \       0x36   0x468B             MOV      R11,R1
   \       0x38   0x6970             LDR      R0,[R6, #+20]
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0x.... 0x....      BL       __aeabi_fsub
   \       0x40   0x4641             MOV      R1,R8
   \       0x42   0x.... 0x....      BL       __aeabi_fsub
   \       0x46   0x4606             MOV      R6,R0
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x.... 0x....      BL       __aeabi_i2f
   \       0x4E   0x4601             MOV      R1,R0
   \       0x50   0x4630             MOV      R0,R6
   \       0x52   0x.... 0x....      BL       __aeabi_fdiv
   \       0x56   0x.... 0x....      BL       __aeabi_f2d
   \       0x5A   0x4602             MOV      R2,R0
   \       0x5C   0x460B             MOV      R3,R1
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x490B             LDR.N    R1,??get_cell_index_x_0+0x4  ;; 0x3ff00000
   \       0x62   0x.... 0x....      BL       __aeabi_ddiv
   \       0x66   0x4652             MOV      R2,R10
   \       0x68   0x465B             MOV      R3,R11
   \       0x6A   0x.... 0x....      BL       __aeabi_dmul
   \       0x6E   0x.... 0x....      BL       __aeabi_d2iz
   \       0x72   0x4601             MOV      R1,R0
   \       0x74   0xB249             SXTB     R1,R1
   \       0x76   0x2900             CMP      R1,#+0
   \       0x78   0xD501             BPL.N    ??get_cell_index_x_1
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xE002             B.N      ??get_cell_index_x_2
   \                     ??get_cell_index_x_1: (+1)
   \       0x7E   0x428D             CMP      R5,R1
   \       0x80   0xDA00             BGE.N    ??get_cell_index_x_2
   \       0x82   0x1E60             SUBS     R0,R4,#+1
   \                     ??get_cell_index_x_2: (+1)
   \       0x84   0xB240             SXTB     R0,R0
   \       0x86   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \       0x8A   0xBF00             Nop      
   \                     ??get_cell_index_x_0:
   \       0x8C   0x....'....        DC32     mksCfg
   \       0x90   0x3FF0'0000        DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_y(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_yERKf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4689             MOV      R9,R1

          const int8_t cy = (y - (UBL_MESH_MIN_Y)) * (1.0 / (MESH_Y_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",187  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \        0x6   0x4E20             LDR.N    R6,??get_cell_index_y_0
   \        0x8   0xF896 0x4061      LDRB     R4,[R6, #+97]
   \        0xC   0x4625             MOV      R5,R4
   \        0xE   0x1E6D             SUBS     R5,R5,#+1
   \       0x10   0xF9B6 0x00B4      LDRSH    R0,[R6, #+180]
   \       0x14   0x.... 0x....      BL       __aeabi_i2f
   \       0x18   0x4607             MOV      R7,R0
   \       0x1A   0x68F0             LDR      R0,[R6, #+12]
   \       0x1C   0x4639             MOV      R1,R7
   \       0x1E   0x.... 0x....      BL       __aeabi_fadd
   \       0x22   0x4680             MOV      R8,R0
   \       0x24   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x28   0x4641             MOV      R1,R8
   \       0x2A   0x.... 0x....      BL       __aeabi_fsub
   \       0x2E   0x.... 0x....      BL       __aeabi_f2d
   \       0x32   0x4682             MOV      R10,R0
   \       0x34   0x468B             MOV      R11,R1
   \       0x36   0x69B0             LDR      R0,[R6, #+24]
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0x.... 0x....      BL       __aeabi_fsub
   \       0x3E   0x4641             MOV      R1,R8
   \       0x40   0x.... 0x....      BL       __aeabi_fsub
   \       0x44   0x4606             MOV      R6,R0
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x.... 0x....      BL       __aeabi_i2f
   \       0x4C   0x4601             MOV      R1,R0
   \       0x4E   0x4630             MOV      R0,R6
   \       0x50   0x.... 0x....      BL       __aeabi_fdiv
   \       0x54   0x.... 0x....      BL       __aeabi_f2d
   \       0x58   0x4602             MOV      R2,R0
   \       0x5A   0x460B             MOV      R3,R1
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x490B             LDR.N    R1,??get_cell_index_y_0+0x4  ;; 0x3ff00000
   \       0x60   0x.... 0x....      BL       __aeabi_ddiv
   \       0x64   0x4652             MOV      R2,R10
   \       0x66   0x465B             MOV      R3,R11
   \       0x68   0x.... 0x....      BL       __aeabi_dmul
   \       0x6C   0x.... 0x....      BL       __aeabi_d2iz
   \       0x70   0x4601             MOV      R1,R0
   \       0x72   0xB249             SXTB     R1,R1
   \       0x74   0x2900             CMP      R1,#+0
   \       0x76   0xD501             BPL.N    ??get_cell_index_y_1
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xE002             B.N      ??get_cell_index_y_2
   \                     ??get_cell_index_y_1: (+1)
   \       0x7C   0x428D             CMP      R5,R1
   \       0x7E   0xDA00             BGE.N    ??get_cell_index_y_2
   \       0x80   0x1E60             SUBS     R0,R4,#+1
   \                     ??get_cell_index_y_2: (+1)
   \       0x82   0xB240             SXTB     R0,R0
   \       0x84   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??get_cell_index_y_0:
   \       0x88   0x....'....        DC32     mksCfg
   \       0x8C   0x3FF0'0000        DC32     0x3ff00000

          const int8_t px = (x - (UBL_MESH_MIN_X) + (MESH_X_DIST) * 0.5) * (1.0 / (MESH_X_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer

          const int8_t py = (y - (UBL_MESH_MIN_Y) + (MESH_Y_DIST) * 0.5) * (1.0 / (MESH_Y_DIST));
                            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\ubl.h",200  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 2
   \   __interwork __softfp float unified_bed_leveling::calc_z0(float const &, float const &, float const &, float const &, float const &)
   \                     _ZN20unified_bed_leveling7calc_z0ERKfS1_S1_S1_S1_: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x9C06             LDR      R4,[SP, #+24]
   \        0x8   0x9807             LDR      R0,[SP, #+28]
   \        0xA   0x6816             LDR      R6,[R2, #+0]
   \        0xC   0x681F             LDR      R7,[R3, #+0]
   \        0xE   0x6800             LDR      R0,[R0, #+0]
   \       0x10   0x4639             MOV      R1,R7
   \       0x12   0x.... 0x....      BL       __aeabi_fsub
   \       0x16   0x4680             MOV      R8,R0
   \       0x18   0x6828             LDR      R0,[R5, #+0]
   \       0x1A   0x4631             MOV      R1,R6
   \       0x1C   0x.... 0x....      BL       __aeabi_fsub
   \       0x20   0x4641             MOV      R1,R8
   \       0x22   0x.... 0x....      BL       __aeabi_fmul
   \       0x26   0x4605             MOV      R5,R0
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x4631             MOV      R1,R6
   \       0x2C   0x.... 0x....      BL       __aeabi_fsub
   \       0x30   0x4601             MOV      R1,R0
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x.... 0x....      BL       __aeabi_fdiv
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \       0x3E   0x.... 0x....      B.W      __aeabi_fadd

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::get_z_correction(float const &, float const &)
   \                     _ZN20unified_bed_leveling16get_z_correctionERKfS1_: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4683             MOV      R11,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0x484E             LDR.N    R0,??get_z_correction_0
   \        0xE   0x6806             LDR      R6,[R0, #+0]
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x4631             MOV      R1,R6
   \       0x14   0x.... 0x....      BL       __aeabi_fsub
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0x4669             MOV      R1,SP
   \       0x1C   0x4658             MOV      R0,R11
   \       0x1E   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \       0x22   0x4682             MOV      R10,R0
   \       0x24   0x4848             LDR.N    R0,??get_z_correction_0
   \       0x26   0x6840             LDR      R0,[R0, #+4]
   \       0x28   0x9005             STR      R0,[SP, #+20]
   \       0x2A   0x6828             LDR      R0,[R5, #+0]
   \       0x2C   0x9905             LDR      R1,[SP, #+20]
   \       0x2E   0x.... 0x....      BL       __aeabi_fsub
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x4669             MOV      R1,SP
   \       0x36   0x4658             MOV      R0,R11
   \       0x38   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \       0x3C   0x4607             MOV      R7,R0
   \       0x3E   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x42   0xD40A             BMI.N    ??get_z_correction_1
   \       0x44   0x4841             LDR.N    R0,??get_z_correction_0+0x4
   \       0x46   0x7801             LDRB     R1,[R0, #+0]
   \       0x48   0x1E49             SUBS     R1,R1,#+1
   \       0x4A   0x4551             CMP      R1,R10
   \       0x4C   0xDB05             BLT.N    ??get_z_correction_1
   \       0x4E   0x2F00             CMP      R7,#+0
   \       0x50   0xD403             BMI.N    ??get_z_correction_1
   \       0x52   0x7840             LDRB     R0,[R0, #+1]
   \       0x54   0x1E40             SUBS     R0,R0,#+1
   \       0x56   0x42B8             CMP      R0,R7
   \       0x58   0xDA2A             BGE.N    ??get_z_correction_2
   \                     ??get_z_correction_1: (+1)
   \       0x5A   0x6821             LDR      R1,[R4, #+0]
   \       0x5C   0x483C             LDR.N    R0,??get_z_correction_0+0x8
   \       0x5E   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \       0x62   0x6829             LDR      R1,[R5, #+0]
   \       0x64   0x483B             LDR.N    R0,??get_z_correction_0+0xC
   \       0x66   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \       0x6A   0x4C3B             LDR.N    R4,??get_z_correction_0+0x10
   \       0x6C   0x7820             LDRB     R0,[R4, #+0]
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD104             BNE.N    ??get_z_correction_3
   \       0x72   0x2129             MOVS     R1,#+41
   \       0x74   0x4839             LDR.N    R0,??get_z_correction_0+0x14
   \       0x76   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x7A   0xE004             B.N      ??get_z_correction_4
   \                     ??get_z_correction_3: (+1)
   \       0x7C   0x2200             MOVS     R2,#+0
   \       0x7E   0x2129             MOVS     R1,#+41
   \       0x80   0x4837             LDR.N    R0,??get_z_correction_0+0x18
   \       0x82   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??get_z_correction_4: (+1)
   \       0x86   0x7820             LDRB     R0,[R4, #+0]
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD104             BNE.N    ??get_z_correction_5
   \       0x8C   0x210A             MOVS     R1,#+10
   \       0x8E   0x4833             LDR.N    R0,??get_z_correction_0+0x14
   \       0x90   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x94   0xE004             B.N      ??get_z_correction_6
   \                     ??get_z_correction_5: (+1)
   \       0x96   0x2200             MOVS     R2,#+0
   \       0x98   0x210A             MOVS     R1,#+10
   \       0x9A   0x4831             LDR.N    R0,??get_z_correction_0+0x18
   \       0x9C   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??get_z_correction_6: (+1)
   \       0xA0   0x4930             LDR.N    R1,??get_z_correction_0+0x1C
   \       0xA2   0x4831             LDR.N    R0,??get_z_correction_0+0x20
   \       0xA4   0x.... 0x....      BL       strcpy
   \       0xA8   0x.... 0x....      BL       _Z18lcd_quick_feedbackv
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0xE047             B.N      ??get_z_correction_7
   \                     ??get_z_correction_2: (+1)
   \       0xB0   0x6820             LDR      R0,[R4, #+0]
   \       0xB2   0x4631             MOV      R1,R6
   \       0xB4   0x.... 0x....      BL       __aeabi_fsub
   \       0xB8   0x9002             STR      R0,[SP, #+8]
   \       0xBA   0x482C             LDR.N    R0,??get_z_correction_0+0x24
   \       0xBC   0xEB00 0x108A      ADD      R0,R0,R10, LSL #+6
   \       0xC0   0xEB00 0x0887      ADD      R8,R0,R7, LSL #+2
   \       0xC4   0x482A             LDR.N    R0,??get_z_correction_0+0x28
   \       0xC6   0x1D01             ADDS     R1,R0,#+4
   \       0xC8   0xEB01 0x098A      ADD      R9,R1,R10, LSL #+2
   \       0xCC   0xEB00 0x0A8A      ADD      R10,R0,R10, LSL #+2
   \       0xD0   0xF108 0x0040      ADD      R0,R8,#+64
   \       0xD4   0x9001             STR      R0,[SP, #+4]
   \       0xD6   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0xDA   0x4643             MOV      R3,R8
   \       0xDC   0x4652             MOV      R2,R10
   \       0xDE   0xA902             ADD      R1,SP,#+8
   \       0xE0   0x4658             MOV      R0,R11
   \       0xE2   0x.... 0x....      BL       _ZN20unified_bed_leveling7calc_z0ERKfS1_S1_S1_S1_
   \       0xE6   0x9004             STR      R0,[SP, #+16]
   \       0xE8   0x6820             LDR      R0,[R4, #+0]
   \       0xEA   0x4631             MOV      R1,R6
   \       0xEC   0x.... 0x....      BL       __aeabi_fsub
   \       0xF0   0x9002             STR      R0,[SP, #+8]
   \       0xF2   0xF108 0x0044      ADD      R0,R8,#+68
   \       0xF6   0x9001             STR      R0,[SP, #+4]
   \       0xF8   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0xFC   0xF108 0x0304      ADD      R3,R8,#+4
   \      0x100   0x4652             MOV      R2,R10
   \      0x102   0xA902             ADD      R1,SP,#+8
   \      0x104   0x4658             MOV      R0,R11
   \      0x106   0x.... 0x....      BL       _ZN20unified_bed_leveling7calc_z0ERKfS1_S1_S1_S1_
   \      0x10A   0x9003             STR      R0,[SP, #+12]
   \      0x10C   0x6828             LDR      R0,[R5, #+0]
   \      0x10E   0x9905             LDR      R1,[SP, #+20]
   \      0x110   0x.... 0x....      BL       __aeabi_fsub
   \      0x114   0x9002             STR      R0,[SP, #+8]
   \      0x116   0x4817             LDR.N    R0,??get_z_correction_0+0x2C
   \      0x118   0xA903             ADD      R1,SP,#+12
   \      0x11A   0x9101             STR      R1,[SP, #+4]
   \      0x11C   0x1D01             ADDS     R1,R0,#+4
   \      0x11E   0xEB01 0x0187      ADD      R1,R1,R7, LSL #+2
   \      0x122   0x9100             STR      R1,[SP, #+0]
   \      0x124   0xAB04             ADD      R3,SP,#+16
   \      0x126   0xEB00 0x0287      ADD      R2,R0,R7, LSL #+2
   \      0x12A   0xA902             ADD      R1,SP,#+8
   \      0x12C   0x4658             MOV      R0,R11
   \      0x12E   0x.... 0x....      BL       _ZN20unified_bed_leveling7calc_z0ERKfS1_S1_S1_S1_
   \      0x132   0x4604             MOV      R4,R0
   \      0x134   0x.... 0x....      BL       _Z5isnanf
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xD000             BEQ.N    ??get_z_correction_8
   \      0x13C   0x2400             MOVS     R4,#+0
   \                     ??get_z_correction_8: (+1)
   \      0x13E   0x4620             MOV      R0,R4
   \                     ??get_z_correction_7: (+1)
   \      0x140   0xB007             ADD      SP,SP,#+28
   \      0x142   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \      0x146   0xBF00             Nop      
   \                     ??get_z_correction_0:
   \      0x148   0x....'....        DC32     workspace_offset
   \      0x14C   0x....'....        DC32     mksCfg+0x60
   \      0x150   0x....'....        DC32     _ZZN20unified_bed_leveling16get_z_correctionERKfS1_Es
   \      0x154   0x....'....        DC32     _ZZN20unified_bed_leveling16get_z_correctionERKfS1_Es_0
   \      0x158   0x....'....        DC32     from_wifi_flag
   \      0x15C   0x....'....        DC32     customizedSerial
   \      0x160   0x....'....        DC32     serial2
   \      0x164   0x....'....        DC32     _ZZN20unified_bed_leveling16get_z_correctionERKfS1_Es_1
   \      0x168   0x....'....        DC32     lcd_status_message
   \      0x16C   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE
   \      0x170   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE
   \      0x174   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE
     31            #include "Marlin.h"
     32            #include "hex_print_routines.h"
     33            #include "configuration_store.h"
     34            #include "ultralcd.h"
     35            #include "stepper.h"
     36          
     37            #include <math.h>
     38            #include "least_squares_fit.h"
     39          
     40            extern float destination[XYZE];
     41            extern float current_position[XYZE];
     42          
     43            void lcd_return_to_status();
     44            bool lcd_clicked();
     45            void lcd_implementation_clear();
     46            void lcd_mesh_edit_setup(float initial);
     47            float lcd_mesh_edit();
     48            void lcd_z_offset_edit_setup(float);
     49            float lcd_z_offset_edit();
     50            extern float meshedit_done;
     51            extern long babysteps_done;
     52            extern float code_value_float();
     53            extern uint8_t code_value_byte();
     54            extern bool code_value_bool();
     55            extern bool code_has_value();
     56            extern float probe_pt(float x, float y, bool, int);
     57            extern bool set_probe_deployed(bool);
     58            void smart_fill_mesh();
     59          

   \                                 In section .data, align 1
     60            bool ProbeStay = true;
   \                     ProbeStay:
   \        0x0   0x01               DC8 1
     61          
     62            #define SIZE_OF_LITTLE_RAISE 0
     63            #define BIG_RAISE_NOT_NEEDED 0
     64            extern void lcd_quick_feedback();
     65          
     66            /**
     67             *   G29: Unified Bed Leveling by Roxy
     68             *
     69             *   Parameters understood by this leveling system:
     70             *
     71             *   A     Activate   Activate the Unified Bed Leveling system.
     72             *
     73             *   B #   Business   Use the 'Business Card' mode of the Manual Probe subsystem. This is invoked as
     74             *                    G29 P2 B   The mode of G29 P2 allows you to use a bussiness card or recipe card
     75             *                    as a shim that the nozzle will pinch as it is lowered. The idea is that you
     76             *                    can easily feel the nozzle getting to the same height by the amount of resistance
     77             *                    the business card exhibits to movement. You should try to achieve the same amount
     78             *                    of resistance on each probed point to facilitate accurate and repeatable measurements.
     79             *                    You should be very careful not to drive the nozzle into the bussiness card with a
     80             *                    lot of force as it is very possible to cause damage to your printer if your are
     81             *                    careless. If you use the B option with G29 P2 B you can leave the number parameter off
     82             *                    on its first use to enable measurement of the business card thickness. Subsequent usage
     83             *                    of the B parameter can have the number previously measured supplied to the command.
     84             *                    Incidently, you are much better off using something like a Spark Gap feeler gauge than
     85             *                    something that compresses like a Business Card.
     86             *
     87             *   C     Continue   Continue, Constant, Current Location. This is not a primary command. C is used to
     88             *                    further refine the behaviour of several other commands. Issuing a G29 P1 C will
     89             *                    continue the generation of a partially constructed Mesh without invalidating what has
     90             *                    been done. Issuing a G29 P2 C will tell the Manual Probe subsystem to use the current
     91             *                    location in its search for the closest unmeasured Mesh Point. When used with a G29 Z C
     92             *                    it indicates to use the current location instead of defaulting to the center of the print bed.
     93             *
     94             *   D     Disable    Disable the Unified Bed Leveling system.
     95             *
     96             *   E     Stow_probe Stow the probe after each sampled point.
     97             *
     98             *   F #   Fade   *   Fade the amount of Mesh Based Compensation over a specified height. At the
     99             *                    specified height, no correction is applied and natural printer kenimatics take over. If no
    100             *                    number is specified for the command, 10mm is assumed to be reasonable.
    101             *
    102             *   H #   Height     Specify the Height to raise the nozzle after each manual probe of the bed. The
    103             *                    default is 5mm.
    104             *
    105             *   I #   Invalidate Invalidate specified number of Mesh Points. The nozzle location is used unless
    106             *                    the X and Y parameter are used. If no number is specified, only the closest Mesh
    107             *                    point to the location is invalidated. The M parameter is available as well to produce
    108             *                    a map after the operation. This command is useful to invalidate a portion of the
    109             *                    Mesh so it can be adjusted using other tools in the Unified Bed Leveling System. When
    110             *                    attempting to invalidate an isolated bad point in the mesh, the M option will indicate
    111             *                    where the nozzle is positioned in the Mesh with (#). You can move the nozzle around on
    112             *                    the bed and use this feature to select the center of the area (or cell) you want to
    113             *                    invalidate.
    114             *
    115             *   J #   Grid   *   Perform a Grid Based Leveling of the current Mesh using a grid with n points on a side.
    116             *
    117             *   j  EEPROM Dump   This function probably goes away after debug is complete.
    118             *
    119             *   K #   Kompare    Kompare current Mesh with stored Mesh # replacing current Mesh with the result. This
    120             *                    command literally performs a diff between two Meshes.
    121             *
    122             *   L     Load   *   Load Mesh from the previously activated location in the EEPROM.
    123             *
    124             *   L #   Load   *   Load Mesh from the specified location in the EEPROM. Set this location as activated
    125             *                    for subsequent Load and Store operations.
    126             *
    127             *   O     Map   *    Display the Mesh Map Topology.
    128             *                    The parameter can be specified alone (ie. G29 O) or in combination with many of the
    129             *                    other commands. The Mesh Map option works with all of the Phase
    130             *                    commands (ie. G29 P4 R 5 X 50 Y100 C -.1 O)  The Map parameter can also of a Map Type
    131             *                    specified.  A map type of 0 is the default is user readable.   A map type of 1 can
    132             *                    be specified and is suitable to Cut & Paste into Excel to allow graphing of the user's
    133             *                    mesh.
    134             *
    135             *   The P or Phase commands are used for the bulk of the work to setup a Mesh. In general, your Mesh will
    136             *   start off being initialized with a G29 P0 or a G29 P1. Further refinement of the Mesh happens with
    137             *   each additional Phase that processes it.
    138             *
    139             *   P0    Phase 0    Zero Mesh Data and turn off the Mesh Compensation System. This reverts the
    140             *                    3D Printer to the same state it was in before the Unified Bed Leveling Compensation
    141             *                    was turned on. Setting the entire Mesh to Zero is a special case that allows
    142             *                    a subsequent G or T leveling operation for backward compatibility.
    143             *
    144             *   P1    Phase 1    Invalidate entire Mesh and continue with automatic generation of the Mesh data using
    145             *                    the Z-Probe. Depending upon the values of DELTA_PROBEABLE_RADIUS and
    146             *                    DELTA_PRINTABLE_RADIUS some area of the bed will not have Mesh Data automatically
    147             *                    generated. This will be handled in Phase 2. If the Phase 1 command is given the
    148             *                    C (Continue) parameter it does not invalidate the Mesh prior to automatically
    149             *                    probing needed locations. This allows you to invalidate portions of the Mesh but still
    150             *                    use the automatic probing capabilities of the Unified Bed Leveling System. An X and Y
    151             *                    parameter can be given to prioritize where the command should be trying to measure points.
    152             *                    If the X and Y parameters are not specified the current probe position is used. Phase 1
    153             *                    allows you to specify the M (Map) parameter so you can watch the generation of the Mesh.
    154             *                    Phase 1 also watches for the LCD Panel's Encoder Switch being held in a depressed state.
    155             *                    It will suspend generation of the Mesh if it sees the user request that. (This check is
    156             *                    only done between probe points. You will need to press and hold the switch until the
    157             *                    Phase 1 command can detect it.)
    158             *
    159             *   P2    Phase 2    Probe areas of the Mesh that can't be automatically handled. Phase 2 respects an H
    160             *                    parameter to control the height between Mesh points. The default height for movement
    161             *                    between Mesh points is 5mm. A smaller number can be used to make this part of the
    162             *                    calibration less time consuming. You will be running the nozzle down until it just barely
    163             *                    touches the glass. You should have the nozzle clean with no plastic obstructing your view.
    164             *                    Use caution and move slowly. It is possible to damage your printer if you are careless.
    165             *                    Note that this command will use the configuration #define SIZE_OF_LITTLE_RAISE if the
    166             *                    nozzle is moving a distance of less than BIG_RAISE_NOT_NEEDED.
    167             *
    168             *                    The H parameter can be set negative if your Mesh dips in a large area. You can press
    169             *                    and hold the LCD Panel's encoder wheel to terminate the current Phase 2 command. You
    170             *                    can then re-issue the G29 P 2 command with an H parameter that is more suitable for the
    171             *                    area you are manually probing. Note that the command tries to start you in a corner
    172             *                    of the bed where movement will be predictable. You can force the location to be used in
    173             *                    the distance calculations by using the X and Y parameters. You may find it is helpful to
    174             *                    print out a Mesh Map (G29 O) to understand where the mesh is invalidated and where
    175             *                    the nozzle will need to move in order to complete the command. The C parameter is
    176             *                    available on the Phase 2 command also and indicates the search for points to measure should
    177             *                    be done based on the current location of the nozzle.
    178             *
    179             *                    A B parameter is also available for this command and described up above. It places the
    180             *                    manual probe subsystem into Business Card mode where the thickness of a business care is
    181             *                    measured and then used to accurately set the nozzle height in all manual probing for the
    182             *                    duration of the command. (S for Shim mode would be a better parameter name, but S is needed
    183             *                    for Save or Store of the Mesh to EEPROM)  A Business card can be used, but you will have
    184             *                    better results if you use a flexible Shim that does not compress very much. That makes it
    185             *                    easier for you to get the nozzle to press with similar amounts of force against the shim so you
    186             *                    can get accurate measurements. As you are starting to touch the nozzle against the shim try
    187             *                    to get it to grasp the shim with the same force as when you measured the thickness of the
    188             *                    shim at the start of the command.
    189             *
    190             *                    Phase 2 allows the O (Map) parameter to be specified. This helps the user see the progression
    191             *                    of the Mesh being built.
    192             *
    193             *   P3    Phase 3    Fill the unpopulated regions of the Mesh with a fixed value. There are two different paths the
    194             *                    user can go down.  If the user specifies the value using the C parameter, the closest invalid
    195             *                    mesh points to the nozzle will be filled.   The user can specify a repeat count using the R
    196             *                    parameter with the C version of the command.
    197             *
    198             *                    A second version of the fill command is available if no C constant is specified.  Not
    199             *                    specifying a C constant will invoke the 'Smart Fill' algorithm.  The G29 P3 command will search
    200             *                    from the edges of the mesh inward looking for invalid mesh points.  It will look at the next
    201             *                    several mesh points to determine if the print bed is sloped up or down.  If the bed is sloped
    202             *                    upward from the invalid mesh point, it will be replaced with the value of the nearest mesh point.
    203             *                    If the bed is sloped downward from the invalid mesh point, it will be replaced with a value that
    204             *                    puts all three points in a line.   The second version of the G29 P3 command is a quick, easy and
    205             *                    usually safe way to populate the unprobed regions of your mesh so you can continue to the G26
    206             *                    Mesh Validation Pattern phase.   Please note that you are populating your mesh with unverified
    207             *                    numbers.  You should use some scrutiny and caution.
    208             *
    209             *   P4    Phase 4    Fine tune the Mesh. The Delta Mesh Compensation System assume the existance of
    210             *                    an LCD Panel. It is possible to fine tune the mesh without the use of an LCD Panel.
    211             *                    (More work and details on doing this later!)
    212             *                    The System will search for the closest Mesh Point to the nozzle. It will move the
    213             *                    nozzle to this location. The user can use the LCD Panel to carefully adjust the nozzle
    214             *                    so it is just barely touching the bed. When the user clicks the control, the System
    215             *                    will lock in that height for that point in the Mesh Compensation System.
    216             *
    217             *                    Phase 4 has several additional parameters that the user may find helpful. Phase 4
    218             *                    can be started at a specific location by specifying an X and Y parameter. Phase 4
    219             *                    can be requested to continue the adjustment of Mesh Points by using the R(epeat)
    220             *                    parameter. If the Repetition count is not specified, it is assumed the user wishes
    221             *                    to adjust the entire matrix. The nozzle is moved to the Mesh Point being edited.
    222             *                    The command can be terminated early (or after the area of interest has been edited) by
    223             *                    pressing and holding the encoder wheel until the system recognizes the exit request.
    224             *                    Phase 4's general form is G29 P4 [R # of points] [X position] [Y position]
    225             *
    226             *                    Phase 4 is intended to be used with the G26 Mesh Validation Command. Using the
    227             *                    information left on the printer's bed from the G26 command it is very straight forward
    228             *                    and easy to fine tune the Mesh. One concept that is important to remember and that
    229             *                    will make using the Phase 4 command easy to use is this:  You are editing the Mesh Points.
    230             *                    If you have too little clearance and not much plastic was extruded in an area, you want to
    231             *                    LOWER the Mesh Point at the location. If you did not get good adheasion, you want to
    232             *                    RAISE the Mesh Point at that location.
    233             *
    234             *
    235             *   P5    Phase 5    Find Mean Mesh Height and Standard Deviation. Typically, it is easier to use and
    236             *                    work with the Mesh if it is Mean Adjusted. You can specify a C parameter to
    237             *                    Correct the Mesh to a 0.00 Mean Height. Adding a C parameter will automatically
    238             *                    execute a G29 P6 C <mean height>.
    239             *
    240             *   P6    Phase 6    Shift Mesh height. The entire Mesh's height is adjusted by the height specified
    241             *                    with the C parameter. Being able to adjust the height of a Mesh is useful tool. It
    242             *                    can be used to compensate for poorly calibrated Z-Probes and other errors. Ideally,
    243             *                    you should have the Mesh adjusted for a Mean Height of 0.00 and the Z-Probe measuring
    244             *                    0.000 at the Z Home location.
    245             *
    246             *   Q     Test   *   Load specified Test Pattern to assist in checking correct operation of system. This
    247             *                    command is not anticipated to be of much value to the typical user. It is intended
    248             *                    for developers to help them verify correct operation of the Unified Bed Leveling System.
    249             *
    250             *   R #   Repeat     Repeat this command the specified number of times.  If no number is specified the
    251             *                    command will be repeated GRID_MAX_POINTS_X * GRID_MAX_POINTS_Y times.
    252             *
    253             *   S     Store      Store the current Mesh in the Activated area of the EEPROM. It will also store the
    254             *                    current state of the Unified Bed Leveling system in the EEPROM.
    255             *
    256             *   S #   Store      Store the current Mesh at the specified location in EEPROM. Activate this location
    257             *                    for subsequent Load and Store operations. Valid storage slot numbers begin at 0 and
    258             *                    extend to a limit related to the available EEPROM storage.
    259             *
    260             *   S -1  Store      Store the current Mesh as a print out that is suitable to be feed back into the system
    261             *                    at a later date. The GCode output can be saved and later replayed by the host software
    262             *                    to reconstruct the current mesh on another machine.
    263             *
    264             *   T     3-Point    Perform a 3 Point Bed Leveling on the current Mesh
    265             *
    266             *   U     Unlevel    Perform a probe of the outer perimeter to assist in physically leveling unlevel beds.
    267             *                    Only used for G29 P1 O U   It will speed up the probing of the edge of the bed.  This
    268             *                    is useful when the entire bed does not need to be probed because it will be adjusted.
    269             *
    270             *   W     What?      Display valuable data the Unified Bed Leveling System knows.
    271             *
    272             *   X #   *      *   X Location for this line of commands
    273             *
    274             *   Y #   *      *   Y Location for this line of commands
    275             *
    276             *   Z     Zero   *   Probes to set the Z Height of the nozzle. The entire Mesh can be raised or lowered
    277             *                    by just doing a G29 Z
    278             *
    279             *   Z #   Zero   *   The entire Mesh can be raised or lowered to conform with the specified difference.
    280             *                    zprobe_zoffset is added to the calculation.
    281             *
    282             *
    283             *   Release Notes:
    284             *   You MUST do M502, M500 to initialize the storage. Failure to do this will cause all
    285             *   kinds of problems. Enabling EEPROM Storage is highly recommended. With EEPROM Storage
    286             *   of the mesh, you are limited to 3-Point and Grid Leveling. (G29 P0 T and G29 P0 G
    287             *   respectively.)
    288             *
    289             *   When you do a G28 and then a G29 P1 to automatically build your first mesh, you are going to notice
    290             *   the Unified Bed Leveling probes points further and further away from the starting location. (The
    291             *   starting location defaults to the center of the bed.)   The original Grid and Mesh leveling used
    292             *   a Zig Zag pattern. The new pattern is better, especially for people with Delta printers. This
    293             *   allows you to get the center area of the Mesh populated (and edited) quicker. This allows you to
    294             *   perform a small print and check out your settings quicker. You do not need to populate the
    295             *   entire mesh to use it. (You don't want to spend a lot of time generating a mesh only to realize
    296             *   you don't have the resolution or zprobe_zoffset set correctly. The Mesh generation
    297             *   gathers points closest to where the nozzle is located unless you specify an (X,Y) coordinate pair.
    298             *
    299             *   The Unified Bed Leveling uses a lot of EEPROM storage to hold its data. And it takes some effort
    300             *   to get this Mesh data correct for a user's printer. We do not want this data destroyed as
    301             *   new versions of Marlin add or subtract to the items stored in EEPROM. So, for the benefit of
    302             *   the users, we store the Mesh data at the end of the EEPROM and do not keep it contiguous with the
    303             *   other data stored in the EEPROM. (For sure the developers are going to complain about this, but
    304             *   this is going to be helpful to the users!)
    305             *
    306             *   The foundation of this Bed Leveling System is built on Epatel's Mesh Bed Leveling code. A big
    307             *   'Thanks!' to him and the creators of 3-Point and Grid Based leveling. Combining their contributions
    308             *   we now have the functionality and features of all three systems combined.
    309             */
    310          
    311          
    312            #define USE_NOZZLE_AS_REFERENCE 0
    313            #define USE_PROBE_AS_REFERENCE 1
    314          
    315            // The simple parameter flags and values are 'static' so parameter parsing can be in a support routine.

   \                                 In section .bss, align 4
    316            static int g29_verbose_level, phase_value, repetition_cnt,
    317                       storage_slot = 0, map_type, grid_size;
    318            static bool repeat_flag, c_flag, x_flag, y_flag;
   \                     repeat_flag:
   \        0x0                      DS8 1
   \        0x1                      DS8 1
   \        0x2                      DS8 1
   \        0x3                      DS8 1
   \        0x4                      DS8 4
   \        0x8                      DS8 4
   \        0xC                      DS8 4
   \       0x10                      DS8 4
   \       0x14                      DS8 4
   \       0x18                      DS8 4
   \       0x1C                      DS8 4
   \       0x20                      DS8 4
   \       0x24                      DS8 4
   \       0x28                      DS8 4
   \       0x2C                      DS8 4
    319            static float x_pos, y_pos, measured_z, card_thickness = 0.0, ubl_constant = 0.0;
    320          
    321              extern void lcd_setstatus(const char* message, const bool persist);
    322              extern void lcd_setstatuspgm(const char* message, const uint8_t level);
    323          
    324          //  void __attribute__((optimize("O0"))) gcode_G29() {

   \                                 In section .text, align 4, keep-with-next
    325            void gcode_G29_UBL() {
   \                     _Z13gcode_G29_UBLv: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
    326          
    327          
    328              if (ubl.eeprom_start < 0) {
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable110_2
   \        0xA   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD509             BPL.N    ??gcode_G29_UBL_1
    329                SERIAL_PROTOCOLLNPGM("?You need to enable your EEPROM and initialize it");
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable110_3
   \       0x16   0x.... 0x....      BL       _Z14serialprintPGMPKc
    330                SERIAL_PROTOCOLLNPGM("with M502, M500, M501 in that order.\n");
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable110_4
   \       0x1E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    331                return;
   \       0x22   0xF000 0xBDA4      B.W      ??gcode_G29_UBL_2
    332              }
    333          
    334              if (!code_seen('N') && axis_unhomed_error(true, true, true))  // Don't allow auto-leveling without homing first
   \                     ??gcode_G29_UBL_1: (+1)
   \       0x26   0x204E             MOVS     R0,#+78
   \       0x28   0x.... 0x....      BL       _Z9code_seenc
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD108             BNE.N    ??gcode_G29_UBL_3
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x4611             MOV      R1,R2
   \       0x34   0x4608             MOV      R0,R1
   \       0x36   0x.... 0x....      BL       _Z18axis_unhomed_errorbbb
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD001             BEQ.N    ??gcode_G29_UBL_3
    335                home_all_axes();
   \       0x3E   0x.... 0x....      BL       _Z13home_all_axesv
    336          
    337              if (g29_parameter_parsing()) return; // abort if parsing the simple parameters causes a problem,
   \                     ??gcode_G29_UBL_3: (+1)
   \       0x42   0x.... 0x....      BL       _Z21g29_parameter_parsingv
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xF040 0x8591      BNE.W    ??gcode_G29_UBL_2
    338          
    339              // Invalidate Mesh Points. This command is a little bit asymetrical because
    340              // it directly specifies the repetition count and does not use the 'R' parameter.
    341              if (code_seen('I')) {
   \       0x4C   0x.... 0x....      LDR.W    R9,??DataTable110_5
   \       0x50   0x2049             MOVS     R0,#+73
   \       0x52   0x.... 0x....      BL       _Z9code_seenc
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD03F             BEQ.N    ??gcode_G29_UBL_4
    342                uint8_t cnt = 0;
   \       0x5A   0x2400             MOVS     R4,#+0
    343                repetition_cnt = code_has_value() ? code_value_int() : 1;
   \       0x5C   0x.... 0x....      BL       _Z14code_has_valuev
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD004             BEQ.N    ??gcode_G29_UBL_5
   \       0x64   0x.... 0x....      BL       _Z14code_value_intv
   \       0x68   0xF8C9 0x000C      STR      R0,[R9, #+12]
   \       0x6C   0xE00E             B.N      ??gcode_G29_UBL_6
   \                     ??gcode_G29_UBL_5: (+1)
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0xF8C9 0x000C      STR      R0,[R9, #+12]
   \       0x74   0xE00A             B.N      ??gcode_G29_UBL_6
    344                while (repetition_cnt--) {
    345                  if (cnt > 20) { cnt = 0; idle(); }
    346                  const mesh_index_pair location = find_closest_mesh_point_of_type(REAL, x_pos, y_pos, USE_NOZZLE_AS_REFERENCE, NULL, false);
    347                  if (location.x_index < 0) {
    348                    SERIAL_PROTOCOLLNPGM("Entire Mesh invalidated.\n");
    349                    break;            // No more invalid Mesh Points to populate
    350                  }
    351                  ubl.z_values[location.x_index][location.y_index] = NAN;
   \                     ??gcode_G29_UBL_7: (+1)
   \       0x76   0x.... 0x....      LDR.W    R1,??DataTable110_6
   \       0x7A   0xEB01 0x1080      ADD      R0,R1,R0, LSL #+6
   \       0x7E   0xF99D 0x100D      LDRSB    R1,[SP, #+13]
   \       0x82   0xF06F 0x4200      MVN      R2,#-2147483648
   \       0x86   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
    352                  cnt++;
   \       0x8A   0x1C64             ADDS     R4,R4,#+1
   \                     ??gcode_G29_UBL_6: (+1)
   \       0x8C   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \       0x90   0x1E41             SUBS     R1,R0,#+1
   \       0x92   0xF8C9 0x100C      STR      R1,[R9, #+12]
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD01B             BEQ.N    ??gcode_G29_UBL_8
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0xB2C0             UXTB     R0,R0
   \       0x9E   0x2814             CMP      R0,#+20
   \       0xA0   0xDD03             BLE.N    ??gcode_G29_UBL_9
   \       0xA2   0x2400             MOVS     R4,#+0
   \       0xA4   0x4620             MOV      R0,R4
   \       0xA6   0x.... 0x....      BL       _Z4idleb
   \                     ??gcode_G29_UBL_9: (+1)
   \       0xAA   0x2000             MOVS     R0,#+0
   \       0xAC   0x9002             STR      R0,[SP, #+8]
   \       0xAE   0x9001             STR      R0,[SP, #+4]
   \       0xB0   0x9000             STR      R0,[SP, #+0]
   \       0xB2   0xF109 0x0320      ADD      R3,R9,#+32
   \       0xB6   0xF109 0x021C      ADD      R2,R9,#+28
   \       0xBA   0x2101             MOVS     R1,#+1
   \       0xBC   0xA803             ADD      R0,SP,#+12
   \       0xBE   0x.... 0x....      BL       _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb
   \       0xC2   0xF99D 0x000C      LDRSB    R0,[SP, #+12]
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD5D5             BPL.N    ??gcode_G29_UBL_7
   \       0xCA   0x.... 0x....      LDR.W    R0,??DataTable110_7
   \       0xCE   0x.... 0x....      BL       _Z14serialprintPGMPKc
    353                }
    354                SERIAL_PROTOCOLLNPGM("Locations invalidated.\n");
   \                     ??gcode_G29_UBL_8: (+1)
   \       0xD2   0x.... 0x....      LDR.W    R0,??DataTable110_8
   \       0xD6   0x.... 0x....      BL       _Z14serialprintPGMPKc
    355              }
    356          
    357              if (code_seen('Q')) {
   \                     ??gcode_G29_UBL_4: (+1)
   \       0xDA   0x2051             MOVS     R0,#+81
   \       0xDC   0x.... 0x....      BL       _Z9code_seenc
   \       0xE0   0x2800             CMP      R0,#+0
   \       0xE2   0xF000 0x850F      BEQ.W    ??gcode_G29_UBL_10
    358                const int test_pattern = code_has_value() ? code_value_int() : -1;
   \       0xE6   0x.... 0x....      BL       _Z14code_has_valuev
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD003             BEQ.N    ??gcode_G29_UBL_11
   \       0xEE   0x.... 0x....      BL       _Z14code_value_intv
   \       0xF2   0x4604             MOV      R4,R0
   \       0xF4   0xE001             B.N      ??gcode_G29_UBL_12
   \                     ??gcode_G29_UBL_11: (+1)
   \       0xF6   0xF04F 0x34FF      MOV      R4,#-1
    359                if (!WITHIN(test_pattern, 0, 2)) {
   \                     ??gcode_G29_UBL_12: (+1)
   \       0xFA   0x2C02             CMP      R4,#+2
   \       0xFC   0xD905             BLS.N    ??gcode_G29_UBL_13
    360                  SERIAL_PROTOCOLLNPGM("Invalid test_pattern value. (0-2)\n");
   \       0xFE   0x.... 0x....      LDR.W    R0,??DataTable110_9
   \      0x102   0x.... 0x....      BL       _Z14serialprintPGMPKc
    361                  return;
   \      0x106   0xF000 0xBD32      B.W      ??gcode_G29_UBL_2
    362                }
    363                SERIAL_PROTOCOLLNPGM("Loading test_pattern values.\n");
   \                     ??gcode_G29_UBL_13: (+1)
   \      0x10A   0x.... 0x....      LDR.W    R0,??DataTable110_10
   \      0x10E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    364                switch (test_pattern) {
   \      0x112   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0
   \      0x116   0x9001             STR      R0,[SP, #+4]
   \      0x118   0x2C00             CMP      R4,#+0
   \      0x11A   0xD006             BEQ.N    ??gcode_G29_UBL_14
   \      0x11C   0x2C02             CMP      R4,#+2
   \      0x11E   0xF000 0x80C3      BEQ.W    ??gcode_G29_UBL_15
   \      0x122   0xF0C0 0x8087      BCC.W    ??gcode_G29_UBL_16
   \      0x126   0xF000 0xBCED      B.W      ??gcode_G29_UBL_10
    365                  case 0:
    366                    for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++) {   // Create a bowl shape - similar to
   \                     ??gcode_G29_UBL_14: (+1)
   \      0x12A   0x2700             MOVS     R7,#+0
   \      0x12C   0xE001             B.N      ??gcode_G29_UBL_17
   \                     ??gcode_G29_UBL_18: (+1)
   \      0x12E   0x1C7F             ADDS     R7,R7,#+1
   \      0x130   0xB2FF             UXTB     R7,R7
   \                     ??gcode_G29_UBL_17: (+1)
   \      0x132   0x9801             LDR      R0,[SP, #+4]
   \      0x134   0x7800             LDRB     R0,[R0, #+0]
   \      0x136   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \      0x13A   0x4287             CMP      R7,R0
   \      0x13C   0xF280 0x84E2      BGE.W    ??gcode_G29_UBL_10
    367                      for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++) { // a poorly calibrated Delta.
   \      0x140   0x2600             MOVS     R6,#+0
   \      0x142   0xE02E             B.N      ??gcode_G29_UBL_19
   \                     ??gcode_G29_UBL_20: (+1)
   \      0x144   0x4658             MOV      R0,R11
   \      0x146   0x4659             MOV      R1,R11
   \      0x148   0x.... 0x....      BL       __aeabi_fmul
   \      0x14C   0x4683             MOV      R11,R0
   \                     ??gcode_G29_UBL_21: (+1)
   \      0x14E   0x07E0             LSLS     R0,R4,#+31
   \      0x150   0xD504             BPL.N    ??gcode_G29_UBL_22
   \      0x152   0x4640             MOV      R0,R8
   \      0x154   0x4659             MOV      R1,R11
   \      0x156   0x.... 0x....      BL       __aeabi_fmul
   \      0x15A   0x4680             MOV      R8,R0
   \                     ??gcode_G29_UBL_22: (+1)
   \      0x15C   0x0864             LSRS     R4,R4,#+1
   \      0x15E   0xD1F1             BNE.N    ??gcode_G29_UBL_20
    368                        const float p1 = 0.5 * (GRID_MAX_POINTS_X) - x,
    369                                    p2 = 0.5 * (GRID_MAX_POINTS_Y) - y;
    370                        ubl.z_values[x][y] += 2.0 * HYPOT(p1, p2);
   \      0x160   0x.... 0x....      LDR.W    R0,??DataTable110_6
   \      0x164   0xEB10 0x1487      ADDS     R4,R0,R7, LSL #+6
   \      0x168   0xF854 0x0026      LDR      R0,[R4, R6, LSL #+2]
   \      0x16C   0x.... 0x....      BL       __aeabi_f2d
   \      0x170   0x4682             MOV      R10,R0
   \      0x172   0x468B             MOV      R11,R1
   \      0x174   0x4628             MOV      R0,R5
   \      0x176   0x4641             MOV      R1,R8
   \      0x178   0x.... 0x....      BL       __aeabi_fadd
   \      0x17C   0x.... 0x....      BL       sqrtf
   \      0x180   0x.... 0x....      BL       __aeabi_f2d
   \      0x184   0x2200             MOVS     R2,#+0
   \      0x186   0xF04F 0x4380      MOV      R3,#+1073741824
   \      0x18A   0x.... 0x....      BL       __aeabi_dmul
   \      0x18E   0x4652             MOV      R2,R10
   \      0x190   0x465B             MOV      R3,R11
   \      0x192   0x.... 0x....      BL       __aeabi_dadd
   \      0x196   0x.... 0x....      BL       __aeabi_d2f
   \      0x19A   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
   \      0x19E   0x1C76             ADDS     R6,R6,#+1
   \      0x1A0   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_19: (+1)
   \      0x1A2   0x9801             LDR      R0,[SP, #+4]
   \      0x1A4   0x7840             LDRB     R0,[R0, #+1]
   \      0x1A6   0x4601             MOV      R1,R0
   \      0x1A8   0x428E             CMP      R6,R1
   \      0x1AA   0xDAC0             BGE.N    ??gcode_G29_UBL_18
   \      0x1AC   0x2400             MOVS     R4,#+0
   \      0x1AE   0x.... 0x....      LDR.W    R5,??DataTable110_12  ;; 0x3fe00000
   \      0x1B2   0x.... 0x....      BL       __aeabi_ui2d
   \      0x1B6   0x4622             MOV      R2,R4
   \      0x1B8   0x462B             MOV      R3,R5
   \      0x1BA   0x.... 0x....      BL       __aeabi_dmul
   \      0x1BE   0x4682             MOV      R10,R0
   \      0x1C0   0x468B             MOV      R11,R1
   \      0x1C2   0x4630             MOV      R0,R6
   \      0x1C4   0x.... 0x....      BL       __aeabi_ui2d
   \      0x1C8   0x4602             MOV      R2,R0
   \      0x1CA   0x460B             MOV      R3,R1
   \      0x1CC   0x4650             MOV      R0,R10
   \      0x1CE   0x4659             MOV      R1,R11
   \      0x1D0   0x.... 0x....      BL       __aeabi_dsub
   \      0x1D4   0x.... 0x....      BL       __aeabi_d2f
   \      0x1D8   0x4680             MOV      R8,R0
   \      0x1DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \      0x1DE   0x.... 0x....      BL       __aeabi_ui2d
   \      0x1E2   0x4622             MOV      R2,R4
   \      0x1E4   0x462B             MOV      R3,R5
   \      0x1E6   0x.... 0x....      BL       __aeabi_dmul
   \      0x1EA   0x4604             MOV      R4,R0
   \      0x1EC   0x460D             MOV      R5,R1
   \      0x1EE   0x4638             MOV      R0,R7
   \      0x1F0   0x.... 0x....      BL       __aeabi_ui2d
   \      0x1F4   0x4602             MOV      R2,R0
   \      0x1F6   0x460B             MOV      R3,R1
   \      0x1F8   0x4620             MOV      R0,R4
   \      0x1FA   0x4629             MOV      R1,R5
   \      0x1FC   0x.... 0x....      BL       __aeabi_dsub
   \      0x200   0x.... 0x....      BL       __aeabi_d2f
   \      0x204   0x4683             MOV      R11,R0
   \      0x206   0x2402             MOVS     R4,#+2
   \      0x208   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \      0x20C   0x4655             MOV      R5,R10
   \      0x20E   0xE004             B.N      ??gcode_G29_UBL_23
   \                     ??gcode_G29_UBL_24: (+1)
   \      0x210   0x4658             MOV      R0,R11
   \      0x212   0x4659             MOV      R1,R11
   \      0x214   0x.... 0x....      BL       __aeabi_fmul
   \      0x218   0x4683             MOV      R11,R0
   \                     ??gcode_G29_UBL_23: (+1)
   \      0x21A   0x07E0             LSLS     R0,R4,#+31
   \      0x21C   0xD504             BPL.N    ??gcode_G29_UBL_25
   \      0x21E   0x4628             MOV      R0,R5
   \      0x220   0x4659             MOV      R1,R11
   \      0x222   0x.... 0x....      BL       __aeabi_fmul
   \      0x226   0x4605             MOV      R5,R0
   \                     ??gcode_G29_UBL_25: (+1)
   \      0x228   0x0864             LSRS     R4,R4,#+1
   \      0x22A   0xD1F1             BNE.N    ??gcode_G29_UBL_24
   \      0x22C   0x46C3             MOV      R11,R8
   \      0x22E   0x2402             MOVS     R4,#+2
   \      0x230   0x46D0             MOV      R8,R10
   \      0x232   0xE78C             B.N      ??gcode_G29_UBL_21
    371                      }
    372                    }
    373                    break;
    374                  case 1:
    375                    for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++) {  // Create a diagonal line several Mesh cells thick that is raised
   \                     ??gcode_G29_UBL_16: (+1)
   \      0x234   0x2600             MOVS     R6,#+0
   \      0x236   0x.... 0x....      LDR.W    R4,??DataTable111  ;; 0xed916873
   \      0x23A   0x.... 0x....      LDR.W    R5,??DataTable111_1  ;; 0x4023ff7c
   \      0x23E   0xE015             B.N      ??gcode_G29_UBL_26
    376                      ubl.z_values[x][x] += 9.999;
    377                      ubl.z_values[x][x + (x < GRID_MAX_POINTS_Y - 1) ? 1 : -1] += 9.999; // We want the altered line several mesh points thick
   \                     ??gcode_G29_UBL_27: (+1)
   \      0x240   0xF04F 0x38FF      MOV      R8,#-1
   \      0x244   0xE004             B.N      ??gcode_G29_UBL_28
   \                     ??gcode_G29_UBL_29: (+1)
   \      0x246   0x2000             MOVS     R0,#+0
   \                     ??gcode_G29_UBL_30: (+1)
   \      0x248   0x1980             ADDS     R0,R0,R6
   \      0x24A   0xD0F9             BEQ.N    ??gcode_G29_UBL_27
   \      0x24C   0xF04F 0x0801      MOV      R8,#+1
   \                     ??gcode_G29_UBL_28: (+1)
   \      0x250   0xF857 0x0028      LDR      R0,[R7, R8, LSL #+2]
   \      0x254   0x.... 0x....      BL       __aeabi_f2d
   \      0x258   0x4622             MOV      R2,R4
   \      0x25A   0x462B             MOV      R3,R5
   \      0x25C   0x.... 0x....      BL       __aeabi_dadd
   \      0x260   0x.... 0x....      BL       __aeabi_d2f
   \      0x264   0xF847 0x0028      STR      R0,[R7, R8, LSL #+2]
   \      0x268   0x1C76             ADDS     R6,R6,#+1
   \      0x26A   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_26: (+1)
   \      0x26C   0x.... 0x....      LDR.W    R8,??find_mean_mesh_height_0
   \      0x270   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0x274   0x4286             CMP      R6,R0
   \      0x276   0xF280 0x8445      BGE.W    ??gcode_G29_UBL_10
   \      0x27A   0x.... 0x....      LDR.W    R0,??DataTable110_6
   \      0x27E   0xEB10 0x1786      ADDS     R7,R0,R6, LSL #+6
   \      0x282   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \      0x286   0x.... 0x....      BL       __aeabi_f2d
   \      0x28A   0x4622             MOV      R2,R4
   \      0x28C   0x462B             MOV      R3,R5
   \      0x28E   0x.... 0x....      BL       __aeabi_dadd
   \      0x292   0x.... 0x....      BL       __aeabi_d2f
   \      0x296   0xF847 0x0026      STR      R0,[R7, R6, LSL #+2]
   \      0x29A   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \      0x29E   0x1E40             SUBS     R0,R0,#+1
   \      0x2A0   0x4286             CMP      R6,R0
   \      0x2A2   0xDAD0             BGE.N    ??gcode_G29_UBL_29
   \      0x2A4   0x2001             MOVS     R0,#+1
   \      0x2A6   0xE7CF             B.N      ??gcode_G29_UBL_30
    378                    }
    379                    break;
    380                  case 2:
    381                    // Allow the user to specify the height because 10mm is a little extreme in some cases.
    382                    for (uint8_t x = (GRID_MAX_POINTS_X) / 3; x < 2 * (GRID_MAX_POINTS_X) / 3; x++)   // Create a rectangular raised area in
   \                     ??gcode_G29_UBL_15: (+1)
   \      0x2A8   0x.... 0x....      LDR.W    R11,??DataTable112
   \      0x2AC   0x7800             LDRB     R0,[R0, #+0]
   \      0x2AE   0x2103             MOVS     R1,#+3
   \      0x2B0   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \      0x2B4   0xB2F6             UXTB     R6,R6
   \      0x2B6   0xF10B 0x0A60      ADD      R10,R11,#+96
   \      0x2BA   0xE001             B.N      ??gcode_G29_UBL_31
   \                     ??gcode_G29_UBL_32: (+1)
   \      0x2BC   0x1C76             ADDS     R6,R6,#+1
   \      0x2BE   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_31: (+1)
   \      0x2C0   0xF89B 0x0060      LDRB     R0,[R11, #+96]
   \      0x2C4   0x0040             LSLS     R0,R0,#+1
   \      0x2C6   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x2CA   0x4286             CMP      R6,R0
   \      0x2CC   0xF280 0x841A      BGE.W    ??gcode_G29_UBL_10
    383                      for (uint8_t y = (GRID_MAX_POINTS_Y) / 3; y < 2 * (GRID_MAX_POINTS_Y) / 3; y++) // the center of the bed
   \      0x2D0   0xF89A 0x0001      LDRB     R0,[R10, #+1]
   \      0x2D4   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \      0x2D8   0xB2FF             UXTB     R7,R7
   \                     ??gcode_G29_UBL_33: (+1)
   \      0x2DA   0xF89A 0x0001      LDRB     R0,[R10, #+1]
   \      0x2DE   0x0040             LSLS     R0,R0,#+1
   \      0x2E0   0x2103             MOVS     R1,#+3
   \      0x2E2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x2E6   0x4287             CMP      R7,R0
   \      0x2E8   0xDAE8             BGE.N    ??gcode_G29_UBL_32
    384                        ubl.z_values[x][y] += code_seen('C') ? ubl_constant : 9.99;
   \      0x2EA   0x2043             MOVS     R0,#+67
   \      0x2EC   0x.... 0x....      BL       _Z9code_seenc
   \      0x2F0   0x2800             CMP      R0,#+0
   \      0x2F2   0xD104             BNE.N    ??gcode_G29_UBL_34
   \      0x2F4   0x.... 0x....      LDR.W    R4,??DataTable112_1  ;; 0x47ae147b
   \      0x2F8   0x.... 0x....      LDR.W    R5,??DataTable112_2  ;; 0x4023fae1
   \      0x2FC   0xE005             B.N      ??gcode_G29_UBL_35
   \                     ??gcode_G29_UBL_34: (+1)
   \      0x2FE   0xF8D9 0x002C      LDR      R0,[R9, #+44]
   \      0x302   0x.... 0x....      BL       __aeabi_f2d
   \      0x306   0x4604             MOV      R4,R0
   \      0x308   0x460D             MOV      R5,R1
   \                     ??gcode_G29_UBL_35: (+1)
   \      0x30A   0x.... 0x....      LDR.W    R0,??DataTable110_6
   \      0x30E   0xEB00 0x1886      ADD      R8,R0,R6, LSL #+6
   \      0x312   0xF858 0x0027      LDR      R0,[R8, R7, LSL #+2]
   \      0x316   0x.... 0x....      BL       __aeabi_f2d
   \      0x31A   0x4622             MOV      R2,R4
   \      0x31C   0x462B             MOV      R3,R5
   \      0x31E   0x.... 0x....      BL       __aeabi_dadd
   \      0x322   0x.... 0x....      BL       __aeabi_d2f
   \      0x326   0xF848 0x0027      STR      R0,[R8, R7, LSL #+2]
   \      0x32A   0x1C7F             ADDS     R7,R7,#+1
   \      0x32C   0xB2FF             UXTB     R7,R7
   \      0x32E   0xE7D4             B.N      ??gcode_G29_UBL_33
    385                    break;
    386                }
    387              }
    388          
    389              if (code_seen('J')) {
    390                ubl.save_ubl_active_state_and_disable();
    391                ubl.tilt_mesh_based_on_probed_grid(code_seen('O') || code_seen('M'));
   \                     ??gcode_G29_UBL_36: (+1)
   \      0x330   0x2101             MOVS     R1,#+1
   \                     ??gcode_G29_UBL_37: (+1)
   \      0x332   0x4620             MOV      R0,R4
   \      0x334   0x.... 0x....      BL       _ZN20unified_bed_leveling30tilt_mesh_based_on_probed_gridEb
    392                ubl.restore_ubl_active_state_and_leave();
   \      0x338   0x4620             MOV      R0,R4
   \      0x33A   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    393              }
    394          
    395              if (code_seen('P')) {
   \                     ??gcode_G29_UBL_38: (+1)
   \      0x33E   0x2050             MOVS     R0,#+80
   \      0x340   0x.... 0x....      BL       _Z9code_seenc
   \      0x344   0x2800             CMP      R0,#+0
   \      0x346   0xF000 0x8187      BEQ.W    ??gcode_G29_UBL_39
    396          		if (WITHIN(phase_value, 0, 1) && ubl.state.eeprom_storage_slot == -1) {
   \      0x34A   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \      0x34E   0x2802             CMP      R0,#+2
   \      0x350   0xD20C             BCS.N    ??gcode_G29_UBL_40
   \      0x352   0x.... 0x....      LDR.W    R0,??DataTable112_3
   \      0x356   0xF990 0x1008      LDRSB    R1,[R0, #+8]
   \      0x35A   0xF111 0x0F01      CMN      R1,#+1
   \      0x35E   0xD105             BNE.N    ??gcode_G29_UBL_40
    397          		  ubl.state.eeprom_storage_slot = 0;
   \      0x360   0x2100             MOVS     R1,#+0
   \      0x362   0x7201             STRB     R1,[R0, #+8]
    398          		  SERIAL_PROTOCOLLNPGM("Default storage slot 0 selected.\n");
   \      0x364   0x.... 0x....      ADR.W    R0,?_6
   \      0x368   0x.... 0x....      BL       _Z14serialprintPGMPKc
    399                }
    400                switch (phase_value) {
   \                     ??gcode_G29_UBL_40: (+1)
   \      0x36C   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \      0x370   0x2806             CMP      R0,#+6
   \      0x372   0xF200 0x8171      BHI.W    ??gcode_G29_UBL_39
   \      0x376   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??gcode_G29_UBL_0:
   \      0x37A   0x0007 0x000F      DC16     0x7,0xF,0x92,0x12A
   \               0x0092 0x012
   \              A            
   \      0x382   0x0153 0x0168      DC16     0x153,0x168,0x16C
   \               0x016C      
    401                  case 0:
    402                    //
    403                    // Zero Mesh Data
    404                    //
    405                    ubl.reset();
   \                     ??gcode_G29_UBL_41: (+1)
   \      0x388   0x4620             MOV      R0,R4
   \      0x38A   0x.... 0x....      BL       _ZN20unified_bed_leveling5resetEv
    406                    SERIAL_PROTOCOLLNPGM("Mesh zeroed.\n");
   \      0x38E   0x.... 0x....      ADR.W    R0,?_7
   \      0x392   0x.... 0x....      BL       _Z14serialprintPGMPKc
    407                    break;
   \      0x396   0xE15F             B.N      ??gcode_G29_UBL_39
    408          
    409                  case 1:
    410                    //
    411                    // Invalidate Entire Mesh and Automatically Probe Mesh in areas that can be reached by the probe
    412                    //
    413                    if (!code_seen('C')) {
   \                     ??gcode_G29_UBL_42: (+1)
   \      0x398   0x2043             MOVS     R0,#+67
   \      0x39A   0x.... 0x....      BL       _Z9code_seenc
   \      0x39E   0x2800             CMP      R0,#+0
   \      0x3A0   0xD106             BNE.N    ??gcode_G29_UBL_43
    414                      ubl.invalidate();
   \      0x3A2   0x4620             MOV      R0,R4
   \      0x3A4   0x.... 0x....      BL       _ZN20unified_bed_leveling10invalidateEv
    415                      SERIAL_PROTOCOLLNPGM("Mesh invalidated. Probing mesh.\n");
   \      0x3A8   0x.... 0x....      ADR.W    R0,?_8
   \      0x3AC   0x.... 0x....      BL       _Z14serialprintPGMPKc
    416                    }
    417                    if (g29_verbose_level > 1) {
   \                     ??gcode_G29_UBL_43: (+1)
   \      0x3B0   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x3B4   0x2801             CMP      R0,#+1
   \      0x3B6   0xDD46             BLE.N    ??gcode_G29_UBL_44
    418          		  	
    419                      //SERIAL_PROTOCOLPAIR("Probing Mesh Points Closest to (", x_pos);
    420          			SERIAL_PROTOCOLPGM("Probing Mesh Points Closest to (");
   \      0x3B8   0x.... 0x....      ADR.W    R0,?_9
   \      0x3BC   0x.... 0x....      BL       _Z14serialprintPGMPKc
    421          			SERIAL_PROTOCOL(x_pos);
   \      0x3C0   0xF8D9 0x001C      LDR      R0,[R9, #+28]
   \      0x3C4   0x.... 0x....      BL       __aeabi_f2d
   \      0x3C8   0x4602             MOV      R2,R0
   \      0x3CA   0x460B             MOV      R3,R1
   \      0x3CC   0x.... 0x....      LDR.W    R5,??DataTable112_4
   \      0x3D0   0x7828             LDRB     R0,[R5, #+0]
   \      0x3D2   0x2800             CMP      R0,#+0
   \      0x3D4   0xD106             BNE.N    ??gcode_G29_UBL_45
   \      0x3D6   0x2002             MOVS     R0,#+2
   \      0x3D8   0x9000             STR      R0,[SP, #+0]
   \      0x3DA   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x3DE   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x3E2   0xE005             B.N      ??gcode_G29_UBL_46
   \                     ??gcode_G29_UBL_45: (+1)
   \      0x3E4   0x2002             MOVS     R0,#+2
   \      0x3E6   0x9000             STR      R0,[SP, #+0]
   \      0x3E8   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x3EC   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    422                      SERIAL_PROTOCOLCHAR(',');
   \                     ??gcode_G29_UBL_46: (+1)
   \      0x3F0   0x7828             LDRB     R0,[R5, #+0]
   \      0x3F2   0x2800             CMP      R0,#+0
   \      0x3F4   0xD105             BNE.N    ??gcode_G29_UBL_47
   \      0x3F6   0x212C             MOVS     R1,#+44
   \      0x3F8   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x3FC   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x400   0xE005             B.N      ??gcode_G29_UBL_48
   \                     ??gcode_G29_UBL_47: (+1)
   \      0x402   0x2200             MOVS     R2,#+0
   \      0x404   0x212C             MOVS     R1,#+44
   \      0x406   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x40A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    423                      SERIAL_PROTOCOL(y_pos);
   \                     ??gcode_G29_UBL_48: (+1)
   \      0x40E   0xF8D9 0x0020      LDR      R0,[R9, #+32]
   \      0x412   0x.... 0x....      BL       __aeabi_f2d
   \      0x416   0x782A             LDRB     R2,[R5, #+0]
   \      0x418   0x2A00             CMP      R2,#+0
   \      0x41A   0xD108             BNE.N    ??gcode_G29_UBL_49
   \      0x41C   0x2202             MOVS     R2,#+2
   \      0x41E   0x9200             STR      R2,[SP, #+0]
   \      0x420   0x4602             MOV      R2,R0
   \      0x422   0x460B             MOV      R3,R1
   \      0x424   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x428   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x42C   0xE007             B.N      ??gcode_G29_UBL_50
   \                     ??gcode_G29_UBL_49: (+1)
   \      0x42E   0x2202             MOVS     R2,#+2
   \      0x430   0x9200             STR      R2,[SP, #+0]
   \      0x432   0x4602             MOV      R2,R0
   \      0x434   0x460B             MOV      R3,R1
   \      0x436   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x43A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    424                      SERIAL_PROTOCOLLNPGM(").\n");
   \                     ??gcode_G29_UBL_50: (+1)
   \      0x43E   0x.... 0x....      ADR.W    R0,?_10
   \      0x442   0x.... 0x....      BL       _Z14serialprintPGMPKc
    425                    }
    426                    ubl.probe_entire_mesh(x_pos + X_PROBE_OFFSET_FROM_EXTRUDER, y_pos + Y_PROBE_OFFSET_FROM_EXTRUDER,
    427                                      code_seen('O') || code_seen('M'), code_seen('E'), code_seen('U'));
   \                     ??gcode_G29_UBL_44: (+1)
   \      0x446   0x.... 0x....      LDR.W    R5,??find_mean_mesh_height_0
   \      0x44A   0xF8D9 0x101C      LDR      R1,[R9, #+28]
   \      0x44E   0x68E8             LDR      R0,[R5, #+12]
   \      0x450   0x.... 0x....      BL       __aeabi_fadd
   \      0x454   0x9003             STR      R0,[SP, #+12]
   \      0x456   0xF8D9 0x1020      LDR      R1,[R9, #+32]
   \      0x45A   0x6928             LDR      R0,[R5, #+16]
   \      0x45C   0x.... 0x....      BL       __aeabi_fadd
   \      0x460   0x9002             STR      R0,[SP, #+8]
   \      0x462   0x2055             MOVS     R0,#+85
   \      0x464   0x.... 0x....      BL       _Z9code_seenc
   \      0x468   0x4605             MOV      R5,R0
   \      0x46A   0x2045             MOVS     R0,#+69
   \      0x46C   0x.... 0x....      BL       _Z9code_seenc
   \      0x470   0x4606             MOV      R6,R0
   \      0x472   0x204F             MOVS     R0,#+79
   \      0x474   0x.... 0x....      BL       _Z9code_seenc
   \      0x478   0x2800             CMP      R0,#+0
   \      0x47A   0xD107             BNE.N    ??gcode_G29_UBL_51
   \      0x47C   0x204D             MOVS     R0,#+77
   \      0x47E   0x.... 0x....      BL       _Z9code_seenc
   \      0x482   0x1E43             SUBS     R3,R0,#+1
   \      0x484   0x419B             SBCS     R3,R3,R3
   \      0x486   0x43DB             MVNS     R3,R3
   \      0x488   0x0FDB             LSRS     R3,R3,#+31
   \      0x48A   0xE000             B.N      ??gcode_G29_UBL_52
   \                     ??gcode_G29_UBL_51: (+1)
   \      0x48C   0x2301             MOVS     R3,#+1
   \                     ??gcode_G29_UBL_52: (+1)
   \      0x48E   0x9501             STR      R5,[SP, #+4]
   \      0x490   0x9600             STR      R6,[SP, #+0]
   \      0x492   0xAA02             ADD      R2,SP,#+8
   \      0x494   0xA903             ADD      R1,SP,#+12
   \      0x496   0x4620             MOV      R0,R4
   \      0x498   0x.... 0x....      BL       _ZN20unified_bed_leveling17probe_entire_meshERKfS1_bbb
    428                    break;
   \      0x49C   0xE0DC             B.N      ??gcode_G29_UBL_39
    429          
    430                  case 2: {
    431                    //
    432                    // Manually Probe Mesh in areas that can't be reached by the probe
    433                    //
    434                    SERIAL_PROTOCOLLNPGM("Manually probing unreachable mesh locations.\n");
   \                     ??gcode_G29_UBL_53: (+1)
   \      0x49E   0x.... 0x....      ADR.W    R0,?_11
   \      0x4A2   0x.... 0x....      BL       _Z14serialprintPGMPKc
    435                    do_blocking_move_to_z(Z_CLEARANCE_BETWEEN_PROBES);
   \      0x4A6   0x2000             MOVS     R0,#+0
   \      0x4A8   0x9000             STR      R0,[SP, #+0]
   \      0x4AA   0x.... 0x....      LDR.W    R6,??DataTable112
   \      0x4AE   0x4669             MOV      R1,SP
   \      0x4B0   0xF106 0x0068      ADD      R0,R6,#+104
   \      0x4B4   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    436                    if (!x_flag && !y_flag) {
   \      0x4B8   0xF106 0x0560      ADD      R5,R6,#+96
   \      0x4BC   0xF899 0x1002      LDRB     R1,[R9, #+2]
   \      0x4C0   0xF899 0x0003      LDRB     R0,[R9, #+3]
   \      0x4C4   0x4301             ORRS     R1,R0,R1
   \      0x4C6   0xD128             BNE.N    ??gcode_G29_UBL_54
    437                      /**
    438                       * Use a good default location for the path.
    439                       * The flipped > and < operators in these comparisons is intentional.
    440                       * It should cause the probed points to follow a nice path on Cartesian printers.
    441                       * It may make sense to have Delta printers default to the center of the bed.
    442                       * Until that is decided, this can be forced with the X and Y parameters.
    443                       */
    444                      x_pos = X_PROBE_OFFSET_FROM_EXTRUDER > 0 ? UBL_MESH_MAX_X : UBL_MESH_MIN_X;
   \      0x4C8   0xF9B5 0x0054      LDRSH    R0,[R5, #+84]
   \      0x4CC   0x.... 0x....      BL       __aeabi_i2f
   \      0x4D0   0x4607             MOV      R7,R0
   \      0x4D2   0x68E8             LDR      R0,[R5, #+12]
   \      0x4D4   0x2100             MOVS     R1,#+0
   \      0x4D6   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x4DA   0xD206             BCS.N    ??gcode_G29_UBL_55
   \      0x4DC   0x6970             LDR      R0,[R6, #+20]
   \      0x4DE   0x4639             MOV      R1,R7
   \      0x4E0   0x.... 0x....      BL       __aeabi_fsub
   \      0x4E4   0xF8C9 0x001C      STR      R0,[R9, #+28]
   \      0x4E8   0xE005             B.N      ??gcode_G29_UBL_56
   \                     ??gcode_G29_UBL_55: (+1)
   \      0x4EA   0x68B0             LDR      R0,[R6, #+8]
   \      0x4EC   0x4639             MOV      R1,R7
   \      0x4EE   0x.... 0x....      BL       __aeabi_fadd
   \      0x4F2   0xF8C9 0x001C      STR      R0,[R9, #+28]
    445                      y_pos = Y_PROBE_OFFSET_FROM_EXTRUDER < 0 ? UBL_MESH_MAX_Y : UBL_MESH_MIN_Y;
   \                     ??gcode_G29_UBL_56: (+1)
   \      0x4F6   0x6928             LDR      R0,[R5, #+16]
   \      0x4F8   0x2100             MOVS     R1,#+0
   \      0x4FA   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x4FE   0xD206             BCS.N    ??gcode_G29_UBL_57
   \      0x500   0x69B0             LDR      R0,[R6, #+24]
   \      0x502   0x4639             MOV      R1,R7
   \      0x504   0x.... 0x....      BL       __aeabi_fsub
   \      0x508   0xF8C9 0x0020      STR      R0,[R9, #+32]
   \      0x50C   0xE005             B.N      ??gcode_G29_UBL_54
   \                     ??gcode_G29_UBL_57: (+1)
   \      0x50E   0x68F0             LDR      R0,[R6, #+12]
   \      0x510   0x4639             MOV      R1,R7
   \      0x512   0x.... 0x....      BL       __aeabi_fadd
   \      0x516   0xF8C9 0x0020      STR      R0,[R9, #+32]
    446                    }
    447          
    448                    if (code_seen('C')) {
   \                     ??gcode_G29_UBL_54: (+1)
   \      0x51A   0x2043             MOVS     R0,#+67
   \      0x51C   0x.... 0x....      BL       _Z9code_seenc
   \      0x520   0x2800             CMP      R0,#+0
   \      0x522   0xD007             BEQ.N    ??gcode_G29_UBL_58
    449                      x_pos = current_position[X_AXIS];
   \      0x524   0x.... 0x....      LDR.W    R0,??DataTable113
   \      0x528   0x6801             LDR      R1,[R0, #+0]
   \      0x52A   0xF8C9 0x101C      STR      R1,[R9, #+28]
    450                      y_pos = current_position[Y_AXIS];
   \      0x52E   0x6840             LDR      R0,[R0, #+4]
   \      0x530   0xF8C9 0x0020      STR      R0,[R9, #+32]
    451                    }
    452          
    453                    const float height = code_seen('H') && code_has_value() ? code_value_float() : Z_CLEARANCE_BETWEEN_PROBES;
   \                     ??gcode_G29_UBL_58: (+1)
   \      0x534   0x2048             MOVS     R0,#+72
   \      0x536   0x.... 0x....      BL       _Z9code_seenc
   \      0x53A   0x2800             CMP      R0,#+0
   \      0x53C   0xD007             BEQ.N    ??gcode_G29_UBL_59
   \      0x53E   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x542   0x2800             CMP      R0,#+0
   \      0x544   0xD003             BEQ.N    ??gcode_G29_UBL_59
   \      0x546   0x.... 0x....      BL       _Z16code_value_floatv
   \      0x54A   0x9001             STR      R0,[SP, #+4]
   \      0x54C   0xE001             B.N      ??gcode_G29_UBL_60
   \                     ??gcode_G29_UBL_59: (+1)
   \      0x54E   0x68A8             LDR      R0,[R5, #+8]
   \      0x550   0x9001             STR      R0,[SP, #+4]
    454          
    455                    if (code_seen('B')) {
   \                     ??gcode_G29_UBL_60: (+1)
   \      0x552   0x2042             MOVS     R0,#+66
   \      0x554   0x.... 0x....      BL       _Z9code_seenc
   \      0x558   0x2800             CMP      R0,#+0
   \      0x55A   0xD01B             BEQ.N    ??gcode_G29_UBL_61
    456                      card_thickness = code_has_value() ? code_value_float() : measure_business_card_thickness(height);
   \      0x55C   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x560   0x2800             CMP      R0,#+0
   \      0x562   0xD004             BEQ.N    ??gcode_G29_UBL_62
   \      0x564   0x.... 0x....      BL       _Z16code_value_floatv
   \      0x568   0xF8C9 0x0028      STR      R0,[R9, #+40]
   \      0x56C   0xE004             B.N      ??gcode_G29_UBL_63
   \                     ??gcode_G29_UBL_62: (+1)
   \      0x56E   0xA801             ADD      R0,SP,#+4
   \      0x570   0x.... 0x....      BL       _Z31measure_business_card_thicknessRKf
   \      0x574   0xF8C9 0x0028      STR      R0,[R9, #+40]
    457          
    458                      if (fabs(card_thickness) > 1.5) {
   \                     ??gcode_G29_UBL_63: (+1)
   \      0x578   0xF8D9 0x0028      LDR      R0,[R9, #+40]
   \      0x57C   0xF020 0x4000      BIC      R0,R0,#0x80000000
   \      0x580   0x.... 0x....      LDR.W    R1,??DataTable113_1  ;; 0x3fc00001
   \      0x584   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x588   0xD804             BHI.N    ??gcode_G29_UBL_61
    459                        SERIAL_PROTOCOLLNPGM("?Error in Business Card measurement.\n");
   \      0x58A   0x.... 0x....      ADR.W    R0,?_12
   \      0x58E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    460                        return;
   \      0x592   0xE2EC             B.N      ??gcode_G29_UBL_2
    461                      }
    462                    }
    463                    manually_probe_remaining_mesh(x_pos, y_pos, height, card_thickness, code_seen('O') || code_seen('M'));
   \                     ??gcode_G29_UBL_61: (+1)
   \      0x594   0x204F             MOVS     R0,#+79
   \      0x596   0x.... 0x....      BL       _Z9code_seenc
   \      0x59A   0x2800             CMP      R0,#+0
   \      0x59C   0xD107             BNE.N    ??gcode_G29_UBL_64
   \      0x59E   0x204D             MOVS     R0,#+77
   \      0x5A0   0x.... 0x....      BL       _Z9code_seenc
   \      0x5A4   0x1E40             SUBS     R0,R0,#+1
   \      0x5A6   0x4180             SBCS     R0,R0,R0
   \      0x5A8   0x43C0             MVNS     R0,R0
   \      0x5AA   0x0FC0             LSRS     R0,R0,#+31
   \      0x5AC   0xE000             B.N      ??gcode_G29_UBL_65
   \                     ??gcode_G29_UBL_64: (+1)
   \      0x5AE   0x2001             MOVS     R0,#+1
   \                     ??gcode_G29_UBL_65: (+1)
   \      0x5B0   0x9000             STR      R0,[SP, #+0]
   \      0x5B2   0xF109 0x0328      ADD      R3,R9,#+40
   \      0x5B6   0xAA01             ADD      R2,SP,#+4
   \      0x5B8   0xF109 0x0120      ADD      R1,R9,#+32
   \      0x5BC   0xF109 0x001C      ADD      R0,R9,#+28
   \      0x5C0   0x.... 0x....      BL       _Z29manually_probe_remaining_meshRKfS0_S0_S0_b
    464                    SERIAL_PROTOCOLLNPGM("G29 P2 finished.");
   \      0x5C4   0x.... 0x....      ADR.W    R0,?_13
   \      0x5C8   0x.... 0x....      BL       _Z14serialprintPGMPKc
    465          
    466                  } break;
   \      0x5CC   0xE044             B.N      ??gcode_G29_UBL_39
    467          
    468                  case 3: {
    469                    /**
    470                     * Populate invalid mesh areas. Proceed with caution.
    471                     * Two choices are available:
    472                     *   - Specify a constant with the 'C' parameter.
    473                     *   - Allow 'G29 P3' to choose a 'reasonable' constant.
    474                     */
    475                    if (c_flag) {
   \                     ??gcode_G29_UBL_66: (+1)
   \      0x5CE   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \      0x5D2   0x2800             CMP      R0,#+0
   \      0x5D4   0xD021             BEQ.N    ??gcode_G29_UBL_67
    476                      while (repetition_cnt--) {
   \                     ??gcode_G29_UBL_68: (+1)
   \      0x5D6   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \      0x5DA   0x1E41             SUBS     R1,R0,#+1
   \      0x5DC   0xF8C9 0x100C      STR      R1,[R9, #+12]
   \      0x5E0   0x2800             CMP      R0,#+0
   \      0x5E2   0xD039             BEQ.N    ??gcode_G29_UBL_39
    477                        const mesh_index_pair location = find_closest_mesh_point_of_type(INVALID, x_pos, y_pos, USE_NOZZLE_AS_REFERENCE, NULL, false);
   \      0x5E4   0x2000             MOVS     R0,#+0
   \      0x5E6   0x9002             STR      R0,[SP, #+8]
   \      0x5E8   0x9001             STR      R0,[SP, #+4]
   \      0x5EA   0x9000             STR      R0,[SP, #+0]
   \      0x5EC   0xF109 0x0320      ADD      R3,R9,#+32
   \      0x5F0   0xF109 0x021C      ADD      R2,R9,#+28
   \      0x5F4   0x4601             MOV      R1,R0
   \      0x5F6   0xA803             ADD      R0,SP,#+12
   \      0x5F8   0x.... 0x....      BL       _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb
    478                        if (location.x_index < 0) break; // No more invalid Mesh Points to populate
   \      0x5FC   0xF99D 0x000C      LDRSB    R0,[SP, #+12]
   \      0x600   0x2800             CMP      R0,#+0
   \      0x602   0xD429             BMI.N    ??gcode_G29_UBL_39
    479                          ubl.z_values[location.x_index][location.y_index] = ubl_constant;
   \      0x604   0x.... 0x....      LDR.W    R1,??DataTable110_6
   \      0x608   0xEB01 0x1080      ADD      R0,R1,R0, LSL #+6
   \      0x60C   0xF99D 0x100D      LDRSB    R1,[SP, #+13]
   \      0x610   0xF8D9 0x202C      LDR      R2,[R9, #+44]
   \      0x614   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
   \      0x618   0xE7DD             B.N      ??gcode_G29_UBL_68
    480                      }
    481                      break;
    482                    }
    483                    else
    484                      smart_fill_mesh(); // Do a 'Smart' fill using nearby known values
   \                     ??gcode_G29_UBL_67: (+1)
   \      0x61A   0x.... 0x....      BL       _Z15smart_fill_meshv
    485          
    486                  } break;
   \      0x61E   0xE01B             B.N      ??gcode_G29_UBL_39
    487          
    488                  case 4:
    489                    //
    490                    // Fine Tune (i.e., Edit) the Mesh
    491                    //
    492                    fine_tune_mesh(x_pos, y_pos, code_seen('O') || code_seen('M'));
   \                     ??gcode_G29_UBL_69: (+1)
   \      0x620   0x204F             MOVS     R0,#+79
   \      0x622   0x.... 0x....      BL       _Z9code_seenc
   \      0x626   0x2800             CMP      R0,#+0
   \      0x628   0xD107             BNE.N    ??gcode_G29_UBL_70
   \      0x62A   0x204D             MOVS     R0,#+77
   \      0x62C   0x.... 0x....      BL       _Z9code_seenc
   \      0x630   0x1E42             SUBS     R2,R0,#+1
   \      0x632   0x4192             SBCS     R2,R2,R2
   \      0x634   0x43D2             MVNS     R2,R2
   \      0x636   0x0FD2             LSRS     R2,R2,#+31
   \      0x638   0xE000             B.N      ??gcode_G29_UBL_71
   \                     ??gcode_G29_UBL_70: (+1)
   \      0x63A   0x2201             MOVS     R2,#+1
   \                     ??gcode_G29_UBL_71: (+1)
   \      0x63C   0xF109 0x0120      ADD      R1,R9,#+32
   \      0x640   0xF109 0x001C      ADD      R0,R9,#+28
   \      0x644   0x.... 0x....      BL       _Z14fine_tune_meshRKfS0_b
    493                    break;
   \      0x648   0xE006             B.N      ??gcode_G29_UBL_39
    494          
    495                  case 5: ubl.find_mean_mesh_height(); break;
   \                     ??gcode_G29_UBL_72: (+1)
   \      0x64A   0x4620             MOV      R0,R4
   \      0x64C   0x.... 0x....      BL       _ZN20unified_bed_leveling21find_mean_mesh_heightEv
   \      0x650   0xE002             B.N      ??gcode_G29_UBL_39
    496          
    497                  case 6: ubl.shift_mesh_height(); break;
   \                     ??gcode_G29_UBL_73: (+1)
   \      0x652   0x4620             MOV      R0,R4
   \      0x654   0x.... 0x....      BL       _ZN20unified_bed_leveling17shift_mesh_heightEv
    498                }
    499          
    500              }
    501          
    502              if (code_seen('T')) {
   \                     ??gcode_G29_UBL_39: (+1)
   \      0x658   0x2054             MOVS     R0,#+84
   \      0x65A   0x.... 0x....      BL       _Z9code_seenc
   \      0x65E   0x2800             CMP      R0,#+0
   \      0x660   0xF000 0x80C9      BEQ.W    ??gcode_G29_UBL_74
    503          
    504                float z1 = probe_pt(LOGICAL_X_POSITION(UBL_PROBE_PT_1_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_1_Y), false, g29_verbose_level),
   \      0x664   0x.... 0x....      LDR.W    R5,??DataTable112
   \      0x668   0xF105 0x0660      ADD      R6,R5,#+96
   \      0x66C   0x.... 0x....      LDR.W    R7,??DataTable113_2
   \      0x670   0xF8D9 0x3004      LDR      R3,[R9, #+4]
   \      0x674   0x2200             MOVS     R2,#+0
   \      0x676   0x4690             MOV      R8,R2
   \      0x678   0x469A             MOV      R10,R3
   \      0x67A   0x6DF1             LDR      R1,[R6, #+92]
   \      0x67C   0x6878             LDR      R0,[R7, #+4]
   \      0x67E   0x.... 0x....      BL       __aeabi_fadd
   \      0x682   0x4601             MOV      R1,R0
   \      0x684   0x4653             MOV      R3,R10
   \      0x686   0x4642             MOV      R2,R8
   \      0x688   0x4688             MOV      R8,R1
   \      0x68A   0x4692             MOV      R10,R2
   \      0x68C   0x469B             MOV      R11,R3
   \      0x68E   0x6DB1             LDR      R1,[R6, #+88]
   \      0x690   0x6838             LDR      R0,[R7, #+0]
   \      0x692   0x.... 0x....      BL       __aeabi_fadd
   \      0x696   0x465B             MOV      R3,R11
   \      0x698   0x4652             MOV      R2,R10
   \      0x69A   0x4641             MOV      R1,R8
   \      0x69C   0x.... 0x....      BL       _Z8probe_ptffbi
   \      0x6A0   0x9002             STR      R0,[SP, #+8]
    505                      z2 = probe_pt(LOGICAL_X_POSITION(UBL_PROBE_PT_2_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_2_Y), false, g29_verbose_level),
   \      0x6A2   0xF8D9 0x3004      LDR      R3,[R9, #+4]
   \      0x6A6   0x4652             MOV      R2,R10
   \      0x6A8   0x4690             MOV      R8,R2
   \      0x6AA   0x469A             MOV      R10,R3
   \      0x6AC   0x6E71             LDR      R1,[R6, #+100]
   \      0x6AE   0x6878             LDR      R0,[R7, #+4]
   \      0x6B0   0x.... 0x....      BL       __aeabi_fadd
   \      0x6B4   0x4601             MOV      R1,R0
   \      0x6B6   0x4653             MOV      R3,R10
   \      0x6B8   0x4642             MOV      R2,R8
   \      0x6BA   0x4688             MOV      R8,R1
   \      0x6BC   0x4692             MOV      R10,R2
   \      0x6BE   0x469B             MOV      R11,R3
   \      0x6C0   0x6E31             LDR      R1,[R6, #+96]
   \      0x6C2   0x6838             LDR      R0,[R7, #+0]
   \      0x6C4   0x.... 0x....      BL       __aeabi_fadd
   \      0x6C8   0x465B             MOV      R3,R11
   \      0x6CA   0x4652             MOV      R2,R10
   \      0x6CC   0x4641             MOV      R1,R8
   \      0x6CE   0x.... 0x....      BL       _Z8probe_ptffbi
   \      0x6D2   0x9001             STR      R0,[SP, #+4]
    506                      z3 = probe_pt(LOGICAL_X_POSITION(UBL_PROBE_PT_3_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_3_Y), true, g29_verbose_level);
   \      0x6D4   0xF8D9 0x3004      LDR      R3,[R9, #+4]
   \      0x6D8   0x2201             MOVS     R2,#+1
   \      0x6DA   0x4690             MOV      R8,R2
   \      0x6DC   0x469A             MOV      R10,R3
   \      0x6DE   0x6EF1             LDR      R1,[R6, #+108]
   \      0x6E0   0x6878             LDR      R0,[R7, #+4]
   \      0x6E2   0x.... 0x....      BL       __aeabi_fadd
   \      0x6E6   0x4601             MOV      R1,R0
   \      0x6E8   0x4653             MOV      R3,R10
   \      0x6EA   0x4642             MOV      R2,R8
   \      0x6EC   0x4688             MOV      R8,R1
   \      0x6EE   0x4692             MOV      R10,R2
   \      0x6F0   0x469B             MOV      R11,R3
   \      0x6F2   0x6EB1             LDR      R1,[R6, #+104]
   \      0x6F4   0x6838             LDR      R0,[R7, #+0]
   \      0x6F6   0x.... 0x....      BL       __aeabi_fadd
   \      0x6FA   0x465B             MOV      R3,R11
   \      0x6FC   0x4652             MOV      R2,R10
   \      0x6FE   0x4641             MOV      R1,R8
   \      0x700   0x.... 0x....      BL       _Z8probe_ptffbi
   \      0x704   0x9000             STR      R0,[SP, #+0]
    507          
    508                //  We need to adjust z1, z2, z3 by the Mesh Height at these points. Just because they are non-zero doesn't mean
    509                //  the Mesh is tilted!  (We need to compensate each probe point by what the Mesh says that location's height is)
    510          
    511                ubl.save_ubl_active_state_and_disable();
   \      0x706   0x4620             MOV      R0,R4
   \      0x708   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
    512                z1 -= ubl.get_z_correction(LOGICAL_X_POSITION(UBL_PROBE_PT_1_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_1_Y)) /* + zprobe_zoffset */ ;
   \      0x70C   0x6DB1             LDR      R1,[R6, #+88]
   \      0x70E   0x6838             LDR      R0,[R7, #+0]
   \      0x710   0x.... 0x....      BL       __aeabi_fadd
   \      0x714   0x9004             STR      R0,[SP, #+16]
   \      0x716   0x6DF1             LDR      R1,[R6, #+92]
   \      0x718   0x6878             LDR      R0,[R7, #+4]
   \      0x71A   0x.... 0x....      BL       __aeabi_fadd
   \      0x71E   0x9003             STR      R0,[SP, #+12]
   \      0x720   0xAA03             ADD      R2,SP,#+12
   \      0x722   0xA904             ADD      R1,SP,#+16
   \      0x724   0x4620             MOV      R0,R4
   \      0x726   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \      0x72A   0x4601             MOV      R1,R0
   \      0x72C   0x9802             LDR      R0,[SP, #+8]
   \      0x72E   0x.... 0x....      BL       __aeabi_fsub
   \      0x732   0x9002             STR      R0,[SP, #+8]
    513                z2 -= ubl.get_z_correction(LOGICAL_X_POSITION(UBL_PROBE_PT_2_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_2_Y)) /* + zprobe_zoffset */ ;
   \      0x734   0x6E31             LDR      R1,[R6, #+96]
   \      0x736   0x6838             LDR      R0,[R7, #+0]
   \      0x738   0x.... 0x....      BL       __aeabi_fadd
   \      0x73C   0x9004             STR      R0,[SP, #+16]
   \      0x73E   0x6E71             LDR      R1,[R6, #+100]
   \      0x740   0x6878             LDR      R0,[R7, #+4]
   \      0x742   0x.... 0x....      BL       __aeabi_fadd
   \      0x746   0x9003             STR      R0,[SP, #+12]
   \      0x748   0xAA03             ADD      R2,SP,#+12
   \      0x74A   0xA904             ADD      R1,SP,#+16
   \      0x74C   0x4620             MOV      R0,R4
   \      0x74E   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \      0x752   0x4601             MOV      R1,R0
   \      0x754   0x9801             LDR      R0,[SP, #+4]
   \      0x756   0x.... 0x....      BL       __aeabi_fsub
   \      0x75A   0x9001             STR      R0,[SP, #+4]
    514                z3 -= ubl.get_z_correction(LOGICAL_X_POSITION(UBL_PROBE_PT_3_X), LOGICAL_Y_POSITION(UBL_PROBE_PT_3_Y)) /* + zprobe_zoffset */ ;
   \      0x75C   0x6EB1             LDR      R1,[R6, #+104]
   \      0x75E   0x6838             LDR      R0,[R7, #+0]
   \      0x760   0x.... 0x....      BL       __aeabi_fadd
   \      0x764   0x9004             STR      R0,[SP, #+16]
   \      0x766   0x6EF1             LDR      R1,[R6, #+108]
   \      0x768   0x6878             LDR      R0,[R7, #+4]
   \      0x76A   0x.... 0x....      BL       __aeabi_fadd
   \      0x76E   0x9003             STR      R0,[SP, #+12]
   \      0x770   0xAA03             ADD      R2,SP,#+12
   \      0x772   0xA904             ADD      R1,SP,#+16
   \      0x774   0x4620             MOV      R0,R4
   \      0x776   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \      0x77A   0x4601             MOV      R1,R0
   \      0x77C   0x9800             LDR      R0,[SP, #+0]
   \      0x77E   0x.... 0x....      BL       __aeabi_fsub
   \      0x782   0x9000             STR      R0,[SP, #+0]
    515          
    516                do_blocking_move_to_xy(0.5 * (UBL_MESH_MAX_X - (UBL_MESH_MIN_X)), 0.5 * (UBL_MESH_MAX_Y - (UBL_MESH_MIN_Y)));
   \      0x784   0xF9B6 0x0054      LDRSH    R0,[R6, #+84]
   \      0x788   0x.... 0x....      BL       __aeabi_i2f
   \      0x78C   0x4606             MOV      R6,R0
   \      0x78E   0xF04F 0x577C      MOV      R7,#+1056964608
   \      0x792   0x6968             LDR      R0,[R5, #+20]
   \      0x794   0x4631             MOV      R1,R6
   \      0x796   0x.... 0x....      BL       __aeabi_fsub
   \      0x79A   0x4680             MOV      R8,R0
   \      0x79C   0x68A8             LDR      R0,[R5, #+8]
   \      0x79E   0x4631             MOV      R1,R6
   \      0x7A0   0x.... 0x....      BL       __aeabi_fadd
   \      0x7A4   0x4601             MOV      R1,R0
   \      0x7A6   0x4640             MOV      R0,R8
   \      0x7A8   0x.... 0x....      BL       __aeabi_fsub
   \      0x7AC   0x4639             MOV      R1,R7
   \      0x7AE   0x.... 0x....      BL       __aeabi_fmul
   \      0x7B2   0x9005             STR      R0,[SP, #+20]
   \      0x7B4   0x69A8             LDR      R0,[R5, #+24]
   \      0x7B6   0x4631             MOV      R1,R6
   \      0x7B8   0x.... 0x....      BL       __aeabi_fsub
   \      0x7BC   0x4680             MOV      R8,R0
   \      0x7BE   0x68E8             LDR      R0,[R5, #+12]
   \      0x7C0   0x4631             MOV      R1,R6
   \      0x7C2   0x.... 0x....      BL       __aeabi_fadd
   \      0x7C6   0x4601             MOV      R1,R0
   \      0x7C8   0x4640             MOV      R0,R8
   \      0x7CA   0x.... 0x....      BL       __aeabi_fsub
   \      0x7CE   0x4639             MOV      R1,R7
   \      0x7D0   0x.... 0x....      BL       __aeabi_fmul
   \      0x7D4   0x9004             STR      R0,[SP, #+16]
   \      0x7D6   0x2000             MOVS     R0,#+0
   \      0x7D8   0x9003             STR      R0,[SP, #+12]
   \      0x7DA   0xAA03             ADD      R2,SP,#+12
   \      0x7DC   0xA904             ADD      R1,SP,#+16
   \      0x7DE   0xA805             ADD      R0,SP,#+20
   \      0x7E0   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    517                ubl.tilt_mesh_based_on_3pts(z1, z2, z3);
   \      0x7E4   0x466B             MOV      R3,SP
   \      0x7E6   0xAA01             ADD      R2,SP,#+4
   \      0x7E8   0xA902             ADD      R1,SP,#+8
   \      0x7EA   0x4620             MOV      R0,R4
   \      0x7EC   0x.... 0x....      BL       _ZN20unified_bed_leveling23tilt_mesh_based_on_3ptsERKfS1_S1_
    518                ubl.restore_ubl_active_state_and_leave();
   \      0x7F0   0x4620             MOV      R0,R4
   \      0x7F2   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    519              }
    520          
    521              //
    522              // Much of the 'What?' command can be eliminated. But until we are fully debugged, it is
    523              // good to have the extra information. Soon... we prune this to just a few items
    524              //
    525              if (code_seen('W')) g29_what_command();
   \                     ??gcode_G29_UBL_74: (+1)
   \      0x7F6   0x2057             MOVS     R0,#+87
   \      0x7F8   0x.... 0x....      BL       _Z9code_seenc
   \      0x7FC   0x2800             CMP      R0,#+0
   \      0x7FE   0xD001             BEQ.N    ??gcode_G29_UBL_75
   \      0x800   0x.... 0x....      BL       _Z16g29_what_commandv
    526          
    527              //
    528              // When we are fully debugged, the EEPROM dump command will get deleted also. But
    529              // right now, it is good to have the extra information. Soon... we prune this.
    530              //
    531              if (code_seen('j')) g29_eeprom_dump();   // EEPROM Dump
   \                     ??gcode_G29_UBL_75: (+1)
   \      0x804   0x206A             MOVS     R0,#+106
   \      0x806   0x.... 0x....      BL       _Z9code_seenc
   \      0x80A   0x2800             CMP      R0,#+0
   \      0x80C   0xD001             BEQ.N    ??gcode_G29_UBL_76
   \      0x80E   0x.... 0x....      BL       _Z15g29_eeprom_dumpv
    532          
    533              //
    534              // When we are fully debugged, this may go away. But there are some valid
    535              // use cases for the users. So we can wait and see what to do with it.
    536              //
    537          
    538              if (code_seen('K')) // Kompare Current Mesh Data to Specified Stored Mesh
   \                     ??gcode_G29_UBL_76: (+1)
   \      0x812   0x204B             MOVS     R0,#+75
   \      0x814   0x.... 0x....      BL       _Z9code_seenc
   \      0x818   0x2800             CMP      R0,#+0
   \      0x81A   0xD001             BEQ.N    ??gcode_G29_UBL_77
    539                g29_compare_current_mesh_to_stored_mesh();
   \      0x81C   0x.... 0x....      BL       _Z39g29_compare_current_mesh_to_stored_meshv
    540          
    541              //
    542              // Load a Mesh from the EEPROM
    543              //
    544          
    545              if (code_seen('L')) {     // Load Current Mesh Data
   \                     ??gcode_G29_UBL_77: (+1)
   \      0x820   0x204C             MOVS     R0,#+76
   \      0x822   0x.... 0x....      BL       _Z9code_seenc
   \      0x826   0x2800             CMP      R0,#+0
   \      0x828   0xD031             BEQ.N    ??gcode_G29_UBL_78
    546                storage_slot = code_has_value() ? code_value_int() : ubl.state.eeprom_storage_slot;
   \      0x82A   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x82E   0x2800             CMP      R0,#+0
   \      0x830   0xD004             BEQ.N    ??gcode_G29_UBL_79
   \      0x832   0x.... 0x....      BL       _Z14code_value_intv
   \      0x836   0xF8C9 0x0010      STR      R0,[R9, #+16]
   \      0x83A   0xE005             B.N      ??gcode_G29_UBL_80
   \                     ??gcode_G29_UBL_79: (+1)
   \      0x83C   0x.... 0x....      LDR.W    R0,??DataTable112_3
   \      0x840   0xF990 0x0008      LDRSB    R0,[R0, #+8]
   \      0x844   0xF8C9 0x0010      STR      R0,[R9, #+16]
    547          
    548                const int16_t j = (UBL_LAST_EEPROM_INDEX - ubl.eeprom_start) / sizeof(ubl.z_values);
    549          
    550                if (!WITHIN(storage_slot, 0, j - 1) || ubl.eeprom_start <= 0) {
   \                     ??gcode_G29_UBL_80: (+1)
   \      0x848   0xF8D9 0x1010      LDR      R1,[R9, #+16]
   \      0x84C   0x2900             CMP      R1,#+0
   \      0x84E   0xD40C             BMI.N    ??gcode_G29_UBL_81
   \      0x850   0x....             LDR.N    R0,??DataTable110_2
   \      0x852   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \      0x856   0xF240 0x52FF      MOVW     R2,#+1535
   \      0x85A   0x1A12             SUBS     R2,R2,R0
   \      0x85C   0x0A92             LSRS     R2,R2,#+10
   \      0x85E   0xB212             SXTH     R2,R2
   \      0x860   0x1E52             SUBS     R2,R2,#+1
   \      0x862   0x428A             CMP      R2,R1
   \      0x864   0xDB01             BLT.N    ??gcode_G29_UBL_81
   \      0x866   0x2800             CMP      R0,#+0
   \      0x868   0xDC04             BGT.N    ??gcode_G29_UBL_82
    551                  SERIAL_PROTOCOLLNPGM("?EEPROM storage not available for use.\n");
   \                     ??gcode_G29_UBL_81: (+1)
   \      0x86A   0x.... 0x....      LDR.W    R0,??DataTable114
   \      0x86E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    552                  return;
   \      0x872   0xE17C             B.N      ??gcode_G29_UBL_2
    553                }
    554                ubl.load_mesh(storage_slot);
   \                     ??gcode_G29_UBL_82: (+1)
   \      0x874   0xB209             SXTH     R1,R1
   \      0x876   0x4620             MOV      R0,R4
   \      0x878   0x.... 0x....      BL       _ZN20unified_bed_leveling9load_meshEs
    555                ubl.state.eeprom_storage_slot = storage_slot;
   \      0x87C   0xF8D9 0x0010      LDR      R0,[R9, #+16]
   \      0x880   0x.... 0x....      LDR.W    R1,??DataTable112_3
   \      0x884   0x7208             STRB     R0,[R1, #+8]
    556                SERIAL_PROTOCOLLNPGM("Done.\n");
   \      0x886   0x.... 0x....      ADR.W    R0,?_15
   \      0x88A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    557              }
    558          
    559              //
    560              // Store a Mesh in the EEPROM
    561              //
    562          
    563              if (code_seen('S')) {     // Store (or Save) Current Mesh Data
   \                     ??gcode_G29_UBL_78: (+1)
   \      0x88E   0x2053             MOVS     R0,#+83
   \      0x890   0x.... 0x....      BL       _Z9code_seenc
   \      0x894   0x2800             CMP      R0,#+0
   \      0x896   0xF000 0x80B8      BEQ.W    ??gcode_G29_UBL_83
    564                storage_slot = code_has_value() ? code_value_int() : ubl.state.eeprom_storage_slot;
   \      0x89A   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x89E   0x2800             CMP      R0,#+0
   \      0x8A0   0xD004             BEQ.N    ??gcode_G29_UBL_84
   \      0x8A2   0x.... 0x....      BL       _Z14code_value_intv
   \      0x8A6   0xF8C9 0x0010      STR      R0,[R9, #+16]
   \      0x8AA   0xE005             B.N      ??gcode_G29_UBL_85
   \                     ??gcode_G29_UBL_84: (+1)
   \      0x8AC   0x.... 0x....      LDR.W    R0,??DataTable112_3
   \      0x8B0   0xF990 0x0008      LDRSB    R0,[R0, #+8]
   \      0x8B4   0xF8C9 0x0010      STR      R0,[R9, #+16]
    565          
    566                if (storage_slot == -1) {                     // Special case, we are going to 'Export' the mesh to the
   \                     ??gcode_G29_UBL_85: (+1)
   \      0x8B8   0xF8D9 0x1010      LDR      R1,[R9, #+16]
   \      0x8BC   0xF111 0x0F01      CMN      R1,#+1
   \      0x8C0   0xD16C             BNE.N    ??gcode_G29_UBL_86
    567                  SERIAL_ECHOLNPGM("G29 I 999");              // host in a form it can be reconstructed on a different machine
   \      0x8C2   0x.... 0x....      ADR.W    R0,?_16
   \      0x8C6   0x.... 0x....      BL       _Z14serialprintPGMPKc
    568                  for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \      0x8CA   0x2500             MOVS     R5,#+0
   \      0x8CC   0x.... 0x....      LDR.W    R4,??find_mean_mesh_height_0
   \      0x8D0   0x.... 0x....      LDR.W    R8,??DataTable113_2
   \      0x8D4   0xE001             B.N      ??gcode_G29_UBL_87
   \                     ??gcode_G29_UBL_88: (+1)
   \      0x8D6   0x1C6D             ADDS     R5,R5,#+1
   \      0x8D8   0xB2ED             UXTB     R5,R5
   \                     ??gcode_G29_UBL_87: (+1)
   \      0x8DA   0x7820             LDRB     R0,[R4, #+0]
   \      0x8DC   0x4285             CMP      R5,R0
   \      0x8DE   0xF280 0x8146      BGE.W    ??gcode_G29_UBL_2
    569                    for (uint8_t y = 0;  y < GRID_MAX_POINTS_Y; y++)
   \      0x8E2   0x2600             MOVS     R6,#+0
   \      0x8E4   0xE030             B.N      ??gcode_G29_UBL_89
    570                      if (!isnan(ubl.z_values[x][y])) {
    571                        SERIAL_ECHOPAIR("M421 I ", x);
    572                        SERIAL_ECHOPAIR(" J ", y);
    573                        SERIAL_ECHOPGM(" Z ");
    574                        SERIAL_ECHO_F(ubl.z_values[x][y], 6);
    575                        SERIAL_ECHOPAIR(" ; X ", LOGICAL_X_POSITION(ubl.mesh_index_to_xpos[x]));
    576                        SERIAL_ECHOPAIR(", Y ", LOGICAL_Y_POSITION(ubl.mesh_index_to_ypos[y]));
    577                        SERIAL_EOL;
   \                     ??gcode_G29_UBL_90: (+1)
   \      0x8E6   0x2200             MOVS     R2,#+0
   \      0x8E8   0x210A             MOVS     R1,#+10
   \      0x8EA   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x8EE   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \      0x8F2   0xE027             B.N      ??gcode_G29_UBL_91
   \                     ??gcode_G29_UBL_92: (+1)
   \      0x8F4   0x2006             MOVS     R0,#+6
   \      0x8F6   0x9000             STR      R0,[SP, #+0]
   \      0x8F8   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x8FC   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \                     ??gcode_G29_UBL_93: (+1)
   \      0x900   0x.... 0x....      LDR.W    R0,??DataTable115
   \      0x904   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \      0x908   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x90C   0x.... 0x....      BL       __aeabi_fadd
   \      0x910   0x4601             MOV      R1,R0
   \      0x912   0x.... 0x....      ADR.W    R0,?_20
   \      0x916   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \      0x91A   0x.... 0x....      LDR.W    R0,??DataTable115_1
   \      0x91E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \      0x922   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x926   0x.... 0x....      BL       __aeabi_fadd
   \      0x92A   0x4601             MOV      R1,R0
   \      0x92C   0x.... 0x....      ADR.W    R0,?_21
   \      0x930   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \      0x934   0x7838             LDRB     R0,[R7, #+0]
   \      0x936   0x2800             CMP      R0,#+0
   \      0x938   0xD1D5             BNE.N    ??gcode_G29_UBL_90
   \      0x93A   0x210A             MOVS     R1,#+10
   \      0x93C   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x940   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \                     ??gcode_G29_UBL_91: (+1)
   \      0x944   0x1C76             ADDS     R6,R6,#+1
   \      0x946   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_89: (+1)
   \      0x948   0x7860             LDRB     R0,[R4, #+1]
   \      0x94A   0x4286             CMP      R6,R0
   \      0x94C   0xDAC3             BGE.N    ??gcode_G29_UBL_88
   \      0x94E   0x....             LDR.N    R0,??DataTable110_6
   \      0x950   0xEB10 0x1785      ADDS     R7,R0,R5, LSL #+6
   \      0x954   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \      0x958   0x.... 0x....      BL       _Z5isnanf
   \      0x95C   0x2800             CMP      R0,#+0
   \      0x95E   0xD1F1             BNE.N    ??gcode_G29_UBL_91
   \      0x960   0x4629             MOV      R1,R5
   \      0x962   0x.... 0x....      ADR.W    R0,?_17
   \      0x966   0x.... 0x....      BL       _Z17serial_echopair_PPKch
   \      0x96A   0x4631             MOV      R1,R6
   \      0x96C   0x....             ADR.N    R0,??DataTable110  ;; " J "
   \      0x96E   0x.... 0x....      BL       _Z17serial_echopair_PPKch
   \      0x972   0x....             ADR.N    R0,??DataTable110_1  ;; " Z "
   \      0x974   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x978   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \      0x97C   0x.... 0x....      BL       __aeabi_f2d
   \      0x980   0x4602             MOV      R2,R0
   \      0x982   0x460B             MOV      R3,R1
   \      0x984   0x.... 0x....      LDR.W    R7,??DataTable112_4
   \      0x988   0x7838             LDRB     R0,[R7, #+0]
   \      0x98A   0x2800             CMP      R0,#+0
   \      0x98C   0xD1B2             BNE.N    ??gcode_G29_UBL_92
   \      0x98E   0x2006             MOVS     R0,#+6
   \      0x990   0x9000             STR      R0,[SP, #+0]
   \      0x992   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x996   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x99A   0xE7B1             B.N      ??gcode_G29_UBL_93
    578                      }
    579                  return;
    580                }
    581          
    582                const int16_t j = (UBL_LAST_EEPROM_INDEX - ubl.eeprom_start) / sizeof(ubl.z_values);
   \                     ??gcode_G29_UBL_86: (+1)
   \      0x99C   0x....             LDR.N    R0,??DataTable110_2
   \      0x99E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \      0x9A2   0xF240 0x55FF      MOVW     R5,#+1535
   \      0x9A6   0x1A2D             SUBS     R5,R5,R0
   \      0x9A8   0x0AAD             LSRS     R5,R5,#+10
   \      0x9AA   0xB22D             SXTH     R5,R5
    583          
    584                if (!WITHIN(storage_slot, 0, j - 1) || ubl.eeprom_start <= 0) {
   \      0x9AC   0x1E6D             SUBS     R5,R5,#+1
   \      0x9AE   0x2900             CMP      R1,#+0
   \      0x9B0   0xD403             BMI.N    ??gcode_G29_UBL_94
   \      0x9B2   0x428D             CMP      R5,R1
   \      0x9B4   0xDB01             BLT.N    ??gcode_G29_UBL_94
   \      0x9B6   0x2800             CMP      R0,#+0
   \      0x9B8   0xDC1A             BGT.N    ??gcode_G29_UBL_95
    585                  SERIAL_PROTOCOLLNPGM("?EEPROM storage not available for use.\n");
   \                     ??gcode_G29_UBL_94: (+1)
   \      0x9BA   0x.... 0x....      LDR.W    R0,??DataTable114
   \      0x9BE   0x.... 0x....      BL       _Z14serialprintPGMPKc
    586                  SERIAL_PROTOCOLLNPAIR("?Use 0 to ", j - 1);
   \      0x9C2   0x4629             MOV      R1,R5
   \      0x9C4   0x.... 0x....      ADR.W    R0,?_22
   \      0x9C8   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \      0x9CC   0x.... 0x....      LDR.W    R0,??DataTable112_4
   \      0x9D0   0x7800             LDRB     R0,[R0, #+0]
   \      0x9D2   0x2800             CMP      R0,#+0
   \      0x9D4   0xD105             BNE.N    ??gcode_G29_UBL_96
   \      0x9D6   0x210A             MOVS     R1,#+10
   \      0x9D8   0x.... 0x....      LDR.W    R0,??DataTable112_5
   \      0x9DC   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x9E0   0xE0B9             B.N      ??gcode_G29_UBL_97
   \                     ??gcode_G29_UBL_96: (+1)
   \      0x9E2   0x2200             MOVS     R2,#+0
   \      0x9E4   0x210A             MOVS     R1,#+10
   \      0x9E6   0x.... 0x....      LDR.W    R0,??DataTable112_6
   \      0x9EA   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \      0x9EE   0xE0B2             B.N      ??gcode_G29_UBL_97
    587                  goto LEAVE;
    588                }
    589                ubl.store_mesh(storage_slot);
   \                     ??gcode_G29_UBL_95: (+1)
   \      0x9F0   0xB209             SXTH     R1,R1
   \      0x9F2   0x4620             MOV      R0,R4
   \      0x9F4   0x.... 0x....      BL       _ZN20unified_bed_leveling10store_meshEs
    590                ubl.state.eeprom_storage_slot = storage_slot;
   \      0x9F8   0xF8D9 0x0010      LDR      R0,[R9, #+16]
   \      0x9FC   0x.... 0x....      LDR.W    R1,??DataTable112_3
   \      0xA00   0x7208             STRB     R0,[R1, #+8]
    591          
    592                SERIAL_PROTOCOLLNPGM("Done.\n");
   \      0xA02   0x.... 0x....      ADR.W    R0,?_15
   \      0xA06   0x.... 0x....      BL       _Z14serialprintPGMPKc
    593              }
    594          
    595              if (code_seen('O') || code_seen('M'))
   \                     ??gcode_G29_UBL_83: (+1)
   \      0xA0A   0x204F             MOVS     R0,#+79
   \      0xA0C   0x.... 0x....      BL       _Z9code_seenc
   \      0xA10   0x2800             CMP      R0,#+0
   \      0xA12   0xD104             BNE.N    ??gcode_G29_UBL_98
   \      0xA14   0x204D             MOVS     R0,#+77
   \      0xA16   0x.... 0x....      BL       _Z9code_seenc
   \      0xA1A   0x2800             CMP      R0,#+0
   \      0xA1C   0xD00B             BEQ.N    ??gcode_G29_UBL_99
    596                ubl.display_map(code_has_value() ? code_value_int() : 0);
   \                     ??gcode_G29_UBL_98: (+1)
   \      0xA1E   0x.... 0x....      BL       _Z14code_has_valuev
   \      0xA22   0x2800             CMP      R0,#+0
   \      0xA24   0xD002             BEQ.N    ??gcode_G29_UBL_100
   \      0xA26   0x.... 0x....      BL       _Z14code_value_intv
   \      0xA2A   0xE000             B.N      ??gcode_G29_UBL_101
   \                     ??gcode_G29_UBL_100: (+1)
   \      0xA2C   0x2000             MOVS     R0,#+0
   \                     ??gcode_G29_UBL_101: (+1)
   \      0xA2E   0x4601             MOV      R1,R0
   \      0xA30   0x4620             MOV      R0,R4
   \      0xA32   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
    597          
    598              if (code_seen('Z')) {
   \                     ??gcode_G29_UBL_99: (+1)
   \      0xA36   0x205A             MOVS     R0,#+90
   \      0xA38   0x.... 0x....      BL       _Z9code_seenc
   \      0xA3C   0x2800             CMP      R0,#+0
   \      0xA3E   0xF000 0x808A      BEQ.W    ??gcode_G29_UBL_97
    599                if (code_has_value())
   \      0xA42   0x.... 0x....      BL       _Z14code_has_valuev
   \      0xA46   0x2800             CMP      R0,#+0
   \      0xA48   0xD005             BEQ.N    ??gcode_G29_UBL_102
    600                  ubl.state.z_offset = code_value_float();   // do the simple case. Just lock in the specified value
   \      0xA4A   0x.... 0x....      BL       _Z16code_value_floatv
   \      0xA4E   0x.... 0x....      LDR.W    R1,??DataTable112_3
   \      0xA52   0x6048             STR      R0,[R1, #+4]
   \      0xA54   0xE07F             B.N      ??gcode_G29_UBL_97
    601                else {
    602                  ubl.save_ubl_active_state_and_disable();
   \                     ??gcode_G29_UBL_102: (+1)
   \      0xA56   0x4620             MOV      R0,R4
   \      0xA58   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
    603                  //measured_z = probe_pt(x_pos + X_PROBE_OFFSET_FROM_EXTRUDER, y_pos + Y_PROBE_OFFSET_FROM_EXTRUDER, ProbeDeployAndStow, g29_verbose_level);
    604          
    605                  ubl.has_control_of_lcd_panel = true;     // Grab the LCD Hardware
   \      0xA5C   0x.... 0x....      LDR.W    R5,??DataTable116_1
   \      0xA60   0x2001             MOVS     R0,#+1
   \      0xA62   0x7028             STRB     R0,[R5, #+0]
    606                  measured_z = 1.5;
   \      0xA64   0xF04F 0x507F      MOV      R0,#+1069547520
   \      0xA68   0xF8C9 0x0024      STR      R0,[R9, #+36]
    607                  do_blocking_move_to_z(measured_z);  // Get close to the bed, but leave some space so we don't damage anything
   \      0xA6C   0x2000             MOVS     R0,#+0
   \      0xA6E   0x9000             STR      R0,[SP, #+0]
   \      0xA70   0x4669             MOV      R1,SP
   \      0xA72   0xF109 0x0024      ADD      R0,R9,#+36
   \      0xA76   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    608                                                      // The user is not going to be locking in a new Z-Offset very often so
    609                                                      // it won't be that painful to spin the Encoder Wheel for 1.5mm
    610                  lcd_implementation_clear();
   \      0xA7A   0x.... 0x....      BL       _Z24lcd_implementation_clearv
    611                  lcd_z_offset_edit_setup(measured_z);
   \      0xA7E   0xF8D9 0x0024      LDR      R0,[R9, #+36]
   \      0xA82   0x.... 0x....      BL       _Z23lcd_z_offset_edit_setupf
    612          
    613                  KEEPALIVE_STATE(PAUSED_FOR_USER);
   \      0xA86   0x.... 0x....      LDR.W    R6,??DataTable116_2
   \      0xA8A   0x2003             MOVS     R0,#+3
   \      0xA8C   0x7030             STRB     R0,[R6, #+0]
    614          
    615                  do {
    616                    measured_z = lcd_z_offset_edit();
   \                     ??gcode_G29_UBL_103: (+1)
   \      0xA8E   0x.... 0x....      BL       _Z17lcd_z_offset_editv
   \      0xA92   0xF8C9 0x0024      STR      R0,[R9, #+36]
    617                    idle();
   \      0xA96   0x2000             MOVS     R0,#+0
   \      0xA98   0x.... 0x....      BL       _Z4idleb
    618                    do_blocking_move_to_z(measured_z);
   \      0xA9C   0x2000             MOVS     R0,#+0
   \      0xA9E   0x9000             STR      R0,[SP, #+0]
   \      0xAA0   0x4669             MOV      R1,SP
   \      0xAA2   0xF109 0x0024      ADD      R0,R9,#+36
   \      0xAA6   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    619                  } while (!ubl_lcd_clicked());
   \      0xAAA   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0xAAE   0x2800             CMP      R0,#+0
   \      0xAB0   0xD0ED             BEQ.N    ??gcode_G29_UBL_103
    620          
    621                  ubl.has_control_of_lcd_panel = true;   // There is a race condition for the Encoder Wheel getting clicked.
   \      0xAB2   0x2001             MOVS     R0,#+1
   \      0xAB4   0x7028             STRB     R0,[R5, #+0]
    622                                                         // It could get detected in lcd_mesh_edit (actually _lcd_mesh_fine_tune)
    623                                                         // or here. So, until we are done looking for a long Encoder Wheel Press,
    624                                                         // we need to take control of the panel
    625          
    626                  KEEPALIVE_STATE(IN_HANDLER);
   \      0xAB6   0x7030             STRB     R0,[R6, #+0]
    627          
    628                  lcd_return_to_status();
   \      0xAB8   0x.... 0x....      BL       _Z20lcd_return_to_statusv
    629          
    630                  const millis_t nxt = millis() + 1500UL;
   \      0xABC   0x.... 0x....      BL       HAL_GetTick
   \      0xAC0   0x4606             MOV      R6,R0
   \      0xAC2   0xF206 0x56DC      ADDW     R6,R6,#+1500
    631                  while (ubl_lcd_clicked()) { // debounce and watch for abort
   \                     ??gcode_G29_UBL_104: (+1)
   \      0xAC6   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0xACA   0x2800             CMP      R0,#+0
   \      0xACC   0xD034             BEQ.N    ??gcode_G29_UBL_105
    632                    idle();
   \      0xACE   0x2000             MOVS     R0,#+0
   \      0xAD0   0x.... 0x....      BL       _Z4idleb
    633                    if (ELAPSED(millis(), nxt)) {
   \      0xAD4   0x.... 0x....      BL       HAL_GetTick
   \      0xAD8   0x1B80             SUBS     R0,R0,R6
   \      0xADA   0xD4F4             BMI.N    ??gcode_G29_UBL_104
    634                      SERIAL_PROTOCOLLNPGM("\nZ-Offset Adjustment Stopped.");
   \      0xADC   0x.... 0x....      ADR.W    R0,?_23
   \      0xAE0   0x.... 0x....      BL       _Z14serialprintPGMPKc
    635                      do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \      0xAE4   0x2000             MOVS     R0,#+0
   \      0xAE6   0x9000             STR      R0,[SP, #+0]
   \      0xAE8   0x4669             MOV      R1,SP
   \      0xAEA   0x.... 0x....      LDR.W    R0,??DataTable116_3
   \      0xAEE   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    636                      LCD_MESSAGEPGM("Z-Offset Stopped");
   \      0xAF2   0x2100             MOVS     R1,#+0
   \      0xAF4   0x.... 0x....      ADR.W    R0,?_24
   \      0xAF8   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
    637                      ubl.restore_ubl_active_state_and_leave();
   \      0xAFC   0x4620             MOV      R0,R4
   \      0xAFE   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    638                      goto LEAVE;
   \      0xB02   0xE028             B.N      ??gcode_G29_UBL_97
    639                    }
    640                  }
   \                     ??gcode_G29_UBL_10: (+1)
   \      0xB04   0x.... 0x....      LDR.W    R4,??DataTable116_4
   \      0xB08   0x204A             MOVS     R0,#+74
   \      0xB0A   0x.... 0x....      BL       _Z9code_seenc
   \      0xB0E   0x2800             CMP      R0,#+0
   \      0xB10   0xF43F 0xAC15      BEQ.W    ??gcode_G29_UBL_38
   \      0xB14   0x4620             MOV      R0,R4
   \      0xB16   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
   \      0xB1A   0x204F             MOVS     R0,#+79
   \      0xB1C   0x.... 0x....      BL       _Z9code_seenc
   \      0xB20   0x2800             CMP      R0,#+0
   \      0xB22   0xF47F 0xAC05      BNE.W    ??gcode_G29_UBL_36
   \      0xB26   0x204D             MOVS     R0,#+77
   \      0xB28   0x.... 0x....      BL       _Z9code_seenc
   \      0xB2C   0x1E41             SUBS     R1,R0,#+1
   \      0xB2E   0x4189             SBCS     R1,R1,R1
   \      0xB30   0x43C9             MVNS     R1,R1
   \      0xB32   0x0FC9             LSRS     R1,R1,#+31
   \      0xB34   0xF7FF 0xBBFD      B.W      ??gcode_G29_UBL_37
    641                  ubl.has_control_of_lcd_panel = false;
   \                     ??gcode_G29_UBL_105: (+1)
   \      0xB38   0x2000             MOVS     R0,#+0
   \      0xB3A   0x7028             STRB     R0,[R5, #+0]
    642                  safe_delay(20); // We don't want any switch noise.
   \      0xB3C   0x2014             MOVS     R0,#+20
   \      0xB3E   0x.... 0x....      BL       _Z10safe_delaym
    643          
    644                  ubl.state.z_offset = measured_z;
   \      0xB42   0xF8D9 0x0024      LDR      R0,[R9, #+36]
   \      0xB46   0x.... 0x....      LDR.W    R1,??DataTable112_3
   \      0xB4A   0x6048             STR      R0,[R1, #+4]
    645          
    646                  lcd_implementation_clear();
   \      0xB4C   0x.... 0x....      BL       _Z24lcd_implementation_clearv
    647                  ubl.restore_ubl_active_state_and_leave();
   \      0xB50   0x4620             MOV      R0,R4
   \      0xB52   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    648                }
    649              }
    650          
    651              LEAVE:
    652          
    653              lcd_reset_alert_level();
   \                     ??gcode_G29_UBL_97: (+1)
   \      0xB56   0x.... 0x....      BL       _Z21lcd_reset_alert_levelv
    654              LCD_MESSAGEPGM("");
   \      0xB5A   0x2100             MOVS     R1,#+0
   \      0xB5C   0x....             ADR.N    R0,??DataTable110_11  ;; ""
   \      0xB5E   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
    655              lcd_quick_feedback();
   \      0xB62   0x.... 0x....      BL       _Z18lcd_quick_feedbackv
    656          
    657              ubl.has_control_of_lcd_panel = false;
   \      0xB66   0x2000             MOVS     R0,#+0
   \      0xB68   0x.... 0x....      LDR.W    R1,??DataTable116_1
   \      0xB6C   0x7008             STRB     R0,[R1, #+0]
    658            }
   \                     ??gcode_G29_UBL_2: (+1)
   \      0xB6E   0xB007             ADD      SP,SP,#+28
   \      0xB70   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    659          

   \                                 In section .text, align 4, keep-with-next
    660            void unified_bed_leveling::find_mean_mesh_height() {
   \                     _ZN20unified_bed_leveling21find_mean_mesh_heightEv: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
    661              float sum = 0.0;
   \        0x4   0x2600             MOVS     R6,#+0
    662              int n = 0;
   \        0x6   0x4635             MOV      R5,R6
    663              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \        0x8   0x462F             MOV      R7,R5
   \        0xA   0x4C6C             LDR.N    R4,??find_mean_mesh_height_0
   \        0xC   0xE019             B.N      ??find_mean_mesh_height_1
    664                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    665                  if (!isnan(ubl.z_values[x][y])) {
   \                     ??find_mean_mesh_height_2: (+1)
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable117
   \       0x12   0xEB00 0x1987      ADD      R9,R0,R7, LSL #+6
   \       0x16   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \       0x1A   0x.... 0x....      BL       _Z5isnanf
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD106             BNE.N    ??find_mean_mesh_height_3
    666                    sum += ubl.z_values[x][y];
   \       0x22   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \       0x26   0x4631             MOV      R1,R6
   \       0x28   0x.... 0x....      BL       __aeabi_fadd
   \       0x2C   0x4606             MOV      R6,R0
    667                    n++;
   \       0x2E   0x1C6D             ADDS     R5,R5,#+1
    668                  }
   \                     ??find_mean_mesh_height_3: (+1)
   \       0x30   0xF108 0x0801      ADD      R8,R8,#+1
   \       0x34   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??find_mean_mesh_height_4: (+1)
   \       0x38   0x7860             LDRB     R0,[R4, #+1]
   \       0x3A   0x4580             CMP      R8,R0
   \       0x3C   0xDBE7             BLT.N    ??find_mean_mesh_height_2
   \       0x3E   0x1C7F             ADDS     R7,R7,#+1
   \       0x40   0xB2FF             UXTB     R7,R7
   \                     ??find_mean_mesh_height_1: (+1)
   \       0x42   0x7820             LDRB     R0,[R4, #+0]
   \       0x44   0x4287             CMP      R7,R0
   \       0x46   0xDA02             BGE.N    ??find_mean_mesh_height_5
   \       0x48   0xF04F 0x0800      MOV      R8,#+0
   \       0x4C   0xE7F4             B.N      ??find_mean_mesh_height_4
    669          
    670              const float mean = sum / n;
   \                     ??find_mean_mesh_height_5: (+1)
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x.... 0x....      BL       __aeabi_i2f
   \       0x54   0x4601             MOV      R1,R0
   \       0x56   0x4630             MOV      R0,R6
   \       0x58   0x.... 0x....      BL       __aeabi_fdiv
   \       0x5C   0x9001             STR      R0,[SP, #+4]
    671          
    672              //
    673              // Now do the sumation of the squares of difference from mean
    674              //
    675              float sum_of_diff_squared = 0.0;
   \       0x5E   0x2600             MOVS     R6,#+0
    676              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \       0x60   0x46B0             MOV      R8,R6
   \       0x62   0xE003             B.N      ??find_mean_mesh_height_6
   \                     ??find_mean_mesh_height_7: (+1)
   \       0x64   0xF108 0x0801      ADD      R8,R8,#+1
   \       0x68   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??find_mean_mesh_height_6: (+1)
   \       0x6C   0x7820             LDRB     R0,[R4, #+0]
   \       0x6E   0x4580             CMP      R8,R0
   \       0x70   0xDA30             BGE.N    ??find_mean_mesh_height_8
    677                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
   \       0x72   0xF04F 0x0900      MOV      R9,#+0
   \       0x76   0xE016             B.N      ??find_mean_mesh_height_9
   \                     ??find_mean_mesh_height_10: (+1)
   \       0x78   0x4650             MOV      R0,R10
   \       0x7A   0x4651             MOV      R1,R10
   \       0x7C   0x.... 0x....      BL       __aeabi_fmul
   \       0x80   0x4682             MOV      R10,R0
   \                     ??find_mean_mesh_height_11: (+1)
   \       0x82   0x07F8             LSLS     R0,R7,#+31
   \       0x84   0xD504             BPL.N    ??find_mean_mesh_height_12
   \       0x86   0x4658             MOV      R0,R11
   \       0x88   0x4651             MOV      R1,R10
   \       0x8A   0x.... 0x....      BL       __aeabi_fmul
   \       0x8E   0x4683             MOV      R11,R0
   \                     ??find_mean_mesh_height_12: (+1)
   \       0x90   0x087F             LSRS     R7,R7,#+1
   \       0x92   0xD1F1             BNE.N    ??find_mean_mesh_height_10
    678                  if (!isnan(ubl.z_values[x][y]))
    679                    sum_of_diff_squared += sq(ubl.z_values[x][y] - mean);
   \       0x94   0x4630             MOV      R0,R6
   \       0x96   0x4659             MOV      R1,R11
   \       0x98   0x.... 0x....      BL       __aeabi_fadd
   \       0x9C   0x4606             MOV      R6,R0
   \                     ??find_mean_mesh_height_13: (+1)
   \       0x9E   0xF109 0x0901      ADD      R9,R9,#+1
   \       0xA2   0xFA5F 0xF989      UXTB     R9,R9
   \                     ??find_mean_mesh_height_9: (+1)
   \       0xA6   0x7860             LDRB     R0,[R4, #+1]
   \       0xA8   0x4581             CMP      R9,R0
   \       0xAA   0xDADB             BGE.N    ??find_mean_mesh_height_7
   \       0xAC   0x.... 0x....      LDR.W    R0,??DataTable117
   \       0xB0   0xEB10 0x1788      ADDS     R7,R0,R8, LSL #+6
   \       0xB4   0xF857 0x0029      LDR      R0,[R7, R9, LSL #+2]
   \       0xB8   0x.... 0x....      BL       _Z5isnanf
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xD1EE             BNE.N    ??find_mean_mesh_height_13
   \       0xC0   0xF857 0x0029      LDR      R0,[R7, R9, LSL #+2]
   \       0xC4   0x9901             LDR      R1,[SP, #+4]
   \       0xC6   0x.... 0x....      BL       __aeabi_fsub
   \       0xCA   0x4682             MOV      R10,R0
   \       0xCC   0x2702             MOVS     R7,#+2
   \       0xCE   0xF04F 0x5B7E      MOV      R11,#+1065353216
   \       0xD2   0xE7D6             B.N      ??find_mean_mesh_height_11
    680          
    681              SERIAL_ECHOLNPAIR("# of samples: ", n);
   \                     ??find_mean_mesh_height_8: (+1)
   \       0xD4   0x4629             MOV      R1,R5
   \       0xD6   0x.... 0x....      ADR.W    R0,?_92
   \       0xDA   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0xDE   0x.... 0x....      LDR.W    R9,??DataTable112_6
   \       0xE2   0x.... 0x....      LDR.W    R8,??DataTable112_5
   \       0xE6   0x....             LDR.N    R7,??DataTable112_4
   \       0xE8   0x7838             LDRB     R0,[R7, #+0]
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD104             BNE.N    ??find_mean_mesh_height_14
   \       0xEE   0x210A             MOVS     R1,#+10
   \       0xF0   0x4640             MOV      R0,R8
   \       0xF2   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0xF6   0xE004             B.N      ??find_mean_mesh_height_15
   \                     ??find_mean_mesh_height_14: (+1)
   \       0xF8   0x2200             MOVS     R2,#+0
   \       0xFA   0x210A             MOVS     R1,#+10
   \       0xFC   0x4648             MOV      R0,R9
   \       0xFE   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    682              SERIAL_ECHOPGM("Mean Mesh Height: ");
   \                     ??find_mean_mesh_height_15: (+1)
   \      0x102   0x.... 0x....      ADR.W    R0,?_93
   \      0x106   0x.... 0x....      BL       _Z14serialprintPGMPKc
    683              SERIAL_ECHO_F(mean, 6);
   \      0x10A   0x9801             LDR      R0,[SP, #+4]
   \      0x10C   0x.... 0x....      BL       __aeabi_f2d
   \      0x110   0x783A             LDRB     R2,[R7, #+0]
   \      0x112   0x2A00             CMP      R2,#+0
   \      0x114   0xD107             BNE.N    ??find_mean_mesh_height_16
   \      0x116   0x2206             MOVS     R2,#+6
   \      0x118   0x9200             STR      R2,[SP, #+0]
   \      0x11A   0x4602             MOV      R2,R0
   \      0x11C   0x460B             MOV      R3,R1
   \      0x11E   0x4640             MOV      R0,R8
   \      0x120   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x124   0xE006             B.N      ??find_mean_mesh_height_17
   \                     ??find_mean_mesh_height_16: (+1)
   \      0x126   0x2206             MOVS     R2,#+6
   \      0x128   0x9200             STR      R2,[SP, #+0]
   \      0x12A   0x4602             MOV      R2,R0
   \      0x12C   0x460B             MOV      R3,R1
   \      0x12E   0x4648             MOV      R0,R9
   \      0x130   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    684              SERIAL_EOL;
   \                     ??find_mean_mesh_height_17: (+1)
   \      0x134   0x7838             LDRB     R0,[R7, #+0]
   \      0x136   0x2800             CMP      R0,#+0
   \      0x138   0xD104             BNE.N    ??find_mean_mesh_height_18
   \      0x13A   0x210A             MOVS     R1,#+10
   \      0x13C   0x4640             MOV      R0,R8
   \      0x13E   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x142   0xE004             B.N      ??find_mean_mesh_height_19
   \                     ??find_mean_mesh_height_18: (+1)
   \      0x144   0x2200             MOVS     R2,#+0
   \      0x146   0x210A             MOVS     R1,#+10
   \      0x148   0x4648             MOV      R0,R9
   \      0x14A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    685          
    686              const float sigma = sqrt(sum_of_diff_squared / (n + 1));
   \                     ??find_mean_mesh_height_19: (+1)
   \      0x14E   0x1C6D             ADDS     R5,R5,#+1
   \      0x150   0x4628             MOV      R0,R5
   \      0x152   0x.... 0x....      BL       __aeabi_i2f
   \      0x156   0x4601             MOV      R1,R0
   \      0x158   0x4630             MOV      R0,R6
   \      0x15A   0x.... 0x....      BL       __aeabi_fdiv
   \      0x15E   0x.... 0x....      BL       sqrtf
   \      0x162   0x4605             MOV      R5,R0
    687              SERIAL_ECHOPGM("Standard Deviation: ");
   \      0x164   0x.... 0x....      ADR.W    R0,?_94
   \      0x168   0x.... 0x....      BL       _Z14serialprintPGMPKc
    688              SERIAL_ECHO_F(sigma, 6);
   \      0x16C   0x4628             MOV      R0,R5
   \      0x16E   0x.... 0x....      BL       __aeabi_f2d
   \      0x172   0x4602             MOV      R2,R0
   \      0x174   0x460B             MOV      R3,R1
   \      0x176   0x7838             LDRB     R0,[R7, #+0]
   \      0x178   0x2800             CMP      R0,#+0
   \      0x17A   0xD105             BNE.N    ??find_mean_mesh_height_20
   \      0x17C   0x2006             MOVS     R0,#+6
   \      0x17E   0x9000             STR      R0,[SP, #+0]
   \      0x180   0x4640             MOV      R0,R8
   \      0x182   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x186   0xE004             B.N      ??find_mean_mesh_height_21
   \                     ??find_mean_mesh_height_20: (+1)
   \      0x188   0x2006             MOVS     R0,#+6
   \      0x18A   0x9000             STR      R0,[SP, #+0]
   \      0x18C   0x4648             MOV      R0,R9
   \      0x18E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    689              SERIAL_EOL;
   \                     ??find_mean_mesh_height_21: (+1)
   \      0x192   0x7838             LDRB     R0,[R7, #+0]
   \      0x194   0x2800             CMP      R0,#+0
   \      0x196   0xD104             BNE.N    ??find_mean_mesh_height_22
   \      0x198   0x210A             MOVS     R1,#+10
   \      0x19A   0x4640             MOV      R0,R8
   \      0x19C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x1A0   0xE004             B.N      ??find_mean_mesh_height_23
   \                     ??find_mean_mesh_height_22: (+1)
   \      0x1A2   0x2200             MOVS     R2,#+0
   \      0x1A4   0x210A             MOVS     R1,#+10
   \      0x1A6   0x4648             MOV      R0,R9
   \      0x1A8   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    690          
    691              if (c_flag)
   \                     ??find_mean_mesh_height_23: (+1)
   \      0x1AC   0x.... 0x....      LDR.W    R6,??DataTable117_1
   \      0x1B0   0x7870             LDRB     R0,[R6, #+1]
   \      0x1B2   0x2800             CMP      R0,#+0
   \      0x1B4   0xD02A             BEQ.N    ??find_mean_mesh_height_24
    692                for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \      0x1B6   0x2700             MOVS     R7,#+0
   \      0x1B8   0xE021             B.N      ??find_mean_mesh_height_25
   \      0x1BA   0xBF00             Nop      
   \                     ??find_mean_mesh_height_0:
   \      0x1BC   0x....'....        DC32     mksCfg+0x60
    693                  for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    694                    if (!isnan(ubl.z_values[x][y]))
   \                     ??find_mean_mesh_height_26: (+1)
   \      0x1C0   0x.... 0x....      LDR.W    R0,??DataTable117
   \      0x1C4   0xEB00 0x1987      ADD      R9,R0,R7, LSL #+6
   \      0x1C8   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \      0x1CC   0x.... 0x....      BL       _Z5isnanf
   \      0x1D0   0x2800             CMP      R0,#+0
   \      0x1D2   0xD10A             BNE.N    ??find_mean_mesh_height_27
    695                      ubl.z_values[x][y] -= mean + ubl_constant;
   \      0x1D4   0x6AF0             LDR      R0,[R6, #+44]
   \      0x1D6   0x4629             MOV      R1,R5
   \      0x1D8   0x.... 0x....      BL       __aeabi_fadd
   \      0x1DC   0x4601             MOV      R1,R0
   \      0x1DE   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \      0x1E2   0x.... 0x....      BL       __aeabi_fsub
   \      0x1E6   0xF849 0x0028      STR      R0,[R9, R8, LSL #+2]
   \                     ??find_mean_mesh_height_27: (+1)
   \      0x1EA   0xF108 0x0801      ADD      R8,R8,#+1
   \      0x1EE   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??find_mean_mesh_height_28: (+1)
   \      0x1F2   0x7860             LDRB     R0,[R4, #+1]
   \      0x1F4   0x4580             CMP      R8,R0
   \      0x1F6   0xDBE3             BLT.N    ??find_mean_mesh_height_26
   \      0x1F8   0x9501             STR      R5,[SP, #+4]
   \      0x1FA   0x1C7F             ADDS     R7,R7,#+1
   \      0x1FC   0xB2FF             UXTB     R7,R7
   \                     ??find_mean_mesh_height_25: (+1)
   \      0x1FE   0x7820             LDRB     R0,[R4, #+0]
   \      0x200   0x4287             CMP      R7,R0
   \      0x202   0xDA03             BGE.N    ??find_mean_mesh_height_24
   \      0x204   0xF04F 0x0800      MOV      R8,#+0
   \      0x208   0x9D01             LDR      R5,[SP, #+4]
   \      0x20A   0xE7F2             B.N      ??find_mean_mesh_height_28
    696            }
   \                     ??find_mean_mesh_height_24: (+1)
   \      0x20C   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    697          

   \                                 In section .text, align 2, keep-with-next
    698            void unified_bed_leveling::shift_mesh_height() {
   \                     _ZN20unified_bed_leveling17shift_mesh_heightEv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    699              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \        0x2   0x2400             MOVS     R4,#+0
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable118
   \        0x8   0xE019             B.N      ??shift_mesh_height_0
    700                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    701                  if (!isnan(ubl.z_values[x][y]))
   \                     ??shift_mesh_height_1: (+1)
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable117
   \        0xE   0xEB10 0x1684      ADDS     R6,R0,R4, LSL #+6
   \       0x12   0xF856 0x0027      LDR      R0,[R6, R7, LSL #+2]
   \       0x16   0x.... 0x....      BL       _Z5isnanf
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD108             BNE.N    ??shift_mesh_height_2
    702                    ubl.z_values[x][y] += ubl_constant;
   \       0x1E   0xF856 0x1027      LDR      R1,[R6, R7, LSL #+2]
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable117_1
   \       0x26   0x6AC0             LDR      R0,[R0, #+44]
   \       0x28   0x.... 0x....      BL       __aeabi_fadd
   \       0x2C   0xF846 0x0027      STR      R0,[R6, R7, LSL #+2]
   \                     ??shift_mesh_height_2: (+1)
   \       0x30   0x1C7F             ADDS     R7,R7,#+1
   \       0x32   0xB2FF             UXTB     R7,R7
   \                     ??shift_mesh_height_3: (+1)
   \       0x34   0x7868             LDRB     R0,[R5, #+1]
   \       0x36   0x4287             CMP      R7,R0
   \       0x38   0xDBE7             BLT.N    ??shift_mesh_height_1
   \       0x3A   0x1C64             ADDS     R4,R4,#+1
   \       0x3C   0xB2E4             UXTB     R4,R4
   \                     ??shift_mesh_height_0: (+1)
   \       0x3E   0x7828             LDRB     R0,[R5, #+0]
   \       0x40   0x4284             CMP      R4,R0
   \       0x42   0xDA01             BGE.N    ??shift_mesh_height_4
   \       0x44   0x2700             MOVS     R7,#+0
   \       0x46   0xE7F5             B.N      ??shift_mesh_height_3
    703            }
   \                     ??shift_mesh_height_4: (+1)
   \       0x48   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    704          
    705            /**
    706             * Probe all invalidated locations of the mesh that can be reached by the probe.
    707             * This attempts to fill in locations closest to the nozzle's start location first.
    708             */

   \                                 In section .text, align 2, keep-with-next
    709            void unified_bed_leveling::probe_entire_mesh(const float &lx, const float &ly, const bool do_ubl_mesh_map, const bool stow_probe, bool do_furthest) {
   \                     _ZN20unified_bed_leveling17probe_entire_meshERKfS1_bbb: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9F10             LDR      R7,[SP, #+64]
   \        0xE   0x9E11             LDR      R6,[SP, #+68]
    710              mesh_index_pair location;
    711          
    712              ubl.has_control_of_lcd_panel = true;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable116_1
   \       0x16   0x7008             STRB     R0,[R1, #+0]
    713              ubl.save_ubl_active_state_and_disable();   // we don't do bed level correction because we want the raw data when we probe
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable116_4
   \       0x1C   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
    714              DEPLOY_PROBE();
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0x.... 0x....      BL       _Z18set_probe_deployedb
   \       0x26   0xF88D 0x800C      STRB     R8,[SP, #+12]
   \       0x2A   0xF88D 0x7040      STRB     R7,[SP, #+64]
   \       0x2E   0xF88D 0x6044      STRB     R6,[SP, #+68]
   \       0x32   0x.... 0x....      LDR.W    R8,??DataTable113_2
    715          
    716              do {
    717                if (ubl_lcd_clicked()) {
   \                     ??probe_entire_mesh_0: (+1)
   \       0x36   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD16A             BNE.N    ??probe_entire_mesh_1
    718                  SERIAL_PROTOCOLLNPGM("\nMesh only partially populated.\n");
    719                  lcd_quick_feedback();
    720                  STOW_PROBE();
    721                  while (ubl_lcd_clicked()) idle();
    722                  ubl.has_control_of_lcd_panel = false;
    723                  ubl.restore_ubl_active_state_and_leave();
    724                  safe_delay(50);  // Debounce the Encoder wheel
    725                  return;
    726                }
    727          
    728                location = find_closest_mesh_point_of_type(INVALID, lx, ly, USE_PROBE_AS_REFERENCE, NULL, do_furthest);
   \       0x3E   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \       0x42   0x9002             STR      R0,[SP, #+8]
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0x9001             STR      R0,[SP, #+4]
   \       0x48   0x2001             MOVS     R0,#+1
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0x462B             MOV      R3,R5
   \       0x4E   0x4622             MOV      R2,R4
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0xA804             ADD      R0,SP,#+16
   \       0x54   0x.... 0x....      BL       _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb
    729                if (location.x_index >= 0 && location.y_index >= 0) {
   \       0x58   0xF99D 0x6010      LDRSB    R6,[SP, #+16]
   \       0x5C   0x2E00             CMP      R6,#+0
   \       0x5E   0xD447             BMI.N    ??probe_entire_mesh_2
   \       0x60   0xF99D 0x2011      LDRSB    R2,[SP, #+17]
   \       0x64   0x2A00             CMP      R2,#+0
   \       0x66   0xD443             BMI.N    ??probe_entire_mesh_2
    730          
    731                  const float rawx = ubl.mesh_index_to_xpos[location.x_index],
   \       0x68   0x.... 0x....      LDR.W    R0,??DataTable115
   \       0x6C   0xF850 0x7026      LDR      R7,[R0, R6, LSL #+2]
    732                              rawy = ubl.mesh_index_to_ypos[location.y_index];
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable115_1
   \       0x74   0xF850 0x9022      LDR      R9,[R0, R2, LSL #+2]
    733          
    734                  // TODO: Change to use `position_is_reachable` (for SCARA-compatibility)
    735                  if (!WITHIN(rawx, MIN_PROBE_X, MAX_PROBE_X) || !WITHIN(rawy, MIN_PROBE_Y, MAX_PROBE_Y)) {
   \       0x78   0x.... 0x....      LDR.W    R3,??DataTable118_1
   \       0x7C   0x4638             MOV      R0,R7
   \       0x7E   0x6819             LDR      R1,[R3, #+0]
   \       0x80   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0x84   0xF200 0x8093      BHI.W    ??probe_entire_mesh_3
   \       0x88   0x6858             LDR      R0,[R3, #+4]
   \       0x8A   0x4639             MOV      R1,R7
   \       0x8C   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0x90   0xF200 0x808D      BHI.W    ??probe_entire_mesh_3
   \       0x94   0x4648             MOV      R0,R9
   \       0x96   0x6899             LDR      R1,[R3, #+8]
   \       0x98   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0x9C   0xF200 0x8087      BHI.W    ??probe_entire_mesh_3
   \       0xA0   0x68D8             LDR      R0,[R3, #+12]
   \       0xA2   0x4649             MOV      R1,R9
   \       0xA4   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xA8   0xF200 0x8081      BHI.W    ??probe_entire_mesh_3
    736                    SERIAL_ERROR_START;
    737                    SERIAL_ERRORLNPGM("Attempt to probe off the bed.");
    738                    ubl.has_control_of_lcd_panel = false;
    739                    goto LEAVE;
    740                  }
    741                  const float measured_z = probe_pt(LOGICAL_X_POSITION(rawx), LOGICAL_Y_POSITION(rawy), stow_probe, g29_verbose_level);
    742                  ubl.z_values[location.x_index][location.y_index] = measured_z;
   \       0xAC   0x.... 0x....      LDR.W    R0,??DataTable117
   \       0xB0   0xEB00 0x1086      ADD      R0,R0,R6, LSL #+6
   \       0xB4   0x9200             STR      R2,[SP, #+0]
   \       0xB6   0x9001             STR      R0,[SP, #+4]
   \       0xB8   0x.... 0x....      LDR.W    R0,??DataTable117_1
   \       0xBC   0x6843             LDR      R3,[R0, #+4]
   \       0xBE   0xF89D 0x2040      LDRB     R2,[SP, #+64]
   \       0xC2   0x4692             MOV      R10,R2
   \       0xC4   0x469B             MOV      R11,R3
   \       0xC6   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0xCA   0x4649             MOV      R1,R9
   \       0xCC   0x.... 0x....      BL       __aeabi_fadd
   \       0xD0   0x4601             MOV      R1,R0
   \       0xD2   0x4689             MOV      R9,R1
   \       0xD4   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xD8   0x4639             MOV      R1,R7
   \       0xDA   0x.... 0x....      BL       __aeabi_fadd
   \       0xDE   0x465B             MOV      R3,R11
   \       0xE0   0x4652             MOV      R2,R10
   \       0xE2   0x4649             MOV      R1,R9
   \       0xE4   0x.... 0x....      BL       _Z8probe_ptffbi
   \       0xE8   0x9901             LDR      R1,[SP, #+4]
   \       0xEA   0x9A00             LDR      R2,[SP, #+0]
   \       0xEC   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    743                }
    744          
    745                if (do_ubl_mesh_map) ubl.display_map(map_type);
   \                     ??probe_entire_mesh_2: (+1)
   \       0xF0   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD006             BEQ.N    ??probe_entire_mesh_4
   \       0xF8   0x.... 0x....      LDR.W    R0,??DataTable117_1
   \       0xFC   0x6941             LDR      R1,[R0, #+20]
   \       0xFE   0x.... 0x....      LDR.W    R0,??DataTable116_4
   \      0x102   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
    746          
    747              } while (location.x_index >= 0 && location.y_index >= 0);
   \                     ??probe_entire_mesh_4: (+1)
   \      0x106   0x2E00             CMP      R6,#+0
   \      0x108   0xD45D             BMI.N    ??probe_entire_mesh_5
   \      0x10A   0xF99D 0x0011      LDRSB    R0,[SP, #+17]
   \      0x10E   0x2800             CMP      R0,#+0
   \      0x110   0xD591             BPL.N    ??probe_entire_mesh_0
   \      0x112   0xE058             B.N      ??probe_entire_mesh_5
   \                     ??probe_entire_mesh_1: (+1)
   \      0x114   0x.... 0x....      ADR.W    R0,?_95
   \      0x118   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x11C   0x.... 0x....      BL       _Z18lcd_quick_feedbackv
   \      0x120   0x2000             MOVS     R0,#+0
   \      0x122   0x.... 0x....      BL       _Z18set_probe_deployedb
   \      0x126   0xE002             B.N      ??probe_entire_mesh_6
   \                     ??probe_entire_mesh_7: (+1)
   \      0x128   0x2000             MOVS     R0,#+0
   \      0x12A   0x.... 0x....      BL       _Z4idleb
   \                     ??probe_entire_mesh_6: (+1)
   \      0x12E   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x132   0x2800             CMP      R0,#+0
   \      0x134   0xD1F8             BNE.N    ??probe_entire_mesh_7
   \      0x136   0x2000             MOVS     R0,#+0
   \      0x138   0x.... 0x....      LDR.W    R1,??DataTable116_1
   \      0x13C   0x7008             STRB     R0,[R1, #+0]
   \      0x13E   0x.... 0x....      LDR.W    R0,??DataTable116_4
   \      0x142   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
   \      0x146   0x2032             MOVS     R0,#+50
   \      0x148   0x.... 0x....      BL       _Z10safe_delaym
   \      0x14C   0xE02C             B.N      ??probe_entire_mesh_8
    748          
    749              LEAVE:
    750          
    751              STOW_PROBE();
    752              ubl.restore_ubl_active_state_and_leave();
    753          
    754              do_blocking_move_to_xy(
    755                constrain(lx - (X_PROBE_OFFSET_FROM_EXTRUDER), UBL_MESH_MIN_X, UBL_MESH_MAX_X),
    756                constrain(ly - (Y_PROBE_OFFSET_FROM_EXTRUDER), UBL_MESH_MIN_Y, UBL_MESH_MAX_Y)
    757              );
   \                     ??probe_entire_mesh_9: (+1)
   \      0x14E   0x6970             LDR      R0,[R6, #+20]
   \      0x150   0x4639             MOV      R1,R7
   \      0x152   0x.... 0x....      BL       __aeabi_fsub
   \      0x156   0x4621             MOV      R1,R4
   \      0x158   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x15C   0xD201             BCS.N    ??probe_entire_mesh_10
   \      0x15E   0x9000             STR      R0,[SP, #+0]
   \      0x160   0xE000             B.N      ??probe_entire_mesh_11
   \                     ??probe_entire_mesh_10: (+1)
   \      0x162   0x9400             STR      R4,[SP, #+0]
   \                     ??probe_entire_mesh_11: (+1)
   \      0x164   0x68F0             LDR      R0,[R6, #+12]
   \      0x166   0x4639             MOV      R1,R7
   \      0x168   0x.... 0x....      BL       __aeabi_fadd
   \      0x16C   0x4604             MOV      R4,R0
   \      0x16E   0x6828             LDR      R0,[R5, #+0]
   \      0x170   0x6F31             LDR      R1,[R6, #+112]
   \      0x172   0x.... 0x....      BL       __aeabi_fsub
   \      0x176   0x4605             MOV      R5,R0
   \      0x178   0x4621             MOV      R1,R4
   \      0x17A   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x17E   0xD201             BCS.N    ??probe_entire_mesh_12
   \      0x180   0x9401             STR      R4,[SP, #+4]
   \      0x182   0xE00A             B.N      ??probe_entire_mesh_13
   \                     ??probe_entire_mesh_12: (+1)
   \      0x184   0x69B0             LDR      R0,[R6, #+24]
   \      0x186   0x4639             MOV      R1,R7
   \      0x188   0x.... 0x....      BL       __aeabi_fsub
   \      0x18C   0x4629             MOV      R1,R5
   \      0x18E   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x192   0xD201             BCS.N    ??probe_entire_mesh_14
   \      0x194   0x9001             STR      R0,[SP, #+4]
   \      0x196   0xE000             B.N      ??probe_entire_mesh_13
   \                     ??probe_entire_mesh_14: (+1)
   \      0x198   0x9501             STR      R5,[SP, #+4]
   \                     ??probe_entire_mesh_13: (+1)
   \      0x19A   0x2000             MOVS     R0,#+0
   \      0x19C   0x9002             STR      R0,[SP, #+8]
   \      0x19E   0xAA02             ADD      R2,SP,#+8
   \      0x1A0   0xA901             ADD      R1,SP,#+4
   \      0x1A2   0x4668             MOV      R0,SP
   \      0x1A4   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    758            }
   \                     ??probe_entire_mesh_8: (+1)
   \      0x1A8   0xB007             ADD      SP,SP,#+28
   \      0x1AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??probe_entire_mesh_3: (+1)
   \      0x1AE   0x.... 0x....      LDR.W    R0,??DataTable118_2
   \      0x1B2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x1B6   0x.... 0x....      ADR.W    R0,?_31
   \      0x1BA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x1BE   0x2000             MOVS     R0,#+0
   \      0x1C0   0x.... 0x....      LDR.W    R1,??DataTable116_1
   \      0x1C4   0x7008             STRB     R0,[R1, #+0]
   \                     ??probe_entire_mesh_5: (+1)
   \      0x1C6   0x2000             MOVS     R0,#+0
   \      0x1C8   0x.... 0x....      BL       _Z18set_probe_deployedb
   \      0x1CC   0x.... 0x....      LDR.W    R0,??DataTable116_4
   \      0x1D0   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
   \      0x1D4   0x.... 0x....      LDR.W    R6,??DataTable119_1
   \      0x1D8   0xF9B6 0x00B4      LDRSH    R0,[R6, #+180]
   \      0x1DC   0x.... 0x....      BL       __aeabi_i2f
   \      0x1E0   0x4607             MOV      R7,R0
   \      0x1E2   0x68B0             LDR      R0,[R6, #+8]
   \      0x1E4   0x4639             MOV      R1,R7
   \      0x1E6   0x.... 0x....      BL       __aeabi_fadd
   \      0x1EA   0x4680             MOV      R8,R0
   \      0x1EC   0x6820             LDR      R0,[R4, #+0]
   \      0x1EE   0x6EF1             LDR      R1,[R6, #+108]
   \      0x1F0   0x.... 0x....      BL       __aeabi_fsub
   \      0x1F4   0x4604             MOV      R4,R0
   \      0x1F6   0x4641             MOV      R1,R8
   \      0x1F8   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x1FC   0xD2A7             BCS.N    ??probe_entire_mesh_9
   \      0x1FE   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x202   0xE7AF             B.N      ??probe_entire_mesh_11
    759          

   \                                 In section .text, align 2, keep-with-next
    760            void unified_bed_leveling::tilt_mesh_based_on_3pts(const float &z1, const float &z2, const float &z3) {
   \                     _ZN20unified_bed_leveling23tilt_mesh_based_on_3ptsERKfS1_S1_: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0A6             SUB      SP,SP,#+152
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x461D             MOV      R5,R3
    761          
    762              matrix_3x3 rotation;
    763              vector_3 v1 = vector_3( (UBL_PROBE_PT_1_X - UBL_PROBE_PT_2_X),
    764                                      (UBL_PROBE_PT_1_Y - UBL_PROBE_PT_2_Y),
    765                                      (z1 - z2) ),
   \        0xC   0x.... 0x....      LDR.W    R8,??DataTable118
   \       0x10   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x14   0x6821             LDR      R1,[R4, #+0]
   \       0x16   0x.... 0x....      BL       __aeabi_fsub
   \       0x1A   0x4603             MOV      R3,R0
   \       0x1C   0x461E             MOV      R6,R3
   \       0x1E   0xF8D8 0x005C      LDR      R0,[R8, #+92]
   \       0x22   0xF8D8 0x1064      LDR      R1,[R8, #+100]
   \       0x26   0x.... 0x....      BL       __aeabi_fsub
   \       0x2A   0x4602             MOV      R2,R0
   \       0x2C   0x4633             MOV      R3,R6
   \       0x2E   0x4616             MOV      R6,R2
   \       0x30   0x461F             MOV      R7,R3
   \       0x32   0xF8D8 0x0058      LDR      R0,[R8, #+88]
   \       0x36   0xF8D8 0x1060      LDR      R1,[R8, #+96]
   \       0x3A   0x.... 0x....      BL       __aeabi_fsub
   \       0x3E   0x4601             MOV      R1,R0
   \       0x40   0x463B             MOV      R3,R7
   \       0x42   0x4632             MOV      R2,R6
   \       0x44   0xA811             ADD      R0,SP,#+68
   \       0x46   0x.... 0x....      BL       _ZN8vector_3C1Efff
    766          
    767                       v2 = vector_3( (UBL_PROBE_PT_3_X - UBL_PROBE_PT_2_X),
    768                                      (UBL_PROBE_PT_3_Y - UBL_PROBE_PT_2_Y),
    769                                      (z3 - z2) ),
   \       0x4A   0x6828             LDR      R0,[R5, #+0]
   \       0x4C   0x6821             LDR      R1,[R4, #+0]
   \       0x4E   0x.... 0x....      BL       __aeabi_fsub
   \       0x52   0x4603             MOV      R3,R0
   \       0x54   0x461C             MOV      R4,R3
   \       0x56   0xF8D8 0x006C      LDR      R0,[R8, #+108]
   \       0x5A   0xF8D8 0x1064      LDR      R1,[R8, #+100]
   \       0x5E   0x.... 0x....      BL       __aeabi_fsub
   \       0x62   0x4602             MOV      R2,R0
   \       0x64   0x4623             MOV      R3,R4
   \       0x66   0x4614             MOV      R4,R2
   \       0x68   0x461D             MOV      R5,R3
   \       0x6A   0xF8D8 0x0068      LDR      R0,[R8, #+104]
   \       0x6E   0xF8D8 0x1060      LDR      R1,[R8, #+96]
   \       0x72   0x.... 0x....      BL       __aeabi_fsub
   \       0x76   0x4601             MOV      R1,R0
   \       0x78   0x462B             MOV      R3,R5
   \       0x7A   0x4622             MOV      R2,R4
   \       0x7C   0xA80E             ADD      R0,SP,#+56
   \       0x7E   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x82   0xA80E             ADD      R0,SP,#+56
   \       0x84   0x466A             MOV      R2,SP
   \       0x86   0xC80A             LDM      R0!,{R1,R3}
   \       0x88   0xC20A             STM      R2!,{R1,R3}
   \       0x8A   0x6803             LDR      R3,[R0, #+0]
   \       0x8C   0x6013             STR      R3,[R2, #+0]
   \       0x8E   0xA811             ADD      R0,SP,#+68
   \       0x90   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x94   0xA803             ADD      R0,SP,#+12
   \       0x96   0x.... 0x....      BL       _ZN8vector_35crossES_S_
    770          
    771                       normal = vector_3::cross(v1, v2);
   \       0x9A   0xA808             ADD      R0,SP,#+32
   \       0x9C   0xA903             ADD      R1,SP,#+12
   \       0x9E   0xE891 0x001C      LDM      R1,{R2-R4}
   \       0xA2   0xE880 0x001C      STM      R0,{R2-R4}
   \       0xA6   0xA908             ADD      R1,SP,#+32
   \       0xA8   0x4668             MOV      R0,SP
   \       0xAA   0x.... 0x....      BL       _ZN8vector_310get_normalEv
    772          
    773              normal = normal.get_normal();
   \       0xAE   0xA808             ADD      R0,SP,#+32
   \       0xB0   0x4669             MOV      R1,SP
   \       0xB2   0xE891 0x001C      LDM      R1,{R2-R4}
   \       0xB6   0xE880 0x001C      STM      R0,{R2-R4}
    774          
    775              /**
    776               * This vector is normal to the tilted plane.
    777               * However, we don't know its direction. We need it to point up. So if
    778               * Z is negative, we need to invert the sign of all components of the vector
    779               */
    780              if (normal.z < 0.0) {
   \       0xBA   0x4620             MOV      R0,R4
   \       0xBC   0x2100             MOVS     R1,#+0
   \       0xBE   0x.... 0x....      BL       __aeabi_cfcmple
   \       0xC2   0xD20A             BCS.N    ??tilt_mesh_based_on_3pts_0
    781                normal.x = -normal.x;
   \       0xC4   0x4611             MOV      R1,R2
   \       0xC6   0xF081 0x4100      EOR      R1,R1,#0x80000000
   \       0xCA   0x9108             STR      R1,[SP, #+32]
    782                normal.y = -normal.y;
   \       0xCC   0x9909             LDR      R1,[SP, #+36]
   \       0xCE   0xF081 0x4100      EOR      R1,R1,#0x80000000
   \       0xD2   0x9109             STR      R1,[SP, #+36]
    783                normal.z = -normal.z;
   \       0xD4   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \       0xD8   0x900A             STR      R0,[SP, #+40]
    784              }
    785          
    786              rotation = matrix_3x3::create_look_at(vector_3(normal.x, normal.y, 1));
   \                     ??tilt_mesh_based_on_3pts_0: (+1)
   \       0xDA   0xF04F 0x537E      MOV      R3,#+1065353216
   \       0xDE   0x9A09             LDR      R2,[SP, #+36]
   \       0xE0   0x9908             LDR      R1,[SP, #+32]
   \       0xE2   0x4668             MOV      R0,SP
   \       0xE4   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0xE8   0x4668             MOV      R0,SP
   \       0xEA   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0xEE   0xA81D             ADD      R0,SP,#+116
   \       0xF0   0x.... 0x....      BL       _ZN10matrix_3x314create_look_atE8vector_3
   \       0xF4   0xA814             ADD      R0,SP,#+80
   \       0xF6   0xA91D             ADD      R1,SP,#+116
   \       0xF8   0x2224             MOVS     R2,#+36
   \       0xFA   0x.... 0x....      BL       __aeabi_memcpy4
    787          
    788              if (g29_verbose_level > 2) {
   \       0xFE   0x.... 0x....      LDR.W    R4,??DataTable119_2
   \      0x102   0x.... 0x....      LDR.W    R5,??DataTable117_1
   \      0x106   0x6868             LDR      R0,[R5, #+4]
   \      0x108   0x2803             CMP      R0,#+3
   \      0x10A   0xDB62             BLT.N    ??tilt_mesh_based_on_3pts_1
    789                SERIAL_ECHOPGM("bed plane normal = [");
   \      0x10C   0x.... 0x....      LDR.W    R0,??DataTable119_3
   \      0x110   0x.... 0x....      BL       _Z14serialprintPGMPKc
    790                SERIAL_PROTOCOL_F(normal.x, 7);
   \      0x114   0x9808             LDR      R0,[SP, #+32]
   \      0x116   0x.... 0x....      BL       __aeabi_f2d
   \      0x11A   0x4602             MOV      R2,R0
   \      0x11C   0x460B             MOV      R3,R1
   \      0x11E   0x.... 0x....      LDR.W    R7,??DataTable119_4
   \      0x122   0x.... 0x....      LDR.W    R6,??DataTable119_5
   \      0x126   0x7820             LDRB     R0,[R4, #+0]
   \      0x128   0x2800             CMP      R0,#+0
   \      0x12A   0xD105             BNE.N    ??tilt_mesh_based_on_3pts_2
   \      0x12C   0x2007             MOVS     R0,#+7
   \      0x12E   0x9000             STR      R0,[SP, #+0]
   \      0x130   0x4630             MOV      R0,R6
   \      0x132   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x136   0xE004             B.N      ??tilt_mesh_based_on_3pts_3
   \                     ??tilt_mesh_based_on_3pts_2: (+1)
   \      0x138   0x2007             MOVS     R0,#+7
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0x4638             MOV      R0,R7
   \      0x13E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    791                SERIAL_PROTOCOLCHAR(',');
   \                     ??tilt_mesh_based_on_3pts_3: (+1)
   \      0x142   0x7820             LDRB     R0,[R4, #+0]
   \      0x144   0x2800             CMP      R0,#+0
   \      0x146   0xD104             BNE.N    ??tilt_mesh_based_on_3pts_4
   \      0x148   0x212C             MOVS     R1,#+44
   \      0x14A   0x4630             MOV      R0,R6
   \      0x14C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x150   0xE004             B.N      ??tilt_mesh_based_on_3pts_5
   \                     ??tilt_mesh_based_on_3pts_4: (+1)
   \      0x152   0x2200             MOVS     R2,#+0
   \      0x154   0x212C             MOVS     R1,#+44
   \      0x156   0x4638             MOV      R0,R7
   \      0x158   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    792                SERIAL_PROTOCOL_F(normal.y, 7);
   \                     ??tilt_mesh_based_on_3pts_5: (+1)
   \      0x15C   0x9809             LDR      R0,[SP, #+36]
   \      0x15E   0x.... 0x....      BL       __aeabi_f2d
   \      0x162   0x4602             MOV      R2,R0
   \      0x164   0x460B             MOV      R3,R1
   \      0x166   0x7820             LDRB     R0,[R4, #+0]
   \      0x168   0x2800             CMP      R0,#+0
   \      0x16A   0xD105             BNE.N    ??tilt_mesh_based_on_3pts_6
   \      0x16C   0x2007             MOVS     R0,#+7
   \      0x16E   0x9000             STR      R0,[SP, #+0]
   \      0x170   0x4630             MOV      R0,R6
   \      0x172   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x176   0xE004             B.N      ??tilt_mesh_based_on_3pts_7
   \                     ??tilt_mesh_based_on_3pts_6: (+1)
   \      0x178   0x2007             MOVS     R0,#+7
   \      0x17A   0x9000             STR      R0,[SP, #+0]
   \      0x17C   0x4638             MOV      R0,R7
   \      0x17E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    793                SERIAL_PROTOCOLCHAR(',');
   \                     ??tilt_mesh_based_on_3pts_7: (+1)
   \      0x182   0x7820             LDRB     R0,[R4, #+0]
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xD104             BNE.N    ??tilt_mesh_based_on_3pts_8
   \      0x188   0x212C             MOVS     R1,#+44
   \      0x18A   0x4630             MOV      R0,R6
   \      0x18C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x190   0xE004             B.N      ??tilt_mesh_based_on_3pts_9
   \                     ??tilt_mesh_based_on_3pts_8: (+1)
   \      0x192   0x2200             MOVS     R2,#+0
   \      0x194   0x212C             MOVS     R1,#+44
   \      0x196   0x4638             MOV      R0,R7
   \      0x198   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
    794                SERIAL_PROTOCOL_F(normal.z, 7);
   \                     ??tilt_mesh_based_on_3pts_9: (+1)
   \      0x19C   0x980A             LDR      R0,[SP, #+40]
   \      0x19E   0x.... 0x....      BL       __aeabi_f2d
   \      0x1A2   0x4602             MOV      R2,R0
   \      0x1A4   0x460B             MOV      R3,R1
   \      0x1A6   0x7820             LDRB     R0,[R4, #+0]
   \      0x1A8   0x2800             CMP      R0,#+0
   \      0x1AA   0xD105             BNE.N    ??tilt_mesh_based_on_3pts_10
   \      0x1AC   0x2007             MOVS     R0,#+7
   \      0x1AE   0x9000             STR      R0,[SP, #+0]
   \      0x1B0   0x4630             MOV      R0,R6
   \      0x1B2   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x1B6   0xE004             B.N      ??tilt_mesh_based_on_3pts_11
   \                     ??tilt_mesh_based_on_3pts_10: (+1)
   \      0x1B8   0x2007             MOVS     R0,#+7
   \      0x1BA   0x9000             STR      R0,[SP, #+0]
   \      0x1BC   0x4638             MOV      R0,R7
   \      0x1BE   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    795                SERIAL_ECHOLNPGM("]");
   \                     ??tilt_mesh_based_on_3pts_11: (+1)
   \      0x1C2   0x....             ADR.N    R0,??DataTable115_2  ;; 0x5D, 0x0A, 0x00, 0x00
   \      0x1C4   0x.... 0x....      BL       _Z14serialprintPGMPKc
    796                rotation.debug(PSTR("rotation matrix:"));
   \      0x1C8   0x.... 0x....      ADR.W    R1,?_98
   \      0x1CC   0xA814             ADD      R0,SP,#+80
   \      0x1CE   0x.... 0x....      BL       _ZN10matrix_3x35debugEPKc
    797              }
    798          
    799              //
    800              // All of 3 of these points should give us the same d constant
    801              //
    802          
    803              float t = normal.x * (UBL_PROBE_PT_1_X) + normal.y * (UBL_PROBE_PT_1_Y),
    804                    d = t + normal.z * z1;
   \                     ??tilt_mesh_based_on_3pts_1: (+1)
   \      0x1D2   0x9908             LDR      R1,[SP, #+32]
   \      0x1D4   0xF8D8 0x0058      LDR      R0,[R8, #+88]
   \      0x1D8   0x.... 0x....      BL       __aeabi_fmul
   \      0x1DC   0x4606             MOV      R6,R0
   \      0x1DE   0x9909             LDR      R1,[SP, #+36]
   \      0x1E0   0xF8D8 0x005C      LDR      R0,[R8, #+92]
   \      0x1E4   0x.... 0x....      BL       __aeabi_fmul
   \      0x1E8   0x4631             MOV      R1,R6
   \      0x1EA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1EE   0x4606             MOV      R6,R0
   \      0x1F0   0x990A             LDR      R1,[SP, #+40]
   \      0x1F2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x1F6   0x.... 0x....      BL       __aeabi_fmul
   \      0x1FA   0x4631             MOV      R1,R6
   \      0x1FC   0x.... 0x....      BL       __aeabi_fadd
   \      0x200   0x4606             MOV      R6,R0
    805          
    806              if (g29_verbose_level>2) {
   \      0x202   0x6868             LDR      R0,[R5, #+4]
   \      0x204   0x2803             CMP      R0,#+3
   \      0x206   0xDB1D             BLT.N    ??tilt_mesh_based_on_3pts_12
    807                SERIAL_ECHOPGM("D constant: ");
   \      0x208   0x.... 0x....      ADR.W    R0,?_99
   \      0x20C   0x.... 0x....      BL       _Z14serialprintPGMPKc
    808                SERIAL_PROTOCOL_F(d, 7);
   \      0x210   0x4630             MOV      R0,R6
   \      0x212   0x.... 0x....      BL       __aeabi_f2d
   \      0x216   0x7822             LDRB     R2,[R4, #+0]
   \      0x218   0x2A00             CMP      R2,#+0
   \      0x21A   0xD108             BNE.N    ??tilt_mesh_based_on_3pts_13
   \      0x21C   0x2207             MOVS     R2,#+7
   \      0x21E   0x9200             STR      R2,[SP, #+0]
   \      0x220   0x4602             MOV      R2,R0
   \      0x222   0x460B             MOV      R3,R1
   \      0x224   0x.... 0x....      LDR.W    R0,??DataTable119_5
   \      0x228   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x22C   0xE007             B.N      ??tilt_mesh_based_on_3pts_14
   \                     ??tilt_mesh_based_on_3pts_13: (+1)
   \      0x22E   0x2207             MOVS     R2,#+7
   \      0x230   0x9200             STR      R2,[SP, #+0]
   \      0x232   0x4602             MOV      R2,R0
   \      0x234   0x460B             MOV      R3,R1
   \      0x236   0x.... 0x....      LDR.W    R0,??DataTable119_4
   \      0x23A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    809                SERIAL_ECHOLNPGM(" ");
   \                     ??tilt_mesh_based_on_3pts_14: (+1)
   \      0x23E   0x....             ADR.N    R0,??DataTable116  ;; 0x20, 0x0A, 0x00, 0x00
   \      0x240   0x.... 0x....      BL       _Z14serialprintPGMPKc
    810              }
    811          
    812              #if ENABLED(DEBUG_LEVELING_FEATURE)
    813                if (DEBUGGING(LEVELING)) {
    814                  SERIAL_ECHOPGM("d from 1st point: ");
    815                  SERIAL_ECHO_F(d, 6);
    816                  SERIAL_EOL;
    817                  t = normal.x * (UBL_PROBE_PT_2_X) + normal.y * (UBL_PROBE_PT_2_Y);
    818                  d = t + normal.z * z2;
    819                  SERIAL_ECHOPGM("d from 2nd point: ");
    820                  SERIAL_ECHO_F(d, 6);
    821                  SERIAL_EOL;
    822                  t = normal.x * (UBL_PROBE_PT_3_X) + normal.y * (UBL_PROBE_PT_3_Y);
    823                  d = t + normal.z * z3;
    824                  SERIAL_ECHOPGM("d from 3rd point: ");
    825                  SERIAL_ECHO_F(d, 6);
    826                  SERIAL_EOL;
    827                }
    828              #endif
    829          
    830              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \                     ??tilt_mesh_based_on_3pts_12: (+1)
   \      0x244   0x2500             MOVS     R5,#+0
   \      0x246   0xE030             B.N      ??tilt_mesh_based_on_3pts_15
    831                for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
    832                  float x_tmp = ubl.mesh_index_to_xpos[i],
   \                     ??tilt_mesh_based_on_3pts_16: (+1)
   \      0x248   0x....             LDR.N    R0,??DataTable115
   \      0x24A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \      0x24E   0x900D             STR      R0,[SP, #+52]
    833                        y_tmp = ubl.mesh_index_to_ypos[j],
   \      0x250   0x....             LDR.N    R0,??DataTable115_1
   \      0x252   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \      0x256   0x900C             STR      R0,[SP, #+48]
    834                        z_tmp = ubl.z_values[i][j];
   \      0x258   0x.... 0x....      LDR.W    R0,??DataTable118_3
   \      0x25C   0xEB10 0x1785      ADDS     R7,R0,R5, LSL #+6
   \      0x260   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \      0x264   0x900B             STR      R0,[SP, #+44]
    835                  #if ENABLED(DEBUG_LEVELING_FEATURE)
    836                    if (DEBUGGING(LEVELING)) {
    837                      SERIAL_ECHOPGM("before rotation = [");
    838                      SERIAL_PROTOCOL_F(x_tmp, 7);
    839                      SERIAL_PROTOCOLCHAR(',');
    840                      SERIAL_PROTOCOL_F(y_tmp, 7);
    841                      SERIAL_PROTOCOLCHAR(',');
    842                      SERIAL_PROTOCOL_F(z_tmp, 7);
    843                      SERIAL_ECHOPGM("]   ---> ");
    844                      safe_delay(20);
    845                    }
    846                  #endif
    847                  apply_rotation_xyz(rotation, x_tmp, y_tmp, z_tmp);
   \      0x266   0xA80B             ADD      R0,SP,#+44
   \      0x268   0x9007             STR      R0,[SP, #+28]
   \      0x26A   0xA80C             ADD      R0,SP,#+48
   \      0x26C   0x9006             STR      R0,[SP, #+24]
   \      0x26E   0xA80D             ADD      R0,SP,#+52
   \      0x270   0x9005             STR      R0,[SP, #+20]
   \      0x272   0xA914             ADD      R1,SP,#+80
   \      0x274   0xB084             SUB      SP,SP,#+16
   \      0x276   0x4668             MOV      R0,SP
   \      0x278   0x2224             MOVS     R2,#+36
   \      0x27A   0x.... 0x....      BL       __aeabi_memcpy4
   \      0x27E   0xBC0F             POP      {R0-R3}
   \      0x280   0x.... 0x....      BL       _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_
    848                  #if ENABLED(DEBUG_LEVELING_FEATURE)
    849                    if (DEBUGGING(LEVELING)) {
    850                      SERIAL_ECHOPGM("after rotation = [");
    851                      SERIAL_PROTOCOL_F(x_tmp, 7);
    852                      SERIAL_PROTOCOLCHAR(',');
    853                      SERIAL_PROTOCOL_F(y_tmp, 7);
    854                      SERIAL_PROTOCOLCHAR(',');
    855                      SERIAL_PROTOCOL_F(z_tmp, 7);
    856                      SERIAL_ECHOLNPGM("]");
    857                      safe_delay(55);
    858                    }
    859                  #endif
    860                  ubl.z_values[i][j] += z_tmp - d;
   \      0x284   0x980B             LDR      R0,[SP, #+44]
   \      0x286   0x4621             MOV      R1,R4
   \      0x288   0x.... 0x....      BL       __aeabi_fsub
   \      0x28C   0xF857 0x1026      LDR      R1,[R7, R6, LSL #+2]
   \      0x290   0x.... 0x....      BL       __aeabi_fadd
   \      0x294   0xF847 0x0026      STR      R0,[R7, R6, LSL #+2]
    861                }
   \      0x298   0x1C76             ADDS     R6,R6,#+1
   \      0x29A   0xB2F6             UXTB     R6,R6
   \                     ??tilt_mesh_based_on_3pts_17: (+1)
   \      0x29C   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \      0x2A0   0x4286             CMP      R6,R0
   \      0x2A2   0xDBD1             BLT.N    ??tilt_mesh_based_on_3pts_16
   \      0x2A4   0x4626             MOV      R6,R4
   \      0x2A6   0x1C6D             ADDS     R5,R5,#+1
   \      0x2A8   0xB2ED             UXTB     R5,R5
   \                     ??tilt_mesh_based_on_3pts_15: (+1)
   \      0x2AA   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0x2AE   0x4285             CMP      R5,R0
   \      0x2B0   0xDA03             BGE.N    ??tilt_mesh_based_on_3pts_18
   \      0x2B2   0x2000             MOVS     R0,#+0
   \      0x2B4   0x4634             MOV      R4,R6
   \      0x2B6   0x4606             MOV      R6,R0
   \      0x2B8   0xE7F0             B.N      ??tilt_mesh_based_on_3pts_17
    862              }
    863            }
   \                     ??tilt_mesh_based_on_3pts_18: (+1)
   \      0x2BA   0xB027             ADD      SP,SP,#+156
   \      0x2BC   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    864          

   \                                 In section .text, align 2, keep-with-next
    865            float use_encoder_wheel_to_measure_point() {
   \                     _Z34use_encoder_wheel_to_measure_pointv: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0xE002             B.N      ??use_encoder_wheel_to_measure_point_0
    866          
    867              while (ubl_lcd_clicked()) delay(50);  // wait for user to release encoder wheel
   \                     ??use_encoder_wheel_to_measure_point_1: (+1)
   \        0x4   0x2032             MOVS     R0,#+50
   \        0x6   0x.... 0x....      BL       HAL_Delay
   \                     ??use_encoder_wheel_to_measure_point_0: (+1)
   \        0xA   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD1F8             BNE.N    ??use_encoder_wheel_to_measure_point_1
    868              delay(50);  // debounce
   \       0x12   0x2032             MOVS     R0,#+50
   \       0x14   0x.... 0x....      BL       HAL_Delay
    869          
    870              KEEPALIVE_STATE(PAUSED_FOR_USER);
   \       0x18   0x....             LDR.N    R6,??DataTable116_2
   \       0x1A   0x2003             MOVS     R0,#+3
   \       0x1C   0x7030             STRB     R0,[R6, #+0]
   \       0x1E   0x.... 0x....      LDR.W    R7,??DataTable121
   \       0x22   0xE026             B.N      ??use_encoder_wheel_to_measure_point_2
    871              while (!ubl_lcd_clicked()) {     // we need the loop to move the nozzle based on the encoder wheel here!
    872                idle();
   \                     ??use_encoder_wheel_to_measure_point_3: (+1)
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x.... 0x....      BL       _Z4idleb
    873                if (ubl.encoder_diff) {
   \       0x2A   0x6838             LDR      R0,[R7, #+0]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD020             BEQ.N    ??use_encoder_wheel_to_measure_point_2
    874                  do_blocking_move_to_z(current_position[Z_AXIS] + 0.01 * float(ubl.encoder_diff));
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \       0x34   0x6880             LDR      R0,[R0, #+8]
   \       0x36   0x.... 0x....      BL       __aeabi_f2d
   \       0x3A   0x4604             MOV      R4,R0
   \       0x3C   0x460D             MOV      R5,R1
   \       0x3E   0x6838             LDR      R0,[R7, #+0]
   \       0x40   0x.... 0x....      BL       __aeabi_i2f
   \       0x44   0x.... 0x....      BL       __aeabi_f2d
   \       0x48   0x.... 0x....      LDR.W    R2,??DataTable121_2  ;; 0x47ae147b
   \       0x4C   0x.... 0x....      LDR.W    R3,??DataTable121_3  ;; 0x3f847ae1
   \       0x50   0x.... 0x....      BL       __aeabi_dmul
   \       0x54   0x4622             MOV      R2,R4
   \       0x56   0x462B             MOV      R3,R5
   \       0x58   0x.... 0x....      BL       __aeabi_dadd
   \       0x5C   0x.... 0x....      BL       __aeabi_d2f
   \       0x60   0x9001             STR      R0,[SP, #+4]
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0xA801             ADD      R0,SP,#+4
   \       0x6A   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    875                  ubl.encoder_diff = 0;
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x6038             STR      R0,[R7, #+0]
    876                }
    877              }
   \                     ??use_encoder_wheel_to_measure_point_2: (+1)
   \       0x72   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD0D4             BEQ.N    ??use_encoder_wheel_to_measure_point_3
    878              KEEPALIVE_STATE(IN_HANDLER);
   \       0x7A   0x2001             MOVS     R0,#+1
   \       0x7C   0x7030             STRB     R0,[R6, #+0]
    879              return current_position[Z_AXIS];
   \       0x7E   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \       0x82   0x6880             LDR      R0,[R0, #+8]
   \       0x84   0xBDFE             POP      {R1-R7,PC}       ;; return
    880            }
    881          

   \                                 In section .text, align 2, keep-with-next
    882            static void say_and_take_a_measurement() {
    883              SERIAL_PROTOCOLLNPGM(" and take a measurement.");
   \                     _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb26say_and_take_a_measurementEv: (+1)
   \        0x0   0x.... 0x....      ADR.W    R0,?_26
   \        0x4   0x.... 0x....      B.W      _Z14serialprintPGMPKc
    884            }
    885          

   \                                 In section .text, align 2, keep-with-next
    886            float measure_business_card_thickness(const float &in_height) {
   \                     _Z31measure_business_card_thicknessRKf: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
    887              ubl.has_control_of_lcd_panel = true;
   \        0x6   0x....             LDR.N    R4,??DataTable116_1
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x7020             STRB     R0,[R4, #+0]
    888              ubl.save_ubl_active_state_and_disable();   // Disable bed level correction for probing
   \        0xC   0x....             LDR.N    R5,??DataTable116_4
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
    889          
    890              do_blocking_move_to_z(in_height);
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x4669             MOV      R1,SP
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    891              do_blocking_move_to_xy(0.5 * (UBL_MESH_MAX_X - (UBL_MESH_MIN_X)), 0.5 * (UBL_MESH_MAX_Y - (UBL_MESH_MIN_Y)));
   \       0x20   0x.... 0x....      LDR.W    R6,??DataTable119_1
   \       0x24   0xF9B6 0x00B4      LDRSH    R0,[R6, #+180]
   \       0x28   0x.... 0x....      BL       __aeabi_i2f
   \       0x2C   0x4607             MOV      R7,R0
   \       0x2E   0xF04F 0x587C      MOV      R8,#+1056964608
   \       0x32   0x6970             LDR      R0,[R6, #+20]
   \       0x34   0x4639             MOV      R1,R7
   \       0x36   0x.... 0x....      BL       __aeabi_fsub
   \       0x3A   0x4681             MOV      R9,R0
   \       0x3C   0x68B0             LDR      R0,[R6, #+8]
   \       0x3E   0x4639             MOV      R1,R7
   \       0x40   0x.... 0x....      BL       __aeabi_fadd
   \       0x44   0x4601             MOV      R1,R0
   \       0x46   0x4648             MOV      R0,R9
   \       0x48   0x.... 0x....      BL       __aeabi_fsub
   \       0x4C   0x4641             MOV      R1,R8
   \       0x4E   0x.... 0x....      BL       __aeabi_fmul
   \       0x52   0x9002             STR      R0,[SP, #+8]
   \       0x54   0x69B0             LDR      R0,[R6, #+24]
   \       0x56   0x4639             MOV      R1,R7
   \       0x58   0x.... 0x....      BL       __aeabi_fsub
   \       0x5C   0x4681             MOV      R9,R0
   \       0x5E   0x68F0             LDR      R0,[R6, #+12]
   \       0x60   0x4639             MOV      R1,R7
   \       0x62   0x.... 0x....      BL       __aeabi_fadd
   \       0x66   0x4601             MOV      R1,R0
   \       0x68   0x4648             MOV      R0,R9
   \       0x6A   0x.... 0x....      BL       __aeabi_fsub
   \       0x6E   0x4641             MOV      R1,R8
   \       0x70   0x.... 0x....      BL       __aeabi_fmul
   \       0x74   0x9001             STR      R0,[SP, #+4]
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0x466A             MOV      R2,SP
   \       0x7C   0xA901             ADD      R1,SP,#+4
   \       0x7E   0xA802             ADD      R0,SP,#+8
   \       0x80   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    892                //, min(planner.max_feedrate_mm_s[X_AXIS], planner.max_feedrate_mm_s[Y_AXIS]) / 2.0);
    893          
    894              stepper.synchronize();
   \       0x84   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    895              SERIAL_PROTOCOLPGM("Place shim under nozzle.");
   \       0x88   0x.... 0x....      ADR.W    R0,?_27
   \       0x8C   0x.... 0x....      BL       _Z14serialprintPGMPKc
    896              say_and_take_a_measurement();
   \       0x90   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb26say_and_take_a_measurementEv
    897          
    898              const float z1 = use_encoder_wheel_to_measure_point();
   \       0x94   0x.... 0x....      BL       _Z34use_encoder_wheel_to_measure_pointv
   \       0x98   0x4606             MOV      R6,R0
    899              do_blocking_move_to_z(current_position[Z_AXIS] + SIZE_OF_LITTLE_RAISE);
   \       0x9A   0x.... 0x....      LDR.W    R7,??DataTable121_1
   \       0x9E   0x68B8             LDR      R0,[R7, #+8]
   \       0xA0   0x9001             STR      R0,[SP, #+4]
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0x9000             STR      R0,[SP, #+0]
   \       0xA6   0x4669             MOV      R1,SP
   \       0xA8   0xA801             ADD      R0,SP,#+4
   \       0xAA   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    900              stepper.synchronize();
   \       0xAE   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    901          
    902              SERIAL_PROTOCOLPGM("Remove shim.");
   \       0xB2   0x.... 0x....      ADR.W    R0,?_28
   \       0xB6   0x.... 0x....      BL       _Z14serialprintPGMPKc
    903              say_and_take_a_measurement();
   \       0xBA   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb26say_and_take_a_measurementEv
    904          
    905              const float z2 = use_encoder_wheel_to_measure_point();
   \       0xBE   0x.... 0x....      BL       _Z34use_encoder_wheel_to_measure_pointv
   \       0xC2   0x4680             MOV      R8,R0
    906              do_blocking_move_to_z(current_position[Z_AXIS] + SIZE_OF_LITTLE_RAISE);
   \       0xC4   0x68B8             LDR      R0,[R7, #+8]
   \       0xC6   0x9001             STR      R0,[SP, #+4]
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x9000             STR      R0,[SP, #+0]
   \       0xCC   0x4669             MOV      R1,SP
   \       0xCE   0xA801             ADD      R0,SP,#+4
   \       0xD0   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    907          
    908              if (g29_verbose_level > 1) {
   \       0xD4   0x4630             MOV      R0,R6
   \       0xD6   0x4641             MOV      R1,R8
   \       0xD8   0x.... 0x....      BL       __aeabi_fsub
   \       0xDC   0x4606             MOV      R6,R0
   \       0xDE   0x.... 0x....      LDR.W    R0,??DataTable117_1
   \       0xE2   0x6840             LDR      R0,[R0, #+4]
   \       0xE4   0x2802             CMP      R0,#+2
   \       0xE6   0xDB25             BLT.N    ??measure_business_card_thickness_0
    909                SERIAL_PROTOCOLPGM("Business Card is: ");
   \       0xE8   0x.... 0x....      ADR.W    R0,?_29
   \       0xEC   0x.... 0x....      BL       _Z14serialprintPGMPKc
    910                SERIAL_PROTOCOL_F(abs(z1 - z2), 6);
   \       0xF0   0x.... 0x....      LDR.W    R0,??DataTable119_2
   \       0xF4   0x7800             LDRB     R0,[R0, #+0]
   \       0xF6   0x2800             CMP      R0,#+0
   \       0xF8   0xD10C             BNE.N    ??measure_business_card_thickness_1
   \       0xFA   0x2006             MOVS     R0,#+6
   \       0xFC   0x9000             STR      R0,[SP, #+0]
   \       0xFE   0xF026 0x4000      BIC      R0,R6,#0x80000000
   \      0x102   0x.... 0x....      BL       __aeabi_f2d
   \      0x106   0x4602             MOV      R2,R0
   \      0x108   0x460B             MOV      R3,R1
   \      0x10A   0x.... 0x....      LDR.W    R0,??DataTable119_5
   \      0x10E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x112   0xE00B             B.N      ??measure_business_card_thickness_2
   \                     ??measure_business_card_thickness_1: (+1)
   \      0x114   0x2006             MOVS     R0,#+6
   \      0x116   0x9000             STR      R0,[SP, #+0]
   \      0x118   0xF026 0x4000      BIC      R0,R6,#0x80000000
   \      0x11C   0x.... 0x....      BL       __aeabi_f2d
   \      0x120   0x4602             MOV      R2,R0
   \      0x122   0x460B             MOV      R3,R1
   \      0x124   0x.... 0x....      LDR.W    R0,??DataTable119_4
   \      0x128   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
    911                SERIAL_PROTOCOLLNPGM("mm thick.");
   \                     ??measure_business_card_thickness_2: (+1)
   \      0x12C   0x.... 0x....      ADR.W    R0,?_30
   \      0x130   0x.... 0x....      BL       _Z14serialprintPGMPKc
    912              }
    913              ubl.has_control_of_lcd_panel = false;
   \                     ??measure_business_card_thickness_0: (+1)
   \      0x134   0x2000             MOVS     R0,#+0
   \      0x136   0x7020             STRB     R0,[R4, #+0]
    914          
    915              ubl.restore_ubl_active_state_and_leave();
   \      0x138   0x4628             MOV      R0,R5
   \      0x13A   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    916              return abs(z1 - z2);
   \      0x13E   0xF026 0x4000      BIC      R0,R6,#0x80000000
   \      0x142   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    917            }
    918          

   \                                 In section .text, align 2, keep-with-next
    919            void manually_probe_remaining_mesh(const float &lx, const float &ly, const float &z_clearance, const float &card_thickness, const bool do_ubl_mesh_map) {
   \                     _Z29manually_probe_remaining_meshRKfS0_S0_S0_b: (+1)
   \        0x0   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
    920          
    921              ubl.has_control_of_lcd_panel = true;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable118_4
   \        0xC   0x7008             STRB     R0,[R1, #+0]
    922              ubl.save_ubl_active_state_and_disable();   // we don't do bed level correction because we want the raw data when we probe
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable121_4
   \       0x12   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
    923              do_blocking_move_to_z(z_clearance);
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0x4669             MOV      R1,SP
   \       0x1C   0x9809             LDR      R0,[SP, #+36]
   \       0x1E   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    924              do_blocking_move_to_xy(lx, ly);
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x466A             MOV      R2,SP
   \       0x28   0x9908             LDR      R1,[SP, #+32]
   \       0x2A   0x9807             LDR      R0,[SP, #+28]
   \       0x2C   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    925          
    926              float last_x = -9999.99, last_y = -9999.99;
   \       0x30   0x.... 0x....      LDR.W    R10,??DataTable121_5  ;; 0xc61c3ff6
   \       0x34   0xF8CD 0xA00C      STR      R10,[SP, #+12]
   \       0x38   0x.... 0x....      LDR.W    R6,??DataTable119_1
    927              mesh_index_pair location;
    928              do {
    929                location = find_closest_mesh_point_of_type(INVALID, lx, ly, USE_NOZZLE_AS_REFERENCE, NULL, false);
   \                     ??manually_probe_remaining_mesh_0: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x9002             STR      R0,[SP, #+8]
   \       0x40   0x9001             STR      R0,[SP, #+4]
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0x9B08             LDR      R3,[SP, #+32]
   \       0x46   0x9A07             LDR      R2,[SP, #+28]
   \       0x48   0x4601             MOV      R1,R0
   \       0x4A   0xA804             ADD      R0,SP,#+16
   \       0x4C   0x.... 0x....      BL       _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb
    930                // It doesn't matter if the probe can't reach the NAN location. This is a manual probe.
    931                if (location.x_index < 0 && location.y_index < 0) continue;
   \       0x50   0xF99D 0x9011      LDRSB    R9,[SP, #+17]
   \       0x54   0xF99D 0x8010      LDRSB    R8,[SP, #+16]
   \       0x58   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x5C   0xD503             BPL.N    ??manually_probe_remaining_mesh_1
   \       0x5E   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x62   0xF100 0x814D      BMI.W    ??manually_probe_remaining_mesh_2
    932          
    933                const float rawx = ubl.mesh_index_to_xpos[location.x_index],
   \                     ??manually_probe_remaining_mesh_1: (+1)
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable118_5
   \       0x6A   0xF850 0x5028      LDR      R5,[R0, R8, LSL #+2]
    934                            rawy = ubl.mesh_index_to_ypos[location.y_index];
   \       0x6E   0x.... 0x....      LDR.W    R0,??DataTable118_6
   \       0x72   0xF850 0x4029      LDR      R4,[R0, R9, LSL #+2]
    935          
    936                // TODO: Change to use `position_is_reachable` (for SCARA-compatibility)
    937                if (!WITHIN(rawx, UBL_MESH_MIN_X, UBL_MESH_MAX_X) || !WITHIN(rawy, UBL_MESH_MIN_Y, UBL_MESH_MAX_Y)) {
   \       0x76   0xF9B6 0x00B4      LDRSH    R0,[R6, #+180]
   \       0x7A   0x.... 0x....      BL       __aeabi_i2f
   \       0x7E   0x4607             MOV      R7,R0
   \       0x80   0x68B0             LDR      R0,[R6, #+8]
   \       0x82   0x4639             MOV      R1,R7
   \       0x84   0x.... 0x....      BL       __aeabi_fadd
   \       0x88   0x4601             MOV      R1,R0
   \       0x8A   0x4628             MOV      R0,R5
   \       0x8C   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0x90   0xD832             BHI.N    ??manually_probe_remaining_mesh_3
   \       0x92   0x6970             LDR      R0,[R6, #+20]
   \       0x94   0x4639             MOV      R1,R7
   \       0x96   0x.... 0x....      BL       __aeabi_fsub
   \       0x9A   0x4629             MOV      R1,R5
   \       0x9C   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xA0   0xD82A             BHI.N    ??manually_probe_remaining_mesh_3
   \       0xA2   0x68F0             LDR      R0,[R6, #+12]
   \       0xA4   0x4639             MOV      R1,R7
   \       0xA6   0x.... 0x....      BL       __aeabi_fadd
   \       0xAA   0x4601             MOV      R1,R0
   \       0xAC   0x4620             MOV      R0,R4
   \       0xAE   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xB2   0xD821             BHI.N    ??manually_probe_remaining_mesh_3
   \       0xB4   0x69B0             LDR      R0,[R6, #+24]
   \       0xB6   0x4639             MOV      R1,R7
   \       0xB8   0x.... 0x....      BL       __aeabi_fsub
   \       0xBC   0x4621             MOV      R1,R4
   \       0xBE   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xC2   0xD819             BHI.N    ??manually_probe_remaining_mesh_3
    938                  SERIAL_ERROR_START;
    939                  SERIAL_ERRORLNPGM("Attempt to probe off the bed.");
    940                  ubl.has_control_of_lcd_panel = false;
    941                  goto LEAVE;
    942                }
    943          
    944                const float xProbe = LOGICAL_X_POSITION(rawx),
   \       0xC4   0x.... 0x....      LDR.W    R7,??DataTable121_6
   \       0xC8   0x6838             LDR      R0,[R7, #+0]
   \       0xCA   0x4629             MOV      R1,R5
   \       0xCC   0x.... 0x....      BL       __aeabi_fadd
   \       0xD0   0x9002             STR      R0,[SP, #+8]
    945                            yProbe = LOGICAL_Y_POSITION(rawy),
   \       0xD2   0x6878             LDR      R0,[R7, #+4]
   \       0xD4   0x4621             MOV      R1,R4
   \       0xD6   0x.... 0x....      BL       __aeabi_fadd
   \       0xDA   0x9001             STR      R0,[SP, #+4]
    946                            dx = xProbe - last_x,
    947                            dy = yProbe - last_y;
   \       0xDC   0x4651             MOV      R1,R10
   \       0xDE   0x.... 0x....      BL       __aeabi_fsub
   \       0xE2   0x4605             MOV      R5,R0
    948          
    949                if (HYPOT(dx, dy) < BIG_RAISE_NOT_NEEDED)
   \       0xE4   0x9802             LDR      R0,[SP, #+8]
   \       0xE6   0x9903             LDR      R1,[SP, #+12]
   \       0xE8   0x.... 0x....      BL       __aeabi_fsub
   \       0xEC   0x4683             MOV      R11,R0
   \       0xEE   0x2402             MOVS     R4,#+2
   \       0xF0   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \       0xF4   0x4657             MOV      R7,R10
   \       0xF6   0xE00F             B.N      ??manually_probe_remaining_mesh_4
   \                     ??manually_probe_remaining_mesh_3: (+1)
   \       0xF8   0x....             LDR.N    R0,??DataTable118_2
   \       0xFA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \       0xFE   0x.... 0x....      ADR.W    R0,?_31
   \      0x102   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x106   0x2000             MOVS     R0,#+0
   \      0x108   0x....             LDR.N    R1,??DataTable118_4
   \      0x10A   0x7008             STRB     R0,[R1, #+0]
   \      0x10C   0xE109             B.N      ??manually_probe_remaining_mesh_5
   \                     ??manually_probe_remaining_mesh_6: (+1)
   \      0x10E   0x4658             MOV      R0,R11
   \      0x110   0x4659             MOV      R1,R11
   \      0x112   0x.... 0x....      BL       __aeabi_fmul
   \      0x116   0x4683             MOV      R11,R0
   \                     ??manually_probe_remaining_mesh_4: (+1)
   \      0x118   0x07E0             LSLS     R0,R4,#+31
   \      0x11A   0xD504             BPL.N    ??manually_probe_remaining_mesh_7
   \      0x11C   0x4638             MOV      R0,R7
   \      0x11E   0x4659             MOV      R1,R11
   \      0x120   0x.... 0x....      BL       __aeabi_fmul
   \      0x124   0x4607             MOV      R7,R0
   \                     ??manually_probe_remaining_mesh_7: (+1)
   \      0x126   0x0864             LSRS     R4,R4,#+1
   \      0x128   0xD1F1             BNE.N    ??manually_probe_remaining_mesh_6
   \      0x12A   0x2402             MOVS     R4,#+2
   \      0x12C   0xE004             B.N      ??manually_probe_remaining_mesh_8
   \                     ??manually_probe_remaining_mesh_9: (+1)
   \      0x12E   0x4628             MOV      R0,R5
   \      0x130   0x4629             MOV      R1,R5
   \      0x132   0x.... 0x....      BL       __aeabi_fmul
   \      0x136   0x4605             MOV      R5,R0
   \                     ??manually_probe_remaining_mesh_8: (+1)
   \      0x138   0x07E0             LSLS     R0,R4,#+31
   \      0x13A   0xD504             BPL.N    ??manually_probe_remaining_mesh_10
   \      0x13C   0x4650             MOV      R0,R10
   \      0x13E   0x4629             MOV      R1,R5
   \      0x140   0x.... 0x....      BL       __aeabi_fmul
   \      0x144   0x4682             MOV      R10,R0
   \                     ??manually_probe_remaining_mesh_10: (+1)
   \      0x146   0x0864             LSRS     R4,R4,#+1
   \      0x148   0xD1F1             BNE.N    ??manually_probe_remaining_mesh_9
   \      0x14A   0x4638             MOV      R0,R7
   \      0x14C   0x4651             MOV      R1,R10
   \      0x14E   0x.... 0x....      BL       __aeabi_fadd
   \      0x152   0x.... 0x....      BL       sqrtf
   \      0x156   0x2100             MOVS     R1,#+0
   \      0x158   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x15C   0xD20A             BCS.N    ??manually_probe_remaining_mesh_11
    950                  do_blocking_move_to_z(current_position[Z_AXIS] + SIZE_OF_LITTLE_RAISE);
   \      0x15E   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \      0x162   0x6880             LDR      R0,[R0, #+8]
   \      0x164   0x9003             STR      R0,[SP, #+12]
   \      0x166   0x4608             MOV      R0,R1
   \      0x168   0x9000             STR      R0,[SP, #+0]
   \      0x16A   0x4669             MOV      R1,SP
   \      0x16C   0xA803             ADD      R0,SP,#+12
   \      0x16E   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   \      0x172   0xE005             B.N      ??manually_probe_remaining_mesh_12
    951                else
    952                  do_blocking_move_to_z(z_clearance);
   \                     ??manually_probe_remaining_mesh_11: (+1)
   \      0x174   0x4608             MOV      R0,R1
   \      0x176   0x9000             STR      R0,[SP, #+0]
   \      0x178   0x4669             MOV      R1,SP
   \      0x17A   0x9809             LDR      R0,[SP, #+36]
   \      0x17C   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    953          
    954                do_blocking_move_to_xy(xProbe, yProbe);
   \                     ??manually_probe_remaining_mesh_12: (+1)
   \      0x180   0x2000             MOVS     R0,#+0
   \      0x182   0x9000             STR      R0,[SP, #+0]
   \      0x184   0x466A             MOV      R2,SP
   \      0x186   0xA901             ADD      R1,SP,#+4
   \      0x188   0xA802             ADD      R0,SP,#+8
   \      0x18A   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    955          
    956                last_x = xProbe;
   \      0x18E   0x9802             LDR      R0,[SP, #+8]
   \      0x190   0x9003             STR      R0,[SP, #+12]
    957                last_y = yProbe;
   \      0x192   0xF8DD 0xA004      LDR      R10,[SP, #+4]
    958          
    959                KEEPALIVE_STATE(PAUSED_FOR_USER);
   \      0x196   0x.... 0x....      LDR.W    R11,??DataTable121_7
   \      0x19A   0x2003             MOVS     R0,#+3
   \      0x19C   0xF88B 0x0000      STRB     R0,[R11, #+0]
    960                ubl.has_control_of_lcd_panel = true;
   \      0x1A0   0x2001             MOVS     R0,#+1
   \      0x1A2   0x....             LDR.N    R1,??DataTable118_4
   \      0x1A4   0x7008             STRB     R0,[R1, #+0]
    961          
    962                if (do_ubl_mesh_map) ubl.display_map(map_type);  // show user where we're probing
   \      0x1A6   0xF89D 0x0050      LDRB     R0,[SP, #+80]
   \      0x1AA   0x2800             CMP      R0,#+0
   \      0x1AC   0xD009             BEQ.N    ??manually_probe_remaining_mesh_13
   \      0x1AE   0x....             LDR.N    R0,??DataTable117_1
   \      0x1B0   0x6941             LDR      R1,[R0, #+20]
   \      0x1B2   0x.... 0x....      LDR.W    R0,??DataTable121_4
   \      0x1B6   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
   \      0x1BA   0xE002             B.N      ??manually_probe_remaining_mesh_13
    963          
    964                while (ubl_lcd_clicked()) delay(50);             // wait for user to release encoder wheel
   \                     ??manually_probe_remaining_mesh_14: (+1)
   \      0x1BC   0x2032             MOVS     R0,#+50
   \      0x1BE   0x.... 0x....      BL       HAL_Delay
   \                     ??manually_probe_remaining_mesh_13: (+1)
   \      0x1C2   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x1C6   0x2800             CMP      R0,#+0
   \      0x1C8   0xD1F8             BNE.N    ??manually_probe_remaining_mesh_14
    965                delay(50);                                       // debounce
   \      0x1CA   0x2032             MOVS     R0,#+50
   \      0x1CC   0x.... 0x....      BL       HAL_Delay
   \      0x1D0   0x.... 0x....      LDR.W    R7,??DataTable121
   \      0x1D4   0xE025             B.N      ??manually_probe_remaining_mesh_15
    966                while (!ubl_lcd_clicked()) {                     // we need the loop to move the nozzle based on the encoder wheel here!
    967                  idle();
   \                     ??manually_probe_remaining_mesh_16: (+1)
   \      0x1D6   0x2000             MOVS     R0,#+0
   \      0x1D8   0x.... 0x....      BL       _Z4idleb
    968                  if (ubl.encoder_diff) {
   \      0x1DC   0x6838             LDR      R0,[R7, #+0]
   \      0x1DE   0x2800             CMP      R0,#+0
   \      0x1E0   0xD01F             BEQ.N    ??manually_probe_remaining_mesh_15
    969                    do_blocking_move_to_z(current_position[Z_AXIS] + float(ubl.encoder_diff) / 100.0);
   \      0x1E2   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \      0x1E6   0x6880             LDR      R0,[R0, #+8]
   \      0x1E8   0x.... 0x....      BL       __aeabi_f2d
   \      0x1EC   0x4604             MOV      R4,R0
   \      0x1EE   0x460D             MOV      R5,R1
   \      0x1F0   0x6838             LDR      R0,[R7, #+0]
   \      0x1F2   0x.... 0x....      BL       __aeabi_i2f
   \      0x1F6   0x.... 0x....      BL       __aeabi_f2d
   \      0x1FA   0x2200             MOVS     R2,#+0
   \      0x1FC   0x.... 0x....      LDR.W    R3,??DataTable121_8  ;; 0x40590000
   \      0x200   0x.... 0x....      BL       __aeabi_ddiv
   \      0x204   0x4622             MOV      R2,R4
   \      0x206   0x462B             MOV      R3,R5
   \      0x208   0x.... 0x....      BL       __aeabi_dadd
   \      0x20C   0x.... 0x....      BL       __aeabi_d2f
   \      0x210   0x9004             STR      R0,[SP, #+16]
   \      0x212   0x2000             MOVS     R0,#+0
   \      0x214   0x9000             STR      R0,[SP, #+0]
   \      0x216   0x4669             MOV      R1,SP
   \      0x218   0xA804             ADD      R0,SP,#+16
   \      0x21A   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    970                    ubl.encoder_diff = 0;
   \      0x21E   0x2000             MOVS     R0,#+0
   \      0x220   0x6038             STR      R0,[R7, #+0]
    971                  }
    972                }
   \                     ??manually_probe_remaining_mesh_15: (+1)
   \      0x222   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x226   0x2800             CMP      R0,#+0
   \      0x228   0xD0D5             BEQ.N    ??manually_probe_remaining_mesh_16
    973          
    974                const millis_t nxt = millis() + 1500L;
   \      0x22A   0x.... 0x....      BL       HAL_GetTick
   \      0x22E   0x4604             MOV      R4,R0
   \      0x230   0xF204 0x54DC      ADDW     R4,R4,#+1500
    975                while (ubl_lcd_clicked()) {     // debounce and watch for abort
   \                     ??manually_probe_remaining_mesh_17: (+1)
   \      0x234   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x238   0x2800             CMP      R0,#+0
   \      0x23A   0xD034             BEQ.N    ??manually_probe_remaining_mesh_18
    976                  idle();
   \      0x23C   0x2000             MOVS     R0,#+0
   \      0x23E   0x.... 0x....      BL       _Z4idleb
    977                  if (ELAPSED(millis(), nxt)) {
   \      0x242   0x.... 0x....      BL       HAL_GetTick
   \      0x246   0x1B00             SUBS     R0,R0,R4
   \      0x248   0xD4F4             BMI.N    ??manually_probe_remaining_mesh_17
    978                    SERIAL_PROTOCOLLNPGM("\nMesh only partially populated.");
   \      0x24A   0x.... 0x....      ADR.W    R0,?_32
   \      0x24E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    979                    do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \      0x252   0x2000             MOVS     R0,#+0
   \      0x254   0x9000             STR      R0,[SP, #+0]
   \      0x256   0x4669             MOV      R1,SP
   \      0x258   0xF106 0x0064      ADD      R0,R6,#+100
   \      0x25C   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    980                    lcd_quick_feedback();
   \      0x260   0x.... 0x....      BL       _Z18lcd_quick_feedbackv
   \      0x264   0xE002             B.N      ??manually_probe_remaining_mesh_19
    981                    while (ubl_lcd_clicked()) idle();
   \                     ??manually_probe_remaining_mesh_20: (+1)
   \      0x266   0x2000             MOVS     R0,#+0
   \      0x268   0x.... 0x....      BL       _Z4idleb
   \                     ??manually_probe_remaining_mesh_19: (+1)
   \      0x26C   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x270   0x2800             CMP      R0,#+0
   \      0x272   0xD1F8             BNE.N    ??manually_probe_remaining_mesh_20
    982                    ubl.has_control_of_lcd_panel = false;
   \      0x274   0x2000             MOVS     R0,#+0
   \      0x276   0x....             LDR.N    R1,??DataTable118_4
   \      0x278   0x7008             STRB     R0,[R1, #+0]
    983                    KEEPALIVE_STATE(IN_HANDLER);
   \      0x27A   0x2001             MOVS     R0,#+1
   \      0x27C   0xF88B 0x0000      STRB     R0,[R11, #+0]
    984                    ubl.restore_ubl_active_state_and_leave();
   \      0x280   0x.... 0x....      LDR.W    R0,??DataTable121_4
   \      0x284   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
    985                    return;
   \      0x288   0xE061             B.N      ??manually_probe_remaining_mesh_21
    986                  }
    987                }
    988          
    989                ubl.z_values[location.x_index][location.y_index] = current_position[Z_AXIS] - card_thickness;
    990                if (g29_verbose_level > 2) {
    991                  SERIAL_PROTOCOLPGM("Mesh Point Measured at: ");
    992                  SERIAL_PROTOCOL_F(ubl.z_values[location.x_index][location.y_index], 6);
   \                     ??manually_probe_remaining_mesh_22: (+1)
   \      0x28A   0x2006             MOVS     R0,#+6
   \      0x28C   0x9000             STR      R0,[SP, #+0]
   \      0x28E   0x.... 0x....      LDR.W    R0,??DataTable119_4
   \      0x292   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x296   0xE02B             B.N      ??manually_probe_remaining_mesh_23
    993                  SERIAL_EOL;
   \                     ??manually_probe_remaining_mesh_24: (+1)
   \      0x298   0x2200             MOVS     R2,#+0
   \      0x29A   0x210A             MOVS     R1,#+10
   \      0x29C   0x.... 0x....      LDR.W    R0,??DataTable119_4
   \      0x2A0   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \      0x2A4   0xE02C             B.N      ??manually_probe_remaining_mesh_2
   \                     ??manually_probe_remaining_mesh_18: (+1)
   \      0x2A6   0x....             LDR.N    R0,??DataTable117
   \      0x2A8   0xEB10 0x1488      ADDS     R4,R0,R8, LSL #+6
   \      0x2AC   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \      0x2B0   0x6880             LDR      R0,[R0, #+8]
   \      0x2B2   0x990A             LDR      R1,[SP, #+40]
   \      0x2B4   0x6809             LDR      R1,[R1, #+0]
   \      0x2B6   0x.... 0x....      BL       __aeabi_fsub
   \      0x2BA   0xF844 0x0029      STR      R0,[R4, R9, LSL #+2]
   \      0x2BE   0x....             LDR.N    R0,??DataTable117_1
   \      0x2C0   0x6840             LDR      R0,[R0, #+4]
   \      0x2C2   0x2803             CMP      R0,#+3
   \      0x2C4   0xDB1C             BLT.N    ??manually_probe_remaining_mesh_2
   \      0x2C6   0x.... 0x....      ADR.W    R0,?_33
   \      0x2CA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x2CE   0xF854 0x0029      LDR      R0,[R4, R9, LSL #+2]
   \      0x2D2   0x.... 0x....      BL       __aeabi_f2d
   \      0x2D6   0x4602             MOV      R2,R0
   \      0x2D8   0x460B             MOV      R3,R1
   \      0x2DA   0x.... 0x....      LDR.W    R4,??DataTable119_2
   \      0x2DE   0x7820             LDRB     R0,[R4, #+0]
   \      0x2E0   0x2800             CMP      R0,#+0
   \      0x2E2   0xD1D2             BNE.N    ??manually_probe_remaining_mesh_22
   \      0x2E4   0x2006             MOVS     R0,#+6
   \      0x2E6   0x9000             STR      R0,[SP, #+0]
   \      0x2E8   0x.... 0x....      LDR.W    R0,??DataTable119_5
   \      0x2EC   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \                     ??manually_probe_remaining_mesh_23: (+1)
   \      0x2F0   0x7820             LDRB     R0,[R4, #+0]
   \      0x2F2   0x2800             CMP      R0,#+0
   \      0x2F4   0xD1D0             BNE.N    ??manually_probe_remaining_mesh_24
   \      0x2F6   0x210A             MOVS     R1,#+10
   \      0x2F8   0x.... 0x....      LDR.W    R0,??DataTable119_5
   \      0x2FC   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
    994                }
    995              } while (location.x_index >= 0 && location.y_index >= 0);
   \                     ??manually_probe_remaining_mesh_2: (+1)
   \      0x300   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x304   0xD403             BMI.N    ??manually_probe_remaining_mesh_25
   \      0x306   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x30A   0xF57F 0xAE97      BPL.W    ??manually_probe_remaining_mesh_0
    996          
    997              if (do_ubl_mesh_map) ubl.display_map(map_type);
   \                     ??manually_probe_remaining_mesh_25: (+1)
   \      0x30E   0xF89D 0x0050      LDRB     R0,[SP, #+80]
   \      0x312   0x2800             CMP      R0,#+0
   \      0x314   0xD005             BEQ.N    ??manually_probe_remaining_mesh_5
   \      0x316   0x....             LDR.N    R0,??DataTable117_1
   \      0x318   0x6941             LDR      R1,[R0, #+20]
   \      0x31A   0x.... 0x....      LDR.W    R0,??DataTable121_4
   \      0x31E   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
    998          
    999              LEAVE:
   1000              ubl.restore_ubl_active_state_and_leave();
   \                     ??manually_probe_remaining_mesh_5: (+1)
   \      0x322   0x.... 0x....      LDR.W    R0,??DataTable121_4
   \      0x326   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
   1001              KEEPALIVE_STATE(IN_HANDLER);
   \      0x32A   0x2001             MOVS     R0,#+1
   \      0x32C   0x.... 0x....      LDR.W    R1,??DataTable121_7
   \      0x330   0x7008             STRB     R0,[R1, #+0]
   1002              do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \      0x332   0x2000             MOVS     R0,#+0
   \      0x334   0x9000             STR      R0,[SP, #+0]
   \      0x336   0x4669             MOV      R1,SP
   \      0x338   0xF106 0x0064      ADD      R0,R6,#+100
   \      0x33C   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   1003              do_blocking_move_to_xy(lx, ly);
   \      0x340   0x2000             MOVS     R0,#+0
   \      0x342   0x9000             STR      R0,[SP, #+0]
   \      0x344   0x466A             MOV      R2,SP
   \      0x346   0x9908             LDR      R1,[SP, #+32]
   \      0x348   0x9807             LDR      R0,[SP, #+28]
   \      0x34A   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
   1004            }
   \                     ??manually_probe_remaining_mesh_21: (+1)
   \      0x34E   0xB00B             ADD      SP,SP,#+44
   \      0x350   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1005          

   \                                 In section .text, align 2, keep-with-next
   1006            static void say_ubl_name() {
   1007              SERIAL_PROTOCOLPGM("Unified Bed Leveling ");
   \                     _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb12say_ubl_nameEv: (+1)
   \        0x0   0x.... 0x....      ADR.W    R0,?_34
   \        0x4   0x.... 0x....      B.W      _Z14serialprintPGMPKc
   1008            }
   1009          

   \                                 In section .text, align 2, keep-with-next
   1010            static void report_ubl_state() {
   \                     _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb16report_ubl_stateEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1011              say_ubl_name();
   \        0x2   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb12say_ubl_nameEv
   1012              SERIAL_PROTOCOLPGM("System ");
   \        0x6   0x.... 0x....      ADR.W    R0,?_35
   \        0xA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1013              if (!ubl.state.active) SERIAL_PROTOCOLPGM("de");
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable121_9
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD102             BNE.N    ??report_ubl_state_0
   \       0x18   0x....             ADR.N    R0,??DataTable119  ;; 0x64, 0x65, 0x00, 0x00
   \       0x1A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1014              SERIAL_PROTOCOLLNPGM("activated.\n");
   \                     ??report_ubl_state_0: (+1)
   \       0x1E   0x.... 0x....      ADR.W    R0,?_37
   \       0x22   0xE8BD 0x4002      POP      {R1,LR}
   \       0x26   0x.... 0x....      B.W      _Z14serialprintPGMPKc
   1015            }
   1016           

   \                                 In section .text, align 2, keep-with-next
   1017            bool g29_parameter_parsing() {
   \                     _Z21g29_parameter_parsingv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   1018              bool err_flag = false;
   \        0x2   0x2500             MOVS     R5,#+0
   1019          
   1020              LCD_MESSAGEPGM("Doing G29 UBL!");
   \        0x4   0x4629             MOV      R1,R5
   \        0x6   0x.... 0x....      ADR.W    R0,?_38
   \        0xA   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1021              lcd_quick_feedback();
   \        0xE   0x.... 0x....      BL       _Z18lcd_quick_feedbackv
   1022          
   1023              ubl_constant = 0.0;
   \       0x12   0x.... 0x....      LDR.W    R4,??DataTable122
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x62E0             STR      R0,[R4, #+44]
   1024              repetition_cnt = 0;
   \       0x1A   0x60E0             STR      R0,[R4, #+12]
   1025          
   1026              x_flag = code_seen('X') && code_has_value();
   \       0x1C   0x2058             MOVS     R0,#+88
   \       0x1E   0x.... 0x....      BL       _Z9code_seenc
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD007             BEQ.N    ??g29_parameter_parsing_0
   \       0x26   0x.... 0x....      BL       _Z14code_has_valuev
   \       0x2A   0x1E40             SUBS     R0,R0,#+1
   \       0x2C   0x4180             SBCS     R0,R0,R0
   \       0x2E   0x43C0             MVNS     R0,R0
   \       0x30   0x0FC0             LSRS     R0,R0,#+31
   \       0x32   0x70A0             STRB     R0,[R4, #+2]
   \       0x34   0xE001             B.N      ??g29_parameter_parsing_1
   \                     ??g29_parameter_parsing_0: (+1)
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x70A0             STRB     R0,[R4, #+2]
   1027              x_pos = x_flag ? code_value_float() : current_position[X_AXIS];
   \                     ??g29_parameter_parsing_1: (+1)
   \       0x3A   0x78A0             LDRB     R0,[R4, #+2]
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD003             BEQ.N    ??g29_parameter_parsing_2
   \       0x40   0x.... 0x....      BL       _Z16code_value_floatv
   \       0x44   0x61E0             STR      R0,[R4, #+28]
   \       0x46   0xE003             B.N      ??g29_parameter_parsing_3
   \                     ??g29_parameter_parsing_2: (+1)
   \       0x48   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \       0x4C   0x6800             LDR      R0,[R0, #+0]
   \       0x4E   0x61E0             STR      R0,[R4, #+28]
   1028              y_flag = code_seen('Y') && code_has_value();
   \                     ??g29_parameter_parsing_3: (+1)
   \       0x50   0x2059             MOVS     R0,#+89
   \       0x52   0x.... 0x....      BL       _Z9code_seenc
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD007             BEQ.N    ??g29_parameter_parsing_4
   \       0x5A   0x.... 0x....      BL       _Z14code_has_valuev
   \       0x5E   0x1E40             SUBS     R0,R0,#+1
   \       0x60   0x4180             SBCS     R0,R0,R0
   \       0x62   0x43C0             MVNS     R0,R0
   \       0x64   0x0FC0             LSRS     R0,R0,#+31
   \       0x66   0x70E0             STRB     R0,[R4, #+3]
   \       0x68   0xE001             B.N      ??g29_parameter_parsing_5
   \                     ??g29_parameter_parsing_4: (+1)
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x70E0             STRB     R0,[R4, #+3]
   1029              y_pos = y_flag ? code_value_float() : current_position[Y_AXIS];
   \                     ??g29_parameter_parsing_5: (+1)
   \       0x6E   0x78E0             LDRB     R0,[R4, #+3]
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD003             BEQ.N    ??g29_parameter_parsing_6
   \       0x74   0x.... 0x....      BL       _Z16code_value_floatv
   \       0x78   0x6220             STR      R0,[R4, #+32]
   \       0x7A   0xE003             B.N      ??g29_parameter_parsing_7
   \                     ??g29_parameter_parsing_6: (+1)
   \       0x7C   0x.... 0x....      LDR.W    R0,??DataTable121_1
   \       0x80   0x6840             LDR      R0,[R0, #+4]
   \       0x82   0x6220             STR      R0,[R4, #+32]
   1030          
   1031              repeat_flag = code_seen('R');
   \                     ??g29_parameter_parsing_7: (+1)
   \       0x84   0x2052             MOVS     R0,#+82
   \       0x86   0x.... 0x....      BL       _Z9code_seenc
   \       0x8A   0x7020             STRB     R0,[R4, #+0]
   1032              if (repeat_flag) {
   \       0x8C   0x....             LDR.N    R6,??DataTable119_1
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD016             BEQ.N    ??g29_parameter_parsing_8
   1033                repetition_cnt = code_has_value() ? code_value_int() : (GRID_MAX_POINTS_X) * (GRID_MAX_POINTS_Y);
   \       0x92   0x.... 0x....      BL       _Z14code_has_valuev
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD003             BEQ.N    ??g29_parameter_parsing_9
   \       0x9A   0x.... 0x....      BL       _Z14code_value_intv
   \       0x9E   0x60E0             STR      R0,[R4, #+12]
   \       0xA0   0xE005             B.N      ??g29_parameter_parsing_10
   \                     ??g29_parameter_parsing_9: (+1)
   \       0xA2   0xF106 0x0060      ADD      R0,R6,#+96
   \       0xA6   0x7801             LDRB     R1,[R0, #+0]
   \       0xA8   0x7840             LDRB     R0,[R0, #+1]
   \       0xAA   0x4341             MULS     R1,R0,R1
   \       0xAC   0x60E1             STR      R1,[R4, #+12]
   1034                if (repetition_cnt < 1) {
   \                     ??g29_parameter_parsing_10: (+1)
   \       0xAE   0x68E0             LDR      R0,[R4, #+12]
   \       0xB0   0x2800             CMP      R0,#+0
   \       0xB2   0xDC05             BGT.N    ??g29_parameter_parsing_8
   1035                  SERIAL_PROTOCOLLNPGM("?(R)epetition count invalid (1+).\n");
   \       0xB4   0x.... 0x....      ADR.W    R0,?_39
   \       0xB8   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1036                  return UBL_ERR;
   \       0xBC   0x2001             MOVS     R0,#+1
   \       0xBE   0xBDF2             POP      {R1,R4-R7,PC}
   1037                }
   1038              }
   1039          
   1040              g29_verbose_level = code_seen('V') ? code_value_int() : 0;
   \                     ??g29_parameter_parsing_8: (+1)
   \       0xC0   0x2056             MOVS     R0,#+86
   \       0xC2   0x.... 0x....      BL       _Z9code_seenc
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD003             BEQ.N    ??g29_parameter_parsing_11
   \       0xCA   0x.... 0x....      BL       _Z14code_value_intv
   \       0xCE   0x6060             STR      R0,[R4, #+4]
   \       0xD0   0xE001             B.N      ??g29_parameter_parsing_12
   \                     ??g29_parameter_parsing_11: (+1)
   \       0xD2   0x4628             MOV      R0,R5
   \       0xD4   0x6060             STR      R0,[R4, #+4]
   1041              if (!WITHIN(g29_verbose_level, 0, 4)) {
   \                     ??g29_parameter_parsing_12: (+1)
   \       0xD6   0x6860             LDR      R0,[R4, #+4]
   \       0xD8   0x2805             CMP      R0,#+5
   \       0xDA   0xD304             BCC.N    ??g29_parameter_parsing_13
   1042                SERIAL_PROTOCOLLNPGM("?(V)erbose level is implausible (0-4)\n");
   \       0xDC   0x.... 0x....      ADR.W    R0,?_40
   \       0xE0   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1043                err_flag = true;
   \       0xE4   0x2501             MOVS     R5,#+1
   1044              }
   1045              if (code_seen('P')) {
   \                     ??g29_parameter_parsing_13: (+1)
   \       0xE6   0x2050             MOVS     R0,#+80
   \       0xE8   0x.... 0x....      BL       _Z9code_seenc
   \       0xEC   0x2800             CMP      R0,#+0
   \       0xEE   0xD009             BEQ.N    ??g29_parameter_parsing_14
   1046                phase_value = code_value_int();
   \       0xF0   0x.... 0x....      BL       _Z14code_value_intv
   \       0xF4   0x60A0             STR      R0,[R4, #+8]
   1047                if (!WITHIN(phase_value, 0, 6)) {
   \       0xF6   0x2807             CMP      R0,#+7
   \       0xF8   0xD304             BCC.N    ??g29_parameter_parsing_14
   1048                  SERIAL_PROTOCOLLNPGM("?(P)hase value invalid (0-6).\n");
   \       0xFA   0x.... 0x....      ADR.W    R0,?_41
   \       0xFE   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1049                  err_flag = true;
   \      0x102   0x2501             MOVS     R5,#+1
   1050                }
   1051              }
   1052          
   1053              if (code_seen('J')) {
   \                     ??g29_parameter_parsing_14: (+1)
   \      0x104   0x204A             MOVS     R0,#+74
   \      0x106   0x.... 0x....      BL       _Z9code_seenc
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD012             BEQ.N    ??g29_parameter_parsing_15
   1054          		grid_size = code_has_value() ? code_value_int() : 3;
   \      0x10E   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD003             BEQ.N    ??g29_parameter_parsing_16
   \      0x116   0x.... 0x....      BL       _Z14code_value_intv
   \      0x11A   0x61A0             STR      R0,[R4, #+24]
   \      0x11C   0xE001             B.N      ??g29_parameter_parsing_17
   \                     ??g29_parameter_parsing_16: (+1)
   \      0x11E   0x2003             MOVS     R0,#+3
   \      0x120   0x61A0             STR      R0,[R4, #+24]
   1055          		if (!WITHIN(grid_size, 2, 9)) {
   \                     ??g29_parameter_parsing_17: (+1)
   \      0x122   0x69A0             LDR      R0,[R4, #+24]
   \      0x124   0x1E80             SUBS     R0,R0,#+2
   \      0x126   0x2808             CMP      R0,#+8
   \      0x128   0xD304             BCC.N    ??g29_parameter_parsing_15
   1056          		  SERIAL_PROTOCOLLNPGM("?Invalid grid size (J) specified (2-9).\n");
   \      0x12A   0x.... 0x....      ADR.W    R0,?_42
   \      0x12E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1057          		  err_flag = true;
   \      0x132   0x2501             MOVS     R5,#+1
   1058          		}
   1059              }
   1060          
   1061              if (x_flag != y_flag) {
   \                     ??g29_parameter_parsing_15: (+1)
   \      0x134   0x78A0             LDRB     R0,[R4, #+2]
   \      0x136   0x78E1             LDRB     R1,[R4, #+3]
   \      0x138   0x4288             CMP      R0,R1
   \      0x13A   0xD004             BEQ.N    ??g29_parameter_parsing_18
   1062                SERIAL_PROTOCOLLNPGM("Both X & Y locations must be specified.\n");
   \      0x13C   0x.... 0x....      ADR.W    R0,?_43
   \      0x140   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1063                err_flag = true;
   \      0x144   0x2501             MOVS     R5,#+1
   1064              }
   1065          
   1066              if (!WITHIN(RAW_X_POSITION(x_pos), X_MIN_POS, X_MAX_POS)) {
   \                     ??g29_parameter_parsing_18: (+1)
   \      0x146   0x.... 0x....      LDR.W    R7,??DataTable121_6
   \      0x14A   0x69E0             LDR      R0,[R4, #+28]
   \      0x14C   0x6839             LDR      R1,[R7, #+0]
   \      0x14E   0x.... 0x....      BL       __aeabi_fsub
   \      0x152   0x4602             MOV      R2,R0
   \      0x154   0x68B1             LDR      R1,[R6, #+8]
   \      0x156   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x15A   0xD804             BHI.N    ??g29_parameter_parsing_19
   \      0x15C   0x6970             LDR      R0,[R6, #+20]
   \      0x15E   0x4611             MOV      R1,R2
   \      0x160   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x164   0xD904             BLS.N    ??g29_parameter_parsing_20
   1067                SERIAL_PROTOCOLLNPGM("Invalid X location specified.\n");
   \                     ??g29_parameter_parsing_19: (+1)
   \      0x166   0x.... 0x....      ADR.W    R0,?_44
   \      0x16A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1068                err_flag = true;
   \      0x16E   0x2501             MOVS     R5,#+1
   1069              }
   1070          
   1071              if (!WITHIN(RAW_Y_POSITION(y_pos), Y_MIN_POS, Y_MAX_POS)) {
   \                     ??g29_parameter_parsing_20: (+1)
   \      0x170   0x6A20             LDR      R0,[R4, #+32]
   \      0x172   0x6879             LDR      R1,[R7, #+4]
   \      0x174   0x.... 0x....      BL       __aeabi_fsub
   \      0x178   0x4602             MOV      R2,R0
   \      0x17A   0x68F1             LDR      R1,[R6, #+12]
   \      0x17C   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x180   0xD804             BHI.N    ??g29_parameter_parsing_21
   \      0x182   0x69B0             LDR      R0,[R6, #+24]
   \      0x184   0x4611             MOV      R1,R2
   \      0x186   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x18A   0xD904             BLS.N    ??g29_parameter_parsing_22
   1072                SERIAL_PROTOCOLLNPGM("Invalid Y location specified.\n");
   \                     ??g29_parameter_parsing_21: (+1)
   \      0x18C   0x.... 0x....      ADR.W    R0,?_45
   \      0x190   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1073                err_flag = true;
   \      0x194   0x2501             MOVS     R5,#+1
   1074              }
   1075          
   1076              if (err_flag) return UBL_ERR;
   \                     ??g29_parameter_parsing_22: (+1)
   \      0x196   0x2D00             CMP      R5,#+0
   \      0x198   0xD001             BEQ.N    ??g29_parameter_parsing_23
   \      0x19A   0x2001             MOVS     R0,#+1
   \      0x19C   0xBDF2             POP      {R1,R4-R7,PC}
   1077          
   1078              // Activate or deactivate UBL
   1079              if (code_seen('A')) {
   \                     ??g29_parameter_parsing_23: (+1)
   \      0x19E   0x2041             MOVS     R0,#+65
   \      0x1A0   0x.... 0x....      BL       _Z9code_seenc
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD010             BEQ.N    ??g29_parameter_parsing_24
   1080                if (code_seen('D')) {
   \      0x1A8   0x2044             MOVS     R0,#+68
   \      0x1AA   0x.... 0x....      BL       _Z9code_seenc
   \      0x1AE   0x2800             CMP      R0,#+0
   \      0x1B0   0xD005             BEQ.N    ??g29_parameter_parsing_25
   1081                  SERIAL_PROTOCOLLNPGM("?Can't activate and deactivate at the same time.\n");
   \      0x1B2   0x.... 0x....      ADR.W    R0,?_46
   \      0x1B6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1082                  return UBL_ERR;
   \      0x1BA   0x2001             MOVS     R0,#+1
   \      0x1BC   0xBDF2             POP      {R1,R4-R7,PC}
   1083                }
   1084                ubl.state.active = 1;
   \                     ??g29_parameter_parsing_25: (+1)
   \      0x1BE   0x2001             MOVS     R0,#+1
   \      0x1C0   0x....             LDR.N    R1,??DataTable121_9
   \      0x1C2   0x7008             STRB     R0,[R1, #+0]
   1085                report_ubl_state();
   \      0x1C4   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb16report_ubl_stateEv
   \      0x1C8   0xE009             B.N      ??g29_parameter_parsing_26
   1086              }
   1087              else if (code_seen('D')) {
   \                     ??g29_parameter_parsing_24: (+1)
   \      0x1CA   0x2044             MOVS     R0,#+68
   \      0x1CC   0x.... 0x....      BL       _Z9code_seenc
   \      0x1D0   0x2800             CMP      R0,#+0
   \      0x1D2   0xD004             BEQ.N    ??g29_parameter_parsing_26
   1088                ubl.state.active = 0;
   \      0x1D4   0x2000             MOVS     R0,#+0
   \      0x1D6   0x....             LDR.N    R1,??DataTable121_9
   \      0x1D8   0x7008             STRB     R0,[R1, #+0]
   1089                report_ubl_state();
   \      0x1DA   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb16report_ubl_stateEv
   1090              }
   1091          
   1092              // Set global 'C' flag and its value
   1093              if ((c_flag = code_seen('C')))
   \                     ??g29_parameter_parsing_26: (+1)
   \      0x1DE   0x2043             MOVS     R0,#+67
   \      0x1E0   0x.... 0x....      BL       _Z9code_seenc
   \      0x1E4   0x7060             STRB     R0,[R4, #+1]
   \      0x1E6   0x2800             CMP      R0,#+0
   \      0x1E8   0xD002             BEQ.N    ??g29_parameter_parsing_27
   1094                ubl_constant = code_value_float();
   \      0x1EA   0x.... 0x....      BL       _Z16code_value_floatv
   \      0x1EE   0x62E0             STR      R0,[R4, #+44]
   1095          
   1096              #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   1097          	if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))	//mks_delta
   \                     ??g29_parameter_parsing_27: (+1)
   \      0x1F0   0xF106 0x0040      ADD      R0,R6,#+64
   \      0x1F4   0xF9B0 0x1018      LDRSH    R1,[R0, #+24]
   \      0x1F8   0x2902             CMP      R1,#+2
   \      0x1FA   0xD01E             BEQ.N    ??g29_parameter_parsing_28
   \      0x1FC   0x7800             LDRB     R0,[R0, #+0]
   \      0x1FE   0x06C0             LSLS     R0,R0,#+27
   \      0x200   0xD51B             BPL.N    ??g29_parameter_parsing_28
   1098          		{
   1099                if (code_seen('F') && code_has_value()) {
   \      0x202   0x2046             MOVS     R0,#+70
   \      0x204   0x.... 0x....      BL       _Z9code_seenc
   \      0x208   0x2800             CMP      R0,#+0
   \      0x20A   0xD016             BEQ.N    ??g29_parameter_parsing_28
   \      0x20C   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x210   0x2800             CMP      R0,#+0
   \      0x212   0xD012             BEQ.N    ??g29_parameter_parsing_28
   1100                  const float fh = code_value_float();
   \      0x214   0x.... 0x....      BL       _Z16code_value_floatv
   1101                  if (!WITHIN(fh, 0.0, 100.0)) {
   \      0x218   0x2100             MOVS     R1,#+0
   \      0x21A   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x21E   0xD804             BHI.N    ??g29_parameter_parsing_29
   \      0x220   0x.... 0x....      LDR.W    R1,??DataTable122_1  ;; 0x42c80001
   \      0x224   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x228   0xD305             BCC.N    ??g29_parameter_parsing_30
   1102                    SERIAL_PROTOCOLLNPGM("?(F)ade height for Bed Level Correction not plausible.\n");
   \                     ??g29_parameter_parsing_29: (+1)
   \      0x22A   0x.... 0x....      ADR.W    R0,?_47
   \      0x22E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1103                    return UBL_ERR;
   \      0x232   0x2001             MOVS     R0,#+1
   \      0x234   0xBDF2             POP      {R1,R4-R7,PC}
   1104                  }
   1105                  set_z_fade_height(fh);
   \                     ??g29_parameter_parsing_30: (+1)
   \      0x236   0x.... 0x....      BL       _Z17set_z_fade_heightf
   1106                }
   1107          		}
   1108              #endif
   1109          
   1110              map_type = code_seen('O') && code_has_value() ? code_value_int() : 0;
   \                     ??g29_parameter_parsing_28: (+1)
   \      0x23A   0x204F             MOVS     R0,#+79
   \      0x23C   0x.... 0x....      BL       _Z9code_seenc
   \      0x240   0x2800             CMP      R0,#+0
   \      0x242   0xD007             BEQ.N    ??g29_parameter_parsing_31
   \      0x244   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x248   0x2800             CMP      R0,#+0
   \      0x24A   0xD003             BEQ.N    ??g29_parameter_parsing_31
   \      0x24C   0x.... 0x....      BL       _Z14code_value_intv
   \      0x250   0x6160             STR      R0,[R4, #+20]
   \      0x252   0xE001             B.N      ??g29_parameter_parsing_32
   \                     ??g29_parameter_parsing_31: (+1)
   \      0x254   0x2000             MOVS     R0,#+0
   \      0x256   0x6160             STR      R0,[R4, #+20]
   1111              if (!WITHIN(map_type, 0, 1)) {
   \                     ??g29_parameter_parsing_32: (+1)
   \      0x258   0x6960             LDR      R0,[R4, #+20]
   \      0x25A   0x2802             CMP      R0,#+2
   \      0x25C   0xD211             BCS.N    ??g29_parameter_parsing_33
   1112                SERIAL_PROTOCOLLNPGM("Invalid map type.\n");
   1113                return UBL_ERR;
   1114              }
   1115          
   1116              if (code_seen('M')) {     // Check if a map type was specified
   \      0x25E   0x204D             MOVS     R0,#+77
   \      0x260   0x.... 0x....      BL       _Z9code_seenc
   \      0x264   0x2800             CMP      R0,#+0
   \      0x266   0xD012             BEQ.N    ??g29_parameter_parsing_34
   1117                map_type = code_has_value() ? code_value_int() : 0;
   \      0x268   0x.... 0x....      BL       _Z14code_has_valuev
   \      0x26C   0x2800             CMP      R0,#+0
   \      0x26E   0xD003             BEQ.N    ??g29_parameter_parsing_35
   \      0x270   0x.... 0x....      BL       _Z14code_value_intv
   \      0x274   0x6160             STR      R0,[R4, #+20]
   \      0x276   0xE001             B.N      ??g29_parameter_parsing_36
   \                     ??g29_parameter_parsing_35: (+1)
   \      0x278   0x2000             MOVS     R0,#+0
   \      0x27A   0x6160             STR      R0,[R4, #+20]
   1118                if (!WITHIN(map_type, 0, 1)) {
   \                     ??g29_parameter_parsing_36: (+1)
   \      0x27C   0x6960             LDR      R0,[R4, #+20]
   \      0x27E   0x2802             CMP      R0,#+2
   \      0x280   0xD305             BCC.N    ??g29_parameter_parsing_34
   1119                  SERIAL_PROTOCOLLNPGM("Invalid map type.\n");
   \                     ??g29_parameter_parsing_33: (+1)
   \      0x282   0x.... 0x....      ADR.W    R0,?_48
   \      0x286   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1120                  return UBL_ERR;
   \      0x28A   0x2001             MOVS     R0,#+1
   \      0x28C   0xBDF2             POP      {R1,R4-R7,PC}
   1121                }
   1122              }
   1123          
   1124              return UBL_OK;
   \                     ??g29_parameter_parsing_34: (+1)
   \      0x28E   0x2000             MOVS     R0,#+0
   \      0x290   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1125            }
   1126          
   1127            /**
   1128             * This function goes away after G29 debug is complete. But for right now, it is a handy
   1129             * routine to dump binary data structures.
   1130             */
   1131            /*
   1132            void dump(char * const str, const float &f) {
   1133              char *ptr;
   1134          
   1135              SERIAL_PROTOCOL(str);
   1136              SERIAL_PROTOCOL_F(f, 8);
   1137              SERIAL_PROTOCOLPGM("  ");
   1138              ptr = (char*)&f;
   1139              for (uint8_t i = 0; i < 4; i++)
   1140                SERIAL_PROTOCOLPAIR("  ", hex_byte(*ptr++));
   1141              SERIAL_PROTOCOLPAIR("  isnan()=", isnan(f));
   1142              SERIAL_PROTOCOLPAIR("  isinf()=", isinf(f));
   1143          
   1144              if (f == -INFINITY)
   1145                SERIAL_PROTOCOLPGM("  Minus Infinity detected.");
   1146          
   1147              SERIAL_EOL;
   1148            }
   1149            //*/
                    ^
Warning[Pe009]: nested comment is not allowed
   1150          

   \                                 In section .bss, align 4
   1151            static int ubl_state_at_invocation = 0,
   \                     ubl_state_at_invocation:
   \        0x0                      DS8 4
   \        0x4                      DS8 4
   1152                       ubl_state_recursion_chk = 0;
   1153          

   \                                 In section .text, align 2, keep-with-next
   1154            void unified_bed_leveling::save_ubl_active_state_and_disable() {
   \                     _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1155              ubl_state_recursion_chk++;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable124
   \        0x6   0x6841             LDR      R1,[R0, #+4]
   \        0x8   0x1C49             ADDS     R1,R1,#+1
   \        0xA   0x6041             STR      R1,[R0, #+4]
   1156              if (ubl_state_recursion_chk != 1) {
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD00C             BEQ.N    ??save_ubl_active_state_and_disable_0
   1157                SERIAL_ECHOLNPGM("save_ubl_active_state_and_disabled() called multiple times in a row.");
   \       0x10   0x.... 0x....      ADR.W    R0,?_105
   \       0x14   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1158                LCD_MESSAGEPGM("save_UBL_active() error");
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x.... 0x....      ADR.W    R0,?_106
   \       0x1E   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1159                lcd_quick_feedback();
   \       0x22   0xE8BD 0x4001      POP      {R0,LR}
   \       0x26   0x.... 0x....      B.W      _Z18lcd_quick_feedbackv
   1160                return;
   1161              }
   1162              ubl_state_at_invocation = ubl.state.active;
   \                     ??save_ubl_active_state_and_disable_0: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R1,??DataTable124_1
   \       0x2E   0x780A             LDRB     R2,[R1, #+0]
   \       0x30   0x6002             STR      R2,[R0, #+0]
   1163              ubl.state.active = 0;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x7008             STRB     R0,[R1, #+0]
   1164            }
   \       0x36   0xBD01             POP      {R0,PC}          ;; return
   1165          

   \                                 In section .text, align 2, keep-with-next
   1166            void unified_bed_leveling::restore_ubl_active_state_and_leave() {
   \                     _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1167              if (--ubl_state_recursion_chk) {
   \        0x2   0x.... 0x....      LDR.W    R1,??DataTable124
   \        0x6   0x6848             LDR      R0,[R1, #+4]
   \        0x8   0x1E40             SUBS     R0,R0,#+1
   \        0xA   0x6048             STR      R0,[R1, #+4]
   \        0xC   0xD00C             BEQ.N    ??restore_ubl_active_state_and_leave_0
   1168                SERIAL_ECHOLNPGM("restore_ubl_active_state_and_leave() called too many times.");
   \        0xE   0x.... 0x....      ADR.W    R0,?_107
   \       0x12   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1169                LCD_MESSAGEPGM("restore_UBL_active() error");
   \       0x16   0x2100             MOVS     R1,#+0
   \       0x18   0x.... 0x....      ADR.W    R0,?_108
   \       0x1C   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1170                lcd_quick_feedback();
   \       0x20   0xE8BD 0x4001      POP      {R0,LR}
   \       0x24   0x.... 0x....      B.W      _Z18lcd_quick_feedbackv
   1171                return;
   1172              }
   1173              ubl.state.active = ubl_state_at_invocation;
   \                     ??restore_ubl_active_state_and_leave_0: (+1)
   \       0x28   0x6808             LDR      R0,[R1, #+0]
   \       0x2A   0x1E40             SUBS     R0,R0,#+1
   \       0x2C   0x4180             SBCS     R0,R0,R0
   \       0x2E   0x43C0             MVNS     R0,R0
   \       0x30   0x0FC0             LSRS     R0,R0,#+31
   \       0x32   0x.... 0x....      LDR.W    R1,??DataTable124_1
   \       0x36   0x7008             STRB     R0,[R1, #+0]
   1174            }
   \       0x38   0xBD01             POP      {R0,PC}          ;; return
   1175          
   1176            /**
   1177             * Much of the 'What?' command can be eliminated. But until we are fully debugged, it is
   1178             * good to have the extra information. Soon... we prune this to just a few items
   1179             */

   \                                 In section .text, align 4, keep-with-next
   1180            void g29_what_command() {
   \                     _Z16g29_what_commandv: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   1181              const uint16_t k = E2END - ubl.eeprom_start;
   \        0x4   0xF240 0x51FF      MOVW     R1,#+1535
   \        0x8   0x.... 0x....      LDR.W    R0,??DataTable124_2
   \        0xC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \       0x10   0x1A09             SUBS     R1,R1,R0
   \       0x12   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   1182          
   1183              say_ubl_name();
   \       0x16   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb12say_ubl_nameEv
   1184              SERIAL_PROTOCOLPGM("System Version " UBL_VERSION " ");
   \       0x1A   0x.... 0x....      ADR.W    R0,?_49
   \       0x1E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1185              if (ubl.state.active)
   \       0x22   0x.... 0x....      LDR.W    R4,??DataTable124_3
   \       0x26   0x.... 0x....      LDR.W    R5,??DataTable124_4
   \       0x2A   0x.... 0x....      LDR.W    R6,??DataTable124_6
   \       0x2E   0x.... 0x....      LDR.W    R7,??DataTable124_1
   \       0x32   0x7838             LDRB     R0,[R7, #+0]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00D             BEQ.N    ??g29_what_command_1
   1186              {  SERIAL_PROTOCOLCHAR('A');}
   \       0x38   0x7830             LDRB     R0,[R6, #+0]
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD104             BNE.N    ??g29_what_command_2
   \       0x3E   0x2141             MOVS     R1,#+65
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x46   0xE008             B.N      ??g29_what_command_3
   \                     ??g29_what_command_2: (+1)
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0x2141             MOVS     R1,#+65
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \       0x52   0xE002             B.N      ??g29_what_command_3
   1187              else
   1188              {  SERIAL_PROTOCOLPGM("Ina");}
   \                     ??g29_what_command_1: (+1)
   \       0x54   0xA0AF             ADR.N    R0,??g29_what_command_0  ;; "Ina"
   \       0x56   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1189              SERIAL_PROTOCOLLNPGM("ctive.\n");
   \                     ??g29_what_command_3: (+1)
   \       0x5A   0x.... 0x....      ADR.W    R0,?_51
   \       0x5E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1190              safe_delay(50);
   \       0x62   0x2032             MOVS     R0,#+50
   \       0x64   0x.... 0x....      BL       _Z10safe_delaym
   1191          
   1192              if (ubl.state.eeprom_storage_slot == -1)
   \       0x68   0xF997 0x0008      LDRSB    R0,[R7, #+8]
   \       0x6C   0xF110 0x0F01      CMN      R0,#+1
   \       0x70   0xD104             BNE.N    ??g29_what_command_4
   1193              { SERIAL_PROTOCOLPGM("No Mesh Loaded.");}
   \       0x72   0x.... 0x....      ADR.W    R0,?_52
   \       0x76   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \       0x7A   0xE015             B.N      ??g29_what_command_5
   1194              else {
   1195                //SERIAL_PROTOCOLPAIR("Mesh ", ubl.state.eeprom_storage_slot);
   1196          	  SERIAL_PROTOCOLPGM("Mesh ");
   \                     ??g29_what_command_4: (+1)
   \       0x7C   0x.... 0x....      ADR.W    R0,?_53
   \       0x80   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1197          	  SERIAL_PROTOCOL(ubl.state.eeprom_storage_slot);
   \       0x84   0xF997 0x1008      LDRSB    R1,[R7, #+8]
   \       0x88   0x7830             LDRB     R0,[R6, #+0]
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD104             BNE.N    ??g29_what_command_6
   \       0x8E   0x220A             MOVS     R2,#+10
   \       0x90   0x4628             MOV      R0,R5
   \       0x92   0x.... 0x....      BL       _ZN12MarlinSerial5printEii
   \       0x96   0xE003             B.N      ??g29_what_command_7
   \                     ??g29_what_command_6: (+1)
   \       0x98   0x220A             MOVS     R2,#+10
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0x.... 0x....      BL       _ZN12MarlinSerial5printEii
   1198          	  
   1199                SERIAL_PROTOCOLPGM(" Loaded.");
   \                     ??g29_what_command_7: (+1)
   \       0xA0   0x.... 0x....      ADR.W    R0,?_54
   \       0xA4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1200              }
   1201              SERIAL_EOL;
   \                     ??g29_what_command_5: (+1)
   \       0xA8   0x7830             LDRB     R0,[R6, #+0]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD104             BNE.N    ??g29_what_command_8
   \       0xAE   0x210A             MOVS     R1,#+10
   \       0xB0   0x4628             MOV      R0,R5
   \       0xB2   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0xB6   0xE004             B.N      ??g29_what_command_9
   \                     ??g29_what_command_8: (+1)
   \       0xB8   0x2200             MOVS     R2,#+0
   \       0xBA   0x210A             MOVS     R1,#+10
   \       0xBC   0x4620             MOV      R0,R4
   \       0xBE   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1202              safe_delay(50);
   \                     ??g29_what_command_9: (+1)
   \       0xC2   0x2032             MOVS     R0,#+50
   \       0xC4   0x.... 0x....      BL       _Z10safe_delaym
   1203          
   1204              SERIAL_PROTOCOLLNPAIR("UBL object count: ", (int)ubl_cnt);
   \       0xC8   0x.... 0x....      LDR.W    R0,??DataTable124_7
   \       0xCC   0x7801             LDRB     R1,[R0, #+0]
   \       0xCE   0x.... 0x....      ADR.W    R0,?_55
   \       0xD2   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \       0xD6   0x7830             LDRB     R0,[R6, #+0]
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD104             BNE.N    ??g29_what_command_10
   \       0xDC   0x210A             MOVS     R1,#+10
   \       0xDE   0x4628             MOV      R0,R5
   \       0xE0   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0xE4   0xE004             B.N      ??g29_what_command_11
   \                     ??g29_what_command_10: (+1)
   \       0xE6   0x2200             MOVS     R2,#+0
   \       0xE8   0x210A             MOVS     R1,#+10
   \       0xEA   0x4620             MOV      R0,R4
   \       0xEC   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1205          
   1206              #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   1207          	if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))	//mks_delta
   \                     ??g29_what_command_11: (+1)
   \       0xF0   0x.... 0x....      LDR.W    R10,??DataTable124_8
   \       0xF4   0xF10A 0x0040      ADD      R0,R10,#+64
   \       0xF8   0xF9B0 0x1018      LDRSH    R1,[R0, #+24]
   \       0xFC   0x2902             CMP      R1,#+2
   \       0xFE   0xD016             BEQ.N    ??g29_what_command_12
   \      0x100   0x7800             LDRB     R0,[R0, #+0]
   \      0x102   0x06C0             LSLS     R0,R0,#+27
   \      0x104   0xD513             BPL.N    ??g29_what_command_12
   1208                SERIAL_PROTOCOLLNPAIR("planner.z_fade_height : ", planner.z_fade_height);
   \      0x106   0x.... 0x....      LDR.W    R0,??DataTable124_9
   \      0x10A   0x6801             LDR      R1,[R0, #+0]
   \      0x10C   0x.... 0x....      ADR.W    R0,?_56
   \      0x110   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \      0x114   0x7830             LDRB     R0,[R6, #+0]
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD104             BNE.N    ??g29_what_command_13
   \      0x11A   0x210A             MOVS     R1,#+10
   \      0x11C   0x4628             MOV      R0,R5
   \      0x11E   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x122   0xE004             B.N      ??g29_what_command_12
   \                     ??g29_what_command_13: (+1)
   \      0x124   0x2200             MOVS     R2,#+0
   \      0x126   0x210A             MOVS     R1,#+10
   \      0x128   0x4620             MOV      R0,R4
   \      0x12A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1209              #endif
   1210              SERIAL_PROTOCOLPGM("zprobe_zoffset: ");
   \                     ??g29_what_command_12: (+1)
   \      0x12E   0x.... 0x....      ADR.W    R0,?_57
   \      0x132   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1211              SERIAL_PROTOCOL_F(zprobe_zoffset, 7);
   \      0x136   0x.... 0x....      LDR.W    R0,??DataTable124_10
   \      0x13A   0x6800             LDR      R0,[R0, #+0]
   \      0x13C   0x.... 0x....      BL       __aeabi_f2d
   \      0x140   0x4602             MOV      R2,R0
   \      0x142   0x460B             MOV      R3,R1
   \      0x144   0x7830             LDRB     R0,[R6, #+0]
   \      0x146   0x2800             CMP      R0,#+0
   \      0x148   0xD105             BNE.N    ??g29_what_command_14
   \      0x14A   0x2007             MOVS     R0,#+7
   \      0x14C   0x9000             STR      R0,[SP, #+0]
   \      0x14E   0x4628             MOV      R0,R5
   \      0x150   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x154   0xE004             B.N      ??g29_what_command_15
   \                     ??g29_what_command_14: (+1)
   \      0x156   0x2007             MOVS     R0,#+7
   \      0x158   0x9000             STR      R0,[SP, #+0]
   \      0x15A   0x4620             MOV      R0,R4
   \      0x15C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1212              SERIAL_EOL;
   \                     ??g29_what_command_15: (+1)
   \      0x160   0x7830             LDRB     R0,[R6, #+0]
   \      0x162   0x2800             CMP      R0,#+0
   \      0x164   0xD104             BNE.N    ??g29_what_command_16
   \      0x166   0x210A             MOVS     R1,#+10
   \      0x168   0x4628             MOV      R0,R5
   \      0x16A   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x16E   0xE004             B.N      ??g29_what_command_17
   \                     ??g29_what_command_16: (+1)
   \      0x170   0x2200             MOVS     R2,#+0
   \      0x172   0x210A             MOVS     R1,#+10
   \      0x174   0x4620             MOV      R0,R4
   \      0x176   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1213          
   1214              SERIAL_PROTOCOLPGM("z_offset: ");
   \                     ??g29_what_command_17: (+1)
   \      0x17A   0x.... 0x....      ADR.W    R0,?_58
   \      0x17E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1215              SERIAL_PROTOCOL_F(ubl.state.z_offset, 7);
   \      0x182   0x6878             LDR      R0,[R7, #+4]
   \      0x184   0x.... 0x....      BL       __aeabi_f2d
   \      0x188   0x4602             MOV      R2,R0
   \      0x18A   0x460B             MOV      R3,R1
   \      0x18C   0x7830             LDRB     R0,[R6, #+0]
   \      0x18E   0x2800             CMP      R0,#+0
   \      0x190   0xD105             BNE.N    ??g29_what_command_18
   \      0x192   0x2007             MOVS     R0,#+7
   \      0x194   0x9000             STR      R0,[SP, #+0]
   \      0x196   0x4628             MOV      R0,R5
   \      0x198   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x19C   0xE004             B.N      ??g29_what_command_19
   \                     ??g29_what_command_18: (+1)
   \      0x19E   0x2007             MOVS     R0,#+7
   \      0x1A0   0x9000             STR      R0,[SP, #+0]
   \      0x1A2   0x4620             MOV      R0,R4
   \      0x1A4   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1216              SERIAL_EOL;
   \                     ??g29_what_command_19: (+1)
   \      0x1A8   0x7830             LDRB     R0,[R6, #+0]
   \      0x1AA   0x2800             CMP      R0,#+0
   \      0x1AC   0xD104             BNE.N    ??g29_what_command_20
   \      0x1AE   0x210A             MOVS     R1,#+10
   \      0x1B0   0x4628             MOV      R0,R5
   \      0x1B2   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x1B6   0xE004             B.N      ??g29_what_command_21
   \                     ??g29_what_command_20: (+1)
   \      0x1B8   0x2200             MOVS     R2,#+0
   \      0x1BA   0x210A             MOVS     R1,#+10
   \      0x1BC   0x4620             MOV      R0,R4
   \      0x1BE   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1217              safe_delay(25);
   \                     ??g29_what_command_21: (+1)
   \      0x1C2   0x2019             MOVS     R0,#+25
   \      0x1C4   0x.... 0x....      BL       _Z10safe_delaym
   1218          
   1219              SERIAL_PROTOCOLLNPAIR("ubl.eeprom_start=", hex_address(ubl.eeprom_start));
   \      0x1C8   0x.... 0x....      LDR.W    R11,??DataTable124_2
   \      0x1CC   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \      0x1D0   0x.... 0x....      BL       _Z11hex_addresst
   \      0x1D4   0x4601             MOV      R1,R0
   \      0x1D6   0x.... 0x....      ADR.W    R0,?_59
   \      0x1DA   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
   \      0x1DE   0x7830             LDRB     R0,[R6, #+0]
   \      0x1E0   0x2800             CMP      R0,#+0
   \      0x1E2   0xD104             BNE.N    ??g29_what_command_22
   \      0x1E4   0x210A             MOVS     R1,#+10
   \      0x1E6   0x4628             MOV      R0,R5
   \      0x1E8   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x1EC   0xE004             B.N      ??g29_what_command_23
   \                     ??g29_what_command_22: (+1)
   \      0x1EE   0x2200             MOVS     R2,#+0
   \      0x1F0   0x210A             MOVS     R1,#+10
   \      0x1F2   0x4620             MOV      R0,R4
   \      0x1F4   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1220          
   1221              SERIAL_PROTOCOLPGM("X-Axis Mesh Points at: ");
   \                     ??g29_what_command_23: (+1)
   \      0x1F8   0x.... 0x....      ADR.W    R0,?_60
   \      0x1FC   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1222              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \      0x200   0x2700             MOVS     R7,#+0
   \      0x202   0xF10A 0x0960      ADD      R9,R10,#+96
   \                     ??g29_what_command_24: (+1)
   \      0x206   0xF896 0x8000      LDRB     R8,[R6, #+0]
   \      0x20A   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x20E   0x4287             CMP      R7,R0
   \      0x210   0xF280 0x829D      BGE.W    ??g29_what_command_25
   1223                SERIAL_PROTOCOL_F(LOGICAL_X_POSITION(ubl.mesh_index_to_xpos[i]), 1);
   \      0x214   0x.... 0x....      LDR.W    R0,??DataTable124_11
   \      0x218   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \      0x21C   0x.... 0x....      LDR.W    R1,??DataTable124_12
   \      0x220   0x6809             LDR      R1,[R1, #+0]
   \      0x222   0x.... 0x....      BL       __aeabi_fadd
   \      0x226   0x.... 0x....      BL       __aeabi_f2d
   \      0x22A   0x4602             MOV      R2,R0
   \      0x22C   0x460B             MOV      R3,R1
   \      0x22E   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x232   0xD005             BEQ.N    ??g29_what_command_26
   \      0x234   0x2001             MOVS     R0,#+1
   \      0x236   0x9000             STR      R0,[SP, #+0]
   \      0x238   0x4620             MOV      R0,R4
   \      0x23A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x23E   0xE004             B.N      ??g29_what_command_27
   \                     ??g29_what_command_26: (+1)
   \      0x240   0x2001             MOVS     R0,#+1
   \      0x242   0x9000             STR      R0,[SP, #+0]
   \      0x244   0x4628             MOV      R0,R5
   \      0x246   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1224                SERIAL_PROTOCOLPGM("  ");
   \                     ??g29_what_command_27: (+1)
   \      0x24A   0xA033             ADR.N    R0,??g29_what_command_0+0x4  ;; 0x20, 0x20, 0x00, 0x00
   \      0x24C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1225                safe_delay(50);
   \      0x250   0x2032             MOVS     R0,#+50
   \      0x252   0x.... 0x....      BL       _Z10safe_delaym
   1226              }
   \      0x256   0x1C7F             ADDS     R7,R7,#+1
   \      0x258   0xB2FF             UXTB     R7,R7
   \      0x25A   0xE7D4             B.N      ??g29_what_command_24
   1227              SERIAL_EOL;
   \                     ??g29_what_command_28: (+1)
   \      0x25C   0x2200             MOVS     R2,#+0
   \      0x25E   0x210A             MOVS     R1,#+10
   \      0x260   0x4620             MOV      R0,R4
   \      0x262   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1228          
   1229              SERIAL_PROTOCOLPGM("Y-Axis Mesh Points at: ");
   \                     ??g29_what_command_29: (+1)
   \      0x266   0x.... 0x....      ADR.W    R0,?_62
   \      0x26A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1230              for (uint8_t i = 0; i < GRID_MAX_POINTS_Y; i++) {
   \      0x26E   0x2700             MOVS     R7,#+0
   \                     ??g29_what_command_30: (+1)
   \      0x270   0xF896 0x8000      LDRB     R8,[R6, #+0]
   \      0x274   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \      0x278   0x4287             CMP      R7,R0
   \      0x27A   0xF280 0x8271      BGE.W    ??g29_what_command_31
   1231                SERIAL_PROTOCOL_F(LOGICAL_Y_POSITION(ubl.mesh_index_to_ypos[i]), 1);
   \      0x27E   0x.... 0x....      LDR.W    R0,??DataTable124_13
   \      0x282   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \      0x286   0x.... 0x....      LDR.W    R1,??DataTable124_12
   \      0x28A   0x6849             LDR      R1,[R1, #+4]
   \      0x28C   0x.... 0x....      BL       __aeabi_fadd
   \      0x290   0x.... 0x....      BL       __aeabi_f2d
   \      0x294   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x298   0xD007             BEQ.N    ??g29_what_command_32
   \      0x29A   0x2201             MOVS     R2,#+1
   \      0x29C   0x9200             STR      R2,[SP, #+0]
   \      0x29E   0x4602             MOV      R2,R0
   \      0x2A0   0x460B             MOV      R3,R1
   \      0x2A2   0x4620             MOV      R0,R4
   \      0x2A4   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x2A8   0xE006             B.N      ??g29_what_command_33
   \                     ??g29_what_command_32: (+1)
   \      0x2AA   0x2201             MOVS     R2,#+1
   \      0x2AC   0x9200             STR      R2,[SP, #+0]
   \      0x2AE   0x4602             MOV      R2,R0
   \      0x2B0   0x460B             MOV      R3,R1
   \      0x2B2   0x4628             MOV      R0,R5
   \      0x2B4   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1232                SERIAL_PROTOCOLPGM("  ");
   \                     ??g29_what_command_33: (+1)
   \      0x2B8   0xA017             ADR.N    R0,??g29_what_command_0+0x4  ;; 0x20, 0x20, 0x00, 0x00
   \      0x2BA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1233                safe_delay(50);
   \      0x2BE   0x2032             MOVS     R0,#+50
   \      0x2C0   0x.... 0x....      BL       _Z10safe_delaym
   1234              }
   \      0x2C4   0x1C7F             ADDS     R7,R7,#+1
   \      0x2C6   0xB2FF             UXTB     R7,R7
   \      0x2C8   0xE7D2             B.N      ??g29_what_command_30
   1235              SERIAL_EOL;
   \                     ??g29_what_command_34: (+1)
   \      0x2CA   0x2200             MOVS     R2,#+0
   \      0x2CC   0x210A             MOVS     R1,#+10
   \      0x2CE   0x4620             MOV      R0,R4
   \      0x2D0   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1236          
   1237              #if HAS_KILL
   1238                //SERIAL_PROTOCOLPAIR("Kill pin on :", KILL_PIN);
   1239          	SERIAL_PROTOCOLPGM("Kill pin on :");
   1240          	SERIAL_PROTOCOL(KILL_PIN);
   1241                
   1242                SERIAL_PROTOCOLLNPAIR("  state:", READ(KILL_PIN));
   1243              #endif
   1244              SERIAL_EOL;
   \                     ??g29_what_command_35: (+1)
   \      0x2D4   0x7830             LDRB     R0,[R6, #+0]
   \      0x2D6   0x2800             CMP      R0,#+0
   \      0x2D8   0xD104             BNE.N    ??g29_what_command_36
   \      0x2DA   0x210A             MOVS     R1,#+10
   \      0x2DC   0x4628             MOV      R0,R5
   \      0x2DE   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x2E2   0xE004             B.N      ??g29_what_command_37
   \                     ??g29_what_command_36: (+1)
   \      0x2E4   0x2200             MOVS     R2,#+0
   \      0x2E6   0x210A             MOVS     R1,#+10
   \      0x2E8   0x4620             MOV      R0,R4
   \      0x2EA   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1245              safe_delay(50);
   \                     ??g29_what_command_37: (+1)
   \      0x2EE   0x2032             MOVS     R0,#+50
   \      0x2F0   0x.... 0x....      BL       _Z10safe_delaym
   1246          
   1247              SERIAL_PROTOCOLLNPAIR("ubl_state_at_invocation :", ubl_state_at_invocation);
   \      0x2F4   0x.... 0x....      LDR.W    R7,??DataTable124
   \      0x2F8   0x6839             LDR      R1,[R7, #+0]
   \      0x2FA   0x.... 0x....      ADR.W    R0,?_63
   \      0x2FE   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \      0x302   0x7830             LDRB     R0,[R6, #+0]
   \      0x304   0x2800             CMP      R0,#+0
   \      0x306   0xD109             BNE.N    ??g29_what_command_38
   \      0x308   0x210A             MOVS     R1,#+10
   \      0x30A   0x4628             MOV      R0,R5
   \      0x30C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x310   0xE009             B.N      ??g29_what_command_39
   \      0x312   0xBF00             Nop      
   \                     ??g29_what_command_0:
   \      0x314   0x49 0x6E          DC8      "Ina"
   \              0x61 0x00    
   \      0x318   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00
   \              0x00 0x00    
   \                     ??g29_what_command_38: (+1)
   \      0x31C   0x2200             MOVS     R2,#+0
   \      0x31E   0x210A             MOVS     R1,#+10
   \      0x320   0x4620             MOV      R0,R4
   \      0x322   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1248              SERIAL_EOL;
   \                     ??g29_what_command_39: (+1)
   \      0x326   0x7830             LDRB     R0,[R6, #+0]
   \      0x328   0x2800             CMP      R0,#+0
   \      0x32A   0xD104             BNE.N    ??g29_what_command_40
   \      0x32C   0x210A             MOVS     R1,#+10
   \      0x32E   0x4628             MOV      R0,R5
   \      0x330   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x334   0xE004             B.N      ??g29_what_command_41
   \                     ??g29_what_command_40: (+1)
   \      0x336   0x2200             MOVS     R2,#+0
   \      0x338   0x210A             MOVS     R1,#+10
   \      0x33A   0x4620             MOV      R0,R4
   \      0x33C   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1249              SERIAL_PROTOCOLLNPAIR("ubl_state_recursion_chk :", ubl_state_recursion_chk);
   \                     ??g29_what_command_41: (+1)
   \      0x340   0x6879             LDR      R1,[R7, #+4]
   \      0x342   0x.... 0x....      ADR.W    R0,?_64
   \      0x346   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \      0x34A   0x7830             LDRB     R0,[R6, #+0]
   \      0x34C   0x2800             CMP      R0,#+0
   \      0x34E   0xD104             BNE.N    ??g29_what_command_42
   \      0x350   0x210A             MOVS     R1,#+10
   \      0x352   0x4628             MOV      R0,R5
   \      0x354   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x358   0xE004             B.N      ??g29_what_command_43
   \                     ??g29_what_command_42: (+1)
   \      0x35A   0x2200             MOVS     R2,#+0
   \      0x35C   0x210A             MOVS     R1,#+10
   \      0x35E   0x4620             MOV      R0,R4
   \      0x360   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1250              SERIAL_EOL;
   \                     ??g29_what_command_43: (+1)
   \      0x364   0x7830             LDRB     R0,[R6, #+0]
   \      0x366   0x2800             CMP      R0,#+0
   \      0x368   0xD104             BNE.N    ??g29_what_command_44
   \      0x36A   0x210A             MOVS     R1,#+10
   \      0x36C   0x4628             MOV      R0,R5
   \      0x36E   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x372   0xE004             B.N      ??g29_what_command_45
   \                     ??g29_what_command_44: (+1)
   \      0x374   0x2200             MOVS     R2,#+0
   \      0x376   0x210A             MOVS     R1,#+10
   \      0x378   0x4620             MOV      R0,R4
   \      0x37A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1251              safe_delay(50);
   \                     ??g29_what_command_45: (+1)
   \      0x37E   0x2032             MOVS     R0,#+50
   \      0x380   0x.... 0x....      BL       _Z10safe_delaym
   1252              SERIAL_PROTOCOLLNPAIR("Free EEPROM space starts at: ", hex_address(ubl.eeprom_start));
   \      0x384   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \      0x388   0x.... 0x....      BL       _Z11hex_addresst
   \      0x38C   0x4601             MOV      R1,R0
   \      0x38E   0x.... 0x....      ADR.W    R0,?_65
   \      0x392   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
   \      0x396   0x7830             LDRB     R0,[R6, #+0]
   \      0x398   0x2800             CMP      R0,#+0
   \      0x39A   0xD104             BNE.N    ??g29_what_command_46
   \      0x39C   0x210A             MOVS     R1,#+10
   \      0x39E   0x4628             MOV      R0,R5
   \      0x3A0   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x3A4   0xE004             B.N      ??g29_what_command_47
   \                     ??g29_what_command_46: (+1)
   \      0x3A6   0x2200             MOVS     R2,#+0
   \      0x3A8   0x210A             MOVS     R1,#+10
   \      0x3AA   0x4620             MOV      R0,R4
   \      0x3AC   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1253          
   1254              SERIAL_PROTOCOLLNPAIR("end of EEPROM              : ", hex_address(E2END));
   \                     ??g29_what_command_47: (+1)
   \      0x3B0   0xF240 0x50FF      MOVW     R0,#+1535
   \      0x3B4   0x.... 0x....      BL       _Z11hex_addresst
   \      0x3B8   0x4601             MOV      R1,R0
   \      0x3BA   0x.... 0x....      ADR.W    R0,?_66
   \      0x3BE   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
   \      0x3C2   0x7830             LDRB     R0,[R6, #+0]
   \      0x3C4   0x2800             CMP      R0,#+0
   \      0x3C6   0xD104             BNE.N    ??g29_what_command_48
   \      0x3C8   0x210A             MOVS     R1,#+10
   \      0x3CA   0x4628             MOV      R0,R5
   \      0x3CC   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x3D0   0xE004             B.N      ??g29_what_command_49
   \                     ??g29_what_command_48: (+1)
   \      0x3D2   0x2200             MOVS     R2,#+0
   \      0x3D4   0x210A             MOVS     R1,#+10
   \      0x3D6   0x4620             MOV      R0,R4
   \      0x3D8   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1255              safe_delay(50);
   \                     ??g29_what_command_49: (+1)
   \      0x3DC   0x2032             MOVS     R0,#+50
   \      0x3DE   0x.... 0x....      BL       _Z10safe_delaym
   1256          
   1257              SERIAL_PROTOCOLLNPAIR("sizeof(ubl) :  ", (int)sizeof(ubl));
   \      0x3E2   0x2101             MOVS     R1,#+1
   \      0x3E4   0x.... 0x....      ADR.W    R0,?_67
   \      0x3E8   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \      0x3EC   0x7830             LDRB     R0,[R6, #+0]
   \      0x3EE   0x2800             CMP      R0,#+0
   \      0x3F0   0xD104             BNE.N    ??g29_what_command_50
   \      0x3F2   0x210A             MOVS     R1,#+10
   \      0x3F4   0x4628             MOV      R0,R5
   \      0x3F6   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x3FA   0xE004             B.N      ??g29_what_command_51
   \                     ??g29_what_command_50: (+1)
   \      0x3FC   0x2200             MOVS     R2,#+0
   \      0x3FE   0x210A             MOVS     R1,#+10
   \      0x400   0x4620             MOV      R0,R4
   \      0x402   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1258              SERIAL_EOL;
   \                     ??g29_what_command_51: (+1)
   \      0x406   0x7830             LDRB     R0,[R6, #+0]
   \      0x408   0x2800             CMP      R0,#+0
   \      0x40A   0xD104             BNE.N    ??g29_what_command_52
   \      0x40C   0x210A             MOVS     R1,#+10
   \      0x40E   0x4628             MOV      R0,R5
   \      0x410   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x414   0xE004             B.N      ??g29_what_command_53
   \                     ??g29_what_command_52: (+1)
   \      0x416   0x2200             MOVS     R2,#+0
   \      0x418   0x210A             MOVS     R1,#+10
   \      0x41A   0x4620             MOV      R0,R4
   \      0x41C   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1259              SERIAL_PROTOCOLLNPAIR("z_value[][] size: ", (int)sizeof(ubl.z_values));
   \                     ??g29_what_command_53: (+1)
   \      0x420   0xF44F 0x6180      MOV      R1,#+1024
   \      0x424   0x.... 0x....      ADR.W    R0,?_68
   \      0x428   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \      0x42C   0x7830             LDRB     R0,[R6, #+0]
   \      0x42E   0x2800             CMP      R0,#+0
   \      0x430   0xD104             BNE.N    ??g29_what_command_54
   \      0x432   0x210A             MOVS     R1,#+10
   \      0x434   0x4628             MOV      R0,R5
   \      0x436   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x43A   0xE004             B.N      ??g29_what_command_55
   \                     ??g29_what_command_54: (+1)
   \      0x43C   0x2200             MOVS     R2,#+0
   \      0x43E   0x210A             MOVS     R1,#+10
   \      0x440   0x4620             MOV      R0,R4
   \      0x442   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1260              SERIAL_EOL;
   \                     ??g29_what_command_55: (+1)
   \      0x446   0x7830             LDRB     R0,[R6, #+0]
   \      0x448   0x2800             CMP      R0,#+0
   \      0x44A   0xD104             BNE.N    ??g29_what_command_56
   \      0x44C   0x210A             MOVS     R1,#+10
   \      0x44E   0x4628             MOV      R0,R5
   \      0x450   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x454   0xE004             B.N      ??g29_what_command_57
   \                     ??g29_what_command_56: (+1)
   \      0x456   0x2200             MOVS     R2,#+0
   \      0x458   0x210A             MOVS     R1,#+10
   \      0x45A   0x4620             MOV      R0,R4
   \      0x45C   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1261              safe_delay(50);
   \                     ??g29_what_command_57: (+1)
   \      0x460   0x2032             MOVS     R0,#+50
   \      0x462   0x.... 0x....      BL       _Z10safe_delaym
   1262          
   1263              SERIAL_PROTOCOLLNPAIR("EEPROM free for UBL: ", hex_address(k));
   \      0x466   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \      0x46A   0x.... 0x....      BL       _Z11hex_addresst
   \      0x46E   0x4601             MOV      R1,R0
   \      0x470   0x.... 0x....      ADR.W    R0,?_69
   \      0x474   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
   \      0x478   0x7830             LDRB     R0,[R6, #+0]
   \      0x47A   0x2800             CMP      R0,#+0
   \      0x47C   0xD104             BNE.N    ??g29_what_command_58
   \      0x47E   0x210A             MOVS     R1,#+10
   \      0x480   0x4628             MOV      R0,R5
   \      0x482   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x486   0xE004             B.N      ??g29_what_command_59
   \                     ??g29_what_command_58: (+1)
   \      0x488   0x2200             MOVS     R2,#+0
   \      0x48A   0x210A             MOVS     R1,#+10
   \      0x48C   0x4620             MOV      R0,R4
   \      0x48E   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1264              safe_delay(50);
   \                     ??g29_what_command_59: (+1)
   \      0x492   0x2032             MOVS     R0,#+50
   \      0x494   0x.... 0x....      BL       _Z10safe_delaym
   1265          
   1266          //    SERIAL_PROTOCOLPAIR("EEPROM can hold ", k / sizeof(ubl.z_values));
   1267          	SERIAL_PROTOCOLPGM("EEPROM can hold ");
   \      0x498   0x.... 0x....      ADR.W    R0,?_70
   \      0x49C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1268          	SERIAL_PROTOCOL(k / sizeof(ubl.z_values));
   \      0x4A0   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \      0x4A4   0x0A89             LSRS     R1,R1,#+10
   \      0x4A6   0x7830             LDRB     R0,[R6, #+0]
   \      0x4A8   0x2800             CMP      R0,#+0
   \      0x4AA   0xD104             BNE.N    ??g29_what_command_60
   \      0x4AC   0x220A             MOVS     R2,#+10
   \      0x4AE   0x4628             MOV      R0,R5
   \      0x4B0   0x.... 0x....      BL       _ZN12MarlinSerial5printEji
   \      0x4B4   0xE003             B.N      ??g29_what_command_61
   \                     ??g29_what_command_60: (+1)
   \      0x4B6   0x220A             MOVS     R2,#+10
   \      0x4B8   0x4620             MOV      R0,R4
   \      0x4BA   0x.... 0x....      BL       _ZN12MarlinSerial5printEji
   1269          	
   1270              SERIAL_PROTOCOLLNPGM(" meshes.\n");
   \                     ??g29_what_command_61: (+1)
   \      0x4BE   0x.... 0x....      ADR.W    R0,?_71
   \      0x4C2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1271              safe_delay(50);
   \      0x4C6   0x2032             MOVS     R0,#+50
   \      0x4C8   0x.... 0x....      BL       _Z10safe_delaym
   1272          
   1273          //    SERIAL_PROTOCOLPAIR("sizeof(ubl.state) : ", (int)sizeof(ubl.state));
   1274          	SERIAL_PROTOCOLPGM("sizeof(ubl.state) : ");
   \      0x4CC   0x.... 0x....      ADR.W    R0,?_72
   \      0x4D0   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1275          	SERIAL_PROTOCOL((int)sizeof(ubl.state));
   \      0x4D4   0x7830             LDRB     R0,[R6, #+0]
   \      0x4D6   0x2800             CMP      R0,#+0
   \      0x4D8   0xD105             BNE.N    ??g29_what_command_62
   \      0x4DA   0x220A             MOVS     R2,#+10
   \      0x4DC   0x210C             MOVS     R1,#+12
   \      0x4DE   0x4628             MOV      R0,R5
   \      0x4E0   0x.... 0x....      BL       _ZN12MarlinSerial5printEii
   \      0x4E4   0xE004             B.N      ??g29_what_command_63
   \                     ??g29_what_command_62: (+1)
   \      0x4E6   0x220A             MOVS     R2,#+10
   \      0x4E8   0x210C             MOVS     R1,#+12
   \      0x4EA   0x4620             MOV      R0,R4
   \      0x4EC   0x.... 0x....      BL       _ZN12MarlinSerial5printEii
   1276          
   1277          
   1278              //SERIAL_PROTOCOLPAIR("\nGRID_MAX_POINTS_X  ", GRID_MAX_POINTS_X);
   1279          	SERIAL_PROTOCOLPGM("\nGRID_MAX_POINTS_X  ");
   \                     ??g29_what_command_63: (+1)
   \      0x4F0   0x.... 0x....      ADR.W    R0,?_73
   \      0x4F4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1280          	SERIAL_PROTOCOL(GRID_MAX_POINTS_X);
   \      0x4F8   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x4FC   0x7830             LDRB     R0,[R6, #+0]
   \      0x4FE   0x2800             CMP      R0,#+0
   \      0x500   0xD104             BNE.N    ??g29_what_command_64
   \      0x502   0x2200             MOVS     R2,#+0
   \      0x504   0x4628             MOV      R0,R5
   \      0x506   0x.... 0x....      BL       _ZN12MarlinSerial5printEhi
   \      0x50A   0xE003             B.N      ??g29_what_command_65
   \                     ??g29_what_command_64: (+1)
   \      0x50C   0x2200             MOVS     R2,#+0
   \      0x50E   0x4620             MOV      R0,R4
   \      0x510   0x.... 0x....      BL       _ZN12MarlinSerial5printEhi
   1281          	
   1282              //SERIAL_PROTOCOLPAIR("\nGRID_MAX_POINTS_Y  ", GRID_MAX_POINTS_Y);
   1283          	SERIAL_PROTOCOLPGM("\nGRID_MAX_POINTS_Y  ");
   \                     ??g29_what_command_65: (+1)
   \      0x514   0x.... 0x....      ADR.W    R0,?_74
   \      0x518   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1284          	SERIAL_PROTOCOL(GRID_MAX_POINTS_Y);
   \      0x51C   0xF899 0x1001      LDRB     R1,[R9, #+1]
   \      0x520   0x7830             LDRB     R0,[R6, #+0]
   \      0x522   0x2800             CMP      R0,#+0
   \      0x524   0xD104             BNE.N    ??g29_what_command_66
   \      0x526   0x2200             MOVS     R2,#+0
   \      0x528   0x4628             MOV      R0,R5
   \      0x52A   0x.... 0x....      BL       _ZN12MarlinSerial5printEhi
   \      0x52E   0xE003             B.N      ??g29_what_command_67
   \                     ??g29_what_command_66: (+1)
   \      0x530   0x2200             MOVS     R2,#+0
   \      0x532   0x4620             MOV      R0,R4
   \      0x534   0x.... 0x....      BL       _ZN12MarlinSerial5printEhi
   1285          	
   1286              safe_delay(50);
   \                     ??g29_what_command_67: (+1)
   \      0x538   0x2032             MOVS     R0,#+50
   \      0x53A   0x.... 0x....      BL       _Z10safe_delaym
   1287              //SERIAL_PROTOCOLPAIR("\nUBL_MESH_MIN_X         ", UBL_MESH_MIN_X);
   1288          	SERIAL_PROTOCOLPGM("\nUBL_MESH_MIN_X         ");
   \      0x53E   0x.... 0x....      ADR.W    R0,?_75
   \      0x542   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1289          	SERIAL_PROTOCOL(UBL_MESH_MIN_X);
   \      0x546   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x54A   0x.... 0x....      BL       __aeabi_i2f
   \      0x54E   0xF8DA 0x1008      LDR      R1,[R10, #+8]
   \      0x552   0x.... 0x....      BL       __aeabi_fadd
   \      0x556   0x.... 0x....      BL       __aeabi_f2d
   \      0x55A   0x4602             MOV      R2,R0
   \      0x55C   0x460B             MOV      R3,R1
   \      0x55E   0x7830             LDRB     R0,[R6, #+0]
   \      0x560   0x2800             CMP      R0,#+0
   \      0x562   0xD105             BNE.N    ??g29_what_command_68
   \      0x564   0x2002             MOVS     R0,#+2
   \      0x566   0x9000             STR      R0,[SP, #+0]
   \      0x568   0x4628             MOV      R0,R5
   \      0x56A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x56E   0xE004             B.N      ??g29_what_command_69
   \                     ??g29_what_command_68: (+1)
   \      0x570   0x2002             MOVS     R0,#+2
   \      0x572   0x9000             STR      R0,[SP, #+0]
   \      0x574   0x4620             MOV      R0,R4
   \      0x576   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1290          	
   1291             // SERIAL_PROTOCOLPAIR("\nUBL_MESH_MIN_Y         ", UBL_MESH_MIN_Y);
   1292          	SERIAL_PROTOCOLPGM("\nUBL_MESH_MIN_Y         ");
   \                     ??g29_what_command_69: (+1)
   \      0x57A   0x.... 0x....      ADR.W    R0,?_76
   \      0x57E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1293          	SERIAL_PROTOCOL(UBL_MESH_MIN_Y);
   \      0x582   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x586   0x.... 0x....      BL       __aeabi_i2f
   \      0x58A   0xF8DA 0x100C      LDR      R1,[R10, #+12]
   \      0x58E   0x.... 0x....      BL       __aeabi_fadd
   \      0x592   0x.... 0x....      BL       __aeabi_f2d
   \      0x596   0x4602             MOV      R2,R0
   \      0x598   0x460B             MOV      R3,R1
   \      0x59A   0x7830             LDRB     R0,[R6, #+0]
   \      0x59C   0x2800             CMP      R0,#+0
   \      0x59E   0xD105             BNE.N    ??g29_what_command_70
   \      0x5A0   0x2002             MOVS     R0,#+2
   \      0x5A2   0x9000             STR      R0,[SP, #+0]
   \      0x5A4   0x4628             MOV      R0,R5
   \      0x5A6   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x5AA   0xE004             B.N      ??g29_what_command_71
   \                     ??g29_what_command_70: (+1)
   \      0x5AC   0x2002             MOVS     R0,#+2
   \      0x5AE   0x9000             STR      R0,[SP, #+0]
   \      0x5B0   0x4620             MOV      R0,R4
   \      0x5B2   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1294          	
   1295              safe_delay(50);
   \                     ??g29_what_command_71: (+1)
   \      0x5B6   0x2032             MOVS     R0,#+50
   \      0x5B8   0x.... 0x....      BL       _Z10safe_delaym
   1296              //SERIAL_PROTOCOLPAIR("\nUBL_MESH_MAX_X         ", UBL_MESH_MAX_X);
   1297          	SERIAL_PROTOCOLPGM("\nUBL_MESH_MAX_X         ");
   \      0x5BC   0x.... 0x....      ADR.W    R0,?_77
   \      0x5C0   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1298          	SERIAL_PROTOCOL(UBL_MESH_MAX_X);
   \      0x5C4   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x5C8   0x.... 0x....      BL       __aeabi_i2f
   \      0x5CC   0x4601             MOV      R1,R0
   \      0x5CE   0xF8DA 0x0014      LDR      R0,[R10, #+20]
   \      0x5D2   0x.... 0x....      BL       __aeabi_fsub
   \      0x5D6   0x.... 0x....      BL       __aeabi_f2d
   \      0x5DA   0x4602             MOV      R2,R0
   \      0x5DC   0x460B             MOV      R3,R1
   \      0x5DE   0x7830             LDRB     R0,[R6, #+0]
   \      0x5E0   0x2800             CMP      R0,#+0
   \      0x5E2   0xD105             BNE.N    ??g29_what_command_72
   \      0x5E4   0x2002             MOVS     R0,#+2
   \      0x5E6   0x9000             STR      R0,[SP, #+0]
   \      0x5E8   0x4628             MOV      R0,R5
   \      0x5EA   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x5EE   0xE004             B.N      ??g29_what_command_73
   \                     ??g29_what_command_72: (+1)
   \      0x5F0   0x2002             MOVS     R0,#+2
   \      0x5F2   0x9000             STR      R0,[SP, #+0]
   \      0x5F4   0x4620             MOV      R0,R4
   \      0x5F6   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1299          
   1300             // SERIAL_PROTOCOLPAIR("\nUBL_MESH_MAX_Y         ", UBL_MESH_MAX_Y);
   1301          	SERIAL_PROTOCOLPGM("\nUBL_MESH_MAX_Y         ");
   \                     ??g29_what_command_73: (+1)
   \      0x5FA   0x.... 0x....      ADR.W    R0,?_78
   \      0x5FE   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1302          	SERIAL_PROTOCOL(UBL_MESH_MAX_Y);
   \      0x602   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x606   0x.... 0x....      BL       __aeabi_i2f
   \      0x60A   0x4601             MOV      R1,R0
   \      0x60C   0xF8DA 0x0018      LDR      R0,[R10, #+24]
   \      0x610   0x.... 0x....      BL       __aeabi_fsub
   \      0x614   0x.... 0x....      BL       __aeabi_f2d
   \      0x618   0x4602             MOV      R2,R0
   \      0x61A   0x460B             MOV      R3,R1
   \      0x61C   0x7830             LDRB     R0,[R6, #+0]
   \      0x61E   0x2800             CMP      R0,#+0
   \      0x620   0xD105             BNE.N    ??g29_what_command_74
   \      0x622   0x2002             MOVS     R0,#+2
   \      0x624   0x9000             STR      R0,[SP, #+0]
   \      0x626   0x4628             MOV      R0,R5
   \      0x628   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x62C   0xE004             B.N      ??g29_what_command_75
   \                     ??g29_what_command_74: (+1)
   \      0x62E   0x2002             MOVS     R0,#+2
   \      0x630   0x9000             STR      R0,[SP, #+0]
   \      0x632   0x4620             MOV      R0,R4
   \      0x634   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1303          	
   1304              safe_delay(50);
   \                     ??g29_what_command_75: (+1)
   \      0x638   0x2032             MOVS     R0,#+50
   \      0x63A   0x.... 0x....      BL       _Z10safe_delaym
   1305              SERIAL_PROTOCOLPGM("\nMESH_X_DIST        ");
   \      0x63E   0x.... 0x....      ADR.W    R0,?_79
   \      0x642   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1306              SERIAL_PROTOCOL_F(MESH_X_DIST, 6);
   \      0x646   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x64A   0x.... 0x....      BL       __aeabi_i2f
   \      0x64E   0x4607             MOV      R7,R0
   \      0x650   0xF8DA 0x0014      LDR      R0,[R10, #+20]
   \      0x654   0x4639             MOV      R1,R7
   \      0x656   0x.... 0x....      BL       __aeabi_fsub
   \      0x65A   0x4680             MOV      R8,R0
   \      0x65C   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \      0x660   0x4639             MOV      R1,R7
   \      0x662   0x.... 0x....      BL       __aeabi_fadd
   \      0x666   0x4601             MOV      R1,R0
   \      0x668   0x4640             MOV      R0,R8
   \      0x66A   0x.... 0x....      BL       __aeabi_fsub
   \      0x66E   0x4607             MOV      R7,R0
   \      0x670   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x674   0x1E40             SUBS     R0,R0,#+1
   \      0x676   0x.... 0x....      BL       __aeabi_i2f
   \      0x67A   0x4601             MOV      R1,R0
   \      0x67C   0x4638             MOV      R0,R7
   \      0x67E   0x.... 0x....      BL       __aeabi_fdiv
   \      0x682   0x.... 0x....      BL       __aeabi_f2d
   \      0x686   0x4602             MOV      R2,R0
   \      0x688   0x460B             MOV      R3,R1
   \      0x68A   0x7830             LDRB     R0,[R6, #+0]
   \      0x68C   0x2800             CMP      R0,#+0
   \      0x68E   0xD105             BNE.N    ??g29_what_command_76
   \      0x690   0x2006             MOVS     R0,#+6
   \      0x692   0x9000             STR      R0,[SP, #+0]
   \      0x694   0x4628             MOV      R0,R5
   \      0x696   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x69A   0xE004             B.N      ??g29_what_command_77
   \                     ??g29_what_command_76: (+1)
   \      0x69C   0x2006             MOVS     R0,#+6
   \      0x69E   0x9000             STR      R0,[SP, #+0]
   \      0x6A0   0x4620             MOV      R0,R4
   \      0x6A2   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1307              SERIAL_PROTOCOLPGM("\nMESH_Y_DIST        ");
   \                     ??g29_what_command_77: (+1)
   \      0x6A6   0x.... 0x....      ADR.W    R0,?_80
   \      0x6AA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1308              SERIAL_PROTOCOL_F(MESH_Y_DIST, 6);
   \      0x6AE   0xF9B9 0x0054      LDRSH    R0,[R9, #+84]
   \      0x6B2   0x.... 0x....      BL       __aeabi_i2f
   \      0x6B6   0x4607             MOV      R7,R0
   \      0x6B8   0xF8DA 0x0018      LDR      R0,[R10, #+24]
   \      0x6BC   0x4639             MOV      R1,R7
   \      0x6BE   0x.... 0x....      BL       __aeabi_fsub
   \      0x6C2   0x4680             MOV      R8,R0
   \      0x6C4   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \      0x6C8   0x4639             MOV      R1,R7
   \      0x6CA   0x.... 0x....      BL       __aeabi_fadd
   \      0x6CE   0x4601             MOV      R1,R0
   \      0x6D0   0x4640             MOV      R0,R8
   \      0x6D2   0x.... 0x....      BL       __aeabi_fsub
   \      0x6D6   0x4607             MOV      R7,R0
   \      0x6D8   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \      0x6DC   0x1E40             SUBS     R0,R0,#+1
   \      0x6DE   0x.... 0x....      BL       __aeabi_i2f
   \      0x6E2   0x4601             MOV      R1,R0
   \      0x6E4   0x4638             MOV      R0,R7
   \      0x6E6   0x.... 0x....      BL       __aeabi_fdiv
   \      0x6EA   0x.... 0x....      BL       __aeabi_f2d
   \      0x6EE   0x4602             MOV      R2,R0
   \      0x6F0   0x460B             MOV      R3,R1
   \      0x6F2   0x7830             LDRB     R0,[R6, #+0]
   \      0x6F4   0x2800             CMP      R0,#+0
   \      0x6F6   0xD105             BNE.N    ??g29_what_command_78
   \      0x6F8   0x2006             MOVS     R0,#+6
   \      0x6FA   0x9000             STR      R0,[SP, #+0]
   \      0x6FC   0x4628             MOV      R0,R5
   \      0x6FE   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x702   0xE004             B.N      ??g29_what_command_79
   \                     ??g29_what_command_78: (+1)
   \      0x704   0x2006             MOVS     R0,#+6
   \      0x706   0x9000             STR      R0,[SP, #+0]
   \      0x708   0x4620             MOV      R0,R4
   \      0x70A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1309              SERIAL_EOL;
   \                     ??g29_what_command_79: (+1)
   \      0x70E   0x7830             LDRB     R0,[R6, #+0]
   \      0x710   0x2800             CMP      R0,#+0
   \      0x712   0xD104             BNE.N    ??g29_what_command_80
   \      0x714   0x210A             MOVS     R1,#+10
   \      0x716   0x4628             MOV      R0,R5
   \      0x718   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x71C   0xE004             B.N      ??g29_what_command_81
   \                     ??g29_what_command_80: (+1)
   \      0x71E   0x2200             MOVS     R2,#+0
   \      0x720   0x210A             MOVS     R1,#+10
   \      0x722   0x4620             MOV      R0,R4
   \      0x724   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1310              safe_delay(50);
   \                     ??g29_what_command_81: (+1)
   \      0x728   0x2032             MOVS     R0,#+50
   \      0x72A   0x.... 0x....      BL       _Z10safe_delaym
   1311          
   1312              if (!ubl.sanity_check()) {
   \      0x72E   0x.... 0x....      LDR.W    R0,??DataTable128
   \      0x732   0x.... 0x....      BL       _ZN20unified_bed_leveling12sanity_checkEv
   \      0x736   0x2800             CMP      R0,#+0
   \      0x738   0xD107             BNE.N    ??g29_what_command_82
   1313                say_ubl_name();
   \      0x73A   0x.... 0x....      BL       _ZN33_INTERNAL_11_ubl_G29_cpp_cc415aeb12say_ubl_nameEv
   1314                SERIAL_PROTOCOLLNPGM("sanity checks passed.");
   \      0x73E   0x.... 0x....      ADR.W    R0,?_81
   \      0x742   0xE8BD 0x4FFE      POP      {R1-R11,LR}
   \      0x746   0x.... 0x....      B.W      _Z14serialprintPGMPKc
   1315              }
   1316            }
   \                     ??g29_what_command_82: (+1)
   \      0x74A   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??g29_what_command_25: (+1)
   \      0x74E   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x752   0xF47F 0xAD83      BNE.W    ??g29_what_command_28
   \      0x756   0x210A             MOVS     R1,#+10
   \      0x758   0x4628             MOV      R0,R5
   \      0x75A   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x75E   0xE582             B.N      ??g29_what_command_29
   \                     ??g29_what_command_31: (+1)
   \      0x760   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x764   0xF47F 0xADB1      BNE.W    ??g29_what_command_34
   \      0x768   0x210A             MOVS     R1,#+10
   \      0x76A   0x4628             MOV      R0,R5
   \      0x76C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x770   0xE5B0             B.N      ??g29_what_command_35
   1317          
   1318            /**
   1319             * When we are fully debugged, the EEPROM dump command will get deleted also. But
   1320             * right now, it is good to have the extra information. Soon... we prune this.
   1321             */

   \                                 In section .text, align 2, keep-with-next
   1322            void g29_eeprom_dump() {
   \                     _Z15g29_eeprom_dumpv: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   1323              unsigned char cccc;
   1324              uint16_t kkkk;
   1325          
   1326              SERIAL_ECHO_START;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable128_1
   \        0x6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1327              SERIAL_ECHOLNPGM("EEPROM Dump:");
   \        0xA   0x.... 0x....      ADR.W    R0,?_82
   \        0xE   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1328              for (uint16_t i = 0; i < E2END + 1; i += 16) {
   \       0x12   0x2400             MOVS     R4,#+0
   \       0x14   0x....             LDR.N    R6,??DataTable124_6
   \       0x16   0xE023             B.N      ??g29_eeprom_dump_0
   1329                if (!(i & 0x3)) idle();
   1330                print_hex_word(i);
   1331                SERIAL_ECHOPGM(": ");
   1332                for (uint16_t j = 0; j < 16; j++) {
   1333                  kkkk = i + j;
   1334                  //eeprom_read_block(&cccc, (void *)kkkk, 1);
   1335                  AT24CXX_Read((uint16_t)kkkk,&cccc,1);
   1336                  print_hex_byte(cccc);
   1337                  SERIAL_ECHO(' ');
   1338                }
   1339                SERIAL_EOL;
   \                     ??g29_eeprom_dump_1: (+1)
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x210A             MOVS     R1,#+10
   \       0x1C   0x....             LDR.N    R0,??DataTable124_3
   \       0x1E   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \       0x22   0xE01C             B.N      ??g29_eeprom_dump_2
   \                     ??g29_eeprom_dump_3: (+1)
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0x2120             MOVS     R1,#+32
   \       0x28   0x....             LDR.N    R0,??DataTable124_4
   \       0x2A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??g29_eeprom_dump_4: (+1)
   \       0x2E   0x1C6D             ADDS     R5,R5,#+1
   \       0x30   0xE02A             B.N      ??g29_eeprom_dump_5
   1340              }
   1341              SERIAL_EOL;
   \                     ??g29_eeprom_dump_6: (+1)
   \       0x32   0x4630             MOV      R0,R6
   \       0x34   0x7800             LDRB     R0,[R0, #+0]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD104             BNE.N    ??g29_eeprom_dump_7
   \       0x3A   0x210A             MOVS     R1,#+10
   \       0x3C   0x....             LDR.N    R0,??DataTable124_4
   \       0x3E   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x42   0xBD73             POP      {R0,R1,R4-R6,PC}
   \                     ??g29_eeprom_dump_7: (+1)
   \       0x44   0x2200             MOVS     R2,#+0
   \       0x46   0x210A             MOVS     R1,#+10
   \       0x48   0x....             LDR.N    R0,??DataTable124_3
   \       0x4A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1342            }
   \       0x4E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   \                     ??g29_eeprom_dump_8: (+1)
   \       0x50   0x7830             LDRB     R0,[R6, #+0]
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD1E0             BNE.N    ??g29_eeprom_dump_1
   \       0x56   0x210A             MOVS     R1,#+10
   \       0x58   0x....             LDR.N    R0,??DataTable124_4
   \       0x5A   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \                     ??g29_eeprom_dump_2: (+1)
   \       0x5E   0x3410             ADDS     R4,R4,#+16
   \                     ??g29_eeprom_dump_0: (+1)
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0xB280             UXTH     R0,R0
   \       0x64   0xF5B0 0x6FC0      CMP      R0,#+1536
   \       0x68   0xDAE3             BGE.N    ??g29_eeprom_dump_6
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0xF010 0x0F03      TST      R0,#0x3
   \       0x70   0xD102             BNE.N    ??g29_eeprom_dump_9
   \       0x72   0x2000             MOVS     R0,#+0
   \       0x74   0x.... 0x....      BL       _Z4idleb
   \                     ??g29_eeprom_dump_9: (+1)
   \       0x78   0x4620             MOV      R0,R4
   \       0x7A   0xB280             UXTH     R0,R0
   \       0x7C   0x.... 0x....      BL       _Z14print_hex_wordt
   \       0x80   0x....             ADR.N    R0,??DataTable124_5  ;; 0x3A, 0x20, 0x00, 0x00
   \       0x82   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \       0x86   0x2500             MOVS     R5,#+0
   \                     ??g29_eeprom_dump_5: (+1)
   \       0x88   0x4628             MOV      R0,R5
   \       0x8A   0xB280             UXTH     R0,R0
   \       0x8C   0x2810             CMP      R0,#+16
   \       0x8E   0xDADF             BGE.N    ??g29_eeprom_dump_8
   \       0x90   0x2201             MOVS     R2,#+1
   \       0x92   0x4669             MOV      R1,SP
   \       0x94   0x1928             ADDS     R0,R5,R4
   \       0x96   0xB280             UXTH     R0,R0
   \       0x98   0x.... 0x....      BL       AT24CXX_Read
   \       0x9C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xA0   0x.... 0x....      BL       _Z14print_hex_byteh
   \       0xA4   0x7830             LDRB     R0,[R6, #+0]
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD0BC             BEQ.N    ??g29_eeprom_dump_3
   \       0xAA   0x2200             MOVS     R2,#+0
   \       0xAC   0x2120             MOVS     R1,#+32
   \       0xAE   0x....             LDR.N    R0,??DataTable124_3
   \       0xB0   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \       0xB4   0xE7BB             B.N      ??g29_eeprom_dump_4
   1343          
   1344            /**
   1345             * When we are fully debugged, this may go away. But there are some valid
   1346             * use cases for the users. So we can wait and see what to do with it.
   1347             */

   \                                 In section .text, align 2, keep-with-next
   1348            void g29_compare_current_mesh_to_stored_mesh() {
   \                     _Z39g29_compare_current_mesh_to_stored_meshv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   1349              //float tmp_z_values[GRID_MAX_POINTS_X][GRID_MAX_POINTS_Y];
   1350              float tmp_z_values[GRID_MAX_POINTS_X_MAX][GRID_MAX_POINTS_Y_MAX];
   1351          
   1352              if (!code_has_value()) {
   \        0x6   0x.... 0x....      BL       _Z14code_has_valuev
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD104             BNE.N    ??g29_compare_current_mesh_to_stored_mesh_0
   1353                SERIAL_PROTOCOLLNPGM("?Mesh # required.\n");
   \        0xE   0x.... 0x....      ADR.W    R0,?_84
   \       0x12   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1354                return;
   \       0x16   0xE05F             B.N      ??g29_compare_current_mesh_to_stored_mesh_1
   1355              }
   1356              storage_slot = code_value_int();
   \                     ??g29_compare_current_mesh_to_stored_mesh_0: (+1)
   \       0x18   0x.... 0x....      BL       _Z14code_value_intv
   \       0x1C   0x.... 0x....      LDR.W    R4,??DataTable128_2
   \       0x20   0x6120             STR      R0,[R4, #+16]
   1357          
   1358              int16_t j = (UBL_LAST_EEPROM_INDEX - ubl.eeprom_start) / sizeof(tmp_z_values);
   1359          
   1360              if (!WITHIN(storage_slot, 0, j - 1) || ubl.eeprom_start <= 0) {
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD40C             BMI.N    ??g29_compare_current_mesh_to_stored_mesh_2
   \       0x26   0x....             LDR.N    R1,??DataTable124_2
   \       0x28   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \       0x2C   0xF240 0x52FF      MOVW     R2,#+1535
   \       0x30   0x1A52             SUBS     R2,R2,R1
   \       0x32   0x0A92             LSRS     R2,R2,#+10
   \       0x34   0xB212             SXTH     R2,R2
   \       0x36   0x1E52             SUBS     R2,R2,#+1
   \       0x38   0x4282             CMP      R2,R0
   \       0x3A   0xDB01             BLT.N    ??g29_compare_current_mesh_to_stored_mesh_2
   \       0x3C   0x2900             CMP      R1,#+0
   \       0x3E   0xDC04             BGT.N    ??g29_compare_current_mesh_to_stored_mesh_3
   1361                SERIAL_PROTOCOLLNPGM("?EEPROM storage not available for use.\n");
   \                     ??g29_compare_current_mesh_to_stored_mesh_2: (+1)
   \       0x40   0x.... 0x....      ADR.W    R0,?_14
   \       0x44   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1362                return;
   \       0x48   0xE046             B.N      ??g29_compare_current_mesh_to_stored_mesh_1
   1363              }
   1364          
   1365              j = UBL_LAST_EEPROM_INDEX - (storage_slot + 1) * sizeof(tmp_z_values);
   \                     ??g29_compare_current_mesh_to_stored_mesh_3: (+1)
   \       0x4A   0xF240 0x55FF      MOVW     R5,#+1535
   \       0x4E   0x1C40             ADDS     R0,R0,#+1
   \       0x50   0xEBA5 0x2580      SUB      R5,R5,R0, LSL #+10
   1366              //eeprom_read_block((void *)&tmp_z_values, (void *)j, sizeof(tmp_z_values));
   1367              int BufferSize=sizeof(tmp_z_values);	  
   1368              uint16_t MemAddress =j;
   1369              float* pBuffer = &tmp_z_values[0][0]; 
   1370              AT24CXX_Read(MemAddress,(uint8_t*)pBuffer,BufferSize);
   \       0x54   0xF44F 0x6280      MOV      R2,#+1024
   \       0x58   0x4669             MOV      R1,SP
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0xB280             UXTH     R0,R0
   \       0x5E   0x.... 0x....      BL       AT24CXX_Read
   1371          
   1372              SERIAL_ECHOPAIR("Subtracting Mesh ", storage_slot);
   \       0x62   0x6921             LDR      R1,[R4, #+16]
   \       0x64   0x.... 0x....      ADR.W    R0,?_85
   \       0x68   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1373              SERIAL_PROTOCOLLNPAIR(" loaded from EEPROM address ", hex_address(j)); // Soon, we can remove the extra clutter of printing
   \       0x6C   0x4628             MOV      R0,R5
   \       0x6E   0xB280             UXTH     R0,R0
   \       0x70   0x.... 0x....      BL       _Z11hex_addresst
   \       0x74   0x4601             MOV      R1,R0
   \       0x76   0x.... 0x....      ADR.W    R0,?_86
   \       0x7A   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
   \       0x7E   0x....             LDR.N    R0,??DataTable124_6
   \       0x80   0x7800             LDRB     R0,[R0, #+0]
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD104             BNE.N    ??g29_compare_current_mesh_to_stored_mesh_4
   \       0x86   0x210A             MOVS     R1,#+10
   \       0x88   0x....             LDR.N    R0,??DataTable124_4
   \       0x8A   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x8E   0xE004             B.N      ??g29_compare_current_mesh_to_stored_mesh_5
   \                     ??g29_compare_current_mesh_to_stored_mesh_4: (+1)
   \       0x90   0x2200             MOVS     R2,#+0
   \       0x92   0x210A             MOVS     R1,#+10
   \       0x94   0x....             LDR.N    R0,??DataTable124_3
   \       0x96   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1374                                                                                  // the address in the EEPROM where the Mesh is stored.
   1375          
   1376              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \                     ??g29_compare_current_mesh_to_stored_mesh_5: (+1)
   \       0x9A   0x2500             MOVS     R5,#+0
   \       0x9C   0x.... 0x....      LDR.W    R4,??DataTable128_3
   \       0xA0   0xE015             B.N      ??g29_compare_current_mesh_to_stored_mesh_6
   1377                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
   1378                  ubl.z_values[x][y] -= tmp_z_values[x][y];
   \                     ??g29_compare_current_mesh_to_stored_mesh_7: (+1)
   \       0xA2   0x.... 0x....      LDR.W    R0,??DataTable129
   \       0xA6   0xEB10 0x1785      ADDS     R7,R0,R5, LSL #+6
   \       0xAA   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \       0xAE   0x466A             MOV      R2,SP
   \       0xB0   0xEB02 0x1185      ADD      R1,R2,R5, LSL #+6
   \       0xB4   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \       0xB8   0x.... 0x....      BL       __aeabi_fsub
   \       0xBC   0xF847 0x0026      STR      R0,[R7, R6, LSL #+2]
   \       0xC0   0x1C76             ADDS     R6,R6,#+1
   \       0xC2   0xB2F6             UXTB     R6,R6
   \                     ??g29_compare_current_mesh_to_stored_mesh_8: (+1)
   \       0xC4   0x7860             LDRB     R0,[R4, #+1]
   \       0xC6   0x4286             CMP      R6,R0
   \       0xC8   0xDBEB             BLT.N    ??g29_compare_current_mesh_to_stored_mesh_7
   \       0xCA   0x1C6D             ADDS     R5,R5,#+1
   \       0xCC   0xB2ED             UXTB     R5,R5
   \                     ??g29_compare_current_mesh_to_stored_mesh_6: (+1)
   \       0xCE   0x7820             LDRB     R0,[R4, #+0]
   \       0xD0   0x4285             CMP      R5,R0
   \       0xD2   0xDA01             BGE.N    ??g29_compare_current_mesh_to_stored_mesh_1
   \       0xD4   0x2600             MOVS     R6,#+0
   \       0xD6   0xE7F5             B.N      ??g29_compare_current_mesh_to_stored_mesh_8
   1379            }
   \                     ??g29_compare_current_mesh_to_stored_mesh_1: (+1)
   \       0xD8   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \       0xDC   0xB001             ADD      SP,SP,#+4
   \       0xDE   0xBDF0             POP      {R4-R7,PC}       ;; return
   1380          

   \                                 In section .text, align 2, keep-with-next
   1381            mesh_index_pair find_closest_mesh_point_of_type(const MeshPointType type, const float &lx, const float &ly, const bool probe_as_reference, unsigned int bits[16], const bool far_flag) {
   \                     _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB090             SUB      SP,SP,#+64
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x461C             MOV      R4,R3
   1382              mesh_index_pair out_mesh;
   1383              out_mesh.x_index = out_mesh.y_index = -1;
   \        0xA   0xF04F 0x30FF      MOV      R0,#-1
   \        0xE   0xF88D 0x001D      STRB     R0,[SP, #+29]
   \       0x12   0xF88D 0x001C      STRB     R0,[SP, #+28]
   1384          
   1385              const float current_x = current_position[X_AXIS],
   \       0x16   0x.... 0x....      LDR.W    R0,??DataTable129_1
   \       0x1A   0x6801             LDR      R1,[R0, #+0]
   \       0x1C   0x910E             STR      R1,[SP, #+56]
   1386                          current_y = current_position[Y_AXIS];
   \       0x1E   0x6840             LDR      R0,[R0, #+4]
   \       0x20   0x900D             STR      R0,[SP, #+52]
   1387          
   1388              // Get our reference position. Either the nozzle or probe location.
   1389              const float px = lx - (probe_as_reference == USE_PROBE_AS_REFERENCE ? X_PROBE_OFFSET_FROM_EXTRUDER : 0),
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable128_3
   \       0x26   0x9005             STR      R0,[SP, #+20]
   \       0x28   0xF89D 0x0068      LDRB     R0,[SP, #+104]
   \       0x2C   0x2801             CMP      R0,#+1
   \       0x2E   0xD102             BNE.N    ??find_closest_mesh_point_of_type_0
   \       0x30   0x9805             LDR      R0,[SP, #+20]
   \       0x32   0x68C1             LDR      R1,[R0, #+12]
   \       0x34   0xE000             B.N      ??find_closest_mesh_point_of_type_1
   \                     ??find_closest_mesh_point_of_type_0: (+1)
   \       0x36   0x2100             MOVS     R1,#+0
   \                     ??find_closest_mesh_point_of_type_1: (+1)
   \       0x38   0x6810             LDR      R0,[R2, #+0]
   \       0x3A   0x.... 0x....      BL       __aeabi_fsub
   \       0x3E   0x900C             STR      R0,[SP, #+48]
   1390                          py = ly - (probe_as_reference == USE_PROBE_AS_REFERENCE ? Y_PROBE_OFFSET_FROM_EXTRUDER : 0);
   \       0x40   0xF89D 0x0068      LDRB     R0,[SP, #+104]
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xD102             BNE.N    ??find_closest_mesh_point_of_type_2
   \       0x48   0x9805             LDR      R0,[SP, #+20]
   \       0x4A   0x6901             LDR      R1,[R0, #+16]
   \       0x4C   0xE000             B.N      ??find_closest_mesh_point_of_type_3
   \                     ??find_closest_mesh_point_of_type_2: (+1)
   \       0x4E   0x2100             MOVS     R1,#+0
   \                     ??find_closest_mesh_point_of_type_3: (+1)
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x.... 0x....      BL       __aeabi_fsub
   \       0x56   0x900B             STR      R0,[SP, #+44]
   1391          
   1392              float closest = far_flag ? -99999.99 : 99999.99;
   \       0x58   0xF89D 0x0070      LDRB     R0,[SP, #+112]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD003             BEQ.N    ??find_closest_mesh_point_of_type_4
   \       0x60   0x.... 0x....      LDR.W    R0,??DataTable129_2  ;; 0xc7c34fff
   \       0x64   0x9006             STR      R0,[SP, #+24]
   \       0x66   0xE002             B.N      ??find_closest_mesh_point_of_type_5
   \                     ??find_closest_mesh_point_of_type_4: (+1)
   \       0x68   0x.... 0x....      LDR.W    R0,??DataTable129_3  ;; 0x47c34fff
   \       0x6C   0x9006             STR      R0,[SP, #+24]
   1393          
   1394              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \                     ??find_closest_mesh_point_of_type_5: (+1)
   \       0x6E   0x2400             MOVS     R4,#+0
   \       0x70   0xF88D 0x5010      STRB     R5,[SP, #+16]
   \       0x74   0xE001             B.N      ??find_closest_mesh_point_of_type_6
   \                     ??find_closest_mesh_point_of_type_7: (+1)
   \       0x76   0x1C64             ADDS     R4,R4,#+1
   \       0x78   0xB2E4             UXTB     R4,R4
   \                     ??find_closest_mesh_point_of_type_6: (+1)
   \       0x7A   0x9805             LDR      R0,[SP, #+20]
   \       0x7C   0x7800             LDRB     R0,[R0, #+0]
   \       0x7E   0x4284             CMP      R4,R0
   \       0x80   0xF280 0x818E      BGE.W    ??find_closest_mesh_point_of_type_8
   1395                for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   \       0x84   0x2500             MOVS     R5,#+0
   \       0x86   0xE01C             B.N      ??find_closest_mesh_point_of_type_9
   1396          
   1397                  if ( (type == INVALID && isnan(ubl.z_values[i][j]))  // Check to see if this location holds the right thing
   1398                    || (type == REAL && !isnan(ubl.z_values[i][j]))
   1399                    || (type == SET_IN_BITMAP && is_bit_set(bits, i, j))
   1400                  ) {
   1401          
   1402                    // We only get here if we found a Mesh Point of the specified type
   1403          
   1404                    const float rawx = ubl.mesh_index_to_xpos[i], // Check if we can probe this mesh location
   1405                                rawy = ubl.mesh_index_to_ypos[j];
   1406          
   1407                    // If using the probe as the reference there are some unreachable locations.
   1408                    // Prune them from the list and ignore them till the next Phase (manual nozzle probing).
   1409          
   1410                    if (probe_as_reference == USE_PROBE_AS_REFERENCE &&
   1411                      (!WITHIN(rawx, MIN_PROBE_X, MAX_PROBE_X) || !WITHIN(rawy, MIN_PROBE_Y, MAX_PROBE_Y))
   1412                    ) continue;
   1413          
   1414                    // Unreachable. Check if it's the closest location to the nozzle.
   1415                    // Add in a weighting factor that considers the current location of the nozzle.
   1416          
   1417                    const float mx = LOGICAL_X_POSITION(rawx), // Check if we can probe this mesh location
   1418                                my = LOGICAL_Y_POSITION(rawy);
   1419          
   1420                    float distance = HYPOT(px - mx, py - my) + HYPOT(current_x - mx, current_y - my) * 0.1;
   1421          
   1422                    /**
   1423                     * If doing the far_flag action, we want to be as far as possible
   1424                     * from the starting point and from any other probed points. We
   1425                     * want the next point spread out and filling in any blank spaces
   1426                     * in the mesh. So we add in some of the distance to every probed
   1427                     * point we can find.
   1428                     */
   1429                    if (far_flag) {
   1430                      for (uint8_t k = 0; k < GRID_MAX_POINTS_X; k++) {
   1431                        for (uint8_t l = 0; l < GRID_MAX_POINTS_Y; l++) {
   1432                          if (!isnan(ubl.z_values[k][l])) {
   1433                            /*
   1434                            distance += sq(i - k) * (MESH_X_DIST) * .05
   1435                                      + sq(j - l) * (MESH_Y_DIST) * .05;
   1436                            */
   1437                            distance += (i - k)* (i - k)* (MESH_X_DIST) * .05
   1438                                      + (j - l) * (j - l) *(MESH_Y_DIST) * .05;
   1439                            
   1440                          }
   1441                        }
   1442                      }
   1443                    }
   1444          
   1445                    // if far_flag, look for farthest point
   1446                    if (far_flag == (distance > closest) && distance != closest) {
   \                     ??find_closest_mesh_point_of_type_10: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0xE005             B.N      ??find_closest_mesh_point_of_type_11
   \                     ??find_closest_mesh_point_of_type_12: (+1)
   \       0x8C   0x9806             LDR      R0,[SP, #+24]
   \       0x8E   0x4659             MOV      R1,R11
   \       0x90   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x94   0xD2F8             BCS.N    ??find_closest_mesh_point_of_type_10
   \       0x96   0x2001             MOVS     R0,#+1
   \                     ??find_closest_mesh_point_of_type_11: (+1)
   \       0x98   0xF89D 0x1070      LDRB     R1,[SP, #+112]
   \       0x9C   0x4281             CMP      R1,R0
   \       0x9E   0xD10E             BNE.N    ??find_closest_mesh_point_of_type_13
   \       0xA0   0x4658             MOV      R0,R11
   \       0xA2   0x9906             LDR      R1,[SP, #+24]
   \       0xA4   0x.... 0x....      BL       __aeabi_cfcmpeq
   \       0xA8   0xD009             BEQ.N    ??find_closest_mesh_point_of_type_13
   1447                      closest = distance;       // We found a closer/farther location with
   \       0xAA   0xF8CD 0xB018      STR      R11,[SP, #+24]
   1448                      out_mesh.x_index = i;     // the specified type of mesh value.
   \       0xAE   0x4620             MOV      R0,R4
   \       0xB0   0xF88D 0x001C      STRB     R0,[SP, #+28]
   1449                      out_mesh.y_index = j;
   \       0xB4   0x4628             MOV      R0,R5
   \       0xB6   0xF88D 0x001D      STRB     R0,[SP, #+29]
   1450                      out_mesh.distance = closest;
   \       0xBA   0x9806             LDR      R0,[SP, #+24]
   \       0xBC   0x9008             STR      R0,[SP, #+32]
   1451                    }
   \                     ??find_closest_mesh_point_of_type_13: (+1)
   \       0xBE   0x1C6D             ADDS     R5,R5,#+1
   \       0xC0   0xB2ED             UXTB     R5,R5
   \                     ??find_closest_mesh_point_of_type_9: (+1)
   \       0xC2   0x9805             LDR      R0,[SP, #+20]
   \       0xC4   0x7840             LDRB     R0,[R0, #+1]
   \       0xC6   0x4285             CMP      R5,R0
   \       0xC8   0xDAD5             BGE.N    ??find_closest_mesh_point_of_type_7
   \       0xCA   0xF99D 0x0010      LDRSB    R0,[SP, #+16]
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD109             BNE.N    ??find_closest_mesh_point_of_type_14
   \       0xD2   0x.... 0x....      LDR.W    R0,??DataTable129
   \       0xD6   0xEB00 0x1084      ADD      R0,R0,R4, LSL #+6
   \       0xDA   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \       0xDE   0x.... 0x....      BL       _Z5isnanf
   \       0xE2   0x2800             CMP      R0,#+0
   \       0xE4   0xD119             BNE.N    ??find_closest_mesh_point_of_type_15
   \                     ??find_closest_mesh_point_of_type_14: (+1)
   \       0xE6   0xF99D 0x0010      LDRSB    R0,[SP, #+16]
   \       0xEA   0x2801             CMP      R0,#+1
   \       0xEC   0xD109             BNE.N    ??find_closest_mesh_point_of_type_16
   \       0xEE   0x.... 0x....      LDR.W    R0,??DataTable129
   \       0xF2   0xEB00 0x1084      ADD      R0,R0,R4, LSL #+6
   \       0xF6   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \       0xFA   0x.... 0x....      BL       _Z5isnanf
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD00B             BEQ.N    ??find_closest_mesh_point_of_type_15
   \                     ??find_closest_mesh_point_of_type_16: (+1)
   \      0x102   0xF99D 0x0010      LDRSB    R0,[SP, #+16]
   \      0x106   0x2802             CMP      R0,#+2
   \      0x108   0xD1D9             BNE.N    ??find_closest_mesh_point_of_type_13
   \      0x10A   0x462A             MOV      R2,R5
   \      0x10C   0x4621             MOV      R1,R4
   \      0x10E   0xB2C9             UXTB     R1,R1
   \      0x110   0x981B             LDR      R0,[SP, #+108]
   \      0x112   0x.... 0x....      BL       _Z10is_bit_setPjhh
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD0D1             BEQ.N    ??find_closest_mesh_point_of_type_13
   \                     ??find_closest_mesh_point_of_type_15: (+1)
   \      0x11A   0x.... 0x....      LDR.W    R0,??DataTable129_4
   \      0x11E   0xF850 0x6024      LDR      R6,[R0, R4, LSL #+2]
   \      0x122   0x.... 0x....      LDR.W    R0,??DataTable129_5
   \      0x126   0xF850 0x7025      LDR      R7,[R0, R5, LSL #+2]
   \      0x12A   0xF89D 0x0068      LDRB     R0,[SP, #+104]
   \      0x12E   0x2801             CMP      R0,#+1
   \      0x130   0xD115             BNE.N    ??find_closest_mesh_point_of_type_17
   \      0x132   0x.... 0x....      LDR.W    R2,??DataTable129_6
   \      0x136   0x4630             MOV      R0,R6
   \      0x138   0x6811             LDR      R1,[R2, #+0]
   \      0x13A   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x13E   0xD8BE             BHI.N    ??find_closest_mesh_point_of_type_13
   \      0x140   0x6850             LDR      R0,[R2, #+4]
   \      0x142   0x4631             MOV      R1,R6
   \      0x144   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x148   0xD8B9             BHI.N    ??find_closest_mesh_point_of_type_13
   \      0x14A   0x4638             MOV      R0,R7
   \      0x14C   0x6891             LDR      R1,[R2, #+8]
   \      0x14E   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x152   0xD8B4             BHI.N    ??find_closest_mesh_point_of_type_13
   \      0x154   0x68D0             LDR      R0,[R2, #+12]
   \      0x156   0x4639             MOV      R1,R7
   \      0x158   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x15C   0xD8AF             BHI.N    ??find_closest_mesh_point_of_type_13
   \                     ??find_closest_mesh_point_of_type_17: (+1)
   \      0x15E   0x.... 0x....      LDR.W    R8,??DataTable129_7
   \      0x162   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x166   0x4631             MOV      R1,R6
   \      0x168   0x.... 0x....      BL       __aeabi_fadd
   \      0x16C   0x9000             STR      R0,[SP, #+0]
   \      0x16E   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \      0x172   0x4639             MOV      R1,R7
   \      0x174   0x.... 0x....      BL       __aeabi_fadd
   \      0x178   0x4681             MOV      R9,R0
   \      0x17A   0x980C             LDR      R0,[SP, #+48]
   \      0x17C   0x9900             LDR      R1,[SP, #+0]
   \      0x17E   0x.... 0x....      BL       __aeabi_fsub
   \      0x182   0x4682             MOV      R10,R0
   \      0x184   0x2602             MOVS     R6,#+2
   \      0x186   0xF04F 0x577E      MOV      R7,#+1065353216
   \      0x18A   0x46B8             MOV      R8,R7
   \      0x18C   0xE004             B.N      ??find_closest_mesh_point_of_type_18
   \                     ??find_closest_mesh_point_of_type_19: (+1)
   \      0x18E   0x4650             MOV      R0,R10
   \      0x190   0x4651             MOV      R1,R10
   \      0x192   0x.... 0x....      BL       __aeabi_fmul
   \      0x196   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_18: (+1)
   \      0x198   0x07F0             LSLS     R0,R6,#+31
   \      0x19A   0xD504             BPL.N    ??find_closest_mesh_point_of_type_20
   \      0x19C   0x4640             MOV      R0,R8
   \      0x19E   0x4651             MOV      R1,R10
   \      0x1A0   0x.... 0x....      BL       __aeabi_fmul
   \      0x1A4   0x4680             MOV      R8,R0
   \                     ??find_closest_mesh_point_of_type_20: (+1)
   \      0x1A6   0x0876             LSRS     R6,R6,#+1
   \      0x1A8   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_19
   \      0x1AA   0x980B             LDR      R0,[SP, #+44]
   \      0x1AC   0x4649             MOV      R1,R9
   \      0x1AE   0x.... 0x....      BL       __aeabi_fsub
   \      0x1B2   0x4682             MOV      R10,R0
   \      0x1B4   0x2602             MOVS     R6,#+2
   \      0x1B6   0x46BB             MOV      R11,R7
   \      0x1B8   0xE004             B.N      ??find_closest_mesh_point_of_type_21
   \                     ??find_closest_mesh_point_of_type_22: (+1)
   \      0x1BA   0x4650             MOV      R0,R10
   \      0x1BC   0x4651             MOV      R1,R10
   \      0x1BE   0x.... 0x....      BL       __aeabi_fmul
   \      0x1C2   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_21: (+1)
   \      0x1C4   0x07F0             LSLS     R0,R6,#+31
   \      0x1C6   0xD504             BPL.N    ??find_closest_mesh_point_of_type_23
   \      0x1C8   0x4658             MOV      R0,R11
   \      0x1CA   0x4651             MOV      R1,R10
   \      0x1CC   0x.... 0x....      BL       __aeabi_fmul
   \      0x1D0   0x4683             MOV      R11,R0
   \                     ??find_closest_mesh_point_of_type_23: (+1)
   \      0x1D2   0x0876             LSRS     R6,R6,#+1
   \      0x1D4   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_22
   \      0x1D6   0x4640             MOV      R0,R8
   \      0x1D8   0x4659             MOV      R1,R11
   \      0x1DA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1DE   0x.... 0x....      BL       sqrtf
   \      0x1E2   0x4682             MOV      R10,R0
   \      0x1E4   0x980E             LDR      R0,[SP, #+56]
   \      0x1E6   0x9900             LDR      R1,[SP, #+0]
   \      0x1E8   0x.... 0x....      BL       __aeabi_fsub
   \      0x1EC   0x4683             MOV      R11,R0
   \      0x1EE   0x2602             MOVS     R6,#+2
   \      0x1F0   0x46B8             MOV      R8,R7
   \      0x1F2   0xE004             B.N      ??find_closest_mesh_point_of_type_24
   \                     ??find_closest_mesh_point_of_type_25: (+1)
   \      0x1F4   0x4658             MOV      R0,R11
   \      0x1F6   0x4659             MOV      R1,R11
   \      0x1F8   0x.... 0x....      BL       __aeabi_fmul
   \      0x1FC   0x4683             MOV      R11,R0
   \                     ??find_closest_mesh_point_of_type_24: (+1)
   \      0x1FE   0x07F0             LSLS     R0,R6,#+31
   \      0x200   0xD504             BPL.N    ??find_closest_mesh_point_of_type_26
   \      0x202   0x4640             MOV      R0,R8
   \      0x204   0x4659             MOV      R1,R11
   \      0x206   0x.... 0x....      BL       __aeabi_fmul
   \      0x20A   0x4680             MOV      R8,R0
   \                     ??find_closest_mesh_point_of_type_26: (+1)
   \      0x20C   0x0876             LSRS     R6,R6,#+1
   \      0x20E   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_25
   \      0x210   0x980D             LDR      R0,[SP, #+52]
   \      0x212   0x4649             MOV      R1,R9
   \      0x214   0x.... 0x....      BL       __aeabi_fsub
   \      0x218   0x4681             MOV      R9,R0
   \      0x21A   0x2602             MOVS     R6,#+2
   \      0x21C   0xE004             B.N      ??find_closest_mesh_point_of_type_27
   \                     ??find_closest_mesh_point_of_type_28: (+1)
   \      0x21E   0x4648             MOV      R0,R9
   \      0x220   0x4649             MOV      R1,R9
   \      0x222   0x.... 0x....      BL       __aeabi_fmul
   \      0x226   0x4681             MOV      R9,R0
   \                     ??find_closest_mesh_point_of_type_27: (+1)
   \      0x228   0x07F0             LSLS     R0,R6,#+31
   \      0x22A   0xD504             BPL.N    ??find_closest_mesh_point_of_type_29
   \      0x22C   0x4638             MOV      R0,R7
   \      0x22E   0x4649             MOV      R1,R9
   \      0x230   0x.... 0x....      BL       __aeabi_fmul
   \      0x234   0x4607             MOV      R7,R0
   \                     ??find_closest_mesh_point_of_type_29: (+1)
   \      0x236   0x0876             LSRS     R6,R6,#+1
   \      0x238   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_28
   \      0x23A   0x46B9             MOV      R9,R7
   \      0x23C   0x4650             MOV      R0,R10
   \      0x23E   0x.... 0x....      BL       __aeabi_f2d
   \      0x242   0x4606             MOV      R6,R0
   \      0x244   0x460F             MOV      R7,R1
   \      0x246   0x4640             MOV      R0,R8
   \      0x248   0x4649             MOV      R1,R9
   \      0x24A   0x.... 0x....      BL       __aeabi_fadd
   \      0x24E   0x.... 0x....      BL       sqrtf
   \      0x252   0x.... 0x....      BL       __aeabi_f2d
   \      0x256   0x.... 0x....      LDR.W    R2,??DataTable129_9  ;; 0x9999999a
   \      0x25A   0x.... 0x....      LDR.W    R3,??DataTable129_10  ;; 0x3fb99999
   \      0x25E   0x.... 0x....      BL       __aeabi_dmul
   \      0x262   0x4632             MOV      R2,R6
   \      0x264   0x463B             MOV      R3,R7
   \      0x266   0x.... 0x....      BL       __aeabi_dadd
   \      0x26A   0x.... 0x....      BL       __aeabi_d2f
   \      0x26E   0x4683             MOV      R11,R0
   \      0x270   0xF89D 0x0070      LDRB     R0,[SP, #+112]
   \      0x274   0x2800             CMP      R0,#+0
   \      0x276   0xF43F 0xAF09      BEQ.W    ??find_closest_mesh_point_of_type_12
   \      0x27A   0xF04F 0x0900      MOV      R9,#+0
   \      0x27E   0xE082             B.N      ??find_closest_mesh_point_of_type_30
   \                     ??find_closest_mesh_point_of_type_31: (+1)
   \      0x280   0x.... 0x....      LDR.W    R0,??DataTable129
   \      0x284   0xEB00 0x1089      ADD      R0,R0,R9, LSL #+6
   \      0x288   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \      0x28C   0x.... 0x....      BL       _Z5isnanf
   \      0x290   0x2800             CMP      R0,#+0
   \      0x292   0xD16C             BNE.N    ??find_closest_mesh_point_of_type_32
   \      0x294   0x.... 0x....      LDR.W    R7,??DataTable129_11
   \      0x298   0x9805             LDR      R0,[SP, #+20]
   \      0x29A   0xF9B0 0x0054      LDRSH    R0,[R0, #+84]
   \      0x29E   0x.... 0x....      BL       __aeabi_i2f
   \      0x2A2   0x4680             MOV      R8,R0
   \      0x2A4   0x9809             LDR      R0,[SP, #+36]
   \      0x2A6   0x1B80             SUBS     R0,R0,R6
   \      0x2A8   0x9000             STR      R0,[SP, #+0]
   \      0x2AA   0xF8DD 0xA028      LDR      R10,[SP, #+40]
   \      0x2AE   0xEBAA 0x0A09      SUB      R10,R10,R9
   \      0x2B2   0x4658             MOV      R0,R11
   \      0x2B4   0x.... 0x....      BL       __aeabi_f2d
   \      0x2B8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \      0x2BC   0xFB0A 0xFA0A      MUL      R10,R10,R10
   \      0x2C0   0x4650             MOV      R0,R10
   \      0x2C2   0x.... 0x....      BL       __aeabi_i2f
   \      0x2C6   0x4682             MOV      R10,R0
   \      0x2C8   0x6978             LDR      R0,[R7, #+20]
   \      0x2CA   0x4641             MOV      R1,R8
   \      0x2CC   0x.... 0x....      BL       __aeabi_fsub
   \      0x2D0   0x4683             MOV      R11,R0
   \      0x2D2   0x68B8             LDR      R0,[R7, #+8]
   \      0x2D4   0x4641             MOV      R1,R8
   \      0x2D6   0x.... 0x....      BL       __aeabi_fadd
   \      0x2DA   0x4601             MOV      R1,R0
   \      0x2DC   0x4658             MOV      R0,R11
   \      0x2DE   0x.... 0x....      BL       __aeabi_fsub
   \      0x2E2   0x4683             MOV      R11,R0
   \      0x2E4   0x9805             LDR      R0,[SP, #+20]
   \      0x2E6   0x7800             LDRB     R0,[R0, #+0]
   \      0x2E8   0x1E40             SUBS     R0,R0,#+1
   \      0x2EA   0x.... 0x....      BL       __aeabi_i2f
   \      0x2EE   0x4601             MOV      R1,R0
   \      0x2F0   0x4658             MOV      R0,R11
   \      0x2F2   0x.... 0x....      BL       __aeabi_fdiv
   \      0x2F6   0x4651             MOV      R1,R10
   \      0x2F8   0x.... 0x....      BL       __aeabi_fmul
   \      0x2FC   0x.... 0x....      BL       __aeabi_f2d
   \      0x300   0x4622             MOV      R2,R4
   \      0x302   0x462B             MOV      R3,R5
   \      0x304   0x.... 0x....      BL       __aeabi_dmul
   \      0x308   0x4682             MOV      R10,R0
   \      0x30A   0x468B             MOV      R11,R1
   \      0x30C   0x9800             LDR      R0,[SP, #+0]
   \      0x30E   0x4601             MOV      R1,R0
   \      0x310   0x4348             MULS     R0,R1,R0
   \      0x312   0x.... 0x....      BL       __aeabi_i2f
   \      0x316   0x9001             STR      R0,[SP, #+4]
   \      0x318   0x69B8             LDR      R0,[R7, #+24]
   \      0x31A   0x4641             MOV      R1,R8
   \      0x31C   0x.... 0x....      BL       __aeabi_fsub
   \      0x320   0x9000             STR      R0,[SP, #+0]
   \      0x322   0x4641             MOV      R1,R8
   \      0x324   0x68F8             LDR      R0,[R7, #+12]
   \      0x326   0x.... 0x....      BL       __aeabi_fadd
   \      0x32A   0x4601             MOV      R1,R0
   \      0x32C   0x9800             LDR      R0,[SP, #+0]
   \      0x32E   0x.... 0x....      BL       __aeabi_fsub
   \      0x332   0x4607             MOV      R7,R0
   \      0x334   0x9805             LDR      R0,[SP, #+20]
   \      0x336   0x7840             LDRB     R0,[R0, #+1]
   \      0x338   0x1E40             SUBS     R0,R0,#+1
   \      0x33A   0x.... 0x....      BL       __aeabi_i2f
   \      0x33E   0x4601             MOV      R1,R0
   \      0x340   0x4638             MOV      R0,R7
   \      0x342   0x.... 0x....      BL       __aeabi_fdiv
   \      0x346   0x9901             LDR      R1,[SP, #+4]
   \      0x348   0x.... 0x....      BL       __aeabi_fmul
   \      0x34C   0x.... 0x....      BL       __aeabi_f2d
   \      0x350   0x4622             MOV      R2,R4
   \      0x352   0x462B             MOV      R3,R5
   \      0x354   0x.... 0x....      BL       __aeabi_dmul
   \      0x358   0x4652             MOV      R2,R10
   \      0x35A   0x465B             MOV      R3,R11
   \      0x35C   0x.... 0x....      BL       __aeabi_dadd
   \      0x360   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \      0x364   0x.... 0x....      BL       __aeabi_dadd
   \      0x368   0x.... 0x....      BL       __aeabi_d2f
   \      0x36C   0x4683             MOV      R11,R0
   \                     ??find_closest_mesh_point_of_type_32: (+1)
   \      0x36E   0x1C76             ADDS     R6,R6,#+1
   \      0x370   0xB2F6             UXTB     R6,R6
   \                     ??find_closest_mesh_point_of_type_33: (+1)
   \      0x372   0x9805             LDR      R0,[SP, #+20]
   \      0x374   0x7840             LDRB     R0,[R0, #+1]
   \      0x376   0x4286             CMP      R6,R0
   \      0x378   0xDB82             BLT.N    ??find_closest_mesh_point_of_type_31
   \      0x37A   0x9C0A             LDR      R4,[SP, #+40]
   \      0x37C   0x9D09             LDR      R5,[SP, #+36]
   \      0x37E   0xF109 0x0901      ADD      R9,R9,#+1
   \      0x382   0xFA5F 0xF989      UXTB     R9,R9
   \                     ??find_closest_mesh_point_of_type_30: (+1)
   \      0x386   0x9805             LDR      R0,[SP, #+20]
   \      0x388   0x7800             LDRB     R0,[R0, #+0]
   \      0x38A   0x4581             CMP      R9,R0
   \      0x38C   0xF6BF 0xAE7E      BGE.W    ??find_closest_mesh_point_of_type_12
   \      0x390   0x2600             MOVS     R6,#+0
   \      0x392   0x940A             STR      R4,[SP, #+40]
   \      0x394   0x9509             STR      R5,[SP, #+36]
   \      0x396   0x.... 0x....      LDR.W    R4,??DataTable129_9  ;; 0x9999999a
   \      0x39A   0x.... 0x....      LDR.W    R5,??DataTable129_12  ;; 0x3fa99999
   \      0x39E   0xE7E8             B.N      ??find_closest_mesh_point_of_type_33
   1452                  }
   1453                } // for j
   1454              } // for i
   \                     ??find_closest_mesh_point_of_type_8: (+1)
   \      0x3A0   0x9810             LDR      R0,[SP, #+64]
   1455          
   1456              return out_mesh;
   \      0x3A2   0xE9DD 0x2307      LDRD     R2,R3,[SP, #+28]
   \      0x3A6   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
   \      0x3AA   0xB011             ADD      SP,SP,#+68
   \      0x3AC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1457            }
   1458          

   \                                 In section .text, align 2, keep-with-next
   1459            void fine_tune_mesh(const float &lx, const float &ly, const bool do_ubl_mesh_map) {
   \                     _Z14fine_tune_meshRKfS0_b: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB098             SUB      SP,SP,#+96
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4615             MOV      R5,R2
   1460              if (!code_seen('R'))    // fine_tune_mesh() is special.  If no repetion count flag is specified
   \        0xC   0x2052             MOVS     R0,#+82
   \        0xE   0x.... 0x....      BL       _Z9code_seenc
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD103             BNE.N    ??fine_tune_mesh_0
   1461                repetition_cnt = 1;   // we know to do exactly one mesh location. Otherwise we use what the parser decided.
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x.... 0x....      LDR.W    R1,??DataTable129_13
   \       0x1C   0x60C8             STR      R0,[R1, #+12]
   \                     ??fine_tune_mesh_0: (+1)
   \       0x1E   0x9604             STR      R6,[SP, #+16]
   \       0x20   0x9405             STR      R4,[SP, #+20]
   1462          
   1463              mesh_index_pair location;
   1464              //uint16_t not_done[16];
   1465              unsigned int not_done[16];
   1466              int32_t round_off;
   1467          
   1468              ubl.save_ubl_active_state_and_disable();
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable128
   \       0x26   0x.... 0x....      BL       _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv
   1469              memset(not_done, 0xFF, sizeof(not_done));
   \       0x2A   0x22FF             MOVS     R2,#+255
   \       0x2C   0x2140             MOVS     R1,#+64
   \       0x2E   0xA808             ADD      R0,SP,#+32
   \       0x30   0x.... 0x....      BL       __aeabi_memset4
   1470          
   1471              LCD_MESSAGEPGM("Fine Tuning Mesh");
   \       0x34   0x2100             MOVS     R1,#+0
   \       0x36   0x.... 0x....      ADR.W    R0,?_87
   \       0x3A   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1472          
   1473              do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0x.... 0x....      LDR.W    R4,??DataTable129_11
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0xF104 0x0064      ADD      R0,R4,#+100
   \       0x4C   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   1474              do_blocking_move_to_xy(lx, ly);
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0x466A             MOV      R2,SP
   \       0x56   0x9904             LDR      R1,[SP, #+16]
   \       0x58   0x9805             LDR      R0,[SP, #+20]
   \       0x5A   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
   \       0x5E   0xF88D 0x500C      STRB     R5,[SP, #+12]
   \       0x62   0x.... 0x....      LDR.W    R10,??DataTable129_7
   1475              do {
   1476                location = find_closest_mesh_point_of_type(SET_IN_BITMAP, lx, ly, USE_NOZZLE_AS_REFERENCE, not_done, false);
   \                     ??fine_tune_mesh_1: (+1)
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0x9002             STR      R0,[SP, #+8]
   \       0x6A   0xA808             ADD      R0,SP,#+32
   \       0x6C   0x9001             STR      R0,[SP, #+4]
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x9000             STR      R0,[SP, #+0]
   \       0x72   0x9B04             LDR      R3,[SP, #+16]
   \       0x74   0x9A05             LDR      R2,[SP, #+20]
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0xA806             ADD      R0,SP,#+24
   \       0x7A   0x.... 0x....      BL       _Z31find_closest_mesh_point_of_type13MeshPointTypeRKfS1_bPjb
   1477                                                                            // It doesn't matter if the probe can't reach this
   1478                                                                            // location. This is a manual edit of the Mesh Point.
   1479                if (location.x_index < 0 && location.y_index < 0) continue; // abort if we can't find any more points.
   \       0x7E   0xF99D 0x0019      LDRSB    R0,[SP, #+25]
   \       0x82   0x4605             MOV      R5,R0
   \       0x84   0xF99D 0x6018      LDRSB    R6,[SP, #+24]
   \       0x88   0x2E00             CMP      R6,#+0
   \       0x8A   0xD502             BPL.N    ??fine_tune_mesh_2
   \       0x8C   0x2D00             CMP      R5,#+0
   \       0x8E   0xF100 0x80FD      BMI.W    ??fine_tune_mesh_3
   1480          
   1481                bit_clear(not_done, location.x_index, location.y_index);  // Mark this location as 'adjusted' so we will find a
   \                     ??fine_tune_mesh_2: (+1)
   \       0x92   0x4602             MOV      R2,R0
   \       0x94   0xB2D2             UXTB     R2,R2
   \       0x96   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \       0x9A   0x4601             MOV      R1,R0
   \       0x9C   0xA808             ADD      R0,SP,#+32
   \       0x9E   0x.... 0x....      BL       _Z9bit_clearPjhh
   1482                                                                          // different location the next time through the loop
   1483          
   1484                const float rawx = ubl.mesh_index_to_xpos[location.x_index],
   \       0xA2   0x.... 0x....      LDR.W    R0,??DataTable129_4
   \       0xA6   0xF850 0xB026      LDR      R11,[R0, R6, LSL #+2]
   1485                            rawy = ubl.mesh_index_to_ypos[location.y_index];
   \       0xAA   0x.... 0x....      LDR.W    R0,??DataTable129_5
   \       0xAE   0xF850 0x9025      LDR      R9,[R0, R5, LSL #+2]
   1486          
   1487                // TODO: Change to use `position_is_reachable` (for SCARA-compatibility)
   1488                if (!WITHIN(rawx, UBL_MESH_MIN_X, UBL_MESH_MAX_X) || !WITHIN(rawy, UBL_MESH_MIN_Y, UBL_MESH_MAX_Y)) { // In theory, we don't need this check.
   \       0xB2   0xF9B4 0x00B4      LDRSH    R0,[R4, #+180]
   \       0xB6   0x.... 0x....      BL       __aeabi_i2f
   \       0xBA   0x4607             MOV      R7,R0
   \       0xBC   0x68A0             LDR      R0,[R4, #+8]
   \       0xBE   0x4639             MOV      R1,R7
   \       0xC0   0x.... 0x....      BL       __aeabi_fadd
   \       0xC4   0x4601             MOV      R1,R0
   \       0xC6   0x4658             MOV      R0,R11
   \       0xC8   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xCC   0xF200 0x80A0      BHI.W    ??fine_tune_mesh_4
   \       0xD0   0x6960             LDR      R0,[R4, #+20]
   \       0xD2   0x4639             MOV      R1,R7
   \       0xD4   0x.... 0x....      BL       __aeabi_fsub
   \       0xD8   0x4659             MOV      R1,R11
   \       0xDA   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xDE   0xF200 0x8097      BHI.W    ??fine_tune_mesh_4
   \       0xE2   0x68E0             LDR      R0,[R4, #+12]
   \       0xE4   0x4639             MOV      R1,R7
   \       0xE6   0x.... 0x....      BL       __aeabi_fadd
   \       0xEA   0x4601             MOV      R1,R0
   \       0xEC   0x4648             MOV      R0,R9
   \       0xEE   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0xF2   0xF200 0x808D      BHI.W    ??fine_tune_mesh_4
   \       0xF6   0x69A0             LDR      R0,[R4, #+24]
   \       0xF8   0x4639             MOV      R1,R7
   \       0xFA   0x.... 0x....      BL       __aeabi_fsub
   \       0xFE   0x4649             MOV      R1,R9
   \      0x100   0x.... 0x....      BL       __aeabi_cfrcmple
   \      0x104   0xF200 0x8084      BHI.W    ??fine_tune_mesh_4
   1489                  SERIAL_ERROR_START;
   1490                  SERIAL_ERRORLNPGM("Attempt to edit off the bed."); // This really can't happen, but do the check for now
   1491                  ubl.has_control_of_lcd_panel = false;
   1492                  goto FINE_TUNE_EXIT;
   1493                }
   1494          
   1495                float new_z = ubl.z_values[location.x_index][location.y_index];
   \      0x108   0x.... 0x....      LDR.W    R0,??DataTable129
   \      0x10C   0xEB10 0x1786      ADDS     R7,R0,R6, LSL #+6
   \      0x110   0xF857 0x8025      LDR      R8,[R7, R5, LSL #+2]
   1496          
   1497                if (!isnan(new_z)) {  //can't fine tune a point that hasn't been probed
   \      0x114   0x4640             MOV      R0,R8
   \      0x116   0x.... 0x....      BL       _Z5isnanf
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD151             BNE.N    ??fine_tune_mesh_5
   1498          
   1499                  do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);    // Move the nozzle to where we are going to edit
   \      0x11E   0x2000             MOVS     R0,#+0
   \      0x120   0x9000             STR      R0,[SP, #+0]
   \      0x122   0x4669             MOV      R1,SP
   \      0x124   0xF104 0x0064      ADD      R0,R4,#+100
   \      0x128   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   1500                  do_blocking_move_to_xy(LOGICAL_X_POSITION(rawx), LOGICAL_Y_POSITION(rawy));
   \      0x12C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x130   0x4659             MOV      R1,R11
   \      0x132   0x.... 0x....      BL       __aeabi_fadd
   \      0x136   0x9002             STR      R0,[SP, #+8]
   \      0x138   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x13C   0x4649             MOV      R1,R9
   \      0x13E   0x.... 0x....      BL       __aeabi_fadd
   \      0x142   0x9001             STR      R0,[SP, #+4]
   \      0x144   0x2000             MOVS     R0,#+0
   \      0x146   0x9000             STR      R0,[SP, #+0]
   \      0x148   0x466A             MOV      R2,SP
   \      0x14A   0xA901             ADD      R1,SP,#+4
   \      0x14C   0xA802             ADD      R0,SP,#+8
   \      0x14E   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
   1501          
   1502                  round_off = (int32_t)(new_z * 1000.0);    // we chop off the last digits just to be clean. We are rounding to the
   1503                  new_z = float(round_off) / 1000.0;
   \      0x152   0x4640             MOV      R0,R8
   \      0x154   0x.... 0x....      BL       __aeabi_f2d
   \      0x158   0x2200             MOVS     R2,#+0
   \      0x15A   0x.... 0x....      LDR.W    R3,??DataTable129_14  ;; 0x408f4000
   \      0x15E   0x.... 0x....      BL       __aeabi_dmul
   \      0x162   0x.... 0x....      BL       __aeabi_d2iz
   \      0x166   0x.... 0x....      BL       __aeabi_i2f
   \      0x16A   0x.... 0x....      LDR.W    R1,??DataTable129_15  ;; 0x447a0000
   \      0x16E   0x.... 0x....      BL       __aeabi_fdiv
   \      0x172   0x4680             MOV      R8,R0
   1504          
   1505                  KEEPALIVE_STATE(PAUSED_FOR_USER);
   \      0x174   0x2003             MOVS     R0,#+3
   \      0x176   0x.... 0x....      LDR.W    R1,??DataTable129_16
   \      0x17A   0x7008             STRB     R0,[R1, #+0]
   1506                  ubl.has_control_of_lcd_panel = true;
   \      0x17C   0x.... 0x....      LDR.W    R9,??DataTable129_17
   \      0x180   0x2001             MOVS     R0,#+1
   \      0x182   0xF889 0x0000      STRB     R0,[R9, #+0]
   1507          
   1508                  if (do_ubl_mesh_map) ubl.display_map(map_type);  // show the user which point is being adjusted
   \      0x186   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \      0x18A   0x2800             CMP      R0,#+0
   \      0x18C   0xD005             BEQ.N    ??fine_tune_mesh_6
   \      0x18E   0x.... 0x....      LDR.W    R0,??DataTable129_13
   \      0x192   0x6941             LDR      R1,[R0, #+20]
   \      0x194   0x....             LDR.N    R0,??DataTable128
   \      0x196   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
   1509          
   1510                  lcd_implementation_clear();
   \                     ??fine_tune_mesh_6: (+1)
   \      0x19A   0x.... 0x....      BL       _Z24lcd_implementation_clearv
   1511          
   1512                  lcd_mesh_edit_setup(new_z);
   \      0x19E   0x4640             MOV      R0,R8
   \      0x1A0   0x.... 0x....      BL       _Z19lcd_mesh_edit_setupf
   1513          
   1514                  do {
   1515                    new_z = lcd_mesh_edit();
   \                     ??fine_tune_mesh_7: (+1)
   \      0x1A4   0x.... 0x....      BL       _Z13lcd_mesh_editv
   \      0x1A8   0x4680             MOV      R8,R0
   1516                    idle();
   \      0x1AA   0x2000             MOVS     R0,#+0
   \      0x1AC   0x.... 0x....      BL       _Z4idleb
   1517                  } while (!ubl_lcd_clicked());
   \      0x1B0   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x1B4   0x2800             CMP      R0,#+0
   \      0x1B6   0xD0F5             BEQ.N    ??fine_tune_mesh_7
   1518          
   1519                  lcd_return_to_status();
   \      0x1B8   0x.... 0x....      BL       _Z20lcd_return_to_statusv
   1520          
   1521                  // There is a race condition for the Encoder Wheel getting clicked.
   1522                  // It could get detected in lcd_mesh_edit (actually _lcd_mesh_fine_tune)
   1523                  // or here.
   1524                  ubl.has_control_of_lcd_panel = true;
   \      0x1BC   0x2001             MOVS     R0,#+1
   \      0x1BE   0xF889 0x0000      STRB     R0,[R9, #+0]
   1525                }
   1526          
   1527                const millis_t nxt = millis() + 1500UL;
   \                     ??fine_tune_mesh_5: (+1)
   \      0x1C2   0x.... 0x....      BL       HAL_GetTick
   \      0x1C6   0x4681             MOV      R9,R0
   \      0x1C8   0xF209 0x59DC      ADDW     R9,R9,#+1500
   1528                while (ubl_lcd_clicked()) { // debounce and watch for abort
   \                     ??fine_tune_mesh_8: (+1)
   \      0x1CC   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x1D0   0x2800             CMP      R0,#+0
   \      0x1D2   0xD054             BEQ.N    ??fine_tune_mesh_9
   1529                  idle();
   \      0x1D4   0x2000             MOVS     R0,#+0
   \      0x1D6   0x.... 0x....      BL       _Z4idleb
   1530                  if (ELAPSED(millis(), nxt)) {
   \      0x1DA   0x.... 0x....      BL       HAL_GetTick
   \      0x1DE   0xEBB0 0x0009      SUBS     R0,R0,R9
   \      0x1E2   0xD4F3             BMI.N    ??fine_tune_mesh_8
   1531                    lcd_return_to_status();
   \      0x1E4   0x.... 0x....      BL       _Z20lcd_return_to_statusv
   1532                    //SERIAL_PROTOCOLLNPGM("\nFine Tuning of Mesh Stopped.");
   1533                    do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \      0x1E8   0x2000             MOVS     R0,#+0
   \      0x1EA   0x9000             STR      R0,[SP, #+0]
   \      0x1EC   0x4669             MOV      R1,SP
   \      0x1EE   0xF104 0x0064      ADD      R0,R4,#+100
   \      0x1F2   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   1534                    LCD_MESSAGEPGM("Mesh Editing Stopped");
   \      0x1F6   0x2100             MOVS     R1,#+0
   \      0x1F8   0x.... 0x....      ADR.W    R0,?_89
   \      0x1FC   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1535          
   1536                    while (ubl_lcd_clicked()) idle();
   \                     ??fine_tune_mesh_10: (+1)
   \      0x200   0x.... 0x....      BL       _Z15ubl_lcd_clickedv
   \      0x204   0x2800             CMP      R0,#+0
   \      0x206   0xD00B             BEQ.N    ??fine_tune_mesh_11
   \      0x208   0x2000             MOVS     R0,#+0
   \      0x20A   0x.... 0x....      BL       _Z4idleb
   \      0x20E   0xE7F7             B.N      ??fine_tune_mesh_10
   1537          
   1538                    goto FINE_TUNE_EXIT;
   1539                  }
   1540                }
   \                     ??fine_tune_mesh_4: (+1)
   \      0x210   0x.... 0x....      LDR.W    R0,??DataTable129_18
   \      0x214   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \      0x218   0x.... 0x....      ADR.W    R0,?_88
   \      0x21C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1541          
   1542                safe_delay(20);                       // We don't want any switch noise.
   1543          
   1544                ubl.z_values[location.x_index][location.y_index] = new_z;
   1545          
   1546                lcd_implementation_clear();
   1547          
   1548              } while (location.x_index >= 0 && location.y_index >= 0 && (--repetition_cnt>0));
   1549          
   1550              FINE_TUNE_EXIT:
   1551          
   1552              ubl.has_control_of_lcd_panel = false;
   \                     ??fine_tune_mesh_11: (+1)
   \      0x220   0x2000             MOVS     R0,#+0
   \      0x222   0x.... 0x....      LDR.W    R1,??DataTable129_17
   \      0x226   0x7008             STRB     R0,[R1, #+0]
   1553              KEEPALIVE_STATE(IN_HANDLER);
   \      0x228   0x2001             MOVS     R0,#+1
   \      0x22A   0x.... 0x....      LDR.W    R1,??DataTable129_16
   \      0x22E   0x7008             STRB     R0,[R1, #+0]
   1554          
   1555              if (do_ubl_mesh_map) ubl.display_map(map_type);
   \      0x230   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xD005             BEQ.N    ??fine_tune_mesh_12
   \      0x238   0x.... 0x....      LDR.W    R0,??DataTable129_13
   \      0x23C   0x6941             LDR      R1,[R0, #+20]
   \      0x23E   0x....             LDR.N    R0,??DataTable128
   \      0x240   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
   1556              ubl.restore_ubl_active_state_and_leave();
   \                     ??fine_tune_mesh_12: (+1)
   \      0x244   0x....             LDR.N    R0,??DataTable128
   \      0x246   0x.... 0x....      BL       _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv
   1557              do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   \      0x24A   0x2000             MOVS     R0,#+0
   \      0x24C   0x9000             STR      R0,[SP, #+0]
   \      0x24E   0x4669             MOV      R1,SP
   \      0x250   0xF104 0x0064      ADD      R0,R4,#+100
   \      0x254   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
   1558          
   1559              do_blocking_move_to_xy(lx, ly);
   \      0x258   0x2000             MOVS     R0,#+0
   \      0x25A   0x9000             STR      R0,[SP, #+0]
   \      0x25C   0x466A             MOV      R2,SP
   \      0x25E   0x9904             LDR      R1,[SP, #+16]
   \      0x260   0x9805             LDR      R0,[SP, #+20]
   \      0x262   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
   1560          
   1561              LCD_MESSAGEPGM("Done Editing Mesh");
   \      0x266   0x2100             MOVS     R1,#+0
   \      0x268   0x.... 0x....      ADR.W    R0,?_90
   \      0x26C   0x.... 0x....      BL       _Z16lcd_setstatuspgmPKch
   1562              SERIAL_ECHOLNPGM("Done Editing Mesh");
   \      0x270   0x.... 0x....      ADR.W    R0,?_91
   \      0x274   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1563            }
   \      0x278   0xB019             ADD      SP,SP,#+100
   \      0x27A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??fine_tune_mesh_9: (+1)
   \      0x27E   0x2014             MOVS     R0,#+20
   \      0x280   0x.... 0x....      BL       _Z10safe_delaym
   \      0x284   0xF847 0x8025      STR      R8,[R7, R5, LSL #+2]
   \      0x288   0x.... 0x....      BL       _Z24lcd_implementation_clearv
   \                     ??fine_tune_mesh_3: (+1)
   \      0x28C   0x2E00             CMP      R6,#+0
   \      0x28E   0xD4C7             BMI.N    ??fine_tune_mesh_11
   \      0x290   0x2D00             CMP      R5,#+0
   \      0x292   0xD4C5             BMI.N    ??fine_tune_mesh_11
   \      0x294   0x.... 0x....      LDR.W    R0,??DataTable129_13
   \      0x298   0x68C1             LDR      R1,[R0, #+12]
   \      0x29A   0x1E49             SUBS     R1,R1,#+1
   \      0x29C   0x60C1             STR      R1,[R0, #+12]
   \      0x29E   0x2900             CMP      R1,#+0
   \      0x2A0   0xF73F 0xAEE1      BGT.W    ??fine_tune_mesh_1
   \      0x2A4   0xE7BC             B.N      ??fine_tune_mesh_11
   1564          
   1565            /**
   1566             * 'Smart Fill': Scan from the outward edges of the mesh towards the center.
   1567             * If an invalid location is found, use the next two points (if valid) to
   1568             * calculate a 'reasonable' value for the unprobed mesh point.
   1569             */
   1570          

   \                                 In section .text, align 2, keep-with-next
   1571            bool smart_fill_one(const uint8_t x, const uint8_t y, const int8_t xdir, const int8_t ydir) {
   \                     _Z14smart_fill_onehhaa: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4616             MOV      R6,R2
   \        0x6   0x461F             MOV      R7,R3
   1572              const int8_t x1 = x + xdir, x2 = x1 + xdir,
   \        0x8   0xEB06 0x0A00      ADD      R10,R6,R0
   \        0xC   0xFA4F 0xFA8A      SXTB     R10,R10
   1573                           y1 = y + ydir, y2 = y1 + ydir;
   \       0x10   0xEB07 0x0801      ADD      R8,R7,R1
   \       0x14   0xFA4F 0xF888      SXTB     R8,R8
   1574              // A NAN next to a pair of real values?
   1575              if (isnan(ubl.z_values[x][y]) && !isnan(ubl.z_values[x1][y1]) && !isnan(ubl.z_values[x2][y2])) {
   \       0x18   0x.... 0x....      LDR.W    R11,??DataTable129
   \       0x1C   0xEB0B 0x1480      ADD      R4,R11,R0, LSL #+6
   \       0x20   0x460D             MOV      R5,R1
   \       0x22   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \       0x26   0x.... 0x....      BL       _Z5isnanf
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD037             BEQ.N    ??smart_fill_one_0
   \       0x2E   0xEB0B 0x198A      ADD      R9,R11,R10, LSL #+6
   \       0x32   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \       0x36   0x.... 0x....      BL       _Z5isnanf
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD12F             BNE.N    ??smart_fill_one_0
   \       0x3E   0x4456             ADD      R6,R6,R10
   \       0x40   0xB276             SXTB     R6,R6
   \       0x42   0xEB0B 0x1686      ADD      R6,R11,R6, LSL #+6
   \       0x46   0x4447             ADD      R7,R7,R8
   \       0x48   0xB27F             SXTB     R7,R7
   \       0x4A   0xF856 0x0027      LDR      R0,[R6, R7, LSL #+2]
   \       0x4E   0x.... 0x....      BL       _Z5isnanf
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD123             BNE.N    ??smart_fill_one_0
   1576                if (ubl.z_values[x1][y1] < ubl.z_values[x2][y2])                  // Angled downward?
   \       0x56   0xF859 0x2028      LDR      R2,[R9, R8, LSL #+2]
   \       0x5A   0x4610             MOV      R0,R2
   \       0x5C   0xF856 0x1027      LDR      R1,[R6, R7, LSL #+2]
   \       0x60   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x64   0xD202             BCS.N    ??smart_fill_one_1
   1577                  ubl.z_values[x][y] = ubl.z_values[x1][y1];                      // Use nearest (maybe a little too high.)
   \       0x66   0xF844 0x2025      STR      R2,[R4, R5, LSL #+2]
   \       0x6A   0xE016             B.N      ??smart_fill_one_2
   1578                else
   1579                  ubl.z_values[x][y] = 2.0 * ubl.z_values[x1][y1] - ubl.z_values[x2][y2];   // Angled upward...
   \                     ??smart_fill_one_1: (+1)
   \       0x6C   0x.... 0x....      BL       __aeabi_f2d
   \       0x70   0x2200             MOVS     R2,#+0
   \       0x72   0xF04F 0x4380      MOV      R3,#+1073741824
   \       0x76   0x.... 0x....      BL       __aeabi_dmul
   \       0x7A   0x4680             MOV      R8,R0
   \       0x7C   0x4689             MOV      R9,R1
   \       0x7E   0xF856 0x0027      LDR      R0,[R6, R7, LSL #+2]
   \       0x82   0x.... 0x....      BL       __aeabi_f2d
   \       0x86   0x4602             MOV      R2,R0
   \       0x88   0x460B             MOV      R3,R1
   \       0x8A   0x4640             MOV      R0,R8
   \       0x8C   0x4649             MOV      R1,R9
   \       0x8E   0x.... 0x....      BL       __aeabi_dsub
   \       0x92   0x.... 0x....      BL       __aeabi_d2f
   \       0x96   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
   1580                return true;
   \                     ??smart_fill_one_2: (+1)
   \       0x9A   0x2001             MOVS     R0,#+1
   \       0x9C   0xE000             B.N      ??smart_fill_one_3
   1581              }
   1582              return false;
   \                     ??smart_fill_one_0: (+1)
   \       0x9E   0x2000             MOVS     R0,#+0
   \                     ??smart_fill_one_3: (+1)
   \       0xA0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1583            }
   1584          
   1585            typedef struct { uint8_t sx, ex, sy, ey; bool yfirst; } smart_fill_info;
   1586          

   \                                 In section .text, align 2, keep-with-next
   1587            void smart_fill_mesh() {
   \                     _Z15smart_fill_meshv: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   1588              const smart_fill_info info[] = {
   1589                { 0, GRID_MAX_POINTS_X,      0, GRID_MAX_POINTS_Y - 2,  false },  // Bottom of the mesh looking up
                                                       ^
Warning[Pe2361]: invalid narrowing conversion from "int" to "unsigned char"
   1590                { 0, GRID_MAX_POINTS_X,      GRID_MAX_POINTS_Y - 1, 0,  false },  // Top of the mesh looking down
                                                    ^
Warning[Pe2361]: invalid narrowing conversion from "int" to "unsigned char"
   1591                { 0, GRID_MAX_POINTS_X - 2,  0, GRID_MAX_POINTS_Y,      true  },  // Left side of the mesh looking right
                            ^
Warning[Pe2361]: invalid narrowing conversion from "int" to "unsigned char"
   1592                { GRID_MAX_POINTS_X - 1, 0,  0, GRID_MAX_POINTS_Y,      true  }   // Right side of the mesh looking left
                         ^
Warning[Pe2361]: invalid narrowing conversion from "int" to "unsigned char"
   1593              };
   \        0x6   0x4668             MOV      R0,SP
   \        0x8   0x.... 0x....      ADR.W    R1,?_109
   \        0xC   0x2214             MOVS     R2,#+20
   \        0xE   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable129_19
   \       0x16   0x7801             LDRB     R1,[R0, #+0]
   \       0x18   0x466C             MOV      R4,SP
   \       0x1A   0x7061             STRB     R1,[R4, #+1]
   \       0x1C   0x7840             LDRB     R0,[R0, #+1]
   \       0x1E   0x1E82             SUBS     R2,R0,#+2
   \       0x20   0x70E2             STRB     R2,[R4, #+3]
   \       0x22   0xF88D 0x1006      STRB     R1,[SP, #+6]
   \       0x26   0x1E42             SUBS     R2,R0,#+1
   \       0x28   0xF88D 0x2007      STRB     R2,[SP, #+7]
   \       0x2C   0x1E8A             SUBS     R2,R1,#+2
   \       0x2E   0xF88D 0x200B      STRB     R2,[SP, #+11]
   \       0x32   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \       0x36   0x1E49             SUBS     R1,R1,#+1
   \       0x38   0xF88D 0x100F      STRB     R1,[SP, #+15]
   \       0x3C   0xF88D 0x0012      STRB     R0,[SP, #+18]
   1594              for (uint8_t i = 0; i < COUNT(info); ++i) {
   \       0x40   0x2500             MOVS     R5,#+0
   \       0x42   0xE000             B.N      ??smart_fill_mesh_0
   \                     ??smart_fill_mesh_1: (+1)
   \       0x44   0x1C6D             ADDS     R5,R5,#+1
   \                     ??smart_fill_mesh_0: (+1)
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0x2804             CMP      R0,#+4
   \       0x4C   0xD244             BCS.N    ??smart_fill_mesh_2
   1595                const smart_fill_info &f = info[i];
   1596                if (f.yfirst) {
   \       0x4E   0x462E             MOV      R6,R5
   \       0x50   0xB2F6             UXTB     R6,R6
   \       0x52   0xEB06 0x0686      ADD      R6,R6,R6, LSL #+2
   \       0x56   0x4668             MOV      R0,SP
   \       0x58   0x4430             ADD      R0,R0,R6
   \       0x5A   0x7900             LDRB     R0,[R0, #+4]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD02C             BEQ.N    ??smart_fill_mesh_3
   1597                  const int8_t dir = f.ex > f.sx ? 1 : -1;
   \       0x60   0x5DA0             LDRB     R0,[R4, R6]
   \       0x62   0x4669             MOV      R1,SP
   \       0x64   0x4431             ADD      R1,R1,R6
   \       0x66   0x7849             LDRB     R1,[R1, #+1]
   \       0x68   0x4288             CMP      R0,R1
   \       0x6A   0xD201             BCS.N    ??smart_fill_mesh_4
   \       0x6C   0x2701             MOVS     R7,#+1
   \       0x6E   0xE001             B.N      ??smart_fill_mesh_5
   \                     ??smart_fill_mesh_4: (+1)
   \       0x70   0xF04F 0x37FF      MOV      R7,#-1
   1598                  for (uint8_t y = f.sy; y != f.ey; ++y)
   \                     ??smart_fill_mesh_5: (+1)
   \       0x74   0x4668             MOV      R0,SP
   \       0x76   0x4430             ADD      R0,R0,R6
   \       0x78   0xF890 0x8002      LDRB     R8,[R0, #+2]
   \       0x7C   0xE013             B.N      ??smart_fill_mesh_6
   1599                    for (uint8_t x = f.sx; x != f.ex; x += dir)
   1600                      if (smart_fill_one(x, y, dir, 0)) break;
   \                     ??smart_fill_mesh_7: (+1)
   \       0x7E   0x2300             MOVS     R3,#+0
   \       0x80   0x463A             MOV      R2,R7
   \       0x82   0x4641             MOV      R1,R8
   \       0x84   0xB2C9             UXTB     R1,R1
   \       0x86   0x4648             MOV      R0,R9
   \       0x88   0xB2C0             UXTB     R0,R0
   \       0x8A   0x.... 0x....      BL       _Z14smart_fill_onehhaa
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD107             BNE.N    ??smart_fill_mesh_8
   \       0x92   0x44B9             ADD      R9,R7,R9
   \                     ??smart_fill_mesh_9: (+1)
   \       0x94   0x4648             MOV      R0,R9
   \       0x96   0x4669             MOV      R1,SP
   \       0x98   0x4431             ADD      R1,R1,R6
   \       0x9A   0x7849             LDRB     R1,[R1, #+1]
   \       0x9C   0xB2C0             UXTB     R0,R0
   \       0x9E   0x4288             CMP      R0,R1
   \       0xA0   0xD1ED             BNE.N    ??smart_fill_mesh_7
   \                     ??smart_fill_mesh_8: (+1)
   \       0xA2   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??smart_fill_mesh_6: (+1)
   \       0xA6   0x4640             MOV      R0,R8
   \       0xA8   0x4669             MOV      R1,SP
   \       0xAA   0x4431             ADD      R1,R1,R6
   \       0xAC   0x78C9             LDRB     R1,[R1, #+3]
   \       0xAE   0xB2C0             UXTB     R0,R0
   \       0xB0   0x4288             CMP      R0,R1
   \       0xB2   0xD0C7             BEQ.N    ??smart_fill_mesh_1
   \       0xB4   0xF814 0x9006      LDRB     R9,[R4, R6]
   \       0xB8   0xE7EC             B.N      ??smart_fill_mesh_9
   1601                }
   1602                else {
   1603                  const int8_t dir = f.ey > f.sy ? 1 : -1;
   \                     ??smart_fill_mesh_3: (+1)
   \       0xBA   0x4668             MOV      R0,SP
   \       0xBC   0x4430             ADD      R0,R0,R6
   \       0xBE   0x7880             LDRB     R0,[R0, #+2]
   \       0xC0   0x4669             MOV      R1,SP
   \       0xC2   0x4431             ADD      R1,R1,R6
   \       0xC4   0x78C9             LDRB     R1,[R1, #+3]
   \       0xC6   0x4288             CMP      R0,R1
   \       0xC8   0xD201             BCS.N    ??smart_fill_mesh_10
   \       0xCA   0x2701             MOVS     R7,#+1
   \       0xCC   0xE001             B.N      ??smart_fill_mesh_11
   \                     ??smart_fill_mesh_10: (+1)
   \       0xCE   0xF04F 0x37FF      MOV      R7,#-1
   1604                   for (uint8_t x = f.sx; x != f.ex; ++x)
   \                     ??smart_fill_mesh_11: (+1)
   \       0xD2   0xF814 0x8006      LDRB     R8,[R4, R6]
   \       0xD6   0xE004             B.N      ??smart_fill_mesh_12
   1605                    for (uint8_t y = f.sy; y != f.ey; y += dir)
   1606                      if (smart_fill_one(x, y, 0, dir)) break;
   1607                }
   1608              }
   1609            }
   \                     ??smart_fill_mesh_2: (+1)
   \       0xD8   0xB005             ADD      SP,SP,#+20
   \       0xDA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??smart_fill_mesh_13: (+1)
   \       0xDE   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??smart_fill_mesh_12: (+1)
   \       0xE2   0x4640             MOV      R0,R8
   \       0xE4   0x4669             MOV      R1,SP
   \       0xE6   0x4431             ADD      R1,R1,R6
   \       0xE8   0x7849             LDRB     R1,[R1, #+1]
   \       0xEA   0xB2C0             UXTB     R0,R0
   \       0xEC   0x4288             CMP      R0,R1
   \       0xEE   0xD0A9             BEQ.N    ??smart_fill_mesh_1
   \       0xF0   0x4668             MOV      R0,SP
   \       0xF2   0x4430             ADD      R0,R0,R6
   \       0xF4   0xF890 0x9002      LDRB     R9,[R0, #+2]
   \                     ??smart_fill_mesh_14: (+1)
   \       0xF8   0x4648             MOV      R0,R9
   \       0xFA   0x4669             MOV      R1,SP
   \       0xFC   0x4431             ADD      R1,R1,R6
   \       0xFE   0x78C9             LDRB     R1,[R1, #+3]
   \      0x100   0xB2C0             UXTB     R0,R0
   \      0x102   0x4288             CMP      R0,R1
   \      0x104   0xD0EB             BEQ.N    ??smart_fill_mesh_13
   \      0x106   0x463B             MOV      R3,R7
   \      0x108   0x2200             MOVS     R2,#+0
   \      0x10A   0x4649             MOV      R1,R9
   \      0x10C   0xB2C9             UXTB     R1,R1
   \      0x10E   0x4640             MOV      R0,R8
   \      0x110   0xB2C0             UXTB     R0,R0
   \      0x112   0x.... 0x....      BL       _Z14smart_fill_onehhaa
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD1E1             BNE.N    ??smart_fill_mesh_13
   \      0x11A   0x44B9             ADD      R9,R7,R9
   \      0x11C   0xE7EC             B.N      ??smart_fill_mesh_14

   \                                 In section .text, align 4, keep-with-next
   \                     ?_109:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x01    
   1610          

   \                                 In section .text, align 2, keep-with-next
   1611            void unified_bed_leveling::tilt_mesh_based_on_probed_grid(const bool do_ubl_mesh_map) {
   \                     _ZN20unified_bed_leveling30tilt_mesh_based_on_probed_gridEb: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB0A3             SUB      SP,SP,#+140
   1612              constexpr int16_t x_min = max(MIN_PROBE_X, UBL_MESH_MIN_X),
                                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable129_19
   \        0xA   0xF9B0 0x0054      LDRSH    R0,[R0, #+84]
   \        0xE   0x.... 0x....      BL       __aeabi_i2f
   \       0x12   0x4605             MOV      R5,R0
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable129_11
   \       0x18   0x6880             LDR      R0,[R0, #+8]
   \       0x1A   0x4629             MOV      R1,R5
   \       0x1C   0x.... 0x....      BL       __aeabi_fadd
   \       0x20   0x.... 0x....      LDR.W    R4,??DataTable129_6
   \       0x24   0x6821             LDR      R1,[R4, #+0]
   \       0x26   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x2A   0xD205             BCS.N    ??tilt_mesh_based_on_probed_grid_0
   \       0x2C   0x4608             MOV      R0,R1
   \       0x2E   0x.... 0x....      BL       __aeabi_f2iz
   \       0x32   0xB200             SXTH     R0,R0
   \       0x34   0x9003             STR      R0,[SP, #+12]
   \       0x36   0xE003             B.N      ??tilt_mesh_based_on_probed_grid_1
   \                     ??tilt_mesh_based_on_probed_grid_0: (+1)
   \       0x38   0x.... 0x....      BL       __aeabi_f2iz
   \       0x3C   0xB200             SXTH     R0,R0
   \       0x3E   0x9003             STR      R0,[SP, #+12]
   1613                                x_max = min(MAX_PROBE_X, UBL_MESH_MAX_X),
                                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??tilt_mesh_based_on_probed_grid_1: (+1)
   \       0x40   0x.... 0x....      LDR.W    R0,??DataTable129_11
   \       0x44   0x6940             LDR      R0,[R0, #+20]
   \       0x46   0x4629             MOV      R1,R5
   \       0x48   0x.... 0x....      BL       __aeabi_fsub
   \       0x4C   0x4601             MOV      R1,R0
   \       0x4E   0x6860             LDR      R0,[R4, #+4]
   \       0x50   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x54   0xD203             BCS.N    ??tilt_mesh_based_on_probed_grid_2
   \       0x56   0x.... 0x....      BL       __aeabi_f2iz
   \       0x5A   0x4606             MOV      R6,R0
   \       0x5C   0xE003             B.N      ??tilt_mesh_based_on_probed_grid_3
   \                     ??tilt_mesh_based_on_probed_grid_2: (+1)
   \       0x5E   0x4608             MOV      R0,R1
   \       0x60   0x.... 0x....      BL       __aeabi_f2iz
   \       0x64   0x4606             MOV      R6,R0
   1614                                y_min = max(MIN_PROBE_Y, UBL_MESH_MIN_Y),
                                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??tilt_mesh_based_on_probed_grid_3: (+1)
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable129_11
   \       0x6A   0x68C0             LDR      R0,[R0, #+12]
   \       0x6C   0x4629             MOV      R1,R5
   \       0x6E   0x.... 0x....      BL       __aeabi_fadd
   \       0x72   0x68A1             LDR      R1,[R4, #+8]
   \       0x74   0x.... 0x....      BL       __aeabi_cfcmple
   \       0x78   0xD206             BCS.N    ??tilt_mesh_based_on_probed_grid_4
   \       0x7A   0x4608             MOV      R0,R1
   \       0x7C   0x.... 0x....      BL       __aeabi_f2iz
   \       0x80   0x4680             MOV      R8,R0
   \       0x82   0xFA0F 0xF888      SXTH     R8,R8
   \       0x86   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_5
   \                     ??tilt_mesh_based_on_probed_grid_4: (+1)
   \       0x88   0x.... 0x....      BL       __aeabi_f2iz
   \       0x8C   0x4680             MOV      R8,R0
   \       0x8E   0xFA0F 0xF888      SXTH     R8,R8
   1615                                y_max = min(MAX_PROBE_Y, UBL_MESH_MAX_Y);
                                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??tilt_mesh_based_on_probed_grid_5: (+1)
   \       0x92   0x.... 0x....      LDR.W    R0,??DataTable129_11
   \       0x96   0x6980             LDR      R0,[R0, #+24]
   \       0x98   0x4629             MOV      R1,R5
   \       0x9A   0x.... 0x....      BL       __aeabi_fsub
   \       0x9E   0x4601             MOV      R1,R0
   \       0xA0   0x68E0             LDR      R0,[R4, #+12]
   \       0xA2   0x.... 0x....      BL       __aeabi_cfcmple
   \       0xA6   0xD203             BCS.N    ??tilt_mesh_based_on_probed_grid_6
   \       0xA8   0x.... 0x....      BL       __aeabi_f2iz
   \       0xAC   0x4607             MOV      R7,R0
   \       0xAE   0xE003             B.N      ??tilt_mesh_based_on_probed_grid_7
   \                     ??tilt_mesh_based_on_probed_grid_6: (+1)
   \       0xB0   0x4608             MOV      R0,R1
   \       0xB2   0x.... 0x....      BL       __aeabi_f2iz
   \       0xB6   0x4607             MOV      R7,R0
   1616          
   1617              const float dx = float(x_max - x_min) / (grid_size - 1.0),
   \                     ??tilt_mesh_based_on_probed_grid_7: (+1)
   \       0xB8   0x.... 0x....      LDR.W    R0,??DataTable129_13
   \       0xBC   0x6980             LDR      R0,[R0, #+24]
   \       0xBE   0x.... 0x....      BL       __aeabi_i2d
   \       0xC2   0x2200             MOVS     R2,#+0
   \       0xC4   0x.... 0x....      LDR.W    R3,??DataTable129_20  ;; 0xbff00000
   \       0xC8   0x.... 0x....      BL       __aeabi_dadd
   \       0xCC   0x4604             MOV      R4,R0
   \       0xCE   0x460D             MOV      R5,R1
   \       0xD0   0xB236             SXTH     R6,R6
   \       0xD2   0x9803             LDR      R0,[SP, #+12]
   \       0xD4   0x1A36             SUBS     R6,R6,R0
   \       0xD6   0x4630             MOV      R0,R6
   \       0xD8   0x.... 0x....      BL       __aeabi_i2f
   \       0xDC   0x.... 0x....      BL       __aeabi_f2d
   \       0xE0   0x4622             MOV      R2,R4
   \       0xE2   0x462B             MOV      R3,R5
   \       0xE4   0x.... 0x....      BL       __aeabi_ddiv
   \       0xE8   0x.... 0x....      BL       __aeabi_d2f
   \       0xEC   0x9004             STR      R0,[SP, #+16]
   1618                          dy = float(y_max - y_min) / (grid_size - 1.0);
   \       0xEE   0xB23F             SXTH     R7,R7
   \       0xF0   0xEBA7 0x0708      SUB      R7,R7,R8
   \       0xF4   0x4638             MOV      R0,R7
   \       0xF6   0x.... 0x....      BL       __aeabi_i2f
   \       0xFA   0x.... 0x....      BL       __aeabi_f2d
   \       0xFE   0x4622             MOV      R2,R4
   \      0x100   0x462B             MOV      R3,R5
   \      0x102   0x.... 0x....      BL       __aeabi_ddiv
   \      0x106   0x.... 0x....      BL       __aeabi_d2f
   \      0x10A   0x4606             MOV      R6,R0
   1619          
   1620              struct linear_fit_data lsf_results;
   1621              incremental_LSF_reset(&lsf_results);
   \      0x10C   0xA80B             ADD      R0,SP,#+44
   \      0x10E   0x.... 0x....      BL       _Z21incremental_LSF_resetP15linear_fit_data
   1622          
   1623              bool zig_zag = false;
   \      0x112   0x2400             MOVS     R4,#+0
   1624              for (uint8_t ix = 0; ix < grid_size; ix++) {
   \      0x114   0x4620             MOV      R0,R4
   \      0x116   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \      0x11A   0xE00B             B.N      ??tilt_mesh_based_on_probed_grid_8
   1625                const float x = float(x_min) + ix * dx;
   1626                for (int8_t iy = 0; iy < grid_size; iy++) {
   \                     ??tilt_mesh_based_on_probed_grid_9: (+1)
   \      0x11C   0x46A8             MOV      R8,R5
   1627                  const float y = float(y_min) + dy * (zig_zag ? grid_size - 1 - iy : iy);
   1628                  float measured_z = probe_pt(LOGICAL_X_POSITION(x), LOGICAL_Y_POSITION(y), code_seen('E'), g29_verbose_level);
   1629                  #if ENABLED(DEBUG_LEVELING_FEATURE)
   1630                    if (DEBUGGING(LEVELING)) {
   1631                      SERIAL_CHAR('(');
   1632                      SERIAL_PROTOCOL_F(x, 7);
   1633                      SERIAL_CHAR(',');
   1634                      SERIAL_PROTOCOL_F(y, 7);
   1635                      SERIAL_ECHOPGM(")   logical: ");
   1636                      SERIAL_CHAR('(');
   1637                      SERIAL_PROTOCOL_F(LOGICAL_X_POSITION(x), 7);
   1638                      SERIAL_CHAR(',');
   1639                      SERIAL_PROTOCOL_F(LOGICAL_X_POSITION(y), 7);
   1640                      SERIAL_ECHOPGM(")   measured: ");
   1641                      SERIAL_PROTOCOL_F(measured_z, 7);
   1642                      SERIAL_ECHOPGM("   correction: ");
   1643                      SERIAL_PROTOCOL_F(ubl.get_z_correction(LOGICAL_X_POSITION(x), LOGICAL_Y_POSITION(y)), 7);
   1644                    }
   1645                  #endif
   1646          
   1647                  measured_z -= ubl.get_z_correction(LOGICAL_X_POSITION(x), LOGICAL_Y_POSITION(y)) /* + zprobe_zoffset */ ;
   1648          
   1649                  #if ENABLED(DEBUG_LEVELING_FEATURE)
   1650                    if (DEBUGGING(LEVELING)) {
   1651                      SERIAL_ECHOPGM("   final >>>---> ");
   1652                      SERIAL_PROTOCOL_F(measured_z, 7);
   1653                      SERIAL_EOL;
   1654                    }
   1655                  #endif
   1656          
   1657                  incremental_LSF(&lsf_results, x, y, measured_z);
   1658                }
   1659          
   1660                zig_zag ^= true;
   \      0x11E   0xF084 0x0401      EOR      R4,R4,#0x1
   \      0x122   0x1E64             SUBS     R4,R4,#+1
   \      0x124   0x41A4             SBCS     R4,R4,R4
   \      0x126   0x43E4             MVNS     R4,R4
   \      0x128   0x0FE4             LSRS     R4,R4,#+31
   \      0x12A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x12E   0x1C40             ADDS     R0,R0,#+1
   \      0x130   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \                     ??tilt_mesh_based_on_probed_grid_8: (+1)
   \      0x134   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x138   0x....             LDR.N    R1,??DataTable129_13
   \      0x13A   0x6989             LDR      R1,[R1, #+24]
   \      0x13C   0x4288             CMP      R0,R1
   \      0x13E   0xDA6D             BGE.N    ??tilt_mesh_based_on_probed_grid_10
   \      0x140   0xA803             ADD      R0,SP,#+12
   \      0x142   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \      0x146   0x.... 0x....      BL       __aeabi_i2f
   \      0x14A   0x4605             MOV      R5,R0
   \      0x14C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x150   0x.... 0x....      BL       __aeabi_ui2f
   \      0x154   0x9904             LDR      R1,[SP, #+16]
   \      0x156   0x.... 0x....      BL       __aeabi_fmul
   \      0x15A   0x4629             MOV      R1,R5
   \      0x15C   0x.... 0x....      BL       __aeabi_fadd
   \      0x160   0x4607             MOV      R7,R0
   \      0x162   0x2000             MOVS     R0,#+0
   \      0x164   0x4645             MOV      R5,R8
   \      0x166   0x4680             MOV      R8,R0
   \                     ??tilt_mesh_based_on_probed_grid_11: (+1)
   \      0x168   0x.... 0x....      LDR.W    R11,??DataTable129_13
   \      0x16C   0xF8DB 0x9018      LDR      R9,[R11, #+24]
   \      0x170   0x45C8             CMP      R8,R9
   \      0x172   0xDAD3             BGE.N    ??tilt_mesh_based_on_probed_grid_9
   \      0x174   0x2C00             CMP      R4,#+0
   \      0x176   0xD101             BNE.N    ??tilt_mesh_based_on_probed_grid_12
   \      0x178   0x46C1             MOV      R9,R8
   \      0x17A   0xE003             B.N      ??tilt_mesh_based_on_probed_grid_13
   \                     ??tilt_mesh_based_on_probed_grid_12: (+1)
   \      0x17C   0xF1A9 0x0901      SUB      R9,R9,#+1
   \      0x180   0xEBA9 0x0908      SUB      R9,R9,R8
   \                     ??tilt_mesh_based_on_probed_grid_13: (+1)
   \      0x184   0x4628             MOV      R0,R5
   \      0x186   0x.... 0x....      BL       __aeabi_i2f
   \      0x18A   0x4682             MOV      R10,R0
   \      0x18C   0x4648             MOV      R0,R9
   \      0x18E   0x.... 0x....      BL       __aeabi_i2f
   \      0x192   0x4631             MOV      R1,R6
   \      0x194   0x.... 0x....      BL       __aeabi_fmul
   \      0x198   0x4651             MOV      R1,R10
   \      0x19A   0x.... 0x....      BL       __aeabi_fadd
   \      0x19E   0x4681             MOV      R9,R0
   \      0x1A0   0x2045             MOVS     R0,#+69
   \      0x1A2   0x.... 0x....      BL       _Z9code_seenc
   \      0x1A6   0x.... 0x....      LDR.W    R10,??DataTable129_7
   \      0x1AA   0xF8DB 0x3004      LDR      R3,[R11, #+4]
   \      0x1AE   0x4602             MOV      R2,R0
   \      0x1B0   0x9200             STR      R2,[SP, #+0]
   \      0x1B2   0x469B             MOV      R11,R3
   \      0x1B4   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x1B8   0x4649             MOV      R1,R9
   \      0x1BA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1BE   0x4601             MOV      R1,R0
   \      0x1C0   0x9A00             LDR      R2,[SP, #+0]
   \      0x1C2   0x9100             STR      R1,[SP, #+0]
   \      0x1C4   0x9201             STR      R2,[SP, #+4]
   \      0x1C6   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x1CA   0x4639             MOV      R1,R7
   \      0x1CC   0x.... 0x....      BL       __aeabi_fadd
   \      0x1D0   0x465B             MOV      R3,R11
   \      0x1D2   0x9A01             LDR      R2,[SP, #+4]
   \      0x1D4   0x9900             LDR      R1,[SP, #+0]
   \      0x1D6   0x.... 0x....      BL       _Z8probe_ptffbi
   \      0x1DA   0x4683             MOV      R11,R0
   \      0x1DC   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x1E0   0x4639             MOV      R1,R7
   \      0x1E2   0x.... 0x....      BL       __aeabi_fadd
   \      0x1E6   0x9001             STR      R0,[SP, #+4]
   \      0x1E8   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x1EC   0x4649             MOV      R1,R9
   \      0x1EE   0x.... 0x....      BL       __aeabi_fadd
   \      0x1F2   0x9000             STR      R0,[SP, #+0]
   \      0x1F4   0x466A             MOV      R2,SP
   \      0x1F6   0xA901             ADD      R1,SP,#+4
   \      0x1F8   0x....             LDR.N    R0,??DataTable129_21
   \      0x1FA   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \      0x1FE   0x4601             MOV      R1,R0
   \      0x200   0x4658             MOV      R0,R11
   \      0x202   0x.... 0x....      BL       __aeabi_fsub
   \      0x206   0x4603             MOV      R3,R0
   \      0x208   0x464A             MOV      R2,R9
   \      0x20A   0x4639             MOV      R1,R7
   \      0x20C   0xA80B             ADD      R0,SP,#+44
   \      0x20E   0x.... 0x....      BL       _Z15incremental_LSFP15linear_fit_datafff
   \      0x212   0xF108 0x0801      ADD      R8,R8,#+1
   \      0x216   0xFA4F 0xF888      SXTB     R8,R8
   \      0x21A   0xE7A5             B.N      ??tilt_mesh_based_on_probed_grid_11
   1661              }
   1662          
   1663              if (finish_incremental_LSF(&lsf_results)) {
   \                     ??tilt_mesh_based_on_probed_grid_10: (+1)
   \      0x21C   0xA80B             ADD      R0,SP,#+44
   \      0x21E   0x.... 0x....      BL       _Z22finish_incremental_LSFP15linear_fit_data
   \      0x222   0x2800             CMP      R0,#+0
   \      0x224   0xD004             BEQ.N    ??tilt_mesh_based_on_probed_grid_14
   1664                SERIAL_ECHOPGM("Could not complete LSF!");
   \      0x226   0x.... 0x....      ADR.W    R0,?_101
   \      0x22A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1665                return;
   \      0x22E   0xE105             B.N      ??tilt_mesh_based_on_probed_grid_15
   1666              }
   1667          
   1668              if (g29_verbose_level > 3) {
   \                     ??tilt_mesh_based_on_probed_grid_14: (+1)
   \      0x230   0x....             LDR.N    R4,??DataTable129_22
   \      0x232   0x....             LDR.N    R5,??DataTable129_23
   \      0x234   0x....             LDR.N    R6,??DataTable129_24
   \      0x236   0x....             LDR.N    R7,??DataTable129_13
   \      0x238   0x6878             LDR      R0,[R7, #+4]
   \      0x23A   0x2804             CMP      R0,#+4
   \      0x23C   0xDB51             BLT.N    ??tilt_mesh_based_on_probed_grid_16
   1669                SERIAL_ECHOPGM("LSF Results A=");
   \      0x23E   0x.... 0x....      ADR.W    R0,?_102
   \      0x242   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1670                SERIAL_PROTOCOL_F(lsf_results.A, 7);
   \      0x246   0x9817             LDR      R0,[SP, #+92]
   \      0x248   0x.... 0x....      BL       __aeabi_f2d
   \      0x24C   0x4602             MOV      R2,R0
   \      0x24E   0x460B             MOV      R3,R1
   \      0x250   0x7830             LDRB     R0,[R6, #+0]
   \      0x252   0x2800             CMP      R0,#+0
   \      0x254   0xD105             BNE.N    ??tilt_mesh_based_on_probed_grid_17
   \      0x256   0x2007             MOVS     R0,#+7
   \      0x258   0x9000             STR      R0,[SP, #+0]
   \      0x25A   0x4628             MOV      R0,R5
   \      0x25C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x260   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_18
   \                     ??tilt_mesh_based_on_probed_grid_17: (+1)
   \      0x262   0x2007             MOVS     R0,#+7
   \      0x264   0x9000             STR      R0,[SP, #+0]
   \      0x266   0x4620             MOV      R0,R4
   \      0x268   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1671                SERIAL_ECHOPGM("  B=");
   \                     ??tilt_mesh_based_on_probed_grid_18: (+1)
   \      0x26C   0x.... 0x....      ADR.W    R0,?_103
   \      0x270   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1672                SERIAL_PROTOCOL_F(lsf_results.B, 7);
   \      0x274   0x9818             LDR      R0,[SP, #+96]
   \      0x276   0x.... 0x....      BL       __aeabi_f2d
   \      0x27A   0x4602             MOV      R2,R0
   \      0x27C   0x460B             MOV      R3,R1
   \      0x27E   0x7830             LDRB     R0,[R6, #+0]
   \      0x280   0x2800             CMP      R0,#+0
   \      0x282   0xD105             BNE.N    ??tilt_mesh_based_on_probed_grid_19
   \      0x284   0x2007             MOVS     R0,#+7
   \      0x286   0x9000             STR      R0,[SP, #+0]
   \      0x288   0x4628             MOV      R0,R5
   \      0x28A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x28E   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_20
   \                     ??tilt_mesh_based_on_probed_grid_19: (+1)
   \      0x290   0x2007             MOVS     R0,#+7
   \      0x292   0x9000             STR      R0,[SP, #+0]
   \      0x294   0x4620             MOV      R0,R4
   \      0x296   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1673                SERIAL_ECHOPGM("  D=");
   \                     ??tilt_mesh_based_on_probed_grid_20: (+1)
   \      0x29A   0x.... 0x....      ADR.W    R0,?_104
   \      0x29E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1674                SERIAL_PROTOCOL_F(lsf_results.D, 7);
   \      0x2A2   0x9819             LDR      R0,[SP, #+100]
   \      0x2A4   0x.... 0x....      BL       __aeabi_f2d
   \      0x2A8   0x4602             MOV      R2,R0
   \      0x2AA   0x460B             MOV      R3,R1
   \      0x2AC   0x7830             LDRB     R0,[R6, #+0]
   \      0x2AE   0x2800             CMP      R0,#+0
   \      0x2B0   0xD105             BNE.N    ??tilt_mesh_based_on_probed_grid_21
   \      0x2B2   0x2007             MOVS     R0,#+7
   \      0x2B4   0x9000             STR      R0,[SP, #+0]
   \      0x2B6   0x4628             MOV      R0,R5
   \      0x2B8   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x2BC   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_22
   \                     ??tilt_mesh_based_on_probed_grid_21: (+1)
   \      0x2BE   0x2007             MOVS     R0,#+7
   \      0x2C0   0x9000             STR      R0,[SP, #+0]
   \      0x2C2   0x4620             MOV      R0,R4
   \      0x2C4   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1675                SERIAL_EOL;
   \                     ??tilt_mesh_based_on_probed_grid_22: (+1)
   \      0x2C8   0x7830             LDRB     R0,[R6, #+0]
   \      0x2CA   0x2800             CMP      R0,#+0
   \      0x2CC   0xD104             BNE.N    ??tilt_mesh_based_on_probed_grid_23
   \      0x2CE   0x210A             MOVS     R1,#+10
   \      0x2D0   0x4628             MOV      R0,R5
   \      0x2D2   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x2D6   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_16
   \                     ??tilt_mesh_based_on_probed_grid_23: (+1)
   \      0x2D8   0x2200             MOVS     R2,#+0
   \      0x2DA   0x210A             MOVS     R1,#+10
   \      0x2DC   0x4620             MOV      R0,R4
   \      0x2DE   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1676              }
   1677          
   1678              vector_3 normal = vector_3(lsf_results.A, lsf_results.B, 1.0000).get_normal();
   \                     ??tilt_mesh_based_on_probed_grid_16: (+1)
   \      0x2E2   0xF04F 0x537E      MOV      R3,#+1065353216
   \      0x2E6   0x9A18             LDR      R2,[SP, #+96]
   \      0x2E8   0x9917             LDR      R1,[SP, #+92]
   \      0x2EA   0xA804             ADD      R0,SP,#+16
   \      0x2EC   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \      0x2F0   0x4601             MOV      R1,R0
   \      0x2F2   0xA801             ADD      R0,SP,#+4
   \      0x2F4   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   1679          
   1680              if (g29_verbose_level > 2) {
   \      0x2F8   0x6878             LDR      R0,[R7, #+4]
   \      0x2FA   0x2803             CMP      R0,#+3
   \      0x2FC   0xDB5B             BLT.N    ??tilt_mesh_based_on_probed_grid_24
   1681                SERIAL_ECHOPGM("bed plane normal = [");
   \      0x2FE   0x.... 0x....      ADR.W    R0,?_96
   \      0x302   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1682                SERIAL_PROTOCOL_F(normal.x, 7);
   \      0x306   0x9801             LDR      R0,[SP, #+4]
   \      0x308   0x.... 0x....      BL       __aeabi_f2d
   \      0x30C   0x4602             MOV      R2,R0
   \      0x30E   0x460B             MOV      R3,R1
   \      0x310   0x7830             LDRB     R0,[R6, #+0]
   \      0x312   0x2800             CMP      R0,#+0
   \      0x314   0xD105             BNE.N    ??tilt_mesh_based_on_probed_grid_25
   \      0x316   0x2007             MOVS     R0,#+7
   \      0x318   0x9000             STR      R0,[SP, #+0]
   \      0x31A   0x4628             MOV      R0,R5
   \      0x31C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x320   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_26
   \                     ??tilt_mesh_based_on_probed_grid_25: (+1)
   \      0x322   0x2007             MOVS     R0,#+7
   \      0x324   0x9000             STR      R0,[SP, #+0]
   \      0x326   0x4620             MOV      R0,R4
   \      0x328   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1683                SERIAL_PROTOCOLCHAR(',');
   \                     ??tilt_mesh_based_on_probed_grid_26: (+1)
   \      0x32C   0x7830             LDRB     R0,[R6, #+0]
   \      0x32E   0x2800             CMP      R0,#+0
   \      0x330   0xD104             BNE.N    ??tilt_mesh_based_on_probed_grid_27
   \      0x332   0x212C             MOVS     R1,#+44
   \      0x334   0x4628             MOV      R0,R5
   \      0x336   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x33A   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_28
   \                     ??tilt_mesh_based_on_probed_grid_27: (+1)
   \      0x33C   0x2200             MOVS     R2,#+0
   \      0x33E   0x212C             MOVS     R1,#+44
   \      0x340   0x4620             MOV      R0,R4
   \      0x342   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1684                SERIAL_PROTOCOL_F(normal.y, 7);
   \                     ??tilt_mesh_based_on_probed_grid_28: (+1)
   \      0x346   0x9802             LDR      R0,[SP, #+8]
   \      0x348   0x.... 0x....      BL       __aeabi_f2d
   \      0x34C   0x4602             MOV      R2,R0
   \      0x34E   0x460B             MOV      R3,R1
   \      0x350   0x7830             LDRB     R0,[R6, #+0]
   \      0x352   0x2800             CMP      R0,#+0
   \      0x354   0xD105             BNE.N    ??tilt_mesh_based_on_probed_grid_29
   \      0x356   0x2007             MOVS     R0,#+7
   \      0x358   0x9000             STR      R0,[SP, #+0]
   \      0x35A   0x4628             MOV      R0,R5
   \      0x35C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x360   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_30
   \                     ??tilt_mesh_based_on_probed_grid_29: (+1)
   \      0x362   0x2007             MOVS     R0,#+7
   \      0x364   0x9000             STR      R0,[SP, #+0]
   \      0x366   0x4620             MOV      R0,R4
   \      0x368   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1685                SERIAL_PROTOCOLCHAR(',');
   \                     ??tilt_mesh_based_on_probed_grid_30: (+1)
   \      0x36C   0x7830             LDRB     R0,[R6, #+0]
   \      0x36E   0x2800             CMP      R0,#+0
   \      0x370   0xD104             BNE.N    ??tilt_mesh_based_on_probed_grid_31
   \      0x372   0x212C             MOVS     R1,#+44
   \      0x374   0x4628             MOV      R0,R5
   \      0x376   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \      0x37A   0xE004             B.N      ??tilt_mesh_based_on_probed_grid_32
   \                     ??tilt_mesh_based_on_probed_grid_31: (+1)
   \      0x37C   0x2200             MOVS     R2,#+0
   \      0x37E   0x212C             MOVS     R1,#+44
   \      0x380   0x4620             MOV      R0,R4
   \      0x382   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   1686                SERIAL_PROTOCOL_F(normal.z, 7);
   \                     ??tilt_mesh_based_on_probed_grid_32: (+1)
   \      0x386   0x9803             LDR      R0,[SP, #+12]
   \      0x388   0x.... 0x....      BL       __aeabi_f2d
   \      0x38C   0x7832             LDRB     R2,[R6, #+0]
   \      0x38E   0x2A00             CMP      R2,#+0
   \      0x390   0xD107             BNE.N    ??tilt_mesh_based_on_probed_grid_33
   \      0x392   0x2207             MOVS     R2,#+7
   \      0x394   0x9200             STR      R2,[SP, #+0]
   \      0x396   0x4602             MOV      R2,R0
   \      0x398   0x460B             MOV      R3,R1
   \      0x39A   0x4628             MOV      R0,R5
   \      0x39C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \      0x3A0   0xE006             B.N      ??tilt_mesh_based_on_probed_grid_34
   \                     ??tilt_mesh_based_on_probed_grid_33: (+1)
   \      0x3A2   0x2207             MOVS     R2,#+7
   \      0x3A4   0x9200             STR      R2,[SP, #+0]
   \      0x3A6   0x4602             MOV      R2,R0
   \      0x3A8   0x460B             MOV      R3,R1
   \      0x3AA   0x4620             MOV      R0,R4
   \      0x3AC   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   1687                SERIAL_ECHOLNPGM("]");
   \                     ??tilt_mesh_based_on_probed_grid_34: (+1)
   \      0x3B0   0x....             ADR.N    R0,??DataTable129_8  ;; 0x5D, 0x0A, 0x00, 0x00
   \      0x3B2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1688              }
   1689          
   1690              matrix_3x3 rotation = matrix_3x3::create_look_at(vector_3(lsf_results.A, lsf_results.B, 1));
   \                     ??tilt_mesh_based_on_probed_grid_24: (+1)
   \      0x3B6   0xF04F 0x537E      MOV      R3,#+1065353216
   \      0x3BA   0x9A18             LDR      R2,[SP, #+96]
   \      0x3BC   0x9917             LDR      R1,[SP, #+92]
   \      0x3BE   0x4668             MOV      R0,SP
   \      0x3C0   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \      0x3C4   0x4668             MOV      R0,SP
   \      0x3C6   0xE890 0x000E      LDM      R0,{R1-R3}
   \      0x3CA   0xA81A             ADD      R0,SP,#+104
   \      0x3CC   0x.... 0x....      BL       _ZN10matrix_3x314create_look_atE8vector_3
   1691          
   1692              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \      0x3D0   0x2600             MOVS     R6,#+0
   \      0x3D2   0x....             LDR.N    R4,??DataTable129_19
   \      0x3D4   0xE02D             B.N      ??tilt_mesh_based_on_probed_grid_35
   1693                for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   1694                  float x_tmp = ubl.mesh_index_to_xpos[i],
   \                     ??tilt_mesh_based_on_probed_grid_36: (+1)
   \      0x3D6   0x....             LDR.N    R0,??DataTable129_4
   \      0x3D8   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \      0x3DC   0x900A             STR      R0,[SP, #+40]
   1695                        y_tmp = ubl.mesh_index_to_ypos[j],
   \      0x3DE   0x....             LDR.N    R0,??DataTable129_5
   \      0x3E0   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \      0x3E4   0x9009             STR      R0,[SP, #+36]
   1696                        z_tmp = ubl.z_values[i][j];
   \      0x3E6   0x....             LDR.N    R0,??DataTable129
   \      0x3E8   0xEB10 0x1586      ADDS     R5,R0,R6, LSL #+6
   \      0x3EC   0xF855 0x0027      LDR      R0,[R5, R7, LSL #+2]
   \      0x3F0   0x9008             STR      R0,[SP, #+32]
   1697          
   1698                  #if ENABLED(DEBUG_LEVELING_FEATURE)
   1699                    if (DEBUGGING(LEVELING)) {
   1700                      SERIAL_ECHOPGM("before rotation = [");
   1701                      SERIAL_PROTOCOL_F(x_tmp, 7);
   1702                      SERIAL_PROTOCOLCHAR(',');
   1703                      SERIAL_PROTOCOL_F(y_tmp, 7);
   1704                      SERIAL_PROTOCOLCHAR(',');
   1705                      SERIAL_PROTOCOL_F(z_tmp, 7);
   1706                      SERIAL_ECHOPGM("]   ---> ");
   1707                      safe_delay(20);
   1708                    }
   1709                  #endif
   1710          
   1711                  apply_rotation_xyz(rotation, x_tmp, y_tmp, z_tmp);
   \      0x3F2   0xA808             ADD      R0,SP,#+32
   \      0x3F4   0x9007             STR      R0,[SP, #+28]
   \      0x3F6   0xA809             ADD      R0,SP,#+36
   \      0x3F8   0x9006             STR      R0,[SP, #+24]
   \      0x3FA   0xA80A             ADD      R0,SP,#+40
   \      0x3FC   0x9005             STR      R0,[SP, #+20]
   \      0x3FE   0xA91A             ADD      R1,SP,#+104
   \      0x400   0xB084             SUB      SP,SP,#+16
   \      0x402   0x4668             MOV      R0,SP
   \      0x404   0x2224             MOVS     R2,#+36
   \      0x406   0x.... 0x....      BL       __aeabi_memcpy4
   \      0x40A   0xBC0F             POP      {R0-R3}
   \      0x40C   0x.... 0x....      BL       _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_
   1712          
   1713                  #if ENABLED(DEBUG_LEVELING_FEATURE)
   1714                    if (DEBUGGING(LEVELING)) {
   1715                      SERIAL_ECHOPGM("after rotation = [");
   1716                      SERIAL_PROTOCOL_F(x_tmp, 7);
   1717                      SERIAL_PROTOCOLCHAR(',');
   1718                      SERIAL_PROTOCOL_F(y_tmp, 7);
   1719                      SERIAL_PROTOCOLCHAR(',');
   1720                      SERIAL_PROTOCOL_F(z_tmp, 7);
   1721                      SERIAL_ECHOLNPGM("]");
   1722                      safe_delay(55);
   1723                    }
   1724                  #endif
   1725          
   1726                  ubl.z_values[i][j] += z_tmp - lsf_results.D;
   \      0x410   0x9808             LDR      R0,[SP, #+32]
   \      0x412   0x9919             LDR      R1,[SP, #+100]
   \      0x414   0x.... 0x....      BL       __aeabi_fsub
   \      0x418   0xF855 0x1027      LDR      R1,[R5, R7, LSL #+2]
   \      0x41C   0x.... 0x....      BL       __aeabi_fadd
   \      0x420   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
   1727                }
   \      0x424   0x1C7F             ADDS     R7,R7,#+1
   \      0x426   0xB2FF             UXTB     R7,R7
   \                     ??tilt_mesh_based_on_probed_grid_37: (+1)
   \      0x428   0x7860             LDRB     R0,[R4, #+1]
   \      0x42A   0x4287             CMP      R7,R0
   \      0x42C   0xDBD3             BLT.N    ??tilt_mesh_based_on_probed_grid_36
   \      0x42E   0x1C76             ADDS     R6,R6,#+1
   \      0x430   0xB2F6             UXTB     R6,R6
   \                     ??tilt_mesh_based_on_probed_grid_35: (+1)
   \      0x432   0x7820             LDRB     R0,[R4, #+0]
   \      0x434   0x4286             CMP      R6,R0
   \      0x436   0xDA01             BGE.N    ??tilt_mesh_based_on_probed_grid_15
   \      0x438   0x2700             MOVS     R7,#+0
   \      0x43A   0xE7F5             B.N      ??tilt_mesh_based_on_probed_grid_37
   1728              }
   1729          
   1730              #if ENABLED(DEBUG_LEVELING_FEATURE)
   1731                if (DEBUGGING(LEVELING)) {
   1732                  rotation.debug(PSTR("rotation matrix:"));
   1733                  SERIAL_ECHOPGM("LSF Results A=");
   1734                  SERIAL_PROTOCOL_F(lsf_results.A, 7);
   1735                  SERIAL_ECHOPGM("  B=");
   1736                  SERIAL_PROTOCOL_F(lsf_results.B, 7);
   1737                  SERIAL_ECHOPGM("  D=");
   1738                  SERIAL_PROTOCOL_F(lsf_results.D, 7);
   1739                  SERIAL_EOL;
   1740                  safe_delay(55);
   1741          
   1742                  SERIAL_ECHOPGM("bed plane normal = [");
   1743                  SERIAL_PROTOCOL_F(normal.x, 7);
   1744                  SERIAL_PROTOCOLCHAR(',');
   1745                  SERIAL_PROTOCOL_F(normal.y, 7);
   1746                  SERIAL_PROTOCOLCHAR(',');
   1747                  SERIAL_PROTOCOL_F(normal.z, 7);
   1748                  SERIAL_ECHOPGM("]\n");
   1749                  SERIAL_EOL;
   1750                }
   1751              #endif
   1752            }
   \                     ??tilt_mesh_based_on_probed_grid_15: (+1)
   \      0x43C   0xB023             ADD      SP,SP,#+140
   \      0x43E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110:
   \        0x0   0x20 0x4A          DC8      " J "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_1:
   \        0x0   0x20 0x5A          DC8      " Z "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_2:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling12eeprom_startE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_5:
   \        0x0   0x....'....        DC32     repeat_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_6:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_7:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_8:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_9:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_10:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_11:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_12:
   \        0x0   0x3FE0'0000        DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x44 0x65          DC8 "Default storage slot 0 selected.\012\012"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x73 0x6C    
   \              0x6F 0x74    
   \              0x20 0x30    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x4D 0x65          DC8 "Mesh zeroed.\012\012"
   \              0x73 0x68    
   \              0x20 0x7A    
   \              0x65 0x72    
   \              0x6F 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \        0x0   0x4D 0x65          DC8 "Mesh invalidated. Probing mesh.\012\012"
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x2E 0x20    
   \              0x50 0x72    
   \              0x6F 0x62    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \        0x0   0x50 0x72          DC8 "Probing Mesh Points Closest to ("
   \              0x6F 0x62    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4D 0x65    
   \              0x73 0x68    
   \              0x20 0x50    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x43 0x6C    
   \              0x6F 0x73    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x28    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \        0x0   0x29 0x2E          DC8 ").\012\012"
   \              0x0A 0x0A    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \        0x0   0x4D 0x61          DC8 "Manually probing unreachable mesh locations.\012\012"
   \              0x6E 0x75    
   \              0x61 0x6C    
   \              0x6C 0x79    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x62 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x6E 0x72    
   \              0x65 0x61    
   \              0x63 0x68    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x2F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \        0x0   0x3F 0x45          DC8 "?Error in Business Card measurement.\012\012"
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x42 0x75    
   \              0x73 0x69    
   \              0x6E 0x65    
   \              0x73 0x73    
   \              0x20 0x43    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x6D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \        0x0   0x47 0x32          DC8 "G29 P2 finished.\012"
   \              0x39 0x20    
   \              0x50 0x32    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x2E    
   \              0x0A 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \        0x0   0x47 0x32          DC8 "G29 I 999\012"
   \              0x39 0x20    
   \              0x49 0x20    
   \              0x39 0x39    
   \              0x39 0x0A    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \        0x0   0x20 0x3B          DC8 " ; X "
   \              0x20 0x58    
   \              0x20 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \        0x0   0x2C 0x20          DC8 ", Y "
   \              0x59 0x20    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \        0x0   0x4D 0x34          DC8 "M421 I "
   \              0x32 0x31    
   \              0x20 0x49    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \        0x0   0x3F 0x55          DC8 "?Use 0 to "
   \              0x73 0x65    
   \              0x20 0x30    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \        0x0   0x44 0x6F          DC8 "Done.\012\012"
   \              0x6E 0x65    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \        0x0   0x0A 0x5A          DC8 "\012Z-Offset Adjustment Stopped.\012"
   \              0x2D 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x6A 0x75    
   \              0x73 0x74    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \              0x74 0x6F    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \        0x0   0x5A 0x2D          DC8 "Z-Offset Stopped"
   \              0x4F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x20 0x53    
   \              0x74 0x6F    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111:
   \        0x0   0xED91'6873        DC32     0xed916873

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111_1:
   \        0x0   0x4023'FF7C        DC32     0x4023ff7c

   \                                 In section .text, align 4, keep-with-next
   \                     ?_92:
   \        0x0   0x23 0x20          DC8 "# of samples: "
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x73    
   \              0x3A 0x20    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_93:
   \        0x0   0x4D 0x65          DC8 "Mean Mesh Height: "
   \              0x61 0x6E    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x48 0x65    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_94:
   \        0x0   0x53 0x74          DC8 "Standard Deviation: "
   \              0x61 0x6E    
   \              0x64 0x61    
   \              0x72 0x64    
   \              0x20 0x44    
   \              0x65 0x76    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112:
   \        0x0   0x....'....        DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_1:
   \        0x0   0x47AE'147B        DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_2:
   \        0x0   0x4023'FAE1        DC32     0x4023fae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_3:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling5stateE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_4:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_5:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_6:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113:
   \        0x0   0x....'....        DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_1:
   \        0x0   0x3FC0'0001        DC32     0x3fc00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_2:
   \        0x0   0x....'....        DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ?_95:
   \        0x0   0x0A 0x4D          DC8 "\012Mesh only partially populated.\012\012"
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x6F 0x6E    
   \              0x6C 0x79    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x6C 0x79    
   \              0x20 0x70    
   \              0x6F 0x70    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ?_98:
   \        0x0   0x72 0x6F          DC8 "rotation matrix:"
   \              0x74 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x72 0x69    
   \              0x78 0x3A    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_99:
   \        0x0   0x44 0x20          DC8 "D constant: "
   \              0x63 0x6F    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_1:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_2:
   \        0x0   0x5D 0x0A          DC8      0x5D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \        0x0   0x20 0x61          DC8 " and take a measurement.\012"
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x61 0x20    
   \              0x6D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x2E    
   \              0x0A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116:
   \        0x0   0x20 0x0A          DC8      0x20, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116_1:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling24has_control_of_lcd_panelE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116_2:
   \        0x0   0x....'....        DC32     busy_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116_3:
   \        0x0   0x....'....        DC32     mksCfg+0x64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116_4:
   \        0x0   0x....'....        DC32     ubl

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \        0x0   0x50 0x6C          DC8 "Place shim under nozzle."
   \              0x61 0x63    
   \              0x65 0x20    
   \              0x73 0x68    
   \              0x69 0x6D    
   \              0x20 0x75    
   \              0x6E 0x64    
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x6F 0x7A    
   \              0x7A 0x6C    
   \              0x65 0x2E    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \        0x0   0x52 0x65          DC8 "Remove shim."
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x20 0x73    
   \              0x68 0x69    
   \              0x6D 0x2E    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \        0x0   0x42 0x75          DC8 "Business Card is: "
   \              0x73 0x69    
   \              0x6E 0x65    
   \              0x73 0x73    
   \              0x20 0x43    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \        0x0   0x6D 0x6D          DC8 "mm thick.\012"
   \              0x20 0x74    
   \              0x68 0x69    
   \              0x63 0x6B    
   \              0x2E 0x0A    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable117:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable117_1:
   \        0x0   0x....'....        DC32     repeat_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \        0x0   0x41 0x74          DC8 "Attempt to probe off the bed.\012"
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x62 0x65    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x62    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \        0x0   0x0A 0x4D          DC8 "\012Mesh only partially populated.\012"
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x6F 0x6E    
   \              0x6C 0x79    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x6C 0x79    
   \              0x20 0x70    
   \              0x6F 0x70    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \        0x0   0x4D 0x65          DC8 "Mesh Point Measured at: "
   \              0x73 0x68    
   \              0x20 0x50    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x61 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \        0x0   0x55 0x6E          DC8 "Unified Bed Leveling "
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x64 0x20    
   \              0x42 0x65    
   \              0x64 0x20    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x69    
   \              0x6E 0x67    
   \              0x20 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118:
   \        0x0   0x....'....        DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_1:
   \        0x0   0x....'....        DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_2:
   \        0x0   0x....'....        DC32     errormagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_3:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_4:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling24has_control_of_lcd_panelE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_5:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable118_6:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \        0x0   0x53 0x79          DC8 "System "
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_37:
   \        0x0   0x61 0x63          DC8 "activated.\012\012"
   \              0x74 0x69    
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119:
   \        0x0   0x64 0x65          DC8      0x64, 0x65, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119_1:
   \        0x0   0x....'....        DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119_2:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119_3:
   \        0x0   0x....'....        DC32     ?_96

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119_4:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119_5:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ?_38:
   \        0x0   0x44 0x6F          DC8 "Doing G29 UBL!"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x47 0x32    
   \              0x39 0x20    
   \              0x55 0x42    
   \              0x4C 0x21    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_39:
   \        0x0   0x3F 0x28          DC8 "?(R)epetition count invalid (1+).\012\012"
   \              0x52 0x29    
   \              0x65 0x70    
   \              0x65 0x74    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x28 0x31    
   \              0x2B 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_40:
   \        0x0   0x3F 0x28          DC8 "?(V)erbose level is implausible (0-4)\012\012"
   \              0x56 0x29    
   \              0x65 0x72    
   \              0x62 0x6F    
   \              0x73 0x65    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x69 0x6D    
   \              0x70 0x6C    
   \              0x61 0x75    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x28 0x30    
   \              0x2D 0x34    
   \              0x29 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_41:
   \        0x0   0x3F 0x28          DC8 "?(P)hase value invalid (0-6).\012\012"
   \              0x50 0x29    
   \              0x68 0x61    
   \              0x73 0x65    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x28    
   \              0x30 0x2D    
   \              0x36 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_42:
   \        0x0   0x3F 0x49          DC8 "?Invalid grid size (J) specified (2-9).\012\012"
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x67    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x28    
   \              0x4A 0x29    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x32 0x2D    
   \              0x39 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_43:
   \        0x0   0x42 0x6F          DC8 "Both X & Y locations must be specified.\012\012"
   \              0x74 0x68    
   \              0x20 0x58    
   \              0x20 0x26    
   \              0x20 0x59    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \              0x20 0x6D    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x62 0x65    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_44:
   \        0x0   0x49 0x6E          DC8 "Invalid X location specified.\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x58 0x20    
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_45:
   \        0x0   0x49 0x6E          DC8 "Invalid Y location specified.\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x59 0x20    
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_46:
   \        0x0   0x3F 0x43          DC8 3FH, 43H, 61H, 6EH, 27H, 74H, 20H, 61H
   \              0x61 0x6E    
   \              0x27 0x74    
   \              0x20 0x61    
   \        0x8   0x63 0x74          DC8 63H, 74H, 69H, 76H, 61H, 74H, 65H, 20H
   \              0x69 0x76    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 64H, 65H, 61H, 63H
   \              0x64 0x20    
   \              0x64 0x65    
   \              0x61 0x63    
   \       0x18   0x74 0x69          DC8 74H, 69H, 76H, 61H, 74H, 65H, 20H, 61H
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x20 0x61    
   \       0x20   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 73H, 61H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x73 0x61    
   \       0x28   0x6D 0x65          DC8 6DH, 65H, 20H, 74H, 69H, 6DH, 65H, 2EH
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x2E    
   \       0x30   0x0A 0x0A          DC8 0AH, 0AH, 0
   \              0x00         
   \       0x33   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_47:
   \        0x0   0x3F 0x28          DC8 3FH, 28H, 46H, 29H, 61H, 64H, 65H, 20H
   \              0x46 0x29    
   \              0x61 0x64    
   \              0x65 0x20    
   \        0x8   0x68 0x65          DC8 68H, 65H, 69H, 67H, 68H, 74H, 20H, 66H
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x20 0x66    
   \       0x10   0x6F 0x72          DC8 6FH, 72H, 20H, 42H, 65H, 64H, 20H, 4CH
   \              0x20 0x42    
   \              0x65 0x64    
   \              0x20 0x4C    
   \       0x18   0x65 0x76          DC8 65H, 76H, 65H, 6CH, 20H, 43H, 6FH, 72H
   \              0x65 0x6C    
   \              0x20 0x43    
   \              0x6F 0x72    
   \       0x20   0x72 0x65          DC8 72H, 65H, 63H, 74H, 69H, 6FH, 6EH, 20H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \       0x28   0x6E 0x6F          DC8 6EH, 6FH, 74H, 20H, 70H, 6CH, 61H, 75H
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \       0x30   0x73 0x69          DC8 73H, 69H, 62H, 6CH, 65H, 2EH, 0AH, 0AH
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x0A    
   \       0x38   0x00               DC8 0
   \       0x39   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_48:
   \        0x0   0x49 0x6E          DC8 "Invalid map type.\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x6D 0x61    
   \              0x70 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_105:
   \        0x0   0x73 0x61          DC8 73H, 61H, 76H, 65H, 5FH, 75H, 62H, 6CH
   \              0x76 0x65    
   \              0x5F 0x75    
   \              0x62 0x6C    
   \        0x8   0x5F 0x61          DC8 5FH, 61H, 63H, 74H, 69H, 76H, 65H, 5FH
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x5F    
   \       0x10   0x73 0x74          DC8 73H, 74H, 61H, 74H, 65H, 5FH, 61H, 6EH
   \              0x61 0x74    
   \              0x65 0x5F    
   \              0x61 0x6E    
   \       0x18   0x64 0x5F          DC8 64H, 5FH, 64H, 69H, 73H, 61H, 62H, 6CH
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \       0x20   0x65 0x64          DC8 65H, 64H, 28H, 29H, 20H, 63H, 61H, 6CH
   \              0x28 0x29    
   \              0x20 0x63    
   \              0x61 0x6C    
   \       0x28   0x6C 0x65          DC8 6CH, 65H, 64H, 20H, 6DH, 75H, 6CH, 74H
   \              0x64 0x20    
   \              0x6D 0x75    
   \              0x6C 0x74    
   \       0x30   0x69 0x70          DC8 69H, 70H, 6CH, 65H, 20H, 74H, 69H, 6DH
   \              0x6C 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \       0x38   0x65 0x73          DC8 65H, 73H, 20H, 69H, 6EH, 20H, 61H, 20H
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x61 0x20    
   \       0x40   0x72 0x6F          DC8 72H, 6FH, 77H, 2EH, 0AH, 0
   \              0x77 0x2E    
   \              0x0A 0x00    
   \       0x46   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_106:
   \        0x0   0x73 0x61          DC8 "save_UBL_active() error"
   \              0x76 0x65    
   \              0x5F 0x55    
   \              0x42 0x4C    
   \              0x5F 0x61    
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x28    
   \              0x29 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling12encoder_diffE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_1:
   \        0x0   0x....'....        DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_2:
   \        0x0   0x47AE'147B        DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_3:
   \        0x0   0x3F84'7AE1        DC32     0x3f847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_4:
   \        0x0   0x....'....        DC32     ubl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_5:
   \        0x0   0xC61C'3FF6        DC32     0xc61c3ff6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_6:
   \        0x0   0x....'....        DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_7:
   \        0x0   0x....'....        DC32     busy_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_8:
   \        0x0   0x4059'0000        DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_9:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling5stateE

   \                                 In section .text, align 4, keep-with-next
   \                     ?_107:
   \        0x0   0x72 0x65          DC8 72H, 65H, 73H, 74H, 6FH, 72H, 65H, 5FH
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x65 0x5F    
   \        0x8   0x75 0x62          DC8 75H, 62H, 6CH, 5FH, 61H, 63H, 74H, 69H
   \              0x6C 0x5F    
   \              0x61 0x63    
   \              0x74 0x69    
   \       0x10   0x76 0x65          DC8 76H, 65H, 5FH, 73H, 74H, 61H, 74H, 65H
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \       0x18   0x5F 0x61          DC8 5FH, 61H, 6EH, 64H, 5FH, 6CH, 65H, 61H
   \              0x6E 0x64    
   \              0x5F 0x6C    
   \              0x65 0x61    
   \       0x20   0x76 0x65          DC8 76H, 65H, 28H, 29H, 20H, 63H, 61H, 6CH
   \              0x28 0x29    
   \              0x20 0x63    
   \              0x61 0x6C    
   \       0x28   0x6C 0x65          DC8 6CH, 65H, 64H, 20H, 74H, 6FH, 6FH, 20H
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \       0x30   0x6D 0x61          DC8 6DH, 61H, 6EH, 79H, 20H, 74H, 69H, 6DH
   \              0x6E 0x79    
   \              0x20 0x74    
   \              0x69 0x6D    
   \       0x38   0x65 0x73          DC8 65H, 73H, 2EH, 0AH, 0
   \              0x2E 0x0A    
   \              0x00         
   \       0x3D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_108:
   \        0x0   0x72 0x65          DC8 "restore_UBL_active() error"
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x65 0x5F    
   \              0x55 0x42    
   \              0x4C 0x5F    
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x28 0x29    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122:
   \        0x0   0x....'....        DC32     repeat_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_1:
   \        0x0   0x42C8'0001        DC32     0x42c80001

   \                                 In section .text, align 4, keep-with-next
   \                     ?_49:
   \        0x0   0x53 0x79          DC8 "System Version 1.00 "
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x31    
   \              0x2E 0x30    
   \              0x30 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_51:
   \        0x0   0x63 0x74          DC8 "ctive.\012\012"
   \              0x69 0x76    
   \              0x65 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_52:
   \        0x0   0x4E 0x6F          DC8 "No Mesh Loaded."
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x4C 0x6F    
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_53:
   \        0x0   0x4D 0x65          DC8 "Mesh "
   \              0x73 0x68    
   \              0x20 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_54:
   \        0x0   0x20 0x4C          DC8 " Loaded."
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x2E    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_55:
   \        0x0   0x55 0x42          DC8 "UBL object count: "
   \              0x4C 0x20    
   \              0x6F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_56:
   \        0x0   0x70 0x6C          DC8 "planner.z_fade_height : "
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x72 0x2E    
   \              0x7A 0x5F    
   \              0x66 0x61    
   \              0x64 0x65    
   \              0x5F 0x68    
   \              0x65 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_57:
   \        0x0   0x7A 0x70          DC8 "zprobe_zoffset: "
   \              0x72 0x6F    
   \              0x62 0x65    
   \              0x5F 0x7A    
   \              0x6F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_58:
   \        0x0   0x7A 0x5F          DC8 "z_offset: "
   \              0x6F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_59:
   \        0x0   0x75 0x62          DC8 "ubl.eeprom_start="
   \              0x6C 0x2E    
   \              0x65 0x65    
   \              0x70 0x72    
   \              0x6F 0x6D    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x3D 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_60:
   \        0x0   0x58 0x2D          DC8 "X-Axis Mesh Points at: "
   \              0x41 0x78    
   \              0x69 0x73    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x50 0x6F    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_62:
   \        0x0   0x59 0x2D          DC8 "Y-Axis Mesh Points at: "
   \              0x41 0x78    
   \              0x69 0x73    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x50 0x6F    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_63:
   \        0x0   0x75 0x62          DC8 "ubl_state_at_invocation :"
   \              0x6C 0x5F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x5F    
   \              0x61 0x74    
   \              0x5F 0x69    
   \              0x6E 0x76    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x3A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_64:
   \        0x0   0x75 0x62          DC8 "ubl_state_recursion_chk :"
   \              0x6C 0x5F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x5F    
   \              0x72 0x65    
   \              0x63 0x75    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \              0x63 0x68    
   \              0x6B 0x20    
   \              0x3A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_65:
   \        0x0   0x46 0x72          DC8 "Free EEPROM space starts at: "
   \              0x65 0x65    
   \              0x20 0x45    
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \              0x73 0x70    
   \              0x61 0x63    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x74 0x3A    
   \              0x20 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_66:
   \        0x0   0x65 0x6E          DC8 "end of EEPROM              : "
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x20 0x45    
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_67:
   \        0x0   0x73 0x69          DC8 "sizeof(ubl) :  "
   \              0x7A 0x65    
   \              0x6F 0x66    
   \              0x28 0x75    
   \              0x62 0x6C    
   \              0x29 0x20    
   \              0x3A 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_68:
   \        0x0   0x7A 0x5F          DC8 "z_value[][] size: "
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x5B    
   \              0x5D 0x5B    
   \              0x5D 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_69:
   \        0x0   0x45 0x45          DC8 "EEPROM free for UBL: "
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x55 0x42    
   \              0x4C 0x3A    
   \              0x20 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_70:
   \        0x0   0x45 0x45          DC8 "EEPROM can hold "
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x63    
   \              0x61 0x6E    
   \              0x20 0x68    
   \              0x6F 0x6C    
   \              0x64 0x20    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_71:
   \        0x0   0x20 0x6D          DC8 " meshes.\012\012"
   \              0x65 0x73    
   \              0x68 0x65    
   \              0x73 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_72:
   \        0x0   0x73 0x69          DC8 "sizeof(ubl.state) : "
   \              0x7A 0x65    
   \              0x6F 0x66    
   \              0x28 0x75    
   \              0x62 0x6C    
   \              0x2E 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x29 0x20    
   \              0x3A 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_73:
   \        0x0   0x0A 0x47          DC8 "\012GRID_MAX_POINTS_X  "
   \              0x52 0x49    
   \              0x44 0x5F    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x50 0x4F    
   \              0x49 0x4E    
   \              0x54 0x53    
   \              0x5F 0x58    
   \              0x20 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_74:
   \        0x0   0x0A 0x47          DC8 "\012GRID_MAX_POINTS_Y  "
   \              0x52 0x49    
   \              0x44 0x5F    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x50 0x4F    
   \              0x49 0x4E    
   \              0x54 0x53    
   \              0x5F 0x59    
   \              0x20 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_75:
   \        0x0   0x0A 0x55          DC8 "\012UBL_MESH_MIN_X         "
   \              0x42 0x4C    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x4D 0x49    
   \              0x4E 0x5F    
   \              0x58 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_76:
   \        0x0   0x0A 0x55          DC8 "\012UBL_MESH_MIN_Y         "
   \              0x42 0x4C    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x4D 0x49    
   \              0x4E 0x5F    
   \              0x59 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_77:
   \        0x0   0x0A 0x55          DC8 "\012UBL_MESH_MAX_X         "
   \              0x42 0x4C    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x58 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_78:
   \        0x0   0x0A 0x55          DC8 "\012UBL_MESH_MAX_Y         "
   \              0x42 0x4C    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x59 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_79:
   \        0x0   0x0A 0x4D          DC8 "\012MESH_X_DIST        "
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x58 0x5F    
   \              0x44 0x49    
   \              0x53 0x54    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_80:
   \        0x0   0x0A 0x4D          DC8 "\012MESH_Y_DIST        "
   \              0x45 0x53    
   \              0x48 0x5F    
   \              0x59 0x5F    
   \              0x44 0x49    
   \              0x53 0x54    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_81:
   \        0x0   0x73 0x61          DC8 "sanity checks passed.\012"
   \              0x6E 0x69    
   \              0x74 0x79    
   \              0x20 0x63    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x73 0x20    
   \              0x70 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_82:
   \        0x0   0x45 0x45          DC8 "EEPROM Dump:\012"
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x44    
   \              0x75 0x6D    
   \              0x70 0x3A    
   \              0x0A 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124:
   \        0x0   0x....'....        DC32     ubl_state_at_invocation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_1:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling5stateE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_2:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling12eeprom_startE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_3:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_4:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_5:
   \        0x0   0x3A 0x20          DC8      0x3A, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_6:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_7:
   \        0x0   0x....'....        DC32     ubl_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_8:
   \        0x0   0x....'....        DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_9:
   \        0x0   0x....'....        DC32     _ZN7Planner13z_fade_heightE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_10:
   \        0x0   0x....'....        DC32     zprobe_zoffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_11:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_12:
   \        0x0   0x....'....        DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124_13:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ?_84:
   \        0x0   0x3F 0x4D          DC8 "?Mesh # required.\012\012"
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x23 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \        0x0   0x3F 0x45          DC8 "?EEPROM storage not available for use.\012\012"
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x75 0x73    
   \              0x65 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_85:
   \        0x0   0x53 0x75          DC8 "Subtracting Mesh "
   \              0x62 0x74    
   \              0x72 0x61    
   \              0x63 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4D 0x65    
   \              0x73 0x68    
   \              0x20 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_86:
   \        0x0   0x20 0x6C          DC8 " loaded from EEPROM address "
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x45    
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_87:
   \        0x0   0x46 0x69          DC8 "Fine Tuning Mesh"
   \              0x6E 0x65    
   \              0x20 0x54    
   \              0x75 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4D 0x65    
   \              0x73 0x68    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \        0x0   0x....'....        DC32     ubl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128_1:
   \        0x0   0x....'....        DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128_2:
   \        0x0   0x....'....        DC32     repeat_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128_3:
   \        0x0   0x....'....        DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_1:
   \        0x0   0x....'....        DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_2:
   \        0x0   0xC7C3'4FFF        DC32     0xc7c34fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_3:
   \        0x0   0x47C3'4FFF        DC32     0x47c34fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_4:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_5:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling18mesh_index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_6:
   \        0x0   0x....'....        DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_7:
   \        0x0   0x....'....        DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_8:
   \        0x0   0x5D 0x0A          DC8      0x5D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_9:
   \        0x0   0x9999'999A        DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_10:
   \        0x0   0x3FB9'9999        DC32     0x3fb99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_11:
   \        0x0   0x....'....        DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_12:
   \        0x0   0x3FA9'9999        DC32     0x3fa99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_13:
   \        0x0   0x....'....        DC32     repeat_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_14:
   \        0x0   0x408F'4000        DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_15:
   \        0x0   0x447A'0000        DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_16:
   \        0x0   0x....'....        DC32     busy_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_17:
   \        0x0   0x....'....        DC32     _ZN20unified_bed_leveling24has_control_of_lcd_panelE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_18:
   \        0x0   0x....'....        DC32     errormagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_19:
   \        0x0   0x....'....        DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_20:
   \        0x0   0xBFF0'0000        DC32     0xbff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_21:
   \        0x0   0x....'....        DC32     ubl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_22:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_23:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_24:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ?_88:
   \        0x0   0x41 0x74          DC8 "Attempt to edit off the bed.\012"
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x64 0x69    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x62 0x65    
   \              0x64 0x2E    
   \              0x0A 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_89:
   \        0x0   0x4D 0x65          DC8 "Mesh Editing Stopped"
   \              0x73 0x68    
   \              0x20 0x45    
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x53    
   \              0x74 0x6F    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_90:
   \        0x0   0x44 0x6F          DC8 "Done Editing Mesh"
   \              0x6E 0x65    
   \              0x20 0x45    
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_91:
   \        0x0   0x44 0x6F          DC8 "Done Editing Mesh\012"
   \              0x6E 0x65    
   \              0x20 0x45    
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x0A    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_96:
   \        0x0   0x62 0x65          DC8 "bed plane normal = ["
   \              0x64 0x20    
   \              0x70 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x72 0x6D    
   \              0x61 0x6C    
   \              0x20 0x3D    
   \              0x20 0x5B    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_101:
   \        0x0   0x43 0x6F          DC8 "Could not complete LSF!"
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x20 0x4C    
   \              0x53 0x46    
   \              0x21 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_102:
   \        0x0   0x4C 0x53          DC8 "LSF Results A="
   \              0x46 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x41 0x3D    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_103:
   \        0x0   0x20 0x20          DC8 "  B="
   \              0x42 0x3D    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_104:
   \        0x0   0x20 0x20          DC8 "  D="
   \              0x44 0x3D    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x3F 0x59          DC8 3FH, 59H, 6FH, 75H, 20H, 6EH, 65H, 65H
   \              0x6F 0x75    
   \              0x20 0x6E    
   \              0x65 0x65    
   \        0x8   0x64 0x20          DC8 64H, 20H, 74H, 6FH, 20H, 65H, 6EH, 61H
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x6E 0x61    
   \       0x10   0x62 0x6C          DC8 62H, 6CH, 65H, 20H, 79H, 6FH, 75H, 72H
   \              0x65 0x20    
   \              0x79 0x6F    
   \              0x75 0x72    
   \       0x18   0x20 0x45          DC8 20H, 45H, 45H, 50H, 52H, 4FH, 4DH, 20H
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \       0x20   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 69H, 6EH, 69H, 74H
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \       0x28   0x69 0x61          DC8 69H, 61H, 6CH, 69H, 7AH, 65H, 20H, 69H
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x69    
   \       0x30   0x74 0x0A          DC8 74H, 0AH, 0
   \              0x00         
   \       0x33   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x77 0x69          DC8 "with M502, M500, M501 in that order.\012\012"
   \              0x74 0x68    
   \              0x20 0x4D    
   \              0x35 0x30    
   \              0x32 0x2C    
   \              0x20 0x4D    
   \              0x35 0x30    
   \              0x30 0x2C    
   \              0x20 0x4D    
   \              0x35 0x30    
   \              0x31 0x20    
   \              0x69 0x6E    
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \              0x6F 0x72    
   \              0x64 0x65    
   \              0x72 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x45 0x6E          DC8 "Entire Mesh invalidated.\012\012"
   \              0x74 0x69    
   \              0x72 0x65    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x4C 0x6F          DC8 "Locations invalidated.\012\012"
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x49 0x6E          DC8 "Invalid test_pattern value. (0-2)\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x5F 0x70    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x20    
   \              0x28 0x30    
   \              0x2D 0x32    
   \              0x29 0x0A    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \        0x0   0x4C 0x6F          DC8 "Loading test_pattern values.\012\012"
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x5F 0x70    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_18:
   \        0x0   0x20 0x4A          DC8 " J "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_19:
   \        0x0   0x20 0x5A          DC8 " Z "
   \              0x20 0x00    

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_25:
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_36:
   \        0x0   0x64 0x65          DC8 "de"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_50:
   \        0x0   0x49 0x6E          DC8 "Ina"
   \              0x61 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_61:
   \        0x0   0x20 0x20          DC8 "  "
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_83:
   \        0x0   0x3A 0x20          DC8 ": "
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_97:
   \        0x0   0x5D 0x0A          DC8 "]\012"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_100:
   \        0x0   0x20 0x0A          DC8 " \012"
   \              0x00         
   \        0x3   0x00               DC8 0
   1753          
   1754          #endif // AUTO_BED_LEVELING_UBL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
         0   -> package_to_wifi
        16   -> strlen
      16   MarlinSerial::write(char const *)
         0   -> BSP_UartIfQueueTxData
        16   -> strlen
       8   MarlinSerial::write(uint8_t)
         8   -> BSP_UartIfQueueTxData
     104   find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
       104   -> __aeabi_d2f
       104   -> __aeabi_dadd
       104   -> __aeabi_dmul
       104   -> __aeabi_f2d
       104   -> __aeabi_fadd
       104   -> __aeabi_fdiv
       104   -> __aeabi_fmul
       104   -> __aeabi_fsub
       104   -> __aeabi_i2f
       104   -> is_bit_set(unsigned int *, uint8_t, uint8_t)
       104   -> isnan(float)
       104   -> sqrtf
       104 __aeabi_cfcmpeq
       104 __aeabi_cfcmple
       104 __aeabi_cfrcmple
     136   fine_tune_mesh(float const &, float const &, bool)
       136   -> HAL_GetTick
       136   -> __aeabi_d2iz
       136   -> __aeabi_dmul
       136   -> __aeabi_f2d
       136   -> __aeabi_fadd
       136   -> __aeabi_fdiv
       136   -> __aeabi_fsub
       136   -> __aeabi_i2f
       136   -> __aeabi_memset4
       136   -> bit_clear(unsigned int *, uint8_t, uint8_t)
       136   -> code_seen(char)
       136   -> do_blocking_move_to_xy(float const &, float const &, float const &)
       136   -> do_blocking_move_to_z(float const &, float const &)
       136   -> find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
       136   -> idle(bool)
       136   -> isnan(float)
       136   -> lcd_implementation_clear()
       136   -> lcd_mesh_edit()
       136   -> lcd_mesh_edit_setup(float)
       136   -> lcd_return_to_status()
       136   -> lcd_setstatuspgm(char const *, uint8_t)
       136   -> safe_delay(millis_t)
       136   -> serialprintPGM(char const *)
       136   -> ubl_lcd_clicked()
       136   -> unified_bed_leveling::display_map(int)
       136   -> unified_bed_leveling::restore_ubl_active_state_and_leave()
       136   -> unified_bed_leveling::save_ubl_active_state_and_disable()
       136 __aeabi_cfrcmple
    1048   g29_compare_current_mesh_to_stored_mesh()
      1048   -> AT24CXX_Read
      1048   -> MarlinSerial::print(char, int)
      1048   -> MarlinSerial::write(uint8_t)
      1048   -> __aeabi_fsub
      1048   -> code_has_value()
      1048   -> code_value_int()
      1048   -> hex_address(uint16_t)
      1048   -> serial_echopair_P(char const *, char const *)
      1048   -> serial_echopair_P(char const *, int)
      1048   -> serialprintPGM(char const *)
      24   g29_eeprom_dump()
        24   -> AT24CXX_Read
        24   -> MarlinSerial::print(char, int)
        24   -> MarlinSerial::write(uint8_t)
        24   -> idle(bool)
        24   -> print_hex_byte(uint8_t)
        24   -> print_hex_word(uint16_t)
        24   -> serialprintPGM(char const *)
      24   g29_parameter_parsing()
        24   -> __aeabi_fsub
        24   -> code_has_value()
        24   -> code_seen(char)
        24   -> code_value_float()
        24   -> code_value_int()
        24   -> lcd_quick_feedback()
        24   -> lcd_setstatuspgm(char const *, uint8_t)
        24   -> report_ubl_state()
        24   -> serialprintPGM(char const *)
        24   -> set_z_fade_height(float)
        24 __aeabi_cfcmple
        24 __aeabi_cfrcmple
      48   g29_what_command()
        48   -> MarlinSerial::print(char, int)
        48   -> MarlinSerial::print(double, int)
        48   -> MarlinSerial::print(int, int)
        48   -> MarlinSerial::print(unsigned char, int)
        48   -> MarlinSerial::print(unsigned int, int)
        48   -> MarlinSerial::write(uint8_t)
        48   -> __aeabi_f2d
        48   -> __aeabi_fadd
        48   -> __aeabi_fdiv
        48   -> __aeabi_fsub
        48   -> __aeabi_i2f
        48   -> hex_address(uint16_t)
        48   -> safe_delay(millis_t)
        48   -> say_ubl_name()
        48   -> serial_echopair_P(char const *, char const *)
        48   -> serial_echopair_P(char const *, float)
        48   -> serial_echopair_P(char const *, int)
         0   -> serialprintPGM(char const *)
        48   -> serialprintPGM(char const *)
        48   -> unified_bed_leveling::sanity_check()
      64   gcode_G29_UBL()
        64   -> HAL_GetTick
        64   -> MarlinSerial::print(char, int)
        64   -> MarlinSerial::print(double, int)
        64   -> MarlinSerial::write(uint8_t)
        64   -> __aeabi_d2f
        64   -> __aeabi_dadd
        64   -> __aeabi_dmul
        64   -> __aeabi_dsub
        64   -> __aeabi_f2d
        64   -> __aeabi_fadd
        64   -> __aeabi_fmul
        64   -> __aeabi_fsub
        64   -> __aeabi_i2f
        64   -> __aeabi_ui2d
        64   -> axis_unhomed_error(bool, bool, bool)
        64   -> code_has_value()
        64   -> code_seen(char)
        64   -> code_value_float()
        64   -> code_value_int()
        64   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        64   -> do_blocking_move_to_z(float const &, float const &)
        64   -> find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
        64   -> fine_tune_mesh(float const &, float const &, bool)
        64   -> g29_compare_current_mesh_to_stored_mesh()
        64   -> g29_eeprom_dump()
        64   -> g29_parameter_parsing()
        64   -> g29_what_command()
        64   -> home_all_axes()
        64   -> idle(bool)
        64   -> isnan(float)
        64   -> lcd_implementation_clear()
        64   -> lcd_quick_feedback()
        64   -> lcd_reset_alert_level()
        64   -> lcd_return_to_status()
        64   -> lcd_setstatuspgm(char const *, uint8_t)
        64   -> lcd_z_offset_edit()
        64   -> lcd_z_offset_edit_setup(float)
        64   -> manually_probe_remaining_mesh(float const &, float const &, float const &, float const &, bool)
        64   -> measure_business_card_thickness(float const &)
        64   -> probe_pt(float, float, bool, int)
        64   -> safe_delay(millis_t)
        64   -> serial_echopair_P(char const *, float)
        64   -> serial_echopair_P(char const *, int)
        64   -> serial_echopair_P(char const *, uint8_t)
        64   -> serialprintPGM(char const *)
        64   -> smart_fill_mesh()
        64   -> sqrtf
        64   -> ubl_lcd_clicked()
        64   -> unified_bed_leveling::display_map(int)
        64   -> unified_bed_leveling::find_mean_mesh_height()
        64   -> unified_bed_leveling::get_z_correction(float const &, float const &)
        64   -> unified_bed_leveling::invalidate()
        64   -> unified_bed_leveling::load_mesh(int16_t)
        64   -> unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
        64   -> unified_bed_leveling::reset()
        64   -> unified_bed_leveling::restore_ubl_active_state_and_leave()
        64   -> unified_bed_leveling::save_ubl_active_state_and_disable()
        64   -> unified_bed_leveling::shift_mesh_height()
        64   -> unified_bed_leveling::store_mesh(int16_t)
        64   -> unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
        64   -> unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
        64 __aeabi_cfcmple
        64 __aeabi_cfrcmple
       0   isnan(float)
      80   manually_probe_remaining_mesh(float const &, float const &, float const &, float const &, bool)
        80   -> HAL_Delay
        80   -> HAL_GetTick
        80   -> MarlinSerial::print(char, int)
        80   -> MarlinSerial::print(double, int)
        80   -> MarlinSerial::write(uint8_t)
        80   -> __aeabi_d2f
        80   -> __aeabi_dadd
        80   -> __aeabi_ddiv
        80   -> __aeabi_f2d
        80   -> __aeabi_fadd
        80   -> __aeabi_fmul
        80   -> __aeabi_fsub
        80   -> __aeabi_i2f
        80   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        80   -> do_blocking_move_to_z(float const &, float const &)
        80   -> find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
        80   -> idle(bool)
        80   -> lcd_quick_feedback()
        80   -> serialprintPGM(char const *)
        80   -> sqrtf
        80   -> ubl_lcd_clicked()
        80   -> unified_bed_leveling::display_map(int)
        80   -> unified_bed_leveling::restore_ubl_active_state_and_leave()
        80   -> unified_bed_leveling::save_ubl_active_state_and_disable()
        80 __aeabi_cfcmple
        80 __aeabi_cfrcmple
      40   measure_business_card_thickness(float const &)
        40   -> MarlinSerial::print(double, int)
        40   -> Stepper::synchronize()
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        40   -> do_blocking_move_to_z(float const &, float const &)
        40   -> say_and_take_a_measurement()
        40   -> serialprintPGM(char const *)
        40   -> unified_bed_leveling::restore_ubl_active_state_and_leave()
        40   -> unified_bed_leveling::save_ubl_active_state_and_disable()
        40   -> use_encoder_wheel_to_measure_point()
       8   report_ubl_state()
         8   -> say_ubl_name()
         0   -> serialprintPGM(char const *)
         8   -> serialprintPGM(char const *)
       0   say_and_take_a_measurement()
         0   -> serialprintPGM(char const *)
       0   say_ubl_name()
         0   -> serialprintPGM(char const *)
       0   serial_echopair_P(char const *, uint8_t)
         0   -> serial_echopair_P(char const *, int)
       0   serialprintPGM(char const *)
         0   -> MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
      48   smart_fill_mesh()
        48   -> __aeabi_memcpy4
        48   -> smart_fill_one(uint8_t, uint8_t, int8_t, int8_t)
      40   smart_fill_one(uint8_t, uint8_t, int8_t, int8_t)
        40   -> __aeabi_d2f
        40   -> __aeabi_dmul
        40   -> __aeabi_dsub
        40   -> __aeabi_f2d
        40   -> isnan(float)
        40 __aeabi_cfcmple
      24   unified_bed_leveling::calc_z0(float const &, float const &, float const &, float const &, float const &)
         0   -> __aeabi_fadd
        24   -> __aeabi_fdiv
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub
      48   unified_bed_leveling::find_mean_mesh_height()
        48   -> MarlinSerial::print(char, int)
        48   -> MarlinSerial::print(double, int)
        48   -> MarlinSerial::write(uint8_t)
        48   -> __aeabi_f2d
        48   -> __aeabi_fadd
        48   -> __aeabi_fdiv
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub
        48   -> __aeabi_i2f
        48   -> isnan(float)
        48   -> serial_echopair_P(char const *, int)
        48   -> serialprintPGM(char const *)
        48   -> sqrtf
      40   unified_bed_leveling::get_cell_index_x(float const &)
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
      40   unified_bed_leveling::get_cell_index_y(float const &)
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
      64   unified_bed_leveling::get_z_correction(float const &, float const &)
        64   -> MarlinSerial::print(char, int)
        64   -> MarlinSerial::write(uint8_t)
        64   -> __aeabi_fsub
        64   -> isnan(float)
        64   -> lcd_quick_feedback()
        64   -> serial_echopair_P(char const *, float)
        64   -> strcpy
        64   -> unified_bed_leveling::calc_z0(float const &, float const &, float const &, float const &, float const &)
        64   -> unified_bed_leveling::get_cell_index_x(float const &)
        64   -> unified_bed_leveling::get_cell_index_y(float const &)
      64   unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
        64   -> __aeabi_fadd
        64   -> __aeabi_fsub
        64   -> __aeabi_i2f
        64   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        64   -> find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
        64   -> idle(bool)
        64   -> lcd_quick_feedback()
        64   -> probe_pt(float, float, bool, int)
        64   -> safe_delay(millis_t)
        64   -> serialprintPGM(char const *)
        64   -> set_probe_deployed(bool)
        64   -> ubl_lcd_clicked()
        64   -> unified_bed_leveling::display_map(int)
        64   -> unified_bed_leveling::restore_ubl_active_state_and_leave()
        64   -> unified_bed_leveling::save_ubl_active_state_and_disable()
        64 __aeabi_cfcmple
        64 __aeabi_cfrcmple
       8   unified_bed_leveling::restore_ubl_active_state_and_leave()
         0   -> lcd_quick_feedback()
         8   -> lcd_setstatuspgm(char const *, uint8_t)
         8   -> serialprintPGM(char const *)
       8   unified_bed_leveling::save_ubl_active_state_and_disable()
         0   -> lcd_quick_feedback()
         8   -> lcd_setstatuspgm(char const *, uint8_t)
         8   -> serialprintPGM(char const *)
      24   unified_bed_leveling::shift_mesh_height()
        24   -> __aeabi_fadd
        24   -> isnan(float)
     200   unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
       184   -> MarlinSerial::print(char, int)
       184   -> MarlinSerial::print(double, int)
       184   -> MarlinSerial::write(uint8_t)
       184   -> __aeabi_f2d
       184   -> __aeabi_fadd
       184   -> __aeabi_fmul
       184   -> __aeabi_fsub
       184   -> __aeabi_memcpy4
       200   -> __aeabi_memcpy4
       184   -> apply_rotation_xyz(matrix_3x3, float &, float &, float &)
       184   -> matrix_3x3::create_look_at(vector_3)
       184   -> matrix_3x3::debug(char const *)
       184   -> serialprintPGM(char const *)
       184   -> vector_3::cross(vector_3, vector_3)
       184   -> vector_3::get_normal()
       184   -> vector_3::vector_3(float, float, float)
       184 __aeabi_cfcmple
     192   unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
       176   -> MarlinSerial::print(char, int)
       176   -> MarlinSerial::print(double, int)
       176   -> MarlinSerial::write(uint8_t)
       176   -> __aeabi_d2f
       176   -> __aeabi_dadd
       176   -> __aeabi_ddiv
       176   -> __aeabi_f2d
       176   -> __aeabi_f2iz
       176   -> __aeabi_fadd
       176   -> __aeabi_fmul
       176   -> __aeabi_fsub
       176   -> __aeabi_i2d
       176   -> __aeabi_i2f
       192   -> __aeabi_memcpy4
       176   -> __aeabi_ui2f
       176   -> apply_rotation_xyz(matrix_3x3, float &, float &, float &)
       176   -> code_seen(char)
       176   -> finish_incremental_LSF(linear_fit_data *)
       176   -> incremental_LSF(linear_fit_data *, float, float, float)
       176   -> incremental_LSF_reset(linear_fit_data *)
       176   -> matrix_3x3::create_look_at(vector_3)
       176   -> probe_pt(float, float, bool, int)
       176   -> serialprintPGM(char const *)
       176   -> unified_bed_leveling::get_z_correction(float const &, float const &)
       176   -> vector_3::get_normal()
       176   -> vector_3::vector_3(float, float, float)
       176 __aeabi_cfcmple
      32   use_encoder_wheel_to_measure_point()
        32   -> HAL_Delay
        32   -> __aeabi_d2f
        32   -> __aeabi_dadd
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> __aeabi_i2f
        32   -> do_blocking_move_to_z(float const &, float const &)
        32   -> idle(bool)
        32   -> ubl_lcd_clicked()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable110
       4  ??DataTable110_1
       4  ??DataTable110_10
       4  ??DataTable110_11
       4  ??DataTable110_12
       4  ??DataTable110_2
       4  ??DataTable110_3
       4  ??DataTable110_4
       4  ??DataTable110_5
       4  ??DataTable110_6
       4  ??DataTable110_7
       4  ??DataTable110_8
       4  ??DataTable110_9
       4  ??DataTable111
       4  ??DataTable111_1
       4  ??DataTable112
       4  ??DataTable112_1
       4  ??DataTable112_2
       4  ??DataTable112_3
       4  ??DataTable112_4
       4  ??DataTable112_5
       4  ??DataTable112_6
       4  ??DataTable113
       4  ??DataTable113_1
       4  ??DataTable113_2
       4  ??DataTable114
       4  ??DataTable115
       4  ??DataTable115_1
       4  ??DataTable115_2
       4  ??DataTable116
       4  ??DataTable116_1
       4  ??DataTable116_2
       4  ??DataTable116_3
       4  ??DataTable116_4
       4  ??DataTable117
       4  ??DataTable117_1
       4  ??DataTable118
       4  ??DataTable118_1
       4  ??DataTable118_2
       4  ??DataTable118_3
       4  ??DataTable118_4
       4  ??DataTable118_5
       4  ??DataTable118_6
       4  ??DataTable119
       4  ??DataTable119_1
       4  ??DataTable119_2
       4  ??DataTable119_3
       4  ??DataTable119_4
       4  ??DataTable119_5
       4  ??DataTable121
       4  ??DataTable121_1
       4  ??DataTable121_2
       4  ??DataTable121_3
       4  ??DataTable121_4
       4  ??DataTable121_5
       4  ??DataTable121_6
       4  ??DataTable121_7
       4  ??DataTable121_8
       4  ??DataTable121_9
       4  ??DataTable122
       4  ??DataTable122_1
       4  ??DataTable124
       4  ??DataTable124_1
       4  ??DataTable124_10
       4  ??DataTable124_11
       4  ??DataTable124_12
       4  ??DataTable124_13
       4  ??DataTable124_2
       4  ??DataTable124_3
       4  ??DataTable124_4
       4  ??DataTable124_5
       4  ??DataTable124_6
       4  ??DataTable124_7
       4  ??DataTable124_8
       4  ??DataTable124_9
       4  ??DataTable128
       4  ??DataTable128_1
       4  ??DataTable128_2
       4  ??DataTable128_3
       4  ??DataTable129
       4  ??DataTable129_1
       4  ??DataTable129_10
       4  ??DataTable129_11
       4  ??DataTable129_12
       4  ??DataTable129_13
       4  ??DataTable129_14
       4  ??DataTable129_15
       4  ??DataTable129_16
       4  ??DataTable129_17
       4  ??DataTable129_18
       4  ??DataTable129_19
       4  ??DataTable129_2
       4  ??DataTable129_20
       4  ??DataTable129_21
       4  ??DataTable129_22
       4  ??DataTable129_23
       4  ??DataTable129_24
       4  ??DataTable129_3
       4  ??DataTable129_4
       4  ??DataTable129_5
       4  ??DataTable129_6
       4  ??DataTable129_7
       4  ??DataTable129_8
       4  ??DataTable129_9
      52  ?_0
      40  ?_1
       8  ?_10
       4  ?_100
      24  ?_101
      16  ?_102
       8  ?_103
       8  ?_104
      72  ?_105
      24  ?_106
      64  ?_107
      28  ?_108
      20  ?_109
      48  ?_11
      40  ?_12
      20  ?_13
      44  ?_14
       8  ?_15
      12  ?_16
       8  ?_17
       4  ?_18
       4  ?_19
      28  ?_2
       8  ?_20
       8  ?_21
      12  ?_22
      32  ?_23
      20  ?_24
       1  ?_25
      28  ?_26
      28  ?_27
      16  ?_28
      20  ?_29
      28  ?_3
      12  ?_30
      32  ?_31
      36  ?_32
      28  ?_33
      24  ?_34
       8  ?_35
       4  ?_36
      16  ?_37
      16  ?_38
      36  ?_39
      36  ?_4
      40  ?_40
      32  ?_41
      44  ?_42
      44  ?_43
      32  ?_44
      32  ?_45
      52  ?_46
      60  ?_47
      20  ?_48
      24  ?_49
      32  ?_5
       4  ?_50
      12  ?_51
      16  ?_52
       8  ?_53
      12  ?_54
      20  ?_55
      28  ?_56
      20  ?_57
      12  ?_58
      20  ?_59
      36  ?_6
      24  ?_60
       4  ?_61
      24  ?_62
      28  ?_63
      28  ?_64
      32  ?_65
      32  ?_66
      16  ?_67
      20  ?_68
      24  ?_69
      16  ?_7
      20  ?_70
      12  ?_71
      24  ?_72
      24  ?_73
      24  ?_74
      28  ?_75
      28  ?_76
      28  ?_77
      28  ?_78
      24  ?_79
      36  ?_8
      24  ?_80
      24  ?_81
      16  ?_82
       4  ?_83
      20  ?_84
      20  ?_85
      32  ?_86
      20  ?_87
      32  ?_88
      24  ?_89
      36  ?_9
      20  ?_90
      20  ?_91
      16  ?_92
      20  ?_93
      24  ?_94
      36  ?_95
      24  ?_96
       4  ?_97
      20  ?_98
      16  ?_99
      64  MarlinSerial::print(char const *)
      28  MarlinSerial::write(char const *)
      12  MarlinSerial::write(uint8_t)
       1  ProbeStay
     944  find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *, bool)
     678  fine_tune_mesh(float const &, float const &, bool)
     224  g29_compare_current_mesh_to_stored_mesh()
     182  g29_eeprom_dump()
     658  g29_parameter_parsing()
    1906  g29_what_command()
    2932  gcode_G29_UBL()
      26  isnan(float)
     852  manually_probe_remaining_mesh(float const &, float const &, float const &, float const &, bool)
     326  measure_business_card_thickness(float const &)
      48  repeat_flag
          c_flag
          x_flag
          y_flag
          g29_verbose_level
          phase_value
          repetition_cnt
          storage_slot
          map_type
          grid_size
          x_pos
          y_pos
          measured_z
          card_thickness
          ubl_constant
      42  report_ubl_state()
       8  say_and_take_a_measurement()
       8  say_ubl_name()
       4  serial_echopair_P(char const *, uint8_t)
      36  serialprintPGM(char const *)
     286  smart_fill_mesh()
     164  smart_fill_one(uint8_t, uint8_t, int8_t, int8_t)
       8  ubl_state_at_invocation
          ubl_state_recursion_chk
      66  unified_bed_leveling::calc_z0(float const &, float const &, float const &, float const &, float const &)
     528  unified_bed_leveling::find_mean_mesh_height()
     148  unified_bed_leveling::get_cell_index_x(float const &)
     144  unified_bed_leveling::get_cell_index_y(float const &)
     376  unified_bed_leveling::get_z_correction(float const &, float const &)
     516  unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
      58  unified_bed_leveling::restore_ubl_active_state_and_leave()
      56  unified_bed_leveling::save_ubl_active_state_and_disable()
      74  unified_bed_leveling::shift_mesh_height()
     704  unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
    1090  unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
     134  use_encoder_wheel_to_measure_point()
      80  -- Other

 
     56 bytes in section .bss
      1 byte  in section .data
    329 bytes in section .rodata
 16 050 bytes in section .text
 
 15 146 bytes of CODE  memory (+ 904 bytes shared)
    249 bytes of CONST memory (+  80 bytes shared)
     57 bytes of DATA  memory

Errors: none
Warnings: 16
