###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:36:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\nano\Middlewares\arduino\Print.cpp
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW105F.tmp
#        (F:\nano\Middlewares\arduino\Print.cpp -D USE_HAL_DRIVER -D
#        STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D USE_MKS_WIFI
#        --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --c++ --no_exceptions --no_rtti -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\Print.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\Print.o
#
###############################################################################

F:\nano\Middlewares\arduino\Print.cpp
      1          /*
      2           Print.cpp - Base class that provides print() and println()
      3           Copyright (c) 2008 David A. Mellis.  All right reserved.
      4           
      5           This library is free software; you can redistribute it and/or
      6           modify it under the terms of the GNU Lesser General Public
      7           License as published by the Free Software Foundation; either
      8           version 2.1 of the License, or (at your option) any later version.
      9           
     10           This library is distributed in the hope that it will be useful,
     11           but WITHOUT ANY WARRANTY; without even the implied warranty of
     12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     13           Lesser General Public License for more details.
     14           
     15           You should have received a copy of the GNU Lesser General Public
     16           License along with this library; if not, write to the Free Software
     17           Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     18           
     19           Modified 23 November 2006 by David A. Mellis
     20           */
     21          
     22          #include <stdlib.h>
     23          #include <stdio.h>
     24          #include <string.h>
     25          #include <math.h>

   \                                 In section .text, align 2
   \   __interwork __softfp bool isinf(double)
   \                     _Z5isinfd: (+1)
   \   00000000   0x460B             MOV      R3,R1
   \   00000002   0x005A             LSLS     R2,R3,#+1
   \   00000004   0x1552             ASRS     R2,R2,#+21
   \   00000006   0x1C52             ADDS     R2,R2,#+1
   \   00000008   0xD001             BEQ.N    ??isinf_0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xE000             B.N      ??isinf_1
   \                     ??isinf_0: (+1)
   \   0000000E   0x031B             LSLS     R3,R3,#+12
   \                     ??isinf_1: (+1)
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD10F             BNE.N    ??isinf_2
   \   00000014   0x0048             LSLS     R0,R1,#+1
   \   00000016   0x1540             ASRS     R0,R0,#+21
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0xD001             BEQ.N    ??isinf_3
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE004             B.N      ??isinf_4
   \                     ??isinf_3: (+1)
   \   00000020   0x0309             LSLS     R1,R1,#+12
   \   00000022   0x4608             MOV      R0,R1
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x0FC0             LSRS     R0,R0,#+31
   \                     ??isinf_4: (+1)
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0x4180             SBCS     R0,R0,R0
   \   0000002E   0x43C0             MVNS     R0,R0
   \   00000030   0x0FC0             LSRS     R0,R0,#+31
   \   00000032   0x4770             BX       LR
   \                     ??isinf_2: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool isnan(double)
   \                     _Z5isnand: (+1)
   \   00000000   0x0048             LSLS     R0,R1,#+1
   \   00000002   0x1540             ASRS     R0,R0,#+21
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0xD001             BEQ.N    ??isnan_0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0xE000             B.N      ??isnan_1
   \                     ??isnan_0: (+1)
   \   0000000C   0x0309             LSLS     R1,R1,#+12
   \                     ??isnan_1: (+1)
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x1E40             SUBS     R0,R0,#+1
   \   00000012   0x4180             SBCS     R0,R0,R0
   \   00000014   0x43C0             MVNS     R0,R0
   \   00000016   0x0FC0             LSRS     R0,R0,#+31
   \   00000018   0x4770             BX       LR               ;; return
     26          #if defined(MKS_ROBIN)
     27          #else
     28          #include "Arduino.h"
     29          #endif
     30          #include "Print.h"

   \                                 In section .text, align 2
   \   __interwork __softfp unsigned int String::length() const
   \                     _ZNK6String6lengthEv: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp size_t Print::write(char const *)
   \                     _ZN5Print5writeEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0xD101             BNE.N    ??write_0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??write_0: (+1)
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x4602             MOV      R2,R0
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x682B             LDR      R3,[R5, #+0]
   \   0000001A   0x685B             LDR      R3,[R3, #+4]
   \   0000001C   0xB001             ADD      SP,SP,#+4
   \   0000001E   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000022   0x4718             BX       R3
     31          
     32          // Public Methods //////////////////////////////////////////////////////////////
     33          
     34          /* default implementation: may be overridden */

   \                                 In section .text, align 2, keep-with-next
     35          size_t Print::write(const uint8_t *buffer, size_t size)
     36          {
   \                     _ZN5Print5writeEPKhj: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     37            size_t n = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE006             B.N      ??write_1
     38            while (size--) {
     39              n += write(*buffer++);
   \                     ??write_2: (+1)
   \   0000000C   0xF815 0x1B01      LDRB     R1,[R5], #+1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x6822             LDR      R2,[R4, #+0]
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0x4790             BLX      R2
   \   00000018   0x19C7             ADDS     R7,R0,R7
     40            }
   \                     ??write_1: (+1)
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x1E46             SUBS     R6,R0,#+1
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F4             BNE.N    ??write_2
     41            return n;
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          size_t Print::print(const __FlashStringHelper *ifsh)
     45          {
     46            return print(reinterpret_cast<const char *>(ifsh));
   \                     _ZN5Print5printEPK19__FlashStringHelper: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEPKc
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          size_t Print::print(const String &s)
     50          {
   \                     _ZN5Print5printERK6String: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     51            size_t n = 0;
   \   00000008   0x2600             MOVS     R6,#+0
     52            for (uint16_t i = 0; i < s.length(); i++) {
   \   0000000A   0x4637             MOV      R7,R6
   \   0000000C   0xE00B             B.N      ??print_0
     53              n += write(s[i]);
   \                     ??print_1: (+1)
   \   0000000E   0x4641             MOV      R1,R8
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       _ZNK6StringixEj
   \   00000016   0x4601             MOV      R1,R0
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x6822             LDR      R2,[R4, #+0]
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x4790             BLX      R2
   \   00000022   0x1986             ADDS     R6,R0,R6
     54            }
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
   \                     ??print_0: (+1)
   \   00000026   0x46B8             MOV      R8,R7
   \   00000028   0xFA1F 0xF888      UXTH     R8,R8
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       _ZNK6String6lengthEv
   \   00000032   0x4580             CMP      R8,R0
   \   00000034   0xD3EB             BCC.N    ??print_1
     55            return n;
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          size_t Print::print(const char str[])
     59          {
     60            return write(str);
   \                     _ZN5Print5printEPKc: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN5Print5writeEPKc
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          size_t Print::print(char c)
     64          {
     65            return write(c);
   \                     _ZN5Print5printEc: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0x4710             BX       R2
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          size_t Print::print(unsigned char b, int base)
     69          {
     70            return print((unsigned long) b, base);
   \                     _ZN5Print5printEhi: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEmi
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          size_t Print::print(int n, int base)
     74          {
     75            return print((long) n, base);
   \                     _ZN5Print5printEii: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEli
     76          }
     77          

   \                                 In section .text, align 2, keep-with-next
     78          size_t Print::print(unsigned int n, int base)
     79          {
     80            return print((unsigned long) n, base);
   \                     _ZN5Print5printEji: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEmi
     81          }
     82          

   \                                 In section .text, align 2, keep-with-next
     83          size_t Print::print(long n, int base)
     84          {
   \                     _ZN5Print5printEli: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     85            if (base == 0) {
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD105             BNE.N    ??print_2
     86              return write(n);
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x6822             LDR      R2,[R4, #+0]
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000014   0x4710             BX       R2
     87            } else if (base == 10) {
   \                     ??print_2: (+1)
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xD112             BNE.N    ??print_3
     88              if (n < 0) {
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD50C             BPL.N    ??print_4
     89                int t = print('-');
   \   0000001E   0x212D             MOVS     R1,#+45
   \   00000020   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000024   0x4606             MOV      R6,R0
     90                n = -n;
     91                return printNumber(n, 10) + t;
   \   00000026   0x220A             MOVS     R2,#+10
   \   00000028   0x426D             RSBS     R5,R5,#+0
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       _ZN5Print11printNumberEmh
   \   00000032   0x1836             ADDS     R6,R6,R0
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0xBD70             POP      {R4-R6,PC}
     92              }
     93              return printNumber(n, 10);
   \                     ??print_4: (+1)
   \   00000038   0x220A             MOVS     R2,#+10
   \   0000003A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003E   0x....             B.N      _ZN5Print11printNumberEmh
     94            } else {
     95              return printNumber(n, base);
   \                     ??print_3: (+1)
   \   00000040   0xB2D2             UXTB     R2,R2
   \   00000042   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000046   0x....             B.N      _ZN5Print11printNumberEmh
     96            }
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          size_t Print::print(unsigned long n, int base)
    100          {
    101            if (base == 0) return write(n);
   \                     _ZN5Print5printEmi: (+1)
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xD103             BNE.N    ??print_5
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4710             BX       R2
    102            else return printNumber(n, base);
   \                     ??print_5: (+1)
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0x....             B.N      _ZN5Print11printNumberEmh
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          size_t Print::print(double n, int digits)
    106          {
   \                     _ZN5Print5printEdi: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x9902             LDR      R1,[SP, #+8]
    107            return printFloat(n, digits);
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x.... 0x....      BL       _ZN5Print10printFloatEdh
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          size_t Print::println(const __FlashStringHelper *ifsh)
    111          {
   \                     _ZN5Print7printlnEPK19__FlashStringHelper: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    112            size_t n = print(ifsh);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEPK19__FlashStringHelper
   \   00000008   0x4605             MOV      R5,R0
    113            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    114            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    115          }
    116          

   \                                 In section .text, align 2, keep-with-next
    117          size_t Print::print(const Printable& x)
    118          {
   \                     _ZN5Print5printERK9Printable: (+1)
   \   00000000   0x460A             MOV      R2,R1
    119            return x.printTo(*this);
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4710             BX       R2
    120          }
    121          

   \                                 In section .text, align 2, keep-with-next
    122          size_t Print::println(void)
    123          {
   \                     _ZN5Print7printlnEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    124            size_t n = print('\r');
   \   00000004   0x210D             MOVS     R1,#+13
   \   00000006   0x.... 0x....      BL       _ZN5Print5printEc
   \   0000000A   0x4605             MOV      R5,R0
    125            n += print('\n');
   \   0000000C   0x210A             MOVS     R1,#+10
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000014   0x1945             ADDS     R5,R0,R5
    126            return n;
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          size_t Print::println(const String &s)
    130          {
   \                     _ZN5Print7printlnERK6String: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    131            size_t n = print(s);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printERK6String
   \   00000008   0x4605             MOV      R5,R0
    132            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    133            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    134          }
    135          

   \                                 In section .text, align 2, keep-with-next
    136          size_t Print::println(const char c[])
    137          {
   \                     _ZN5Print7printlnEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    138            size_t n = print(c);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEPKc
   \   00000008   0x4605             MOV      R5,R0
    139            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    140            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          size_t Print::println(char c)
    144          {
   \                     _ZN5Print7printlnEc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    145            size_t n = print(c);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000008   0x4605             MOV      R5,R0
    146            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    147            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    148          }
    149          

   \                                 In section .text, align 2, keep-with-next
    150          size_t Print::println(unsigned char b, int base)
    151          {
   \                     _ZN5Print7printlnEhi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    152            size_t n = print(b, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEhi
   \   00000008   0x4605             MOV      R5,R0
    153            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    154            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          size_t Print::println(int num, int base)
    158          {
   \                     _ZN5Print7printlnEii: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    159            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEii
   \   00000008   0x4605             MOV      R5,R0
    160            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    161            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          size_t Print::println(unsigned int num, int base)
    165          {
   \                     _ZN5Print7printlnEji: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    166            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEji
   \   00000008   0x4605             MOV      R5,R0
    167            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    168            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    169          }
    170          

   \                                 In section .text, align 2, keep-with-next
    171          size_t Print::println(long num, int base)
    172          {
   \                     _ZN5Print7printlnEli: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    173            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEli
   \   00000008   0x4605             MOV      R5,R0
    174            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    175            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          size_t Print::println(unsigned long num, int base)
    179          {
   \                     _ZN5Print7printlnEmi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    180            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEmi
   \   00000008   0x4605             MOV      R5,R0
    181            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    182            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          size_t Print::println(double num, int digits)
    186          {
   \                     _ZN5Print7printlnEdi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x9804             LDR      R0,[SP, #+16]
    187            size_t n = print(num, digits);
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN5Print5printEdi
   \   0000000E   0x4605             MOV      R5,R0
    188            n += println();
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000016   0x1945             ADDS     R5,R0,R5
    189            return n;
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    190          }
    191          

   \                                 In section .text, align 2, keep-with-next
    192          size_t Print::println(const Printable& x)
    193          {
   \                     _ZN5Print7printlnERK9Printable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    194            size_t n = print(x);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printERK9Printable
   \   00000008   0x4605             MOV      R5,R0
    195            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1945             ADDS     R5,R0,R5
    196            return n;
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    197          }
    198          
    199          // Private Methods /////////////////////////////////////////////////////////////
    200          

   \                                 In section .text, align 2, keep-with-next
    201          size_t Print::printNumber(unsigned long n, uint8_t base) {
   \                     _ZN5Print11printNumberEmh: (+1)
   \   00000000   0xB578             PUSH     {R3-R6,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x460B             MOV      R3,R1
    202            char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
    203            char *str = &buf[sizeof(buf) - 1];
   \   00000006   0xA908             ADD      R1,SP,#+32
    204          
    205            *str = '\0';
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xF88D 0x4020      STRB     R4,[SP, #+32]
    206          
    207            // prevent crash if called with base == 1
    208            if (base < 2) base = 10;
   \   0000000E   0x4614             MOV      R4,R2
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xDA00             BGE.N    ??printNumber_0
   \   00000014   0x220A             MOVS     R2,#+10
    209          
    210            do {
    211              unsigned long m = n;
   \                     ??printNumber_0: (+1)
   \   00000016   0x461D             MOV      R5,R3
    212              n /= base;
   \   00000018   0x4614             MOV      R4,R2
   \   0000001A   0xFBB3 0xF3F4      UDIV     R3,R3,R4
    213              char c = m - base * n;
   \   0000001E   0xFB03 0x5414      MLS      R4,R3,R4,R5
    214              *--str = c < 10 ? c + '0' : c + 'A' - 10;
   \   00000022   0x1E4D             SUBS     R5,R1,#+1
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4626             MOV      R6,R4
   \   00000028   0xB276             SXTB     R6,R6
   \   0000002A   0x2E0A             CMP      R6,#+10
   \   0000002C   0xDA01             BGE.N    ??printNumber_1
   \   0000002E   0x3430             ADDS     R4,R4,#+48
   \   00000030   0xE000             B.N      ??printNumber_2
   \                     ??printNumber_1: (+1)
   \   00000032   0x3437             ADDS     R4,R4,#+55
   \                     ??printNumber_2: (+1)
   \   00000034   0x702C             STRB     R4,[R5, #+0]
    215            } while(n);
   \   00000036   0x2B00             CMP      R3,#+0
   \   00000038   0xD1ED             BNE.N    ??printNumber_0
    216          
    217            return write(str);
   \   0000003A   0x.... 0x....      BL       _ZN5Print5writeEPKc
   \   0000003E   0xB00A             ADD      SP,SP,#+40
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    218          }
    219          

   \                                 In section .text, align 2, keep-with-next
    220          size_t Print::printFloat(double number, uint8_t digits) 
    221          { 
   \                     _ZN5Print10printFloatEdh: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
    222            size_t n = 0;
   \   0000000A   0x2600             MOVS     R6,#+0
    223            
    224            if (isnan(number)) return print("nan");
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x.... 0x....      BL       _Z5isnand
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD004             BEQ.N    ??printFloat_0
   \   00000018   0x....             ADR.N    R1,??DataTable5  ;; "nan"
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000020   0x....             B.N      _ZN5Print5printEPKc
    225            if (isinf(number)) return print("inf");
   \                     ??printFloat_0: (+1)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _Z5isinfd
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD004             BEQ.N    ??printFloat_1
   \   0000002E   0x....             ADR.N    R1,??DataTable5_1  ;; "inf"
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000036   0x....             B.N      _ZN5Print5printEPKc
    226            if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   \                     ??printFloat_1: (+1)
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x....             LDR.N    R2,??DataTable5_4  ;; 0xe0000001
   \   0000003E   0x....             LDR.N    R3,??DataTable5_5  ;; 0x41efffff
   \   00000040   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000044   0xD804             BHI.N    ??printFloat_2
   \   00000046   0x....             ADR.N    R1,??DataTable5_2  ;; "ovf"
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   0000004E   0x....             B.N      _ZN5Print5printEPKc
    227            if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   \                     ??printFloat_2: (+1)
   \   00000050   0xF04F 0x4260      MOV      R2,#-536870912
   \   00000054   0x....             LDR.N    R3,??DataTable5_6  ;; 0xc1efffff
   \   00000056   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000005A   0xD204             BCS.N    ??printFloat_3
   \   0000005C   0x....             ADR.N    R1,??DataTable5_2  ;; "ovf"
   \   0000005E   0x4640             MOV      R0,R8
   \   00000060   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000064   0x....             B.N      _ZN5Print5printEPKc
    228            
    229            // Handle negative numbers
    230            if (number < 0.0)
   \                     ??printFloat_3: (+1)
   \   00000066   0x4632             MOV      R2,R6
   \   00000068   0x4613             MOV      R3,R2
   \   0000006A   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000006E   0xD206             BCS.N    ??printFloat_4
    231            {
    232               n += print('-');
   \   00000070   0x212D             MOVS     R1,#+45
   \   00000072   0x4640             MOV      R0,R8
   \   00000074   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000078   0x4606             MOV      R6,R0
    233               number = -number;
   \   0000007A   0xF085 0x4500      EOR      R5,R5,#0x80000000
   \                     ??printFloat_4: (+1)
   \   0000007E   0x9F08             LDR      R7,[SP, #+32]
    234            }
    235          
    236            // Round correctly so that print(1.999, 2) prints as "2.00"
    237            double rounding = 0.5;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x....             LDR.N    R1,??DataTable5_7  ;; 0x3fe00000
    238            for (uint8_t i=0; i<digits; ++i)
   \   00000084   0x4681             MOV      R9,R0
   \   00000086   0xE005             B.N      ??printFloat_5
    239              rounding /= 10.0;
   \                     ??printFloat_6: (+1)
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x....             LDR.N    R3,??DataTable5_8  ;; 0x40240000
   \   0000008C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000090   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??printFloat_5: (+1)
   \   00000094   0x464A             MOV      R2,R9
   \   00000096   0x463B             MOV      R3,R7
   \   00000098   0xB2D2             UXTB     R2,R2
   \   0000009A   0x429A             CMP      R2,R3
   \   0000009C   0xD3F4             BCC.N    ??printFloat_6
    240            
    241            number += rounding;
   \   0000009E   0x4622             MOV      R2,R4
   \   000000A0   0x462B             MOV      R3,R5
   \   000000A2   0x.... 0x....      BL       __aeabi_dadd
   \   000000A6   0x4604             MOV      R4,R0
   \   000000A8   0x460D             MOV      R5,R1
    242          
    243            // Extract the integer part of the number and print it
    244            unsigned long int_part = (unsigned long)number;
   \   000000AA   0x.... 0x....      BL       __aeabi_d2uiz
   \   000000AE   0x4681             MOV      R9,R0
    245            double remainder = number - (double)int_part;
   \   000000B0   0x.... 0x....      BL       __aeabi_ui2d
   \   000000B4   0x4602             MOV      R2,R0
   \   000000B6   0x460B             MOV      R3,R1
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x4629             MOV      R1,R5
   \   000000BC   0x.... 0x....      BL       __aeabi_dsub
   \   000000C0   0x4604             MOV      R4,R0
   \   000000C2   0x460D             MOV      R5,R1
    246            n += print(int_part);
   \   000000C4   0x220A             MOVS     R2,#+10
   \   000000C6   0x4649             MOV      R1,R9
   \   000000C8   0x4640             MOV      R0,R8
   \   000000CA   0x.... 0x....      BL       _ZN5Print5printEmi
   \   000000CE   0x1986             ADDS     R6,R0,R6
    247          
    248            // Print the decimal point, but only if there are digits beyond
    249            if (digits > 0) {
   \   000000D0   0x0038             MOVS     R0,R7
   \   000000D2   0xD004             BEQ.N    ??printFloat_7
    250              n += print("."); 
   \   000000D4   0x....             ADR.N    R1,??DataTable5_3  ;; "."
   \   000000D6   0x4640             MOV      R0,R8
   \   000000D8   0x.... 0x....      BL       _ZN5Print5printEPKc
   \   000000DC   0x1986             ADDS     R6,R0,R6
   \                     ??printFloat_7: (+1)
   \   000000DE   0x4620             MOV      R0,R4
   \   000000E0   0x4629             MOV      R1,R5
   \   000000E2   0xE017             B.N      ??printFloat_8
    251            }
    252          
    253            // Extract digits from the remainder one at a time
    254            while (digits-- > 0)
    255            {
    256              remainder *= 10.0;
   \                     ??printFloat_9: (+1)
   \   000000E4   0x2200             MOVS     R2,#+0
   \   000000E6   0x....             LDR.N    R3,??DataTable5_8  ;; 0x40240000
   \   000000E8   0x.... 0x....      BL       __aeabi_dmul
   \   000000EC   0x4604             MOV      R4,R0
   \   000000EE   0x460D             MOV      R5,R1
    257              int toPrint = int(remainder);
   \   000000F0   0x.... 0x....      BL       __aeabi_d2iz
   \   000000F4   0x4681             MOV      R9,R0
    258              n += print(toPrint);
   \   000000F6   0x220A             MOVS     R2,#+10
   \   000000F8   0x4649             MOV      R1,R9
   \   000000FA   0x4640             MOV      R0,R8
   \   000000FC   0x.... 0x....      BL       _ZN5Print5printEii
   \   00000100   0x1986             ADDS     R6,R0,R6
    259              remainder -= toPrint; 
   \   00000102   0x4648             MOV      R0,R9
   \   00000104   0x.... 0x....      BL       __aeabi_i2d
   \   00000108   0x4602             MOV      R2,R0
   \   0000010A   0x460B             MOV      R3,R1
   \   0000010C   0x4620             MOV      R0,R4
   \   0000010E   0x4629             MOV      R1,R5
   \   00000110   0x.... 0x....      BL       __aeabi_dsub
    260            } 
   \                     ??printFloat_8: (+1)
   \   00000114   0x463A             MOV      R2,R7
   \   00000116   0x1E57             SUBS     R7,R2,#+1
   \   00000118   0xB2D2             UXTB     R2,R2
   \   0000011A   0x2A00             CMP      R2,#+0
   \   0000011C   0xD1E2             BNE.N    ??printFloat_9
   \   0000011E   0x4630             MOV      R0,R6
    261            
    262            return n;
   \   00000120   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    263          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x6E 0x61          DC8      "nan"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x69 0x6E          DC8      "inf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x6F 0x76          DC8      "ovf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE0000001         DC32     0xe0000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x41EFFFFF         DC32     0x41efffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0xC1EFFFFF         DC32     0xc1efffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x6E 0x61          DC8 "nan"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x69 0x6E          DC8 "inf"
   \              0x66 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x6F 0x76          DC8 "ovf"
   \              0x66 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_3:
   \   00000000   0x2E 0x00          DC8 "."

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Print::print(Printable const &)
         0   -- Indirect call
      24   Print::print(String const &)
        24   -- Indirect call
        24   -> String::length() const
        24   -> String::operator[](unsigned int) const
       0   Print::print(__FlashStringHelper const *)
         0   -> Print::print(char const *)
       0   Print::print(char const *)
         0   -> Print::write(char const *)
       0   Print::print(char)
         0   -- Indirect call
       8   Print::print(double, int)
         8   -> Print::printFloat(double, uint8_t)
       0   Print::print(int, int)
         0   -> Print::print(long, int)
      16   Print::print(long, int)
         0   -- Indirect call
        16   -> Print::print(char)
         0   -> Print::printNumber(unsigned long, uint8_t)
        16   -> Print::printNumber(unsigned long, uint8_t)
       0   Print::print(unsigned char, int)
         0   -> Print::print(unsigned long, int)
       0   Print::print(unsigned int, int)
         0   -> Print::print(unsigned long, int)
       0   Print::print(unsigned long, int)
         0   -- Indirect call
         0   -> Print::printNumber(unsigned long, uint8_t)
      32   Print::printFloat(double, uint8_t)
         0   -> Print::print(char const *)
        32   -> Print::print(char const *)
        32   -> Print::print(char)
        32   -> Print::print(int, int)
        32   -> Print::print(unsigned long, int)
        32   -> __aeabi_d2iz
        32   -> __aeabi_d2uiz
        32   -> __aeabi_dadd
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_i2d
        32   -> __aeabi_ui2d
        32   -> isinf(double)
        32   -> isnan(double)
        32 __aeabi_cdcmple
        32 __aeabi_cdrcmple
      56   Print::printNumber(unsigned long, uint8_t)
        56   -> Print::write(char const *)
      16   Print::println()
        16   -> Print::print(char)
      16   Print::println(Printable const &)
        16   -> Print::print(Printable const &)
        16   -> Print::println()
      16   Print::println(String const &)
        16   -> Print::print(String const &)
        16   -> Print::println()
      16   Print::println(__FlashStringHelper const *)
        16   -> Print::print(__FlashStringHelper const *)
        16   -> Print::println()
      16   Print::println(char const *)
        16   -> Print::print(char const *)
        16   -> Print::println()
      16   Print::println(char)
        16   -> Print::print(char)
        16   -> Print::println()
      16   Print::println(double, int)
        16   -> Print::print(double, int)
        16   -> Print::println()
      16   Print::println(int, int)
        16   -> Print::print(int, int)
        16   -> Print::println()
      16   Print::println(long, int)
        16   -> Print::print(long, int)
        16   -> Print::println()
      16   Print::println(unsigned char, int)
        16   -> Print::print(unsigned char, int)
        16   -> Print::println()
      16   Print::println(unsigned int, int)
        16   -> Print::print(unsigned int, int)
        16   -> Print::println()
      16   Print::println(unsigned long, int)
        16   -> Print::print(unsigned long, int)
        16   -> Print::println()
      16   Print::write(char const *)
         0   -- Indirect call
        16   -> strlen
      24   Print::write(uint8_t const *, size_t)
        24   -- Indirect call
       0   String::length() const
       0   isinf(double)
       0   isnan(double)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ?_0
       4  ?_1
       4  ?_2
       2  ?_3
      12  Print::print(Printable const &)
      60  Print::print(String const &)
       2  Print::print(__FlashStringHelper const *)
       4  Print::print(char const *)
       8  Print::print(char)
      14  Print::print(double, int)
       2  Print::print(int, int)
      72  Print::print(long, int)
       2  Print::print(unsigned char, int)
       2  Print::print(unsigned int, int)
      16  Print::print(unsigned long, int)
     292  Print::printFloat(double, uint8_t)
      66  Print::printNumber(unsigned long, uint8_t)
      26  Print::println()
      22  Print::println(Printable const &)
      22  Print::println(String const &)
      22  Print::println(__FlashStringHelper const *)
      22  Print::println(char const *)
      22  Print::println(char)
      28  Print::println(double, int)
      22  Print::println(int, int)
      22  Print::println(long, int)
      22  Print::println(unsigned char, int)
      22  Print::println(unsigned int, int)
      22  Print::println(unsigned long, int)
      36  Print::write(char const *)
      38  Print::write(uint8_t const *, size_t)
       4  String::length() const
      56  isinf(double)
      26  isnan(double)
      52  -- Other

 
    66 bytes in section .rodata
 1 022 bytes in section .text
 
 900 bytes of CODE  memory (+ 122 bytes shared)
  14 bytes of CONST memory (+  52 bytes shared)

Errors: none
Warnings: none
