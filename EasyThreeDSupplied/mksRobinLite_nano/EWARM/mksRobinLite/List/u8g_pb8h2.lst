###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:11
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb8h2.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5573.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb8h2.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_pb8h2.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_pb8h2.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb8h2.c
      1          /*
      2          
      3            u8g_pb8h2.c
      4            
      5            8bit height 2 bit per pixel page buffer
      6            byte has horizontal orientation
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2011, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37          
     38          */
     39          
     40          #include "u8g.h"
     41          #include <string.h>
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void u8g_pb8h2_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
     44          {
     45            b->buf = buf;
   \                     u8g_pb8h2_Init: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
     46            b->width = width;
   \   00000002   0x7142             STRB     R2,[R0, #+5]
     47            u8g_pb_Clear(b);
   \   00000004   0x.... 0x....      B.W      u8g_pb_Clear
     48          }
     49          
     50          static void u8g_pb8h2_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index) U8G_NOINLINE;

   \                                 In section .text, align 2, keep-with-next
     51          static void u8g_pb8h2_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
     52          {
   \                     u8g_pb8h2_set_pixel: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     53            register uint8_t mask;
     54            register uint16_t tmp;
     55            
     56            uint8_t *ptr = b->buf;
     57            
     58            y -= b->p.page_y0;
     59            
     60            tmp = b->width;
     61            tmp >>= 2;
     62            tmp *= (uint8_t)y;
     63            ptr += tmp;
     64            
     65            tmp = x;
     66            tmp >>= 2;
     67            ptr += tmp;
   \   00000002   0x6884             LDR      R4,[R0, #+8]
   \   00000004   0x7945             LDRB     R5,[R0, #+5]
   \   00000006   0x08AD             LSRS     R5,R5,#+2
   \   00000008   0x7880             LDRB     R0,[R0, #+2]
   \   0000000A   0x1A12             SUBS     R2,R2,R0
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0x436A             MULS     R2,R2,R5
   \   00000010   0x18A0             ADDS     R0,R4,R2
   \   00000012   0x460A             MOV      R2,R1
   \   00000014   0xEB00 0x0092      ADD      R0,R0,R2, LSR #+2
     68            
     69            tmp = x;
     70            tmp &= 3;
     71            tmp <<= 1;
   \   00000018   0x0049             LSLS     R1,R1,#+1
   \   0000001A   0xF001 0x0106      AND      R1,R1,#0x6
     72            mask = 3;
     73            mask <<= tmp;
     74            mask = ~mask;
     75            color_index &= 3;
     76            color_index <<= tmp;
     77              
     78            *ptr &= mask;
   \   0000001E   0x7804             LDRB     R4,[R0, #+0]
   \   00000020   0x2203             MOVS     R2,#+3
   \   00000022   0x408A             LSLS     R2,R2,R1
   \   00000024   0xEA24 0x0202      BIC      R2,R4,R2
   \   00000028   0x7002             STRB     R2,[R0, #+0]
     79            *ptr |= color_index;
   \   0000002A   0xF003 0x0303      AND      R3,R3,#0x3
   \   0000002E   0xFA03 0xF101      LSL      R1,R3,R1
   \   00000032   0x4311             ORRS     R1,R1,R2
   \   00000034   0x7001             STRB     R1,[R0, #+0]
     80          }
   \   00000036   0xBC30             POP      {R4,R5}
   \   00000038   0x4770             BX       LR               ;; return
     81          
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void u8g_pb8h2_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
     84          {
   \                     u8g_pb8h2_SetPixel: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
     85            if ( arg_pixel->y < b->p.page_y0 )
   \   00000002   0x784A             LDRB     R2,[R1, #+1]
   \   00000004   0x7883             LDRB     R3,[R0, #+2]
   \   00000006   0x429A             CMP      R2,R3
   \   00000008   0xD30B             BCC.N    ??u8g_pb8h2_SetPixel_0
     86              return;
     87            if ( arg_pixel->y > b->p.page_y1 )
   \   0000000A   0x78C3             LDRB     R3,[R0, #+3]
   \   0000000C   0x4293             CMP      R3,R2
   \   0000000E   0xD308             BCC.N    ??u8g_pb8h2_SetPixel_0
     88              return;
     89            if ( arg_pixel->x >= b->width )
   \   00000010   0x780C             LDRB     R4,[R1, #+0]
   \   00000012   0x7943             LDRB     R3,[R0, #+5]
   \   00000014   0x429C             CMP      R4,R3
   \   00000016   0xD204             BCS.N    ??u8g_pb8h2_SetPixel_0
     90              return;
     91            u8g_pb8h2_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
   \   00000018   0x790B             LDRB     R3,[R1, #+4]
   \   0000001A   0x4621             MOV      R1,R4
   \   0000001C   0xB001             ADD      SP,SP,#+4
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0x....             B.N      u8g_pb8h2_set_pixel
   \                     ??u8g_pb8h2_SetPixel_0: (+1)
   \   00000022   0xBC11             POP      {R0,R4}
   \   00000024   0x4770             BX       LR               ;; return
     92          }
     93          
     94          

   \                                 In section .text, align 4, keep-with-next
     95          void u8g_pb8h2_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
     96          {
   \                     u8g_pb8h2_Set8PixelStd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     97            register uint8_t pixel = arg_pixel->pixel;
   \   00000006   0x78AE             LDRB     R6,[R5, #+2]
     98            do
     99            {
    100              if ( pixel & 128 )
   \                     ??u8g_pb8h2_Set8PixelStd_1: (+1)
   \   00000008   0x0630             LSLS     R0,R6,#+24
   \   0000000A   0xD503             BPL.N    ??u8g_pb8h2_Set8PixelStd_2
    101              {
    102                u8g_pb8h2_SetPixel(b, arg_pixel);
   \   0000000C   0x4629             MOV      R1,R5
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_pb8h2_SetPixel
    103              }
    104              switch( arg_pixel->dir )
   \                     ??u8g_pb8h2_Set8PixelStd_2: (+1)
   \   00000014   0x78E8             LDRB     R0,[R5, #+3]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD812             BHI.N    ??u8g_pb8h2_Set8PixelStd_3
   \   0000001A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pb8h2_Set8PixelStd_0:
   \   0000001E   0x02 0x06          DC8      0x2,0x6,0xA,0xE
   \              0x0A 0x0E    
    105              {
    106                case 0: arg_pixel->x++; break;
   \                     ??u8g_pb8h2_Set8PixelStd_4: (+1)
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x7028             STRB     R0,[R5, #+0]
   \   00000028   0xE00A             B.N      ??u8g_pb8h2_Set8PixelStd_3
    107                case 1: arg_pixel->y++; break;
   \                     ??u8g_pb8h2_Set8PixelStd_5: (+1)
   \   0000002A   0x7868             LDRB     R0,[R5, #+1]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x7068             STRB     R0,[R5, #+1]
   \   00000030   0xE006             B.N      ??u8g_pb8h2_Set8PixelStd_3
    108                case 2: arg_pixel->x--; break;
   \                     ??u8g_pb8h2_Set8PixelStd_6: (+1)
   \   00000032   0x7828             LDRB     R0,[R5, #+0]
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x7028             STRB     R0,[R5, #+0]
   \   00000038   0xE002             B.N      ??u8g_pb8h2_Set8PixelStd_3
    109                case 3: arg_pixel->y--; break;
   \                     ??u8g_pb8h2_Set8PixelStd_7: (+1)
   \   0000003A   0x7868             LDRB     R0,[R5, #+1]
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x7068             STRB     R0,[R5, #+1]
    110              }
    111              pixel <<= 1;
   \                     ??u8g_pb8h2_Set8PixelStd_3: (+1)
   \   00000040   0x0076             LSLS     R6,R6,#+1
    112            } while( pixel != 0  );
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1DE             BNE.N    ??u8g_pb8h2_Set8PixelStd_1
    113          }
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    114          
    115          
    116          

   \                                 In section .text, align 2, keep-with-next
    117          uint8_t u8g_dev_pb8h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    118          {
   \                     u8g_dev_pb8h2_base_fn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x461C             MOV      R4,R3
    119            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000004   0x684D             LDR      R5,[R1, #+4]
    120            switch(msg)
   \   00000006   0x2A14             CMP      R2,#+20
   \   00000008   0xD01F             BEQ.N    ??u8g_dev_pb8h2_base_fn_0
   \   0000000A   0x2A15             CMP      R2,#+21
   \   0000000C   0xD024             BEQ.N    ??u8g_dev_pb8h2_base_fn_1
   \   0000000E   0x2A17             CMP      R2,#+23
   \   00000010   0xD02D             BEQ.N    ??u8g_dev_pb8h2_base_fn_2
   \   00000012   0x2A32             CMP      R2,#+50
   \   00000014   0xD014             BEQ.N    ??u8g_dev_pb8h2_base_fn_3
   \   00000016   0x2A3B             CMP      R2,#+59
   \   00000018   0xD006             BEQ.N    ??u8g_dev_pb8h2_base_fn_4
   \   0000001A   0x2A46             CMP      R2,#+70
   \   0000001C   0xD02C             BEQ.N    ??u8g_dev_pb8h2_base_fn_5
   \   0000001E   0x2A47             CMP      R2,#+71
   \   00000020   0xD02D             BEQ.N    ??u8g_dev_pb8h2_base_fn_6
   \   00000022   0x2A48             CMP      R2,#+72
   \   00000024   0xD02E             BEQ.N    ??u8g_dev_pb8h2_base_fn_7
   \   00000026   0xE009             B.N      ??u8g_dev_pb8h2_base_fn_8
    121            {
    122              case U8G_DEV_MSG_SET_8PIXEL:
    123                if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
   \                     ??u8g_dev_pb8h2_base_fn_4: (+1)
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       u8g_pb_Is8PixelVisible
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD003             BEQ.N    ??u8g_dev_pb8h2_base_fn_8
    124                {
    125                  u8g_pb8h2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
   \   00000034   0x4621             MOV      R1,R4
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       u8g_pb8h2_Set8PixelStd
    126                }
    127                break;
    128              case U8G_DEV_MSG_SET_PIXEL:
    129                u8g_pb8h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    130                break;
    131              case U8G_DEV_MSG_INIT:
    132                break;
    133              case U8G_DEV_MSG_STOP:
    134                break;
    135              case U8G_DEV_MSG_PAGE_FIRST:
    136                u8g_pb_Clear(pb);
    137                u8g_page_First(&(pb->p));
    138                break;
    139              case U8G_DEV_MSG_PAGE_NEXT:
    140                if ( u8g_page_Next(&(pb->p)) == 0 )
    141                  return 0;
    142                u8g_pb_Clear(pb);
    143                break;
    144          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    145              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    146                return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
    147          #endif
    148              case U8G_DEV_MSG_GET_PAGE_BOX:
    149                u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    150                break;
    151              case U8G_DEV_MSG_GET_WIDTH:
    152                *((u8g_uint_t *)arg) = pb->width;
    153                break;
    154              case U8G_DEV_MSG_GET_HEIGHT:
    155                *((u8g_uint_t *)arg) = pb->p.total_height;
    156                break;
    157              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    158                break;
    159              case U8G_DEV_MSG_SET_XY_CB:
    160                break;
    161              case U8G_DEV_MSG_GET_MODE:
    162                return U8G_MODE_GRAY2BIT;
    163            }
    164            return 1;
   \                     ??u8g_dev_pb8h2_base_fn_8: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??u8g_dev_pb8h2_base_fn_3: (+1)
   \   00000040   0x4621             MOV      R1,R4
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x.... 0x....      BL       u8g_pb8h2_SetPixel
   \   00000048   0xE7F8             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_0: (+1)
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       u8g_pb_Clear
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       u8g_page_First
   \   00000056   0xE7F1             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_1: (+1)
   \   00000058   0x4628             MOV      R0,R5
   \   0000005A   0x.... 0x....      BL       u8g_page_Next
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD101             BNE.N    ??u8g_dev_pb8h2_base_fn_9
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??u8g_dev_pb8h2_base_fn_9: (+1)
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       u8g_pb_Clear
   \   0000006C   0xE7E6             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_2: (+1)
   \   0000006E   0x4621             MOV      R1,R4
   \   00000070   0x4628             MOV      R0,R5
   \   00000072   0x.... 0x....      BL       u8g_pb_GetPageBox
   \   00000076   0xE7E1             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_5: (+1)
   \   00000078   0x7968             LDRB     R0,[R5, #+5]
   \   0000007A   0x7020             STRB     R0,[R4, #+0]
   \   0000007C   0xE7DE             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_6: (+1)
   \   0000007E   0x7868             LDRB     R0,[R5, #+1]
   \   00000080   0x7020             STRB     R0,[R4, #+0]
   \   00000082   0xE7DB             B.N      ??u8g_dev_pb8h2_base_fn_8
   \                     ??u8g_dev_pb8h2_base_fn_7: (+1)
   \   00000084   0x2002             MOVS     R0,#+2
   \   00000086   0xBD32             POP      {R1,R4,R5,PC}
    165          }
    166           
    167            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_dev_pb8h2_base_fn
        16   -> u8g_page_First
        16   -> u8g_page_Next
        16   -> u8g_pb8h2_Set8PixelStd
        16   -> u8g_pb8h2_SetPixel
        16   -> u8g_pb_Clear
        16   -> u8g_pb_GetPageBox
        16   -> u8g_pb_Is8PixelVisible
       0   u8g_pb8h2_Init
         0   -> u8g_pb_Clear
      16   u8g_pb8h2_Set8PixelStd
        16   -> u8g_pb8h2_SetPixel
       8   u8g_pb8h2_SetPixel
         0   -> u8g_pb8h2_set_pixel
       8   u8g_pb8h2_set_pixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     136  u8g_dev_pb8h2_base_fn
       8  u8g_pb8h2_Init
      76  u8g_pb8h2_Set8PixelStd
      38  u8g_pb8h2_SetPixel
      58  u8g_pb8h2_set_pixel

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
