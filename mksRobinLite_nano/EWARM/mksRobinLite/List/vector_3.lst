###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:18
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\vector_3.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EWB8F5.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\vector_3.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\vector_3.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\vector_3.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\vector_3.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24            vector_3.cpp - Vector library for bed leveling
     25            Copyright (c) 2012 Lars Brubaker.  All right reserved.
     26          
     27            This library is free software; you can redistribute it and/or
     28            modify it under the terms of the GNU Lesser General Public
     29            License as published by the Free Software Foundation; either
     30            version 2.1 of the License, or (at your option) any later version.
     31          
     32            This library is distributed in the hope that it will be useful,
     33            but WITHOUT ANY WARRANTY; without even the implied warranty of
     34            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     35            Lesser General Public License for more details.
     36          
     37            You should have received a copy of the GNU Lesser General Public
     38            License along with this library; if not, write to the Free Software
     39            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     40          */
     41          #include <math.h>
     42          #include "Marlin.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(uint8_t)
   \                     _ZN12MarlinSerial5writeEh: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x.... 0x....      BL       BSP_UartIfQueueTxData
   \        0xA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(char const *)
   \                     _ZN12MarlinSerial5writeEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xB2D2             UXTB     R2,R2
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x18   0x.... 0x....      B.W      BSP_UartIfQueueTxData

   \                                 In section .text, align 4
   \   __interwork __softfp void MarlinSerial::print(char const *)
   \                     _ZN12MarlinSerial5printEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD013             BEQ.N    ??print_1
   \       0x10   0x480A             LDR.N    R0,??print_0
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD105             BNE.N    ??print_2
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x20   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??print_2: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x.... 0x....      BL       strlen
   \       0x2A   0x4602             MOV      R2,R0
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0x2002             MOVS     R0,#+2
   \       0x30   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x34   0x.... 0x....      B.W      package_to_wifi
   \                     ??print_1: (+1)
   \       0x38   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \       0x3A   0xBF00             Nop      
   \                     ??print_0:
   \       0x3C   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \        0x0   0x4601             MOV      R1,R0
   \        0x2   0x4805             LDR.N    R0,??serialprintPGM_0
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD102             BNE.N    ??serialprintPGM_1
   \        0xA   0x4804             LDR.N    R0,??serialprintPGM_0+0x4
   \        0xC   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??serialprintPGM_1: (+1)
   \       0x10   0x4803             LDR.N    R0,??serialprintPGM_0+0x8
   \       0x12   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc
   \       0x16   0xBF00             Nop      
   \                     ??serialprintPGM_0:
   \       0x18   0x....'....        DC32     from_wifi_flag
   \       0x1C   0x....'....        DC32     customizedSerial
   \       0x20   0x....'....        DC32     serial2

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     43          
     44          //#if HAS_ABL
     45          #if 1
     46          #include "vector_3.h"
     47          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp vector_3::subobject vector_3()
   \                     _ZN8vector_3C2Ev: (+1)
   \        0x0   0x....             B.N      _ZN8vector_3C1Ev

   \                                 In section .text, align 2, keep-with-next
     48          vector_3::vector_3() : x(0), y(0), z(0) { }
   \                     _ZN8vector_3C1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x6041             STR      R1,[R0, #+4]
   \        0x6   0x6081             STR      R1,[R0, #+8]
   \        0x8   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp vector_3::subobject vector_3(float, float, float)
   \                     _ZN8vector_3C2Efff: (+1)
   \        0x0   0x....             B.N      _ZN8vector_3C1Efff

   \                                 In section .text, align 2, keep-with-next
     50          vector_3::vector_3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) { }
   \                     _ZN8vector_3C1Efff: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
   \        0x2   0x6042             STR      R2,[R0, #+4]
   \        0x4   0x6083             STR      R3,[R0, #+8]
   \        0x6   0x4770             BX       LR               ;; return
     51          

   \                                 In section .text, align 2, keep-with-next
     52          vector_3 vector_3::cross(vector_3 left, vector_3 right) {
   \                     _ZN8vector_35crossES_S_: (+1)
   \        0x0   0xE92D 0x47FE      PUSH     {R1-R10,LR}
   \        0x4   0xB083             SUB      SP,SP,#+12
   \        0x6   0x4604             MOV      R4,R0
     53            return vector_3(left.y * right.z - left.z * right.y,
     54                            left.z * right.x - left.x * right.z,
     55                            left.x * right.y - left.y * right.x);
   \        0x8   0x9D10             LDR      R5,[SP, #+64]
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0x4617             MOV      R7,R2
   \        0xE   0xF8DD 0x803C      LDR      R8,[SP, #+60]
   \       0x12   0x4608             MOV      R0,R1
   \       0x14   0x4641             MOV      R1,R8
   \       0x16   0x.... 0x....      BL       __aeabi_fmul
   \       0x1A   0x4681             MOV      R9,R0
   \       0x1C   0x980E             LDR      R0,[SP, #+56]
   \       0x1E   0x4639             MOV      R1,R7
   \       0x20   0x.... 0x....      BL       __aeabi_fmul
   \       0x24   0x4601             MOV      R1,R0
   \       0x26   0x4648             MOV      R0,R9
   \       0x28   0x.... 0x....      BL       __aeabi_fsub
   \       0x2C   0x4603             MOV      R3,R0
   \       0x2E   0x4699             MOV      R9,R3
   \       0x30   0x980E             LDR      R0,[SP, #+56]
   \       0x32   0x4631             MOV      R1,R6
   \       0x34   0x.... 0x....      BL       __aeabi_fmul
   \       0x38   0x4682             MOV      R10,R0
   \       0x3A   0x9803             LDR      R0,[SP, #+12]
   \       0x3C   0x4629             MOV      R1,R5
   \       0x3E   0x.... 0x....      BL       __aeabi_fmul
   \       0x42   0x4601             MOV      R1,R0
   \       0x44   0x4650             MOV      R0,R10
   \       0x46   0x.... 0x....      BL       __aeabi_fsub
   \       0x4A   0x4602             MOV      R2,R0
   \       0x4C   0x464B             MOV      R3,R9
   \       0x4E   0x4691             MOV      R9,R2
   \       0x50   0x469A             MOV      R10,R3
   \       0x52   0x4638             MOV      R0,R7
   \       0x54   0x4629             MOV      R1,R5
   \       0x56   0x.... 0x....      BL       __aeabi_fmul
   \       0x5A   0x4605             MOV      R5,R0
   \       0x5C   0x4630             MOV      R0,R6
   \       0x5E   0x4641             MOV      R1,R8
   \       0x60   0x.... 0x....      BL       __aeabi_fmul
   \       0x64   0x4601             MOV      R1,R0
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x.... 0x....      BL       __aeabi_fsub
   \       0x6C   0x4601             MOV      R1,R0
   \       0x6E   0x4653             MOV      R3,R10
   \       0x70   0x464A             MOV      R2,R9
   \       0x72   0x4668             MOV      R0,SP
   \       0x74   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x78   0x4668             MOV      R0,SP
   \       0x7A   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x7E   0xE884 0x000E      STM      R4,{R1-R3}
   \       0x82   0xB006             ADD      SP,SP,#+24
   \       0x84   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          vector_3 vector_3::operator+(vector_3 v) { return vector_3((x + v.x), (y + v.y), (z + v.z)); }
   \                     _ZN8vector_3plES_: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB5FE             PUSH     {R1-R7,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x68A9             LDR      R1,[R5, #+8]
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x.... 0x....      BL       __aeabi_fadd
   \       0x10   0x4603             MOV      R3,R0
   \       0x12   0x461E             MOV      R6,R3
   \       0x14   0x6869             LDR      R1,[R5, #+4]
   \       0x16   0x9809             LDR      R0,[SP, #+36]
   \       0x18   0x.... 0x....      BL       __aeabi_fadd
   \       0x1C   0x4602             MOV      R2,R0
   \       0x1E   0x4633             MOV      R3,R6
   \       0x20   0x4616             MOV      R6,R2
   \       0x22   0x461F             MOV      R7,R3
   \       0x24   0x6829             LDR      R1,[R5, #+0]
   \       0x26   0x9808             LDR      R0,[SP, #+32]
   \       0x28   0x.... 0x....      BL       __aeabi_fadd
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0x463B             MOV      R3,R7
   \       0x30   0x4632             MOV      R2,R6
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x3E   0xE884 0x000E      STM      R4,{R1-R3}
   \       0x42   0xBCF7             POP      {R0-R2,R4-R7}
   \       0x44   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return

   \                                 In section .text, align 2, keep-with-next
     59          vector_3 vector_3::operator-(vector_3 v) { return vector_3((x - v.x), (y - v.y), (z - v.z)); }
   \                     _ZN8vector_3miES_: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB5FE             PUSH     {R1-R7,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x68A8             LDR      R0,[R5, #+8]
   \        0xA   0x990A             LDR      R1,[SP, #+40]
   \        0xC   0x.... 0x....      BL       __aeabi_fsub
   \       0x10   0x4603             MOV      R3,R0
   \       0x12   0x461E             MOV      R6,R3
   \       0x14   0x6868             LDR      R0,[R5, #+4]
   \       0x16   0x9909             LDR      R1,[SP, #+36]
   \       0x18   0x.... 0x....      BL       __aeabi_fsub
   \       0x1C   0x4602             MOV      R2,R0
   \       0x1E   0x4633             MOV      R3,R6
   \       0x20   0x4616             MOV      R6,R2
   \       0x22   0x461F             MOV      R7,R3
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0x9908             LDR      R1,[SP, #+32]
   \       0x28   0x.... 0x....      BL       __aeabi_fsub
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0x463B             MOV      R3,R7
   \       0x30   0x4632             MOV      R2,R6
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x3E   0xE884 0x000E      STM      R4,{R1-R3}
   \       0x42   0xBCF7             POP      {R0-R2,R4-R7}
   \       0x44   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
     60          

   \                                 In section .text, align 2, keep-with-next
     61          vector_3 vector_3::get_normal() {
   \                     _ZN8vector_310get_normalEv: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     62            vector_3 normalized = vector_3(x, y, z);
   \        0x4   0x688B             LDR      R3,[R1, #+8]
   \        0x6   0x684A             LDR      R2,[R1, #+4]
   \        0x8   0x6809             LDR      R1,[R1, #+0]
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x.... 0x....      BL       _ZN8vector_3C1Efff
     63            normalized.normalize();
   \       0x10   0x.... 0x....      BL       _ZN8vector_39normalizeEv
     64            return normalized;
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x1A   0xE884 0x000E      STM      R4,{R1-R3}
   \       0x1E   0xBD1F             POP      {R0-R4,PC}       ;; return
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          float vector_3::get_length() { return sqrt(sq(x) + sq(y) + sq(z)); }
   \                     _ZN8vector_310get_lengthEv: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0xF8D7 0x8000      LDR      R8,[R7, #+0]
   \        0xA   0x2402             MOVS     R4,#+2
   \        0xC   0xF04F 0x557E      MOV      R5,#+1065353216
   \       0x10   0x462E             MOV      R6,R5
   \       0x12   0xE004             B.N      ??get_length_0
   \                     ??get_length_1: (+1)
   \       0x14   0x4640             MOV      R0,R8
   \       0x16   0x4641             MOV      R1,R8
   \       0x18   0x.... 0x....      BL       __aeabi_fmul
   \       0x1C   0x4680             MOV      R8,R0
   \                     ??get_length_0: (+1)
   \       0x1E   0x07E0             LSLS     R0,R4,#+31
   \       0x20   0xD504             BPL.N    ??get_length_2
   \       0x22   0x4630             MOV      R0,R6
   \       0x24   0x4641             MOV      R1,R8
   \       0x26   0x.... 0x....      BL       __aeabi_fmul
   \       0x2A   0x4606             MOV      R6,R0
   \                     ??get_length_2: (+1)
   \       0x2C   0x0864             LSRS     R4,R4,#+1
   \       0x2E   0xD1F1             BNE.N    ??get_length_1
   \       0x30   0xF8D7 0x9004      LDR      R9,[R7, #+4]
   \       0x34   0x2402             MOVS     R4,#+2
   \       0x36   0x46A8             MOV      R8,R5
   \       0x38   0xE004             B.N      ??get_length_3
   \                     ??get_length_4: (+1)
   \       0x3A   0x4648             MOV      R0,R9
   \       0x3C   0x4649             MOV      R1,R9
   \       0x3E   0x.... 0x....      BL       __aeabi_fmul
   \       0x42   0x4681             MOV      R9,R0
   \                     ??get_length_3: (+1)
   \       0x44   0x07E0             LSLS     R0,R4,#+31
   \       0x46   0xD504             BPL.N    ??get_length_5
   \       0x48   0x4640             MOV      R0,R8
   \       0x4A   0x4649             MOV      R1,R9
   \       0x4C   0x.... 0x....      BL       __aeabi_fmul
   \       0x50   0x4680             MOV      R8,R0
   \                     ??get_length_5: (+1)
   \       0x52   0x0864             LSRS     R4,R4,#+1
   \       0x54   0xD1F1             BNE.N    ??get_length_4
   \       0x56   0x68BF             LDR      R7,[R7, #+8]
   \       0x58   0x2402             MOVS     R4,#+2
   \       0x5A   0xE004             B.N      ??get_length_6
   \                     ??get_length_7: (+1)
   \       0x5C   0x4638             MOV      R0,R7
   \       0x5E   0x4639             MOV      R1,R7
   \       0x60   0x.... 0x....      BL       __aeabi_fmul
   \       0x64   0x4607             MOV      R7,R0
   \                     ??get_length_6: (+1)
   \       0x66   0x07E0             LSLS     R0,R4,#+31
   \       0x68   0xD504             BPL.N    ??get_length_8
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x4639             MOV      R1,R7
   \       0x6E   0x.... 0x....      BL       __aeabi_fmul
   \       0x72   0x4605             MOV      R5,R0
   \                     ??get_length_8: (+1)
   \       0x74   0x0864             LSRS     R4,R4,#+1
   \       0x76   0xD1F1             BNE.N    ??get_length_7
   \       0x78   0x4630             MOV      R0,R6
   \       0x7A   0x4641             MOV      R1,R8
   \       0x7C   0x.... 0x....      BL       __aeabi_fadd
   \       0x80   0x4629             MOV      R1,R5
   \       0x82   0x.... 0x....      BL       __aeabi_fadd
   \       0x86   0xE8BD 0x43F2      POP      {R1,R4-R9,LR}
   \       0x8A   0x.... 0x....      B.W      sqrtf
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void vector_3::normalize() {
   \                     _ZN8vector_39normalizeEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     70            const float inv_length = 1.0 / get_length();
   \        0x4   0x.... 0x....      BL       _ZN8vector_310get_lengthEv
   \        0x8   0x4601             MOV      R1,R0
   \        0xA   0xF04F 0x507E      MOV      R0,#+1065353216
   \        0xE   0x.... 0x....      BL       __aeabi_fdiv
   \       0x12   0x4605             MOV      R5,R0
     71            x *= inv_length;
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x4629             MOV      R1,R5
   \       0x18   0x.... 0x....      BL       __aeabi_fmul
   \       0x1C   0x6020             STR      R0,[R4, #+0]
     72            y *= inv_length;
   \       0x1E   0x6860             LDR      R0,[R4, #+4]
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x.... 0x....      BL       __aeabi_fmul
   \       0x26   0x6060             STR      R0,[R4, #+4]
     73            z *= inv_length;
   \       0x28   0x68A0             LDR      R0,[R4, #+8]
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x.... 0x....      BL       __aeabi_fmul
   \       0x30   0x60A0             STR      R0,[R4, #+8]
     74          }
   \       0x32   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void vector_3::apply_rotation(matrix_3x3 matrix) {
   \                     _ZN8vector_314apply_rotationE10matrix_3x3: (+1)
   \        0x0   0xB40E             PUSH     {R1-R3}
   \        0x2   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x6   0x4604             MOV      R4,R0
     77            const float resultX = x * matrix.matrix[3 * 0 + 0] + y * matrix.matrix[3 * 1 + 0] + z * matrix.matrix[3 * 2 + 0],
     78                        resultY = x * matrix.matrix[3 * 0 + 1] + y * matrix.matrix[3 * 1 + 1] + z * matrix.matrix[3 * 2 + 1],
   \        0x8   0x68A5             LDR      R5,[R4, #+8]
   \        0xA   0x6866             LDR      R6,[R4, #+4]
   \        0xC   0x6827             LDR      R7,[R4, #+0]
   \        0xE   0x4610             MOV      R0,R2
   \       0x10   0x4639             MOV      R1,R7
   \       0x12   0x.... 0x....      BL       __aeabi_fmul
   \       0x16   0x4680             MOV      R8,R0
   \       0x18   0x980B             LDR      R0,[SP, #+44]
   \       0x1A   0x4631             MOV      R1,R6
   \       0x1C   0x.... 0x....      BL       __aeabi_fmul
   \       0x20   0x4641             MOV      R1,R8
   \       0x22   0x.... 0x....      BL       __aeabi_fadd
   \       0x26   0x4680             MOV      R8,R0
   \       0x28   0x980E             LDR      R0,[SP, #+56]
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x.... 0x....      BL       __aeabi_fmul
   \       0x30   0x4641             MOV      R1,R8
   \       0x32   0x.... 0x....      BL       __aeabi_fadd
   \       0x36   0x4680             MOV      R8,R0
     79                        resultZ = x * matrix.matrix[3 * 0 + 2] + y * matrix.matrix[3 * 1 + 2] + z * matrix.matrix[3 * 2 + 2];
   \       0x38   0x9809             LDR      R0,[SP, #+36]
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0x.... 0x....      BL       __aeabi_fmul
   \       0x40   0x4681             MOV      R9,R0
   \       0x42   0x980C             LDR      R0,[SP, #+48]
   \       0x44   0x4631             MOV      R1,R6
   \       0x46   0x.... 0x....      BL       __aeabi_fmul
   \       0x4A   0x4649             MOV      R1,R9
   \       0x4C   0x.... 0x....      BL       __aeabi_fadd
   \       0x50   0x4681             MOV      R9,R0
   \       0x52   0x980F             LDR      R0,[SP, #+60]
   \       0x54   0x4629             MOV      R1,R5
   \       0x56   0x.... 0x....      BL       __aeabi_fmul
   \       0x5A   0x4649             MOV      R1,R9
   \       0x5C   0x.... 0x....      BL       __aeabi_fadd
   \       0x60   0x4681             MOV      R9,R0
     80            x = resultX;
   \       0x62   0x9807             LDR      R0,[SP, #+28]
   \       0x64   0x4639             MOV      R1,R7
   \       0x66   0x.... 0x....      BL       __aeabi_fmul
   \       0x6A   0x4607             MOV      R7,R0
   \       0x6C   0x980A             LDR      R0,[SP, #+40]
   \       0x6E   0x4631             MOV      R1,R6
   \       0x70   0x.... 0x....      BL       __aeabi_fmul
   \       0x74   0x4639             MOV      R1,R7
   \       0x76   0x.... 0x....      BL       __aeabi_fadd
   \       0x7A   0x4606             MOV      R6,R0
   \       0x7C   0x980D             LDR      R0,[SP, #+52]
   \       0x7E   0x4629             MOV      R1,R5
   \       0x80   0x.... 0x....      BL       __aeabi_fmul
   \       0x84   0x4631             MOV      R1,R6
   \       0x86   0x.... 0x....      BL       __aeabi_fadd
   \       0x8A   0x6020             STR      R0,[R4, #+0]
     81            y = resultY;
   \       0x8C   0xF8C4 0x8004      STR      R8,[R4, #+4]
     82            z = resultZ;
   \       0x90   0xF8C4 0x9008      STR      R9,[R4, #+8]
     83          }
   \       0x94   0xE8BD 0x03F0      POP      {R4-R9}
   \       0x98   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
     84          

   \                                 In section .text, align 4, keep-with-next
     85          void vector_3::debug(const char * const title) {
   \                     _ZN8vector_35debugEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     86            serialprintPGM(title);
   \        0x4   0x4608             MOV      R0,R1
   \        0x6   0x.... 0x....      BL       _Z14serialprintPGMPKc
     87            SERIAL_PROTOCOLPGM(" x: ");
   \        0xA   0xBF00             Nop      
   \        0xC   0x....             ADR.N    R0,?_0
   \        0xE   0x.... 0x....      BL       _Z14serialprintPGMPKc
     88            SERIAL_PROTOCOL_F(x, 6);
   \       0x12   0x....             LDR.N    R5,??DataTable5
   \       0x14   0x7828             LDRB     R0,[R5, #+0]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD10A             BNE.N    ??debug_0
   \       0x1A   0x2006             MOVS     R0,#+6
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x.... 0x....      BL       __aeabi_f2d
   \       0x24   0x4602             MOV      R2,R0
   \       0x26   0x460B             MOV      R3,R1
   \       0x28   0x....             LDR.N    R0,??DataTable5_1
   \       0x2A   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0x2E   0xE009             B.N      ??debug_1
   \                     ??debug_0: (+1)
   \       0x30   0x2006             MOVS     R0,#+6
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x.... 0x....      BL       __aeabi_f2d
   \       0x3A   0x4602             MOV      R2,R0
   \       0x3C   0x460B             MOV      R3,R1
   \       0x3E   0x....             LDR.N    R0,??DataTable5_2
   \       0x40   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     89            SERIAL_PROTOCOLPGM(" y: ");
   \                     ??debug_1: (+1)
   \       0x44   0x....             ADR.N    R0,?_1
   \       0x46   0x.... 0x....      BL       _Z14serialprintPGMPKc
     90            SERIAL_PROTOCOL_F(y, 6);
   \       0x4A   0x7828             LDRB     R0,[R5, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD10A             BNE.N    ??debug_2
   \       0x50   0x2006             MOVS     R0,#+6
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0x6860             LDR      R0,[R4, #+4]
   \       0x56   0x.... 0x....      BL       __aeabi_f2d
   \       0x5A   0x4602             MOV      R2,R0
   \       0x5C   0x460B             MOV      R3,R1
   \       0x5E   0x....             LDR.N    R0,??DataTable5_1
   \       0x60   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0x64   0xE009             B.N      ??debug_3
   \                     ??debug_2: (+1)
   \       0x66   0x2006             MOVS     R0,#+6
   \       0x68   0x9000             STR      R0,[SP, #+0]
   \       0x6A   0x6860             LDR      R0,[R4, #+4]
   \       0x6C   0x.... 0x....      BL       __aeabi_f2d
   \       0x70   0x4602             MOV      R2,R0
   \       0x72   0x460B             MOV      R3,R1
   \       0x74   0x....             LDR.N    R0,??DataTable5_2
   \       0x76   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     91            SERIAL_PROTOCOLPGM(" z: ");
   \                     ??debug_3: (+1)
   \       0x7A   0xBF00             Nop      
   \       0x7C   0x....             ADR.N    R0,?_2
   \       0x7E   0x.... 0x....      BL       _Z14serialprintPGMPKc
     92            SERIAL_PROTOCOL_F(z, 6);
   \       0x82   0x7828             LDRB     R0,[R5, #+0]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD10A             BNE.N    ??debug_4
   \       0x88   0x2006             MOVS     R0,#+6
   \       0x8A   0x9000             STR      R0,[SP, #+0]
   \       0x8C   0x68A0             LDR      R0,[R4, #+8]
   \       0x8E   0x.... 0x....      BL       __aeabi_f2d
   \       0x92   0x4602             MOV      R2,R0
   \       0x94   0x460B             MOV      R3,R1
   \       0x96   0x....             LDR.N    R0,??DataTable5_1
   \       0x98   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0x9C   0xE009             B.N      ??debug_5
   \                     ??debug_4: (+1)
   \       0x9E   0x2006             MOVS     R0,#+6
   \       0xA0   0x9000             STR      R0,[SP, #+0]
   \       0xA2   0x68A0             LDR      R0,[R4, #+8]
   \       0xA4   0x.... 0x....      BL       __aeabi_f2d
   \       0xA8   0x4602             MOV      R2,R0
   \       0xAA   0x460B             MOV      R3,R1
   \       0xAC   0x....             LDR.N    R0,??DataTable5_2
   \       0xAE   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
     93            SERIAL_EOL;
   \                     ??debug_5: (+1)
   \       0xB2   0x7828             LDRB     R0,[R5, #+0]
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD105             BNE.N    ??debug_6
   \       0xB8   0x210A             MOVS     R1,#+10
   \       0xBA   0x....             LDR.N    R0,??DataTable5_1
   \       0xBC   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0xC0   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEh
   \                     ??debug_6: (+1)
   \       0xC4   0x2200             MOVS     R2,#+0
   \       0xC6   0x210A             MOVS     R1,#+10
   \       0xC8   0x....             LDR.N    R0,??DataTable5_2
   \       0xCA   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0xCE   0x.... 0x....      B.W      _ZN12MarlinSerial5printEci
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void apply_rotation_xyz(matrix_3x3 matrix, float &x, float &y, float &z) {
   \                     _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB5F0             PUSH     {R4-R7,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x9E17             LDR      R6,[SP, #+92]
   \        0x8   0x9D18             LDR      R5,[SP, #+96]
   \        0xA   0x9C19             LDR      R4,[SP, #+100]
     97            vector_3 vector = vector_3(x, y, z);
   \        0xC   0x6823             LDR      R3,[R4, #+0]
   \        0xE   0x682A             LDR      R2,[R5, #+0]
   \       0x10   0x6831             LDR      R1,[R6, #+0]
   \       0x12   0xA806             ADD      R0,SP,#+24
   \       0x14   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x18   0x4607             MOV      R7,R0
     98            vector.apply_rotation(matrix);
   \       0x1A   0xA90E             ADD      R1,SP,#+56
   \       0x1C   0xB083             SUB      SP,SP,#+12
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x2224             MOVS     R2,#+36
   \       0x22   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x26   0xBC0E             POP      {R1-R3}
   \       0x28   0x4638             MOV      R0,R7
   \       0x2A   0x.... 0x....      BL       _ZN8vector_314apply_rotationE10matrix_3x3
     99            x = vector.x;
   \       0x2E   0x9806             LDR      R0,[SP, #+24]
   \       0x30   0x6030             STR      R0,[R6, #+0]
    100            y = vector.y;
   \       0x32   0x9807             LDR      R0,[SP, #+28]
   \       0x34   0x6028             STR      R0,[R5, #+0]
    101            z = vector.z;
   \       0x36   0x9808             LDR      R0,[SP, #+32]
   \       0x38   0x6020             STR      R0,[R4, #+0]
    102          }
   \       0x3A   0xB009             ADD      SP,SP,#+36
   \       0x3C   0xBCF0             POP      {R4-R7}
   \       0x3E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          matrix_3x3 matrix_3x3::create_from_rows(vector_3 row_0, vector_3 row_1, vector_3 row_2) {
   \                     _ZN10matrix_3x316create_from_rowsE8vector_3S0_S0_: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
    105            //row_0.debug(PSTR("row_0"));
    106            //row_1.debug(PSTR("row_1"));
    107            //row_2.debug(PSTR("row_2"));
    108            matrix_3x3 new_matrix;
    109            new_matrix.matrix[0] = row_0.x; new_matrix.matrix[1] = row_0.y; new_matrix.matrix[2] = row_0.z;
   \        0x4   0x9100             STR      R1,[SP, #+0]
   \        0x6   0x9201             STR      R2,[SP, #+4]
   \        0x8   0x9302             STR      R3,[SP, #+8]
    110            new_matrix.matrix[3] = row_1.x; new_matrix.matrix[4] = row_1.y; new_matrix.matrix[5] = row_1.z;
   \        0xA   0x990A             LDR      R1,[SP, #+40]
   \        0xC   0x9103             STR      R1,[SP, #+12]
   \        0xE   0x990B             LDR      R1,[SP, #+44]
   \       0x10   0x9104             STR      R1,[SP, #+16]
   \       0x12   0x990C             LDR      R1,[SP, #+48]
   \       0x14   0x9105             STR      R1,[SP, #+20]
    111            new_matrix.matrix[6] = row_2.x; new_matrix.matrix[7] = row_2.y; new_matrix.matrix[8] = row_2.z;
   \       0x16   0x990D             LDR      R1,[SP, #+52]
   \       0x18   0x9106             STR      R1,[SP, #+24]
   \       0x1A   0x990E             LDR      R1,[SP, #+56]
   \       0x1C   0x9107             STR      R1,[SP, #+28]
   \       0x1E   0x990F             LDR      R1,[SP, #+60]
   \       0x20   0x9108             STR      R1,[SP, #+32]
    112            //new_matrix.debug(PSTR("new_matrix"));
    113            return new_matrix;
   \       0x22   0x4669             MOV      R1,SP
   \       0x24   0x2224             MOVS     R2,#+36
   \       0x26   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x2A   0xB009             ADD      SP,SP,#+36
   \       0x2C   0xBD00             POP      {PC}             ;; return
    114          }
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void matrix_3x3::set_to_identity() {
    117            matrix[0] = 1; matrix[1] = 0; matrix[2] = 0;
   \                     _ZN10matrix_3x315set_to_identityEv: (+1)
   \        0x0   0xF04F 0x517E      MOV      R1,#+1065353216
   \        0x4   0x6001             STR      R1,[R0, #+0]
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x6042             STR      R2,[R0, #+4]
   \        0xA   0x6082             STR      R2,[R0, #+8]
    118            matrix[3] = 0; matrix[4] = 1; matrix[5] = 0;
   \        0xC   0x60C2             STR      R2,[R0, #+12]
   \        0xE   0x6101             STR      R1,[R0, #+16]
   \       0x10   0x6142             STR      R2,[R0, #+20]
    119            matrix[6] = 0; matrix[7] = 0; matrix[8] = 1;
   \       0x12   0x6182             STR      R2,[R0, #+24]
   \       0x14   0x61C2             STR      R2,[R0, #+28]
   \       0x16   0x6201             STR      R1,[R0, #+32]
    120          }
   \       0x18   0x4770             BX       LR               ;; return
    121          

   \                                 In section .text, align 2, keep-with-next
    122          matrix_3x3 matrix_3x3::create_look_at(vector_3 target) {
   \                     _ZN10matrix_3x314create_look_atE8vector_3: (+1)
   \        0x0   0xB53F             PUSH     {R0-R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
   \        0x4   0x4604             MOV      R4,R0
    123            vector_3 z_row = target.get_normal();
   \        0x6   0xA910             ADD      R1,SP,#+64
   \        0x8   0xA809             ADD      R0,SP,#+36
   \        0xA   0x.... 0x....      BL       _ZN8vector_310get_normalEv
    124            vector_3 x_row = vector_3(1, 0, -target.x / target.z).get_normal();
   \        0xE   0x9810             LDR      R0,[SP, #+64]
   \       0x10   0x9912             LDR      R1,[SP, #+72]
   \       0x12   0x.... 0x....      BL       __aeabi_fdiv
   \       0x16   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \       0x1A   0x4603             MOV      R3,R0
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0xF04F 0x517E      MOV      R1,#+1065353216
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \       0x28   0x4601             MOV      R1,R0
   \       0x2A   0xA806             ADD      R0,SP,#+24
   \       0x2C   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   \       0x30   0xA806             ADD      R0,SP,#+24
   \       0x32   0x466A             MOV      R2,SP
   \       0x34   0xC80A             LDM      R0!,{R1,R3}
   \       0x36   0xC20A             STM      R2!,{R1,R3}
   \       0x38   0x6803             LDR      R3,[R0, #+0]
   \       0x3A   0x6013             STR      R3,[R2, #+0]
   \       0x3C   0xA809             ADD      R0,SP,#+36
   \       0x3E   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x42   0xA803             ADD      R0,SP,#+12
   \       0x44   0x.... 0x....      BL       _ZN8vector_35crossES_S_
    125            vector_3 y_row = vector_3::cross(z_row, x_row).get_normal();
   \       0x48   0xA80C             ADD      R0,SP,#+48
   \       0x4A   0xA903             ADD      R1,SP,#+12
   \       0x4C   0xE891 0x002C      LDM      R1,{R2,R3,R5}
   \       0x50   0xE880 0x002C      STM      R0,{R2,R3,R5}
   \       0x54   0xA90C             ADD      R1,SP,#+48
   \       0x56   0x4668             MOV      R0,SP
   \       0x58   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   \       0x5C   0xA80C             ADD      R0,SP,#+48
   \       0x5E   0x4669             MOV      R1,SP
   \       0x60   0xE891 0x002C      LDM      R1,{R2,R3,R5}
   \       0x64   0xE880 0x002C      STM      R0,{R2,R3,R5}
    126          
    127            // x_row.debug(PSTR("x_row"));
    128            // y_row.debug(PSTR("y_row"));
    129            // z_row.debug(PSTR("z_row"));
    130          
    131            // create the matrix already correctly transposed
    132            matrix_3x3 rot = matrix_3x3::create_from_rows(x_row, y_row, z_row);
    133          
    134            // rot.debug(PSTR("rot"));
    135            return rot;
   \       0x68   0xA809             ADD      R0,SP,#+36
   \       0x6A   0xAA03             ADD      R2,SP,#+12
   \       0x6C   0xC80A             LDM      R0!,{R1,R3}
   \       0x6E   0xC20A             STM      R2!,{R1,R3}
   \       0x70   0x6803             LDR      R3,[R0, #+0]
   \       0x72   0x6013             STR      R3,[R2, #+0]
   \       0x74   0xA80C             ADD      R0,SP,#+48
   \       0x76   0x466A             MOV      R2,SP
   \       0x78   0xC80A             LDM      R0!,{R1,R3}
   \       0x7A   0xC20A             STM      R2!,{R1,R3}
   \       0x7C   0x462B             MOV      R3,R5
   \       0x7E   0x6013             STR      R3,[R2, #+0]
   \       0x80   0xA806             ADD      R0,SP,#+24
   \       0x82   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0x.... 0x....      BL       _ZN10matrix_3x316create_from_rowsE8vector_3S0_S0_
   \       0x8C   0xB013             ADD      SP,SP,#+76
   \       0x8E   0xBD30             POP      {R4,R5,PC}       ;; return
    136          }
    137          

   \                                 In section .text, align 2, keep-with-next
    138          matrix_3x3 matrix_3x3::transpose(matrix_3x3 original) {
   \                     _ZN10matrix_3x39transposeES_: (+1)
   \        0x0   0xB40E             PUSH     {R1-R3}
   \        0x2   0xB580             PUSH     {R7,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
    139            matrix_3x3 new_matrix;
    140            new_matrix.matrix[0] = original.matrix[0]; new_matrix.matrix[1] = original.matrix[3]; new_matrix.matrix[2] = original.matrix[6];
   \        0x6   0x9100             STR      R1,[SP, #+0]
   \        0x8   0x990E             LDR      R1,[SP, #+56]
   \        0xA   0x9101             STR      R1,[SP, #+4]
   \        0xC   0x9911             LDR      R1,[SP, #+68]
   \        0xE   0x9102             STR      R1,[SP, #+8]
    141            new_matrix.matrix[3] = original.matrix[1]; new_matrix.matrix[4] = original.matrix[4]; new_matrix.matrix[5] = original.matrix[7];
   \       0x10   0x4611             MOV      R1,R2
   \       0x12   0x9103             STR      R1,[SP, #+12]
   \       0x14   0x990F             LDR      R1,[SP, #+60]
   \       0x16   0x9104             STR      R1,[SP, #+16]
   \       0x18   0x9912             LDR      R1,[SP, #+72]
   \       0x1A   0x9105             STR      R1,[SP, #+20]
    142            new_matrix.matrix[6] = original.matrix[2]; new_matrix.matrix[7] = original.matrix[5]; new_matrix.matrix[8] = original.matrix[8];
   \       0x1C   0x4619             MOV      R1,R3
   \       0x1E   0x9106             STR      R1,[SP, #+24]
   \       0x20   0x9910             LDR      R1,[SP, #+64]
   \       0x22   0x9107             STR      R1,[SP, #+28]
   \       0x24   0x9913             LDR      R1,[SP, #+76]
   \       0x26   0x9108             STR      R1,[SP, #+32]
    143            return new_matrix;
   \       0x28   0x4669             MOV      R1,SP
   \       0x2A   0x2224             MOVS     R2,#+36
   \       0x2C   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x30   0xB00A             ADD      SP,SP,#+40
   \       0x32   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void matrix_3x3::debug(const char * const title) {
   \                     _ZN10matrix_3x35debugEPKc: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
    147            serialprintPGM(title);
   \        0x6   0x4608             MOV      R0,R1
   \        0x8   0x.... 0x....      BL       _Z14serialprintPGMPKc
    148            uint8_t count = 0;
   \        0xC   0x2500             MOVS     R5,#+0
    149            for (uint8_t i = 0; i < 3; i++) {
   \        0xE   0x46A8             MOV      R8,R5
   \       0x10   0x....             LDR.N    R7,??DataTable5
   \       0x12   0xE051             B.N      ??debug_7
    150              for (uint8_t j = 0; j < 3; j++) {
    151                if (matrix[count] >= 0.0) SERIAL_PROTOCOLCHAR('+');
    152                SERIAL_PROTOCOL_F(matrix[count], 6);
    153                SERIAL_PROTOCOLCHAR(' ');
    154                count++;
    155              }
    156              SERIAL_EOL;
   \                     ??debug_8: (+1)
   \       0x14   0x2200             MOVS     R2,#+0
   \       0x16   0x210A             MOVS     R1,#+10
   \       0x18   0x....             LDR.N    R0,??DataTable5_2
   \       0x1A   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \       0x1E   0xE049             B.N      ??debug_9
   \                     ??debug_10: (+1)
   \       0x20   0x2200             MOVS     R2,#+0
   \       0x22   0x2120             MOVS     R1,#+32
   \       0x24   0x....             LDR.N    R0,??DataTable5_2
   \       0x26   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \       0x2A   0xE011             B.N      ??debug_11
   \                     ??debug_12: (+1)
   \       0x2C   0x2006             MOVS     R0,#+6
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \       0x34   0x.... 0x....      BL       __aeabi_f2d
   \       0x38   0x4602             MOV      R2,R0
   \       0x3A   0x460B             MOV      R3,R1
   \       0x3C   0x....             LDR.N    R0,??DataTable5_2
   \       0x3E   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \                     ??debug_13: (+1)
   \       0x42   0x7838             LDRB     R0,[R7, #+0]
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD1EB             BNE.N    ??debug_10
   \       0x48   0x2120             MOVS     R1,#+32
   \       0x4A   0x....             LDR.N    R0,??DataTable5_1
   \       0x4C   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \                     ??debug_11: (+1)
   \       0x50   0x1C6D             ADDS     R5,R5,#+1
   \       0x52   0xB2ED             UXTB     R5,R5
   \       0x54   0x1C76             ADDS     R6,R6,#+1
   \                     ??debug_14: (+1)
   \       0x56   0x4630             MOV      R0,R6
   \       0x58   0xB2C0             UXTB     R0,R0
   \       0x5A   0x2803             CMP      R0,#+3
   \       0x5C   0xDA23             BGE.N    ??debug_15
   \       0x5E   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \       0x62   0x2100             MOVS     R1,#+0
   \       0x64   0x.... 0x....      BL       __aeabi_cfrcmple
   \       0x68   0xD80C             BHI.N    ??debug_16
   \       0x6A   0x7838             LDRB     R0,[R7, #+0]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD104             BNE.N    ??debug_17
   \       0x70   0x212B             MOVS     R1,#+43
   \       0x72   0x....             LDR.N    R0,??DataTable5_1
   \       0x74   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \       0x78   0xE004             B.N      ??debug_16
   \                     ??debug_17: (+1)
   \       0x7A   0x460A             MOV      R2,R1
   \       0x7C   0x212B             MOVS     R1,#+43
   \       0x7E   0x....             LDR.N    R0,??DataTable5_2
   \       0x80   0x.... 0x....      BL       _ZN12MarlinSerial5printEci
   \                     ??debug_16: (+1)
   \       0x84   0x7838             LDRB     R0,[R7, #+0]
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD1D0             BNE.N    ??debug_12
   \       0x8A   0x2006             MOVS     R0,#+6
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \       0x92   0x.... 0x....      BL       __aeabi_f2d
   \       0x96   0x4602             MOV      R2,R0
   \       0x98   0x460B             MOV      R3,R1
   \       0x9A   0x....             LDR.N    R0,??DataTable5_1
   \       0x9C   0x.... 0x....      BL       _ZN12MarlinSerial5printEdi
   \       0xA0   0xE7CF             B.N      ??debug_13
    157            }
    158          }
   \                     ??debug_18: (+1)
   \       0xA2   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
   \                     ??debug_15: (+1)
   \       0xA6   0x7838             LDRB     R0,[R7, #+0]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD1B3             BNE.N    ??debug_8
   \       0xAC   0x210A             MOVS     R1,#+10
   \       0xAE   0x....             LDR.N    R0,??DataTable5_1
   \       0xB0   0x.... 0x....      BL       _ZN12MarlinSerial5writeEh
   \                     ??debug_9: (+1)
   \       0xB4   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??debug_7: (+1)
   \       0xB8   0x4640             MOV      R0,R8
   \       0xBA   0xB2C0             UXTB     R0,R0
   \       0xBC   0x2803             CMP      R0,#+3
   \       0xBE   0xDAF0             BGE.N    ??debug_18
   \       0xC0   0x2600             MOVS     R6,#+0
   \       0xC2   0xE7C8             B.N      ??debug_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x20 0x78          DC8 " x: "
   \              0x3A 0x20    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x20 0x79          DC8 " y: "
   \              0x3A 0x20    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x20 0x7A          DC8 " z: "
   \              0x3A 0x20    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    159          
    160          #endif // HAS_ABL
    161          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
         0   -> package_to_wifi
        16   -> strlen
      16   MarlinSerial::write(char const *)
         0   -> BSP_UartIfQueueTxData
        16   -> strlen
       8   MarlinSerial::write(uint8_t)
         8   -> BSP_UartIfQueueTxData
      84   apply_rotation_xyz(matrix_3x3, float &, float &, float &)
        84   -> __aeabi_memcpy4
        72   -> vector_3::apply_rotation(matrix_3x3)
        72   -> vector_3::vector_3(float, float, float)
      40   matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
        40   -> __aeabi_memcpy4
      88   matrix_3x3::create_look_at(vector_3)
        88   -> __aeabi_fdiv
        88   -> matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
        88   -> vector_3::cross(vector_3, vector_3)
        88   -> vector_3::get_normal()
        88   -> vector_3::vector_3(float, float, float)
      32   matrix_3x3::debug(char const *)
        32   -> MarlinSerial::print(char, int)
        32   -> MarlinSerial::print(double, int)
        32   -> MarlinSerial::write(uint8_t)
        32   -> __aeabi_f2d
        32   -> serialprintPGM(char const *)
        32 __aeabi_cfrcmple
       0   matrix_3x3::set_to_identity()
      56   matrix_3x3::transpose(matrix_3x3)
        56   -> __aeabi_memcpy4
       0   serialprintPGM(char const *)
         0   -> MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
      40   vector_3::apply_rotation(matrix_3x3)
        40   -> __aeabi_fadd
        40   -> __aeabi_fmul
      56   vector_3::cross(vector_3, vector_3)
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> vector_3::vector_3(float, float, float)
      16   vector_3::debug(char const *)
         0   -> MarlinSerial::print(char, int)
        16   -> MarlinSerial::print(double, int)
         0   -> MarlinSerial::write(uint8_t)
        16   -> __aeabi_f2d
        16   -> serialprintPGM(char const *)
      32   vector_3::get_length()
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
         0   -> sqrtf
      24   vector_3::get_normal()
        24   -> vector_3::normalize()
        24   -> vector_3::vector_3(float, float, float)
      16   vector_3::normalize()
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> vector_3::get_length()
      40   vector_3::operator+(vector_3)
        40   -> __aeabi_fadd
        40   -> vector_3::vector_3(float, float, float)
      40   vector_3::operator-(vector_3)
        40   -> __aeabi_fsub
        40   -> vector_3::vector_3(float, float, float)
       0   vector_3::subobject vector_3()
         0   -> vector_3::vector_3()
       0   vector_3::subobject vector_3(float, float, float)
         0   -> vector_3::vector_3(float, float, float)
       0   vector_3::vector_3()
       0   vector_3::vector_3(float, float, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       8  ?_0
       8  ?_1
       8  ?_2
      64  MarlinSerial::print(char const *)
      28  MarlinSerial::write(char const *)
      12  MarlinSerial::write(uint8_t)
      66  apply_rotation_xyz(matrix_3x3, float &, float &, float &)
      46  matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
     144  matrix_3x3::create_look_at(vector_3)
     196  matrix_3x3::debug(char const *)
      26  matrix_3x3::set_to_identity()
      54  matrix_3x3::transpose(matrix_3x3)
      36  serialprintPGM(char const *)
     156  vector_3::apply_rotation(matrix_3x3)
     136  vector_3::cross(vector_3, vector_3)
     210  vector_3::debug(char const *)
     142  vector_3::get_length()
      32  vector_3::get_normal()
      52  vector_3::normalize()
      72  vector_3::operator+(vector_3)
      72  vector_3::operator-(vector_3)
       2  vector_3::subobject vector_3()
       2  vector_3::subobject vector_3(float, float, float)
      10  vector_3::vector_3()
       8  vector_3::vector_3(float, float, float)

 
 1 602 bytes in section .text
 
 1 462 bytes of CODE memory (+ 140 bytes shared)

Errors: none
Warnings: 3
