###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ellipse.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4C8E.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ellipse.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_ellipse.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_ellipse.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ellipse.c
      1          /*
      2          
      3            u8g_ellipse.c
      4          
      5            Utility to draw empty and filled ellipses.
      6            
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2011, bjthom@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35            
     36            Addition to the U8G Library as of 02/29/12
     37            Adapted from Bresenham's Algorithm and the following websites:
     38          	http://free.pages.at/easyfilter/bresenham.html
     39          	http://homepage.smc.edu/kennedy_john/belipse.pdf
     40            
     41          */
     42          
     43          #include "u8g.h"
     44          
     45          
     46          #ifdef WORK_IN_PROGRESS
     47          
     48          void u8g_DrawEllipseRect(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t x1, u8g_uint_t y1)
     49          {
     50          	int a = abs(x1 - x0);
     51          	int b = abs(y1 - y0);	//get diameters
     52          	int b1 = b&1;
     53          	long dx = 4*(1-a)*b*b;
     54          	long dy = 4*(b1+1)*a*a;
     55          	long err = dx+dy+b1*a*a;
     56          	long e2;
     57          	
     58          	if (x0 > x1) { x0 = x1; x1 += a; }
     59          	if (y0 > y1) { y0 = y1; } 
     60          	y0 += (b+1)/2;
     61          	y1 = y0-b1;
     62          	a *= 8*a;
     63          	b1 = 8*b*b;
     64          	
     65          	do {
     66          		u8g_DrawPixel(u8g, x1, y0);
     67          		u8g_DrawPixel(u8g, x0, y0);
     68          		u8g_DrawPixel(u8g, x0, y1);
     69          		u8g_DrawPixel(u8g, x1, y1);
     70          		e2 = 2*err;
     71          		if (e2 >= dx) {
     72          			x0++;
     73          			x1--;
     74          			err += dx += b1;
     75          		}
     76          		if (e2 <= dy) {
     77          			y0++;
     78          			y1--;
     79          			err += dy += a;
     80          		}
     81          	} while (x0 <= x1);
     82          	
     83          	while (y0-y1 < b) {
     84          		u8g_DrawPixel(u8g, x0-1, y0);
     85          		u8g_DrawPixel(u8g, x1+1, y0++);
     86          		u8g_DrawPixel(u8g, x0-1, y1);
     87          		u8g_DrawPixel(u8g, x1+1, y1--);
     88          	}
     89          }
     90          
     91          void u8g_DrawEllipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t xr, u8g_uint_t yr)
     92          {
     93          	u8g_DrawPixel(u8g, x0, y0+yr);
     94          	u8g_DrawPixel(u8g, x0, y0-yr);
     95          	u8g_DrawPixel(u8g, x0+xr, y0);
     96          	u8g_DrawPixel(u8g, x0-xr, y0);
     97          }
     98          
     99          #endif
    100          
    101          #if defined(U8G_16BIT)
    102          typedef  int32_t u8g_long_t;
    103          #else
    104          typedef  int16_t u8g_long_t;
    105          #endif
    106          
    107          
    108          /*
    109            Source: 
    110              ftp://pc.fk0.name/pub/books/programming/bezier-ellipse.pdf
    111              Foley, Computer Graphics, p 90
    112          */
    113          static void u8g_draw_ellipse_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option) U8G_NOINLINE;

   \                                 In section .text, align 2, keep-with-next
    114          static void u8g_draw_ellipse_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option)
    115          {
   \                     u8g_draw_ellipse_section: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
   \   0000000E   0x9D09             LDR      R5,[SP, #+36]
    116              /* upper right */
    117              if ( option & U8G_DRAW_UPPER_RIGHT )
   \   00000010   0x07E8             LSLS     R0,R5,#+31
   \   00000012   0xD508             BPL.N    ??u8g_draw_ellipse_section_0
    118              {
    119                u8g_DrawPixel(u8g, x0 + x, y0 - y);
   \   00000014   0xEBA4 0x0208      SUB      R2,R4,R8
   \   00000018   0xB2D2             UXTB     R2,R2
   \   0000001A   0xEB07 0x0109      ADD      R1,R7,R9
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       u8g_DrawPixel
    120              }
    121              
    122              /* upper left */
    123              if ( option & U8G_DRAW_UPPER_LEFT )
   \                     ??u8g_draw_ellipse_section_0: (+1)
   \   00000026   0x07A8             LSLS     R0,R5,#+30
   \   00000028   0xD508             BPL.N    ??u8g_draw_ellipse_section_1
    124              {
    125                u8g_DrawPixel(u8g, x0 - x, y0 - y);
   \   0000002A   0xEBA4 0x0208      SUB      R2,R4,R8
   \   0000002E   0xB2D2             UXTB     R2,R2
   \   00000030   0xEBA9 0x0107      SUB      R1,R9,R7
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       u8g_DrawPixel
    126              }
    127              
    128              /* lower right */
    129              if ( option & U8G_DRAW_LOWER_RIGHT )
   \                     ??u8g_draw_ellipse_section_1: (+1)
   \   0000003C   0x0728             LSLS     R0,R5,#+28
   \   0000003E   0xD508             BPL.N    ??u8g_draw_ellipse_section_2
    130              {
    131                u8g_DrawPixel(u8g, x0 + x, y0 + y);
   \   00000040   0xEB08 0x0204      ADD      R2,R8,R4
   \   00000044   0xB2D2             UXTB     R2,R2
   \   00000046   0xEB07 0x0109      ADD      R1,R7,R9
   \   0000004A   0xB2C9             UXTB     R1,R1
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x.... 0x....      BL       u8g_DrawPixel
    132              }
    133              
    134              /* lower left */
    135              if ( option & U8G_DRAW_LOWER_LEFT )
   \                     ??u8g_draw_ellipse_section_2: (+1)
   \   00000052   0x0768             LSLS     R0,R5,#+29
   \   00000054   0xD50B             BPL.N    ??u8g_draw_ellipse_section_3
    136              {
    137                u8g_DrawPixel(u8g, x0 - x, y0 + y);
   \   00000056   0x44A0             ADD      R8,R8,R4
   \   00000058   0x4642             MOV      R2,R8
   \   0000005A   0xB2D2             UXTB     R2,R2
   \   0000005C   0xEBA9 0x0707      SUB      R7,R9,R7
   \   00000060   0x4639             MOV      R1,R7
   \   00000062   0xB2C9             UXTB     R1,R1
   \   00000064   0x4630             MOV      R0,R6
   \   00000066   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000006A   0x.... 0x....      B.W      u8g_DrawPixel
    138              }
    139          }
   \                     ??u8g_draw_ellipse_section_3: (+1)
   \   0000006E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    140          

   \                                 In section .text, align 2, keep-with-next
    141          void u8g_draw_ellipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rx, u8g_uint_t ry, uint8_t option)
    142          {
   \                     u8g_draw_ellipse: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x9B11             LDR      R3,[SP, #+68]
    143            u8g_uint_t x, y;
    144            u8g_long_t xchg, ychg;
    145            u8g_long_t err;
    146            u8g_long_t rxrx2;
    147            u8g_long_t ryry2;
    148            u8g_long_t stopx, stopy;
    149            
    150            rxrx2 = rx;
    151            rxrx2 *= rx;
    152            rxrx2 *= 2;
   \   00000008   0xF89D 0xA018      LDRB     R10,[SP, #+24]
   \   0000000C   0xFB0A 0xF80A      MUL      R8,R10,R10
   \   00000010   0xEA4F 0x0E48      LSL      LR,R8,#+1
   \   00000014   0xFA0F 0xFE8E      SXTH     LR,LR
    153            
    154            ryry2 = ry;
    155            ryry2 *= ry;
    156            ryry2 *= 2;
   \   00000018   0xF89D 0x7040      LDRB     R7,[SP, #+64]
   \   0000001C   0xFB07 0xF407      MUL      R4,R7,R7
   \   00000020   0xF8AD 0x400A      STRH     R4,[SP, #+10]
   \   00000024   0xF8BD 0x400A      LDRH     R4,[SP, #+10]
   \   00000028   0x0064             LSLS     R4,R4,#+1
   \   0000002A   0xB224             SXTH     R4,R4
    157            
    158            x = rx;
   \   0000002C   0x4655             MOV      R5,R10
    159            y = 0;
   \   0000002E   0x2600             MOVS     R6,#+0
    160            
    161            xchg = 1;
    162            xchg -= rx;
    163            xchg -= rx;
    164            xchg *= ry;
    165            xchg *= ry;
   \   00000030   0xEA4F 0x0C4A      LSL      R12,R10,#+1
   \   00000034   0xF1CC 0x0C01      RSB      R12,R12,#+1
   \   00000038   0xFB07 0xFC0C      MUL      R12,R7,R12
   \   0000003C   0xFB07 0xF70C      MUL      R7,R7,R12
   \   00000040   0xB23F             SXTH     R7,R7
    166            
    167            ychg = rx;
    168            ychg *= rx;
   \   00000042   0xFA0F 0xF888      SXTH     R8,R8
    169            
    170            err = 0;
   \   00000046   0x46B1             MOV      R9,R6
    171            
    172            stopx = ryry2;
    173            stopx *= rx;
   \   00000048   0xFB0A 0xFA04      MUL      R10,R10,R4
   \   0000004C   0xFA0F 0xFA8A      SXTH     R10,R10
    174            stopy = 0;
   \   00000050   0x46B3             MOV      R11,R6
   \   00000052   0x9004             STR      R0,[SP, #+16]
   \   00000054   0xF88D 0x1009      STRB     R1,[SP, #+9]
   \   00000058   0xF88D 0x2008      STRB     R2,[SP, #+8]
   \   0000005C   0xF88D 0x3044      STRB     R3,[SP, #+68]
   \   00000060   0xF8CD 0xE00C      STR      LR,[SP, #+12]
   \   00000064   0xE022             B.N      ??u8g_draw_ellipse_0
    175            
    176            while( stopx >= stopy )
    177            {
    178              u8g_draw_ellipse_section(u8g, x, y, x0, y0, option);
   \                     ??u8g_draw_ellipse_1: (+1)
   \   00000066   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   00000076   0x4632             MOV      R2,R6
   \   00000078   0xB2D2             UXTB     R2,R2
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0xB2C9             UXTB     R1,R1
   \   0000007E   0x9804             LDR      R0,[SP, #+16]
   \   00000080   0x.... 0x....      BL       u8g_draw_ellipse_section
    179              y++;
   \   00000084   0x1C76             ADDS     R6,R6,#+1
    180              stopy += rxrx2;
   \   00000086   0x9803             LDR      R0,[SP, #+12]
   \   00000088   0x4483             ADD      R11,R0,R11
    181              err += ychg;
   \   0000008A   0x44C1             ADD      R9,R8,R9
    182              ychg += rxrx2;
   \   0000008C   0x4480             ADD      R8,R0,R8
    183              if ( 2*err+xchg > 0 )
   \   0000008E   0x4648             MOV      R0,R9
   \   00000090   0xB200             SXTH     R0,R0
   \   00000092   0x4639             MOV      R1,R7
   \   00000094   0xB209             SXTH     R1,R1
   \   00000096   0xEB01 0x0140      ADD      R1,R1,R0, LSL #+1
   \   0000009A   0x2900             CMP      R1,#+0
   \   0000009C   0xDD06             BLE.N    ??u8g_draw_ellipse_0
    184              {
    185                x--;
   \   0000009E   0x1E6D             SUBS     R5,R5,#+1
    186                stopx -= ryry2;
   \   000000A0   0xEBAA 0x0A04      SUB      R10,R10,R4
   \   000000A4   0xFA0F 0xFA8A      SXTH     R10,R10
    187                err += xchg;
   \   000000A8   0x44B9             ADD      R9,R7,R9
    188                xchg += ryry2;      
   \   000000AA   0x19E7             ADDS     R7,R4,R7
    189              }
    190            }
   \                     ??u8g_draw_ellipse_0: (+1)
   \   000000AC   0x4658             MOV      R0,R11
   \   000000AE   0xB200             SXTH     R0,R0
   \   000000B0   0x4582             CMP      R10,R0
   \   000000B2   0xDAD8             BGE.N    ??u8g_draw_ellipse_1
   \   000000B4   0xF8DD 0xC010      LDR      R12,[SP, #+16]
   \   000000B8   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000000BC   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000000C0   0xF89D 0x2044      LDRB     R2,[SP, #+68]
   \   000000C4   0x9B03             LDR      R3,[SP, #+12]
    191          
    192            x = 0;
   \   000000C6   0x2500             MOVS     R5,#+0
    193            y = ry;
   \   000000C8   0xF89D 0x6040      LDRB     R6,[SP, #+64]
    194            
    195            xchg = ry;
    196            xchg *= ry;
   \   000000CC   0x46B3             MOV      R11,R6
   \   000000CE   0xF9BD 0x700A      LDRSH    R7,[SP, #+10]
    197            
    198            ychg = 1;
    199            ychg -= ry;
    200            ychg -= ry;
    201            ychg *= rx;
    202            ychg *= rx;
   \   000000D2   0xF89D 0xE018      LDRB     LR,[SP, #+24]
   \   000000D6   0xEA4F 0x084B      LSL      R8,R11,#+1
   \   000000DA   0xF1C8 0x0801      RSB      R8,R8,#+1
   \   000000DE   0xFB0E 0xF808      MUL      R8,LR,R8
   \   000000E2   0xFB0E 0xF808      MUL      R8,LR,R8
   \   000000E6   0xFA0F 0xF888      SXTH     R8,R8
    203            
    204            err = 0;
   \   000000EA   0x46A9             MOV      R9,R5
    205            
    206            stopx = 0;
   \   000000EC   0x46AA             MOV      R10,R5
    207          
    208            stopy = rxrx2;
    209            stopy *= ry;
   \   000000EE   0xFB0B 0xFB03      MUL      R11,R11,R3
   \   000000F2   0xFA0F 0xFB8B      SXTH     R11,R11
   \   000000F6   0xF8CD 0xC010      STR      R12,[SP, #+16]
   \   000000FA   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000000FE   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   00000102   0xF88D 0x2044      STRB     R2,[SP, #+68]
   \   00000106   0x9303             STR      R3,[SP, #+12]
   \   00000108   0xE022             B.N      ??u8g_draw_ellipse_2
    210            
    211          
    212            while( stopx <= stopy )
    213            {
    214              u8g_draw_ellipse_section(u8g, x, y, x0, y0, option);
   \                     ??u8g_draw_ellipse_3: (+1)
   \   0000010A   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \   0000010E   0x9001             STR      R0,[SP, #+4]
   \   00000110   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000114   0x9000             STR      R0,[SP, #+0]
   \   00000116   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   0000011A   0x4632             MOV      R2,R6
   \   0000011C   0xB2D2             UXTB     R2,R2
   \   0000011E   0x4629             MOV      R1,R5
   \   00000120   0xB2C9             UXTB     R1,R1
   \   00000122   0x9804             LDR      R0,[SP, #+16]
   \   00000124   0x.... 0x....      BL       u8g_draw_ellipse_section
    215              x++;
   \   00000128   0x1C6D             ADDS     R5,R5,#+1
    216              stopx += ryry2;
   \   0000012A   0x44A2             ADD      R10,R4,R10
    217              err += xchg;
   \   0000012C   0x44B9             ADD      R9,R7,R9
    218              xchg += ryry2;
   \   0000012E   0x19E7             ADDS     R7,R4,R7
    219              if ( 2*err+ychg > 0 )
   \   00000130   0x4648             MOV      R0,R9
   \   00000132   0xB200             SXTH     R0,R0
   \   00000134   0x4641             MOV      R1,R8
   \   00000136   0xB209             SXTH     R1,R1
   \   00000138   0xEB01 0x0140      ADD      R1,R1,R0, LSL #+1
   \   0000013C   0x2900             CMP      R1,#+0
   \   0000013E   0xDD07             BLE.N    ??u8g_draw_ellipse_2
    220              {
    221                y--;
   \   00000140   0x1E76             SUBS     R6,R6,#+1
    222                stopy -= rxrx2;
   \   00000142   0x9803             LDR      R0,[SP, #+12]
   \   00000144   0xEBAB 0x0B00      SUB      R11,R11,R0
   \   00000148   0xFA0F 0xFB8B      SXTH     R11,R11
    223                err += ychg;
   \   0000014C   0x44C1             ADD      R9,R8,R9
    224                ychg += rxrx2;
   \   0000014E   0x4480             ADD      R8,R0,R8
    225              }
    226            }
   \                     ??u8g_draw_ellipse_2: (+1)
   \   00000150   0x4650             MOV      R0,R10
   \   00000152   0xB200             SXTH     R0,R0
   \   00000154   0x4583             CMP      R11,R0
   \   00000156   0xDAD8             BGE.N    ??u8g_draw_ellipse_3
    227            
    228          }
   \   00000158   0xB007             ADD      SP,SP,#+28
   \   0000015A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void u8g_DrawEllipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rx, u8g_uint_t ry, uint8_t option)
    231          {
   \                     u8g_DrawEllipse: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    232            /* check for bounding box */
    233            {
    234              u8g_uint_t rxp, rxp2;
    235              u8g_uint_t ryp, ryp2;
    236              
    237              rxp = rx;
    238              rxp++;
   \   0000000E   0xF108 0x0101      ADD      R1,R8,#+1
    239              rxp2 = rxp;
    240              rxp2 *= 2;
    241          
    242              ryp = ry;
    243              ryp++;
   \   00000012   0x1C62             ADDS     R2,R4,#+1
    244              ryp2 = ryp;
    245              ryp2 *= 2;
    246              
    247              if ( u8g_IsBBXIntersection(u8g, x0-rxp, y0-ryp, rxp2, ryp2) == 0)
   \   00000014   0x0050             LSLS     R0,R2,#+1
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x004B             LSLS     R3,R1,#+1
   \   0000001C   0xB2DB             UXTB     R3,R3
   \   0000001E   0x1ABA             SUBS     R2,R7,R2
   \   00000020   0xB2D2             UXTB     R2,R2
   \   00000022   0x1A71             SUBS     R1,R6,R1
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD008             BEQ.N    ??u8g_DrawEllipse_0
    248                return;    
   \   00000030   0x9809             LDR      R0,[SP, #+36]
    249            }
    250            
    251            u8g_draw_ellipse(u8g, x0, y0, rx, ry, option);
   \   00000032   0x9001             STR      R0,[SP, #+4]
   \   00000034   0x9400             STR      R4,[SP, #+0]
   \   00000036   0x4643             MOV      R3,R8
   \   00000038   0x463A             MOV      R2,R7
   \   0000003A   0x4631             MOV      R1,R6
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       u8g_draw_ellipse
    252          }
   \                     ??u8g_DrawEllipse_0: (+1)
   \   00000042   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    253          
    254          static void u8g_draw_filled_ellipse_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option) U8G_NOINLINE;

   \                                 In section .text, align 2, keep-with-next
    255          static void u8g_draw_filled_ellipse_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option)
    256          {
   \                     u8g_draw_filled_ellipse_section: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
   \   0000000E   0x9D09             LDR      R5,[SP, #+36]
    257              /* upper right */
    258              if ( option & U8G_DRAW_UPPER_RIGHT )
   \   00000010   0x07E8             LSLS     R0,R5,#+31
   \   00000012   0xD50B             BPL.N    ??u8g_draw_filled_ellipse_section_0
    259              {
    260                u8g_DrawVLine(u8g, x0+x, y0-y, y+1);
   \   00000014   0xF108 0x0301      ADD      R3,R8,#+1
   \   00000018   0xB2DB             UXTB     R3,R3
   \   0000001A   0xEBA4 0x0208      SUB      R2,R4,R8
   \   0000001E   0xB2D2             UXTB     R2,R2
   \   00000020   0xEB07 0x0109      ADD      R1,R7,R9
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       u8g_DrawVLine
    261              }
    262              
    263              /* upper left */
    264              if ( option & U8G_DRAW_UPPER_LEFT )
   \                     ??u8g_draw_filled_ellipse_section_0: (+1)
   \   0000002C   0x07A8             LSLS     R0,R5,#+30
   \   0000002E   0xD50B             BPL.N    ??u8g_draw_filled_ellipse_section_1
    265              {
    266                u8g_DrawVLine(u8g, x0-x, y0-y, y+1);
   \   00000030   0xF108 0x0301      ADD      R3,R8,#+1
   \   00000034   0xB2DB             UXTB     R3,R3
   \   00000036   0xEBA4 0x0208      SUB      R2,R4,R8
   \   0000003A   0xB2D2             UXTB     R2,R2
   \   0000003C   0xEBA9 0x0107      SUB      R1,R9,R7
   \   00000040   0xB2C9             UXTB     R1,R1
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x.... 0x....      BL       u8g_DrawVLine
    267              }
    268              
    269              /* lower right */
    270              if ( option & U8G_DRAW_LOWER_RIGHT )
   \                     ??u8g_draw_filled_ellipse_section_1: (+1)
   \   00000048   0x0728             LSLS     R0,R5,#+28
   \   0000004A   0xD509             BPL.N    ??u8g_draw_filled_ellipse_section_2
    271              {
    272                u8g_DrawVLine(u8g, x0+x, y0, y+1);
   \   0000004C   0xF108 0x0301      ADD      R3,R8,#+1
   \   00000050   0xB2DB             UXTB     R3,R3
   \   00000052   0x4622             MOV      R2,R4
   \   00000054   0xEB07 0x0109      ADD      R1,R7,R9
   \   00000058   0xB2C9             UXTB     R1,R1
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x.... 0x....      BL       u8g_DrawVLine
    273              }
    274              
    275              /* lower left */
    276              if ( option & U8G_DRAW_LOWER_LEFT )
   \                     ??u8g_draw_filled_ellipse_section_2: (+1)
   \   00000060   0x0768             LSLS     R0,R5,#+29
   \   00000062   0xD50E             BPL.N    ??u8g_draw_filled_ellipse_section_3
    277              {
    278                u8g_DrawVLine(u8g, x0-x, y0, y+1);
   \   00000064   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000068   0x4643             MOV      R3,R8
   \   0000006A   0xB2DB             UXTB     R3,R3
   \   0000006C   0x4622             MOV      R2,R4
   \   0000006E   0xEBA9 0x0707      SUB      R7,R9,R7
   \   00000072   0x4639             MOV      R1,R7
   \   00000074   0xB2C9             UXTB     R1,R1
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0xB001             ADD      SP,SP,#+4
   \   0000007A   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000007E   0x.... 0x....      B.W      u8g_DrawVLine
    279              }
    280          }
   \                     ??u8g_draw_filled_ellipse_section_3: (+1)
   \   00000082   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void u8g_draw_filled_ellipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rx, u8g_uint_t ry, uint8_t option)
    283          {
   \                     u8g_draw_filled_ellipse: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x9B11             LDR      R3,[SP, #+68]
    284            u8g_uint_t x, y;
    285            u8g_long_t xchg, ychg;
    286            u8g_long_t err;
    287            u8g_long_t rxrx2;
    288            u8g_long_t ryry2;
    289            u8g_long_t stopx, stopy;
    290            
    291            rxrx2 = rx;
    292            rxrx2 *= rx;
    293            rxrx2 *= 2;
   \   00000008   0xF89D 0xA018      LDRB     R10,[SP, #+24]
   \   0000000C   0xFB0A 0xF80A      MUL      R8,R10,R10
   \   00000010   0xEA4F 0x0E48      LSL      LR,R8,#+1
   \   00000014   0xFA0F 0xFE8E      SXTH     LR,LR
    294            
    295            ryry2 = ry;
    296            ryry2 *= ry;
    297            ryry2 *= 2;
   \   00000018   0xF89D 0x7040      LDRB     R7,[SP, #+64]
   \   0000001C   0xFB07 0xF407      MUL      R4,R7,R7
   \   00000020   0xF8AD 0x400A      STRH     R4,[SP, #+10]
   \   00000024   0xF8BD 0x400A      LDRH     R4,[SP, #+10]
   \   00000028   0x0064             LSLS     R4,R4,#+1
   \   0000002A   0xB224             SXTH     R4,R4
    298            
    299            x = rx;
   \   0000002C   0x4655             MOV      R5,R10
    300            y = 0;
   \   0000002E   0x2600             MOVS     R6,#+0
    301            
    302            xchg = 1;
    303            xchg -= rx;
    304            xchg -= rx;
    305            xchg *= ry;
    306            xchg *= ry;
   \   00000030   0xEA4F 0x0C4A      LSL      R12,R10,#+1
   \   00000034   0xF1CC 0x0C01      RSB      R12,R12,#+1
   \   00000038   0xFB07 0xFC0C      MUL      R12,R7,R12
   \   0000003C   0xFB07 0xF70C      MUL      R7,R7,R12
   \   00000040   0xB23F             SXTH     R7,R7
    307            
    308            ychg = rx;
    309            ychg *= rx;
   \   00000042   0xFA0F 0xF888      SXTH     R8,R8
    310            
    311            err = 0;
   \   00000046   0x46B1             MOV      R9,R6
    312            
    313            stopx = ryry2;
    314            stopx *= rx;
   \   00000048   0xFB0A 0xFA04      MUL      R10,R10,R4
   \   0000004C   0xFA0F 0xFA8A      SXTH     R10,R10
    315            stopy = 0;
   \   00000050   0x46B3             MOV      R11,R6
   \   00000052   0x9004             STR      R0,[SP, #+16]
   \   00000054   0xF88D 0x1009      STRB     R1,[SP, #+9]
   \   00000058   0xF88D 0x2008      STRB     R2,[SP, #+8]
   \   0000005C   0xF88D 0x3044      STRB     R3,[SP, #+68]
   \   00000060   0xF8CD 0xE00C      STR      LR,[SP, #+12]
   \   00000064   0xE022             B.N      ??u8g_draw_filled_ellipse_0
    316            
    317            while( stopx >= stopy )
    318            {
    319              u8g_draw_filled_ellipse_section(u8g, x, y, x0, y0, option);
   \                     ??u8g_draw_filled_ellipse_1: (+1)
   \   00000066   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   00000076   0x4632             MOV      R2,R6
   \   00000078   0xB2D2             UXTB     R2,R2
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0xB2C9             UXTB     R1,R1
   \   0000007E   0x9804             LDR      R0,[SP, #+16]
   \   00000080   0x.... 0x....      BL       u8g_draw_filled_ellipse_section
    320              y++;
   \   00000084   0x1C76             ADDS     R6,R6,#+1
    321              stopy += rxrx2;
   \   00000086   0x9803             LDR      R0,[SP, #+12]
   \   00000088   0x4483             ADD      R11,R0,R11
    322              err += ychg;
   \   0000008A   0x44C1             ADD      R9,R8,R9
    323              ychg += rxrx2;
   \   0000008C   0x4480             ADD      R8,R0,R8
    324              if ( 2*err+xchg > 0 )
   \   0000008E   0x4648             MOV      R0,R9
   \   00000090   0xB200             SXTH     R0,R0
   \   00000092   0x4639             MOV      R1,R7
   \   00000094   0xB209             SXTH     R1,R1
   \   00000096   0xEB01 0x0140      ADD      R1,R1,R0, LSL #+1
   \   0000009A   0x2900             CMP      R1,#+0
   \   0000009C   0xDD06             BLE.N    ??u8g_draw_filled_ellipse_0
    325              {
    326                x--;
   \   0000009E   0x1E6D             SUBS     R5,R5,#+1
    327                stopx -= ryry2;
   \   000000A0   0xEBAA 0x0A04      SUB      R10,R10,R4
   \   000000A4   0xFA0F 0xFA8A      SXTH     R10,R10
    328                err += xchg;
   \   000000A8   0x44B9             ADD      R9,R7,R9
    329                xchg += ryry2;      
   \   000000AA   0x19E7             ADDS     R7,R4,R7
    330              }
    331            }
   \                     ??u8g_draw_filled_ellipse_0: (+1)
   \   000000AC   0x4658             MOV      R0,R11
   \   000000AE   0xB200             SXTH     R0,R0
   \   000000B0   0x4582             CMP      R10,R0
   \   000000B2   0xDAD8             BGE.N    ??u8g_draw_filled_ellipse_1
   \   000000B4   0xF8DD 0xC010      LDR      R12,[SP, #+16]
   \   000000B8   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000000BC   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000000C0   0xF89D 0x2044      LDRB     R2,[SP, #+68]
   \   000000C4   0x9B03             LDR      R3,[SP, #+12]
    332          
    333            x = 0;
   \   000000C6   0x2500             MOVS     R5,#+0
    334            y = ry;
   \   000000C8   0xF89D 0x6040      LDRB     R6,[SP, #+64]
    335            
    336            xchg = ry;
    337            xchg *= ry;
   \   000000CC   0x46B3             MOV      R11,R6
   \   000000CE   0xF9BD 0x700A      LDRSH    R7,[SP, #+10]
    338            
    339            ychg = 1;
    340            ychg -= ry;
    341            ychg -= ry;
    342            ychg *= rx;
    343            ychg *= rx;
   \   000000D2   0xF89D 0xE018      LDRB     LR,[SP, #+24]
   \   000000D6   0xEA4F 0x084B      LSL      R8,R11,#+1
   \   000000DA   0xF1C8 0x0801      RSB      R8,R8,#+1
   \   000000DE   0xFB0E 0xF808      MUL      R8,LR,R8
   \   000000E2   0xFB0E 0xF808      MUL      R8,LR,R8
   \   000000E6   0xFA0F 0xF888      SXTH     R8,R8
    344            
    345            err = 0;
   \   000000EA   0x46A9             MOV      R9,R5
    346            
    347            stopx = 0;
   \   000000EC   0x46AA             MOV      R10,R5
    348          
    349            stopy = rxrx2;
    350            stopy *= ry;
   \   000000EE   0xFB0B 0xFB03      MUL      R11,R11,R3
   \   000000F2   0xFA0F 0xFB8B      SXTH     R11,R11
   \   000000F6   0xF8CD 0xC010      STR      R12,[SP, #+16]
   \   000000FA   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000000FE   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   00000102   0xF88D 0x2044      STRB     R2,[SP, #+68]
   \   00000106   0x9303             STR      R3,[SP, #+12]
   \   00000108   0xE022             B.N      ??u8g_draw_filled_ellipse_2
    351            
    352          
    353            while( stopx <= stopy )
    354            {
    355              u8g_draw_filled_ellipse_section(u8g, x, y, x0, y0, option);
   \                     ??u8g_draw_filled_ellipse_3: (+1)
   \   0000010A   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \   0000010E   0x9001             STR      R0,[SP, #+4]
   \   00000110   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000114   0x9000             STR      R0,[SP, #+0]
   \   00000116   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   0000011A   0x4632             MOV      R2,R6
   \   0000011C   0xB2D2             UXTB     R2,R2
   \   0000011E   0x4629             MOV      R1,R5
   \   00000120   0xB2C9             UXTB     R1,R1
   \   00000122   0x9804             LDR      R0,[SP, #+16]
   \   00000124   0x.... 0x....      BL       u8g_draw_filled_ellipse_section
    356              x++;
   \   00000128   0x1C6D             ADDS     R5,R5,#+1
    357              stopx += ryry2;
   \   0000012A   0x44A2             ADD      R10,R4,R10
    358              err += xchg;
   \   0000012C   0x44B9             ADD      R9,R7,R9
    359              xchg += ryry2;
   \   0000012E   0x19E7             ADDS     R7,R4,R7
    360              if ( 2*err+ychg > 0 )
   \   00000130   0x4648             MOV      R0,R9
   \   00000132   0xB200             SXTH     R0,R0
   \   00000134   0x4641             MOV      R1,R8
   \   00000136   0xB209             SXTH     R1,R1
   \   00000138   0xEB01 0x0140      ADD      R1,R1,R0, LSL #+1
   \   0000013C   0x2900             CMP      R1,#+0
   \   0000013E   0xDD07             BLE.N    ??u8g_draw_filled_ellipse_2
    361              {
    362                y--;
   \   00000140   0x1E76             SUBS     R6,R6,#+1
    363                stopy -= rxrx2;
   \   00000142   0x9803             LDR      R0,[SP, #+12]
   \   00000144   0xEBAB 0x0B00      SUB      R11,R11,R0
   \   00000148   0xFA0F 0xFB8B      SXTH     R11,R11
    364                err += ychg;
   \   0000014C   0x44C1             ADD      R9,R8,R9
    365                ychg += rxrx2;
   \   0000014E   0x4480             ADD      R8,R0,R8
    366              }
    367            }
   \                     ??u8g_draw_filled_ellipse_2: (+1)
   \   00000150   0x4650             MOV      R0,R10
   \   00000152   0xB200             SXTH     R0,R0
   \   00000154   0x4583             CMP      R11,R0
   \   00000156   0xDAD8             BGE.N    ??u8g_draw_filled_ellipse_3
    368            
    369          }
   \   00000158   0xB007             ADD      SP,SP,#+28
   \   0000015A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    370          

   \                                 In section .text, align 2, keep-with-next
    371          void u8g_DrawFilledEllipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rx, u8g_uint_t ry, uint8_t option)
    372          {
   \                     u8g_DrawFilledEllipse: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    373            /* check for bounding box */
    374            {
    375              u8g_uint_t rxp, rxp2;
    376              u8g_uint_t ryp, ryp2;
    377              
    378              rxp = rx;
    379              rxp++;
   \   0000000E   0xF108 0x0101      ADD      R1,R8,#+1
    380              rxp2 = rxp;
    381              rxp2 *= 2;
    382          
    383              ryp = ry;
    384              ryp++;
   \   00000012   0x1C62             ADDS     R2,R4,#+1
    385              ryp2 = ryp;
    386              ryp2 *= 2;
    387              
    388              if ( u8g_IsBBXIntersection(u8g, x0-rxp, y0-ryp, rxp2, ryp2) == 0)
   \   00000014   0x0050             LSLS     R0,R2,#+1
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x004B             LSLS     R3,R1,#+1
   \   0000001C   0xB2DB             UXTB     R3,R3
   \   0000001E   0x1ABA             SUBS     R2,R7,R2
   \   00000020   0xB2D2             UXTB     R2,R2
   \   00000022   0x1A71             SUBS     R1,R6,R1
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD008             BEQ.N    ??u8g_DrawFilledEllipse_0
    389                return;    
   \   00000030   0x9809             LDR      R0,[SP, #+36]
    390            }
    391            
    392            u8g_draw_filled_ellipse(u8g, x0, y0, rx, ry, option);
   \   00000032   0x9001             STR      R0,[SP, #+4]
   \   00000034   0x9400             STR      R4,[SP, #+0]
   \   00000036   0x4643             MOV      R3,R8
   \   00000038   0x463A             MOV      R2,R7
   \   0000003A   0x4631             MOV      R1,R6
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       u8g_draw_filled_ellipse
    393          }
   \                     ??u8g_DrawFilledEllipse_0: (+1)
   \   00000042   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_DrawEllipse
        32   -> u8g_IsBBXIntersection
        32   -> u8g_draw_ellipse
      32   u8g_DrawFilledEllipse
        32   -> u8g_IsBBXIntersection
        32   -> u8g_draw_filled_ellipse
      64   u8g_draw_ellipse
        64   -> u8g_draw_ellipse_section
      32   u8g_draw_ellipse_section
         0   -> u8g_DrawPixel
        32   -> u8g_DrawPixel
      64   u8g_draw_filled_ellipse
        64   -> u8g_draw_filled_ellipse_section
      32   u8g_draw_filled_ellipse_section
         0   -> u8g_DrawVLine
        32   -> u8g_DrawVLine


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      70  u8g_DrawEllipse
      70  u8g_DrawFilledEllipse
     350  u8g_draw_ellipse
     114  u8g_draw_ellipse_section
     350  u8g_draw_filled_ellipse
     134  u8g_draw_filled_ellipse_section

 
 1 088 bytes in section .text
 
 1 088 bytes of CODE memory

Errors: none
Warnings: none
