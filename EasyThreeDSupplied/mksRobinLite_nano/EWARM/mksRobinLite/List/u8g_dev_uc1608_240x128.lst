###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1608_240x128.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4AF2.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1608_240x128.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_uc1608_240x128.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_uc1608_240x128.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1608_240x128.c
      1          /*
      2          
      3          
      4          
      5            u8g_dev_uc1608_240x128.c
      6          
      7            Universal 8bit Graphics Library
      8          
      9            Copyright (c) 2013, olikraus@gmail.com (original 240x64 library)
     10            Modified by thieringpeti@gmail.com for Raystar rx240128 family displays
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification,
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list
     17              of conditions and the following disclaimer.
     18          
     19            * Redistributions in binary form must reproduce the above copyright notice, this
     20              list of conditions and the following disclaimer in the documentation and/or other
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     36          
     37          
     38          */
     39          
     40          /*
     41          Display: http://www.tme.eu/en/details/rx240128a-ghw/lcd-graphic-displays/raystar-optronics/
     42          Connection: HW / SW SPI.
     43          To get this display working, You need some extra capacitors:
     44          
     45          connect 4.7uF caps between:
     46              PIN1 & PIN2 VB1 +-
     47              PIN3 & PIN4 VB0 -+
     48          connect 0.1uF caps between:
     49              VLCD and VSS
     50              VBIAS and VSS
     51          You can find some schematics with a 10M resistor parallellized with the VLCD capacitor.
     52          
     53          Select 4-bit SPI mode.
     54          
     55          Connect D7 (PIN9) To VDD (+3.3V)
     56          Connect D1, D2, D4, D5, D6 to GND (PINS 10,11,12,14,15)
     57          Connect WR0, WR1, BM0, BM1 to GND (PINS 17,18,22,23)
     58          
     59          D0: (PIN16) AVR's SCK pin (HW SPI)
     60          D3: (PIN13) AVR's MOSI pin (HW SPI)
     61          CD: (PIN19) used as A0 in the library
     62          CS: (PIN21) Connect to the defined CS pin, and You can re-use the HW SPI in different routines.
     63          RST: (PIN20) optional reset, can be defined in the function, resets on initialization.
     64          
     65          Adjust contrast if necessary. Default: 0x072.
     66          
     67          */
     68          
     69          #include "u8g.h"
     70          
     71          #define WIDTH 240
     72          #define HEIGHT 128
     73          #define PAGE_HEIGHT 8
     74          
     75          /* see also ERC24064-1 for init sequence example */

   \                                 In section .text, align 4, keep-with-next
     76          static const uint8_t u8g_dev_uc1608_240x128_init_seq[] PROGMEM = {
   \                     u8g_dev_uc1608_240x128_init_seq:
   \   00000000   0xFF 0xD1          DC8 255, 209, 255, 224, 255, 193, 255, 208, 226, 255, 100, 255, 100, 38
   \              0xFF 0xE0    
   \              0xFF 0xC1    
   \              0xFF 0xD0    
   \              0xE2 0xFF    
   \              0x64 0xFF    
   \              0x64 0x26    
   \   0000000E   0xC8 0xEB          DC8 200, 235, 129, 114, 47, 255, 50, 64, 144, 137, 175, 164, 165, 166
   \              0x81 0x72    
   \              0x2F 0xFF    
   \              0x32 0x40    
   \              0x90 0x89    
   \              0xAF 0xA4    
   \              0xA5 0xA6    
   \   0000001C   0xFF 0x64          DC8 255, 100, 164, 255, 209, 255, 254, 0
   \              0xA4 0xFF    
   \              0xD1 0xFF    
   \              0xFE 0x00    
     77            U8G_ESC_CS(1),             /* disable chip (UC1608 has positive logic for CS) */
     78            U8G_ESC_ADR(0),           /* instruction mode */
     79            U8G_ESC_RST(1),           /* do reset low pulse with (15*16)+2 milliseconds */
     80          
     81          
     82            U8G_ESC_CS(0),             /* enable chip */
     83            0x0e2,            		/* soft reset */
     84          
     85            U8G_ESC_DLY(100),       /* delay 100 ms */
     86            U8G_ESC_DLY(100),       /* delay 100 ms */
     87            0x026,                        /* MUX rate and temperature compensation */
     88          
     89            0x0c8,		                /* Map control, Bit 3: MY=1, Bit 2: MX=0, Bit 0: MSF =0 */
     90          
     91            0x0eb,		                /* LCD bias Bits 0/1: 00=10.7 01=10.3, 10=12.0, 11=12.7*/
     92                                          /* default 0x0ea for 240x128 */
     93            0x081,		                /* set contrast (bits 0..5) and gain (bits 6/7) */
     94            0x072,		                /* default for 240x128 displays: 0x072*/
     95          
     96            0x02f,		                /* power on, Bit 2 PC2=1 (internal charge pump), Bits 0/1: cap of panel */
     97            U8G_ESC_DLY(50),         /* delay 50 ms */
     98          
     99            0x040,		                /* set display start line to 0 */
    100            0x090,		                /* no fixed lines */
    101            0x089,		                /* RAM access control  */
    102          
    103            0x0af,		                /* disable sleep mode  */
    104            0x0a4,		                /* normal display  */
    105            0x0a5,		                /* display all points, ST7565, UC1610 */
    106            // 0x0a7,                        /* inverse display */
    107            0x0a6,                        /* normal display */
    108          
    109            U8G_ESC_DLY(100),       /* delay 100 ms */
    110            0x0a4,		                /* normal display */
    111            U8G_ESC_CS(1),             /* disable chip */
    112            U8G_ESC_END                /* end of sequence */
    113          };
    114          

   \                                 In section .text, align 4, keep-with-next
    115          static const uint8_t u8g_dev_uc1608_240x128_data_start[] PROGMEM = {
   \                     u8g_dev_uc1608_240x128_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 208, 16, 0, 255, 254
   \              0xFF 0xD0    
   \              0x10 0x00    
   \              0xFF 0xFE    
    116            U8G_ESC_ADR(0),           /* instruction mode */
    117            U8G_ESC_CS(0),             /* enable chip */
    118            0x010,		/* set upper 4 bit of the col adr to 0 (UC1608)  */
    119            0x000,		/* set lower 4 bit of the col adr to 0 */
    120            U8G_ESC_END                /* end of sequence */
    121          };
    122          

   \                                 In section .text, align 4, keep-with-next
    123          uint8_t u8g_dev_uc1608_240x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    124          {
   \                     u8g_dev_uc1608_240x128_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    125            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1608_240x128_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD038             BEQ.N    ??u8g_dev_uc1608_240x128_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD013             BEQ.N    ??u8g_dev_uc1608_240x128_fn_2
   \   0000001A   0xE008             B.N      ??u8g_dev_uc1608_240x128_fn_3
    126            {
    127              case U8G_DEV_MSG_INIT:
    128                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1608_240x128_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_InitCom
    129                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_init_seq);
   \   00000024   0x....             ADR.N    R2,u8g_dev_uc1608_240x128_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    130                break;
    131              case U8G_DEV_MSG_STOP:
    132                break;
    133              case U8G_DEV_MSG_PAGE_NEXT:
    134                {
    135                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    136                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_data_start);
    137                  u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (UC1608) */
    138                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    139                  if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    140                    return 0;
    141                  u8g_SetChipSelect(u8g, dev, 1);
    142                }
    143                break;
    144              case U8G_DEV_MSG_CONTRAST:
    145                u8g_SetChipSelect(u8g, dev, 0);
    146                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    147                u8g_WriteByte(u8g, dev, 0x081);
    148                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);	/* set contrast from, keep gain at 0 */
    149                u8g_SetChipSelect(u8g, dev, 1);
    150                return 1;
    151            }
    152            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1608_240x128_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000003A   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
   \                     ??u8g_dev_uc1608_240x128_fn_4: (+1)
   \   0000003E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_uc1608_240x128_fn_2: (+1)
   \   00000042   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000046   0xBF00             Nop      
   \   00000048   0x....             ADR.N    R2,u8g_dev_uc1608_240x128_data_start
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000050   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000054   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       u8g_WriteByte
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0x4629             MOV      R1,R5
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       u8g_SetAddress
   \   0000006A   0x462A             MOV      R2,R5
   \   0000006C   0x4621             MOV      R1,R4
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD101             BNE.N    ??u8g_dev_uc1608_240x128_fn_5
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE7E0             B.N      ??u8g_dev_uc1608_240x128_fn_4
   \                     ??u8g_dev_uc1608_240x128_fn_5: (+1)
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000086   0xE7D2             B.N      ??u8g_dev_uc1608_240x128_fn_3
   \                     ??u8g_dev_uc1608_240x128_fn_1: (+1)
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x4629             MOV      R1,R5
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       u8g_SetAddress
   \   0000009A   0x2281             MOVS     R2,#+129
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       u8g_WriteByte
   \   000000A4   0x783A             LDRB     R2,[R7, #+0]
   \   000000A6   0x0892             LSRS     R2,R2,#+2
   \   000000A8   0x4629             MOV      R1,R5
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       u8g_WriteByte
   \   000000B0   0x2201             MOVS     R2,#+1
   \   000000B2   0x4629             MOV      R1,R5
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0xE7BF             B.N      ??u8g_dev_uc1608_240x128_fn_4
    153          }
    154          

   \                                 In section .text, align 4, keep-with-next
    155          uint8_t u8g_dev_uc1608_240x128_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    156          {
   \                     u8g_dev_uc1608_240x128_2x_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    157            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1608_240x128_2x_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD05F             BEQ.N    ??u8g_dev_uc1608_240x128_2x_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD014             BEQ.N    ??u8g_dev_uc1608_240x128_2x_fn_2
   \   0000001A   0xE008             B.N      ??u8g_dev_uc1608_240x128_2x_fn_3
    158            {
    159              case U8G_DEV_MSG_INIT:
    160                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1608_240x128_2x_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_InitCom
    161                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_init_seq);
   \   00000024   0x....             ADR.N    R2,u8g_dev_uc1608_240x128_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    162                break;
    163              case U8G_DEV_MSG_STOP:
    164                break;
    165              case U8G_DEV_MSG_PAGE_NEXT:
    166                {
    167                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    168          
    169                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_data_start);
    170                  u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
    171                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    172          	u8g_WriteSequence(u8g, dev, pb->width, pb->buf);
    173                  u8g_SetChipSelect(u8g, dev, 0);
    174          
    175                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_data_start);
    176                  u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
    177                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    178          	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width);
    179                  u8g_SetChipSelect(u8g, dev, 0);
    180                }
    181                break;
    182              case U8G_DEV_MSG_CONTRAST:
    183                u8g_SetChipSelect(u8g, dev, 1);
    184                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    185                u8g_WriteByte(u8g, dev, 0x081);
    186                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
    187                u8g_SetChipSelect(u8g, dev, 0);
    188                return 1;
    189            }
    190            return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1608_240x128_2x_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb16v1_base_fn
   \                     ??u8g_dev_uc1608_240x128_2x_fn_4: (+1)
   \   00000040   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??u8g_dev_uc1608_240x128_2x_fn_2: (+1)
   \   00000044   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000048   0x.... 0x....      ADR.W    R9,u8g_dev_uc1608_240x128_data_start
   \   0000004C   0x464A             MOV      R2,R9
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000054   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000058   0x0052             LSLS     R2,R2,#+1
   \   0000005A   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x4629             MOV      R1,R5
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       u8g_WriteByte
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x4629             MOV      R1,R5
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_SetAddress
   \   00000072   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   00000076   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       u8g_WriteSequence
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x4629             MOV      R1,R5
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000008C   0x464A             MOV      R2,R9
   \   0000008E   0x4629             MOV      R1,R5
   \   00000090   0x4620             MOV      R0,R4
   \   00000092   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000096   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   0000009A   0x0052             LSLS     R2,R2,#+1
   \   0000009C   0x1C52             ADDS     R2,R2,#+1
   \   0000009E   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   000000A2   0xB2D2             UXTB     R2,R2
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_WriteByte
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       u8g_SetAddress
   \   000000B6   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   000000BA   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000BE   0x4611             MOV      R1,R2
   \   000000C0   0x1843             ADDS     R3,R0,R1
   \   000000C2   0x4629             MOV      R1,R5
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       u8g_WriteSequence
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x4629             MOV      R1,R5
   \   000000CE   0x4620             MOV      R0,R4
   \   000000D0   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000D4   0xE7AB             B.N      ??u8g_dev_uc1608_240x128_2x_fn_3
   \                     ??u8g_dev_uc1608_240x128_2x_fn_1: (+1)
   \   000000D6   0x2201             MOVS     R2,#+1
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000DE   0x2200             MOVS     R2,#+0
   \   000000E0   0x4629             MOV      R1,R5
   \   000000E2   0x4620             MOV      R0,R4
   \   000000E4   0x.... 0x....      BL       u8g_SetAddress
   \   000000E8   0x2281             MOVS     R2,#+129
   \   000000EA   0x4629             MOV      R1,R5
   \   000000EC   0x4620             MOV      R0,R4
   \   000000EE   0x.... 0x....      BL       u8g_WriteByte
   \   000000F2   0x783A             LDRB     R2,[R7, #+0]
   \   000000F4   0x0892             LSRS     R2,R2,#+2
   \   000000F6   0x4629             MOV      R1,R5
   \   000000F8   0x4620             MOV      R0,R4
   \   000000FA   0x.... 0x....      BL       u8g_WriteByte
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x4629             MOV      R1,R5
   \   00000102   0x4620             MOV      R0,R4
   \   00000104   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0xE799             B.N      ??u8g_dev_uc1608_240x128_2x_fn_4
    191          }
    192          

   \                                 In section .bss, align 4
    193          U8G_PB_DEV(u8g_dev_uc1608_240x128_sw_spi , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_uc1608_240x128_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_uc1608_240x128_sw_spi_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1608_240x128_sw_spi_pb
   \                     u8g_dev_uc1608_240x128_sw_spi_pb:
   \   00000000   0x08 0x80          DC8 8, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1608_240x128_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1608_240x128_sw_spi
   \                     u8g_dev_uc1608_240x128_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1608_240x128_fn, u8g_dev_uc1608_240x128_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    194          U8G_PB_DEV(u8g_dev_uc1608_240x128_hw_spi , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_uc1608_240x128_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_uc1608_240x128_hw_spi_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1608_240x128_hw_spi_pb
   \                     u8g_dev_uc1608_240x128_hw_spi_pb:
   \   00000000   0x08 0x80          DC8 8, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1608_240x128_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1608_240x128_hw_spi
   \                     u8g_dev_uc1608_240x128_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1608_240x128_fn, u8g_dev_uc1608_240x128_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    195          

   \                                 In section .bss, align 4
    196          uint8_t u8g_dev_uc1608_240x128_2x_buf[WIDTH*2] U8G_NOCOMMON ;
   \                     u8g_dev_uc1608_240x128_2x_buf:
   \   00000000                      DS8 480

   \                                 In section .data, align 4
    197          u8g_pb_t u8g_dev_uc1608_240x128_2x_pb = { {16, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_uc1608_240x128_2x_buf};
   \                     u8g_dev_uc1608_240x128_2x_pb:
   \   00000000   0x10 0x80          DC8 16, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1608_240x128_2x_buf

   \                                 In section .data, align 4
    198          u8g_dev_t u8g_dev_uc1608_240x128_2x_sw_spi = { u8g_dev_uc1608_240x128_2x_fn, &u8g_dev_uc1608_240x128_2x_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_uc1608_240x128_2x_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1608_240x128_2x_fn, u8g_dev_uc1608_240x128_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    199          u8g_dev_t u8g_dev_uc1608_240x128_2x_hw_spi = { u8g_dev_uc1608_240x128_2x_fn, &u8g_dev_uc1608_240x128_2x_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_uc1608_240x128_2x_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1608_240x128_2x_fn, u8g_dev_uc1608_240x128_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    200          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_dev_uc1608_240x128_2x_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb16v1_base_fn
      24   u8g_dev_uc1608_240x128_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8v1_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     480  u8g_dev_uc1608_240x128_2x_buf
     268  u8g_dev_uc1608_240x128_2x_fn
      12  u8g_dev_uc1608_240x128_2x_hw_spi
      12  u8g_dev_uc1608_240x128_2x_pb
      12  u8g_dev_uc1608_240x128_2x_sw_spi
       8  u8g_dev_uc1608_240x128_data_start
     190  u8g_dev_uc1608_240x128_fn
      12  u8g_dev_uc1608_240x128_hw_spi
     240  u8g_dev_uc1608_240x128_hw_spi_buf
      12  u8g_dev_uc1608_240x128_hw_spi_pb
      36  u8g_dev_uc1608_240x128_init_seq
      12  u8g_dev_uc1608_240x128_sw_spi
     240  u8g_dev_uc1608_240x128_sw_spi_buf
      12  u8g_dev_uc1608_240x128_sw_spi_pb

 
 960 bytes in section .bss
  84 bytes in section .data
 502 bytes in section .text
 
   502 bytes of CODE memory
 1 044 bytes of DATA memory

Errors: none
Warnings: none
