###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ll_api.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4F8F.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ll_api.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_ll_api.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_ll_api.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_ll_api.c
      1          /*
      2          
      3            u8g_ll_api.c
      4            
      5            low level api
      6          
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2011, olikraus@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35            
     36          
     37          */
     38          
     39          #include <stddef.h>
     40          #include "u8g.h"
     41          extern unsigned char lcd_hal_delay_enable;

   \                                 In section .text, align 2, keep-with-next
     42          uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     43          {
   \                     u8g_call_dev_fn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     44            return dev->dev_fn(u8g, dev, msg, arg); 
   \   00000002   0x680C             LDR      R4,[R1, #+0]
   \   00000004   0x47A0             BLX      R4
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
     45          }
     46          
     47          /*====================================================================*/
     48          

   \                                 In section .text, align 2, keep-with-next
     49          uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
     50          {
   \                     u8g_InitLL: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     51            uint8_t r;
     52            u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x6C61             LDR      R1,[R4, #+68]
   \   0000000A   0x4788             BLX      R1
     53            r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x220A             MOVS     R2,#+10
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       u8g_call_dev_fn
   \   00000018   0x4605             MOV      R5,R0
     54            u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x6C61             LDR      R1,[R4, #+68]
   \   0000001E   0x4788             BLX      R1
     55            u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6C61             LDR      R1,[R4, #+68]
   \   00000024   0x4788             BLX      R1
     56            return r;
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     57          }
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
     60          {  
   \                     u8g_FirstPageLL: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     61            u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x6C61             LDR      R1,[R4, #+68]
   \   0000000A   0x4788             BLX      R1
     62            u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x6C61             LDR      R1,[R4, #+68]
   \   00000010   0x4788             BLX      R1
     63            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2214             MOVS     R2,#+20
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       u8g_call_dev_fn
     64            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
   \   0000001E   0xF104 0x0348      ADD      R3,R4,#+72
   \   00000022   0x2217             MOVS     R2,#+23
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       u8g_call_dev_fn
     65            u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x6C61             LDR      R1,[R4, #+68]
   \   00000030   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000034   0x4708             BX       R1
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
     69          {  
   \                     u8g_NextPageLL: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     70            uint8_t r;
     71            u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x6C61             LDR      R1,[R4, #+68]
   \   0000000A   0x4788             BLX      R1
     72            u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x6C61             LDR      R1,[R4, #+68]
   \   00000010   0x4788             BLX      R1
     73            r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2215             MOVS     R2,#+21
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       u8g_call_dev_fn
   \   0000001E   0x0006             MOVS     R6,R0
     74            if ( r != 0 )
   \   00000020   0xD006             BEQ.N    ??u8g_NextPageLL_0
     75            {
     76              u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
   \   00000022   0xF104 0x0348      ADD      R3,R4,#+72
   \   00000026   0x2217             MOVS     R2,#+23
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       u8g_call_dev_fn
     77            }
     78            u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
   \                     ??u8g_NextPageLL_0: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6C61             LDR      R1,[R4, #+68]
   \   00000034   0x4788             BLX      R1
     79            return r;
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
     83          {  
   \                     u8g_SetContrastLL: (+1)
   \   00000000   0xB504             PUSH     {R2,LR}
     84            return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
   \   00000002   0x466B             MOV      R3,SP
   \   00000004   0x220F             MOVS     R2,#+15
   \   00000006   0x.... 0x....      BL       u8g_call_dev_fn
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
     88          {
   \                     u8g_DrawPixelLL: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
   \   00000002   0x461C             MOV      R4,R3
     89            u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
     90            arg->x = x;
   \   00000004   0xF100 0x032D      ADD      R3,R0,#+45
   \   00000008   0x701A             STRB     R2,[R3, #+0]
     91            arg->y = y;
   \   0000000A   0x705C             STRB     R4,[R3, #+1]
     92            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
   \   0000000C   0x2232             MOVS     R2,#+50
   \   0000000E   0xB001             ADD      SP,SP,#+4
   \   00000010   0xBC10             POP      {R4}
   \   00000012   0x....             B.N      u8g_call_dev_fn
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
     96          {
   \                     u8g_Draw8PixelLL: (+1)
   \   00000000   0xB478             PUSH     {R3-R6}
   \   00000002   0x9E04             LDR      R6,[SP, #+16]
   \   00000004   0x9D05             LDR      R5,[SP, #+20]
     97            u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
     98            arg->x = x;
   \   00000006   0xF100 0x042D      ADD      R4,R0,#+45
   \   0000000A   0x7022             STRB     R2,[R4, #+0]
     99            arg->y = y;
   \   0000000C   0x7063             STRB     R3,[R4, #+1]
    100            arg->dir = dir;
   \   0000000E   0x70E6             STRB     R6,[R4, #+3]
    101            arg->pixel = pixel;
   \   00000010   0x70A5             STRB     R5,[R4, #+2]
    102            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
   \   00000012   0x4623             MOV      R3,R4
   \   00000014   0x223B             MOVS     R2,#+59
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x....             B.N      u8g_call_dev_fn
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void u8g_Draw4TPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
    106          {
   \                     u8g_Draw4TPixelLL: (+1)
   \   00000000   0xB478             PUSH     {R3-R6}
   \   00000002   0x9E04             LDR      R6,[SP, #+16]
   \   00000004   0x9D05             LDR      R5,[SP, #+20]
    107            u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    108            arg->x = x;
   \   00000006   0xF100 0x042D      ADD      R4,R0,#+45
   \   0000000A   0x7022             STRB     R2,[R4, #+0]
    109            arg->y = y;
   \   0000000C   0x7063             STRB     R3,[R4, #+1]
    110            arg->dir = dir;
   \   0000000E   0x70E6             STRB     R6,[R4, #+3]
    111            arg->pixel = pixel;
   \   00000010   0x70A5             STRB     R5,[R4, #+2]
    112            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_4TPIXEL, arg);
   \   00000012   0x4623             MOV      R3,R4
   \   00000014   0x222D             MOVS     R2,#+45
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x....             B.N      u8g_call_dev_fn
    113          }
    114          
    115          
    116          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    117          uint8_t u8g_IsBBXIntersectionLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
    118          {  
    119            return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_IS_BBX_INTERSECTION, &arg);
    120          }
    121          #endif
    122          
    123          
    124          

   \                                 In section .text, align 2, keep-with-next
    125          u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
    126          {
   \                     u8g_GetWidthLL: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    127            u8g_uint_t r;
    128            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
   \   00000002   0x466B             MOV      R3,SP
   \   00000004   0x2246             MOVS     R2,#+70
   \   00000006   0x.... 0x....      BL       u8g_call_dev_fn
    129            return r;
   \   0000000A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
    133          {       
   \                     u8g_GetHeightLL: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    134            u8g_uint_t r;
    135            u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
   \   00000002   0x466B             MOV      R3,SP
   \   00000004   0x2247             MOVS     R2,#+71
   \   00000006   0x.... 0x....      BL       u8g_call_dev_fn
    136            return r;
   \   0000000A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    137          }
    138          

   \                                 In section .text, align 2, keep-with-next
    139          u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
    140          {       
    141            return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
   \                     u8g_GetModeLL: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x2248             MOVS     R2,#+72
   \   00000004   0x....             B.N      u8g_call_dev_fn
    142          }
    143          
    144          
    145          
    146          /*====================================================================*/
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void u8g_UpdateDimension(u8g_t *u8g)
    149          {
   \                     u8g_UpdateDimension: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    150            u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
   \   00000004   0x6861             LDR      R1,[R4, #+4]
   \   00000006   0x.... 0x....      BL       u8g_GetWidthLL
   \   0000000A   0x7020             STRB     R0,[R4, #+0]
    151            u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
   \   0000000C   0x6861             LDR      R1,[R4, #+4]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000014   0x7060             STRB     R0,[R4, #+1]
    152            u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
   \   00000016   0x6861             LDR      R1,[R4, #+4]
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       u8g_GetModeLL
   \   0000001E   0x74E0             STRB     R0,[R4, #+19]
    153            /* 9 Dec 2012: u8g_scale.c requires update of current page */
    154            u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
   \   00000020   0xF104 0x0348      ADD      R3,R4,#+72
   \   00000024   0x2217             MOVS     R2,#+23
   \   00000026   0x6861             LDR      R1,[R4, #+4]
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002E   0x....             B.N      u8g_call_dev_fn
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          static void u8g_init_data(u8g_t *u8g)
    158          {
   \                     u8g_init_data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    159            u8g->font = NULL;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x60A0             STR      R0,[R4, #+8]
    160            u8g->cursor_font = NULL;
   \   00000008   0x60E0             STR      R0,[R4, #+12]
    161            u8g->cursor_bg_color = 0;
   \   0000000A   0x7460             STRB     R0,[R4, #+17]
    162            u8g->cursor_fg_color = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x7420             STRB     R0,[R4, #+16]
    163            u8g->cursor_encoding = 34;
   \   00000010   0x2022             MOVS     R0,#+34
   \   00000012   0x74A0             STRB     R0,[R4, #+18]
    164            u8g->cursor_fn = (u8g_draw_cursor_fn)0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x61A0             STR      R0,[R4, #+24]
    165          
    166          #if defined(U8G_WITH_PINLIST)  
    167            {
    168              uint8_t i;
    169              for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
   \   00000018   0x22FF             MOVS     R2,#+255
   \   0000001A   0xE003             B.N      ??u8g_init_data_0
    170                u8g->pin_list[i] = U8G_PIN_NONE;
   \                     ??u8g_init_data_1: (+1)
   \   0000001C   0x4421             ADD      R1,R4,R1
   \   0000001E   0xF881 0x2034      STRB     R2,[R1, #+52]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \                     ??u8g_init_data_0: (+1)
   \   00000024   0x4601             MOV      R1,R0
   \   00000026   0xB2C9             UXTB     R1,R1
   \   00000028   0x290E             CMP      R1,#+14
   \   0000002A   0xDBF7             BLT.N    ??u8g_init_data_1
    171            }
    172          #endif
    173            
    174            u8g_SetColorIndex(u8g, 1);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       u8g_SetColorIndex
    175          
    176            u8g_SetFontPosBaseline(u8g);
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       u8g_SetFontPosBaseline
    177            
    178            u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
   \   0000003A   0xF104 0x0028      ADD      R0,R4,#+40
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x7001             STRB     R1,[R0, #+0]
    179            u8g->font_ref_ascent = 0;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x7041             STRB     R1,[R0, #+1]
    180            u8g->font_ref_descent = 0;
   \   00000046   0x7081             STRB     R1,[R0, #+2]
    181            u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
   \   00000048   0x2140             MOVS     R1,#+64
   \   0000004A   0x70C1             STRB     R1,[R0, #+3]
    182            u8g->line_spacing = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x7101             STRB     R1,[R0, #+4]
    183            
    184            u8g->state_cb = u8g_state_dummy_cb;
   \   00000050   0x....             LDR.N    R1,??DataTable2
   \   00000052   0x61C1             STR      R1,[R0, #+28]
    185          
    186          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    187          

   \                                 In section .text, align 2, keep-with-next
    188          uint8_t u8g_Begin(u8g_t *u8g)
    189          {
   \                     u8g_Begin: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    190            /* call and init low level driver and com device */
    191            if ( u8g_InitLL(u8g, u8g->dev) == 0 )
   \   00000004   0x6861             LDR      R1,[R4, #+4]
   \   00000006   0x.... 0x....      BL       u8g_InitLL
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??u8g_Begin_0
    192              return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}
    193            /* fetch width and height from the low level */
    194            u8g_UpdateDimension(u8g);
   \                     ??u8g_Begin_0: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       u8g_UpdateDimension
    195            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    196          }
    197          

   \                                 In section .text, align 2, keep-with-next
    198          uint8_t u8g_Init(u8g_t *u8g, u8g_dev_t *dev)
    199          {
   \                     u8g_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    200            
    201            u8g_init_data(u8g);
   \   00000006   0x.... 0x....      BL       u8g_init_data
    202            u8g->dev = dev;
   \   0000000A   0x6065             STR      R5,[R4, #+4]
    203            
    204            /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
    205            /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
    206            /* if Arduino call u8g_UpdateDimension else u8g_Begin */
    207            /* issue 146 */
    208            if(!lcd_hal_delay_enable) return 0;
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE.N    ??u8g_Init_0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
    209          
    210            return u8g_Begin(u8g);
   \                     ??u8g_Init_0: (+1)
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000001E   0x....             B.N      u8g_Begin
    211          }
    212          
    213          /* special init for pure ARM systems */

   \                                 In section .text, align 2, keep-with-next
    214          uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
    215          {
   \                     u8g_InitComFn: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    216            u8g_init_data(u8g);
   \   00000008   0x.... 0x....      BL       u8g_init_data
    217            
    218          #if defined(U8G_WITH_PINLIST)  
    219            {
    220              uint8_t i;
    221              for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x22FE             MOVS     R2,#+254
   \   00000010   0xE003             B.N      ??u8g_InitComFn_0
    222                u8g->pin_list[i] = U8G_PIN_DUMMY;
   \                     ??u8g_InitComFn_1: (+1)
   \   00000012   0x4421             ADD      R1,R4,R1
   \   00000014   0xF881 0x2034      STRB     R2,[R1, #+52]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \                     ??u8g_InitComFn_0: (+1)
   \   0000001A   0x4601             MOV      R1,R0
   \   0000001C   0xB2C9             UXTB     R1,R1
   \   0000001E   0x290E             CMP      R1,#+14
   \   00000020   0xDBF7             BLT.N    ??u8g_InitComFn_1
    223            }
    224          #endif
    225            
    226            u8g->dev = dev;
   \   00000022   0x6065             STR      R5,[R4, #+4]
    227            
    228            /* replace the device procedure with a custom communication procedure */
    229            u8g->dev->com_fn = com_fn;
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x6086             STR      R6,[R0, #+8]
    230            
    231            /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
    232            /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
    233            /* if Arduino call u8g_UpdateDimension else u8g_Begin */
    234            /* issue 146 */
    235            return u8g_Begin(u8g);
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000002E   0x....             B.N      u8g_Begin
    236          }
    237          
    238          
    239          #if defined(U8G_WITH_PINLIST)  

   \                                 In section .text, align 2, keep-with-next
    240          uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
    241          {
   \                     u8g_InitSPI: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4691             MOV      R9,R2
   \   0000000A   0x469A             MOV      R10,R3
   \   0000000C   0x9E08             LDR      R6,[SP, #+32]
   \   0000000E   0x9D09             LDR      R5,[SP, #+36]
   \   00000010   0x9C0A             LDR      R4,[SP, #+40]
    242            
    243            /* fill data structure with some suitable values */
    244            u8g_init_data(u8g);
   \   00000012   0x.... 0x....      BL       u8g_init_data
    245            u8g->dev = dev;
   \   00000016   0xF8C7 0x8004      STR      R8,[R7, #+4]
    246              
    247            /* assign user pins */
    248            u8g->pin_list[U8G_PI_SCK] = sck;
   \   0000001A   0xF107 0x0034      ADD      R0,R7,#+52
   \   0000001E   0xF880 0x9004      STRB     R9,[R0, #+4]
    249            u8g->pin_list[U8G_PI_MOSI] = mosi;
   \   00000022   0xF880 0xA005      STRB     R10,[R0, #+5]
    250            u8g->pin_list[U8G_PI_CS] = cs;
   \   00000026   0x7086             STRB     R6,[R0, #+2]
    251            u8g->pin_list[U8G_PI_A0] = a0;
   \   00000028   0x7045             STRB     R5,[R0, #+1]
    252            u8g->pin_list[U8G_PI_RESET] = reset;
   \   0000002A   0x7004             STRB     R4,[R0, #+0]
    253            
    254            /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
    255            /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
    256            /* if Arduino call u8g_UpdateDimension else u8g_Begin */
    257            /* issue 146 */
    258            return u8g_Begin(u8g);
   \   0000002C   0x4638             MOV      R0,R7
   \   0000002E   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   00000032   0x....             B.N      u8g_Begin
    259          }
    260          

   \                                 In section .text, align 2, keep-with-next
    261          uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
    262          {
   \                     u8g_InitHWSPI: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C06             LDR      R4,[SP, #+24]
    263            /* fill data structure with some suitable values */
    264            u8g_init_data(u8g);
   \   0000000E   0x.... 0x....      BL       u8g_init_data
    265            u8g->dev = dev;
   \   00000012   0x606E             STR      R6,[R5, #+4]
    266            
    267            
    268            /* assign user pins */
    269            u8g->pin_list[U8G_PI_CS] = cs;
   \   00000014   0xF105 0x0034      ADD      R0,R5,#+52
   \   00000018   0x7087             STRB     R7,[R0, #+2]
    270            u8g->pin_list[U8G_PI_A0] = a0;
   \   0000001A   0xF880 0x8001      STRB     R8,[R0, #+1]
    271            u8g->pin_list[U8G_PI_RESET] = reset;
   \   0000001E   0x7004             STRB     R4,[R0, #+0]
    272          
    273            //u8g->dev->com_fn = com_fn;	//skyblue-add
    274            
    275            return u8g_Begin(u8g);
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000026   0x....             B.N      u8g_Begin
    276          }
    277          

   \                                 In section .text, align 2, keep-with-next
    278          uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
    279          {
   \                     u8g_InitI2C: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    280            /* fill data structure with some suitable values */
    281            u8g_init_data(u8g);
   \   00000008   0x.... 0x....      BL       u8g_init_data
    282            u8g->dev = dev;
   \   0000000C   0x6065             STR      R5,[R4, #+4]
    283              
    284            u8g->pin_list[U8G_PI_I2C_OPTION] = options;
   \   0000000E   0xF884 0x603F      STRB     R6,[R4, #+63]
    285            
    286            return u8g_Begin(u8g);
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000018   0x....             B.N      u8g_Begin
    287          }
    288          
    289          

   \                                 In section .text, align 2, keep-with-next
    290          uint8_t u8g_Init8BitFixedPort(u8g_t *u8g, u8g_dev_t *dev, uint8_t en, uint8_t cs, uint8_t di, uint8_t rw, uint8_t reset)
    291          {
   \                     u8g_Init8BitFixedPort: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4691             MOV      R9,R2
   \   0000000A   0x469A             MOV      R10,R3
   \   0000000C   0x9E08             LDR      R6,[SP, #+32]
   \   0000000E   0x9D09             LDR      R5,[SP, #+36]
   \   00000010   0x9C0A             LDR      R4,[SP, #+40]
    292            
    293            /* fill data structure with some suitable values */
    294            u8g_init_data(u8g);
   \   00000012   0x.... 0x....      BL       u8g_init_data
    295            u8g->dev = dev;
   \   00000016   0xF8C7 0x8004      STR      R8,[R7, #+4]
    296              
    297            /* assign user pins */
    298          
    299            u8g->pin_list[U8G_PI_EN] = en;
   \   0000001A   0xF107 0x0034      ADD      R0,R7,#+52
   \   0000001E   0xF880 0x9004      STRB     R9,[R0, #+4]
    300            u8g->pin_list[U8G_PI_CS] = cs;
   \   00000022   0xF880 0xA002      STRB     R10,[R0, #+2]
    301            u8g->pin_list[U8G_PI_DI] = di;
   \   00000026   0x7046             STRB     R6,[R0, #+1]
    302            u8g->pin_list[U8G_PI_RW] = rw;
   \   00000028   0x7345             STRB     R5,[R0, #+13]
    303            u8g->pin_list[U8G_PI_RESET] = reset;
   \   0000002A   0x7004             STRB     R4,[R0, #+0]
    304          
    305            return u8g_Begin(u8g);
   \   0000002C   0x4638             MOV      R0,R7
   \   0000002E   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   00000032   0x....             B.N      u8g_Begin
    306          }
    307          

   \                                 In section .text, align 2, keep-with-next
    308          uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
    309            uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
    310          {
   \                     u8g_Init8Bit: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x9C12             LDR      R4,[SP, #+72]
   \   00000008   0x9D13             LDR      R5,[SP, #+76]
   \   0000000A   0x9E14             LDR      R6,[SP, #+80]
   \   0000000C   0x9F15             LDR      R7,[SP, #+84]
   \   0000000E   0xF8DD 0x8058      LDR      R8,[SP, #+88]
   \   00000012   0xF8DD 0x905C      LDR      R9,[SP, #+92]
   \   00000016   0xF8DD 0xA060      LDR      R10,[SP, #+96]
   \   0000001A   0xF8DD 0xB064      LDR      R11,[SP, #+100]
    311            
    312            /* fill data structure with some suitable values */
    313            u8g_init_data(u8g);
   \   0000001E   0x.... 0x....      BL       u8g_init_data
    314            u8g->dev = dev;
   \   00000022   0x9802             LDR      R0,[SP, #+8]
   \   00000024   0x9901             LDR      R1,[SP, #+4]
   \   00000026   0x6048             STR      R0,[R1, #+4]
    315              
    316            /* assign user pins */
    317          
    318            u8g->pin_list[U8G_PI_D0] = d0;
   \   00000028   0x9801             LDR      R0,[SP, #+4]
   \   0000002A   0x3034             ADDS     R0,R0,#+52
   \   0000002C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000030   0x7141             STRB     R1,[R0, #+5]
    319            u8g->pin_list[U8G_PI_D1] = d1;
   \   00000032   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000036   0x7181             STRB     R1,[R0, #+6]
    320            u8g->pin_list[U8G_PI_D2] = d2;
   \   00000038   0xF89D 0x1038      LDRB     R1,[SP, #+56]
   \   0000003C   0x71C1             STRB     R1,[R0, #+7]
    321            u8g->pin_list[U8G_PI_D3] = d3;
   \   0000003E   0xF89D 0x103C      LDRB     R1,[SP, #+60]
   \   00000042   0x7201             STRB     R1,[R0, #+8]
    322            u8g->pin_list[U8G_PI_D4] = d4;
   \   00000044   0xF89D 0x1040      LDRB     R1,[SP, #+64]
   \   00000048   0x7241             STRB     R1,[R0, #+9]
    323            u8g->pin_list[U8G_PI_D5] = d5;
   \   0000004A   0xF89D 0x1044      LDRB     R1,[SP, #+68]
   \   0000004E   0x7281             STRB     R1,[R0, #+10]
    324            u8g->pin_list[U8G_PI_D6] = d6;
   \   00000050   0x72C4             STRB     R4,[R0, #+11]
    325            u8g->pin_list[U8G_PI_D7] = d7;
   \   00000052   0x7305             STRB     R5,[R0, #+12]
    326          
    327            u8g->pin_list[U8G_PI_EN] = en;
   \   00000054   0x7106             STRB     R6,[R0, #+4]
    328            u8g->pin_list[U8G_PI_CS1] = cs1;
   \   00000056   0x7087             STRB     R7,[R0, #+2]
    329            u8g->pin_list[U8G_PI_CS2] = cs2;
   \   00000058   0xF880 0x8003      STRB     R8,[R0, #+3]
    330            u8g->pin_list[U8G_PI_DI] = di;
   \   0000005C   0xF880 0x9001      STRB     R9,[R0, #+1]
    331            u8g->pin_list[U8G_PI_RW] = rw;
   \   00000060   0xF880 0xA00D      STRB     R10,[R0, #+13]
    332            u8g->pin_list[U8G_PI_RESET] = reset;
   \   00000064   0xF880 0xB000      STRB     R11,[R0, #+0]
    333            
    334            return u8g_Begin(u8g);
   \   00000068   0x9801             LDR      R0,[SP, #+4]
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000070   0x....             B.N      u8g_Begin
    335          }
    336          
    337          /*
    338          
    339            PIN_D0 8
    340            PIN_D1 9
    341            PIN_D2 10
    342            PIN_D3 11
    343            PIN_D4 4
    344            PIN_D5 5
    345            PIN_D6 6
    346            PIN_D7 7
    347          
    348            PIN_CS 14
    349            PIN_A0 15
    350            PIN_RESET 16
    351            PIN_WR 17
    352            PIN_RD 18
    353            
    354            u8g_InitRW8Bit(u8g, dev, d0, d1, d2, d3, d4, d5, d6, d7, cs, a0, wr, rd, reset)
    355            u8g_InitRW8Bit(u8g, dev,  8,  9, 10, 11,  4,  5,  6,  7, 14, 15, 17, 18, 16)
    356          
    357          */
    358          

   \                                 In section .text, align 2, keep-with-next
    359          uint8_t u8g_InitRW8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
    360            uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset)
    361          {
   \                     u8g_InitRW8Bit: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x9C11             LDR      R4,[SP, #+68]
   \   00000008   0x9D12             LDR      R5,[SP, #+72]
   \   0000000A   0x9E13             LDR      R6,[SP, #+76]
   \   0000000C   0x9F14             LDR      R7,[SP, #+80]
   \   0000000E   0xF8DD 0x8054      LDR      R8,[SP, #+84]
   \   00000012   0xF8DD 0x9058      LDR      R9,[SP, #+88]
   \   00000016   0xF8DD 0xA05C      LDR      R10,[SP, #+92]
   \   0000001A   0xF8DD 0xB060      LDR      R11,[SP, #+96]
    362            
    363            /* fill data structure with some suitable values */
    364            u8g_init_data(u8g);
   \   0000001E   0x.... 0x....      BL       u8g_init_data
    365            u8g->dev = dev;
   \   00000022   0x9802             LDR      R0,[SP, #+8]
   \   00000024   0x9901             LDR      R1,[SP, #+4]
   \   00000026   0x6048             STR      R0,[R1, #+4]
    366              
    367            /* assign user pins */
    368          
    369            u8g->pin_list[U8G_PI_D0] = d0;
   \   00000028   0x9801             LDR      R0,[SP, #+4]
   \   0000002A   0x3034             ADDS     R0,R0,#+52
   \   0000002C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000030   0x7141             STRB     R1,[R0, #+5]
    370            u8g->pin_list[U8G_PI_D1] = d1;
   \   00000032   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000036   0x7181             STRB     R1,[R0, #+6]
    371            u8g->pin_list[U8G_PI_D2] = d2;
   \   00000038   0xF89D 0x1038      LDRB     R1,[SP, #+56]
   \   0000003C   0x71C1             STRB     R1,[R0, #+7]
    372            u8g->pin_list[U8G_PI_D3] = d3;
   \   0000003E   0xF89D 0x103C      LDRB     R1,[SP, #+60]
   \   00000042   0x7201             STRB     R1,[R0, #+8]
    373            u8g->pin_list[U8G_PI_D4] = d4;
   \   00000044   0xF89D 0x1040      LDRB     R1,[SP, #+64]
   \   00000048   0x7241             STRB     R1,[R0, #+9]
    374            u8g->pin_list[U8G_PI_D5] = d5;
   \   0000004A   0x7284             STRB     R4,[R0, #+10]
    375            u8g->pin_list[U8G_PI_D6] = d6;
   \   0000004C   0x72C5             STRB     R5,[R0, #+11]
    376            u8g->pin_list[U8G_PI_D7] = d7;
   \   0000004E   0x7306             STRB     R6,[R0, #+12]
    377          
    378            u8g->pin_list[U8G_PI_CS] = cs;
   \   00000050   0x7087             STRB     R7,[R0, #+2]
    379            u8g->pin_list[U8G_PI_A0] = a0;
   \   00000052   0xF880 0x8001      STRB     R8,[R0, #+1]
    380            u8g->pin_list[U8G_PI_WR] = wr;
   \   00000056   0xF880 0x900D      STRB     R9,[R0, #+13]
    381            u8g->pin_list[U8G_PI_RD] = rd;
   \   0000005A   0xF880 0xA004      STRB     R10,[R0, #+4]
    382            u8g->pin_list[U8G_PI_RESET] = reset;
   \   0000005E   0xF880 0xB000      STRB     R11,[R0, #+0]
    383            
    384            return u8g_Begin(u8g);
   \   00000062   0x9801             LDR      R0,[SP, #+4]
   \   00000064   0xB005             ADD      SP,SP,#+20
   \   00000066   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   0000006A   0x....             B.N      u8g_Begin
    385          }
    386          #endif /* defined(U8G_WITH_PINLIST)  */
    387          

   \                                 In section .text, align 2, keep-with-next
    388          void u8g_FirstPage(u8g_t *u8g)
    389          {
    390            u8g_FirstPageLL(u8g, u8g->dev);
   \                     u8g_FirstPage: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x....             B.N      u8g_FirstPageLL
    391          }
    392          

   \                                 In section .text, align 2, keep-with-next
    393          uint8_t u8g_NextPage(u8g_t *u8g)
    394          {
   \                     u8g_NextPage: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    395            if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
   \   00000004   0x69A1             LDR      R1,[R4, #+24]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD000             BEQ.N    ??u8g_NextPage_0
    396            {
    397              u8g->cursor_fn(u8g);
   \   0000000A   0x4788             BLX      R1
    398            }
    399            return u8g_NextPageLL(u8g, u8g->dev);
   \                     ??u8g_NextPage_0: (+1)
   \   0000000C   0x6861             LDR      R1,[R4, #+4]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x....             B.N      u8g_NextPageLL
    400          }
    401          

   \                                 In section .text, align 2, keep-with-next
    402          uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
    403          {
   \                     u8g_SetContrast: (+1)
   \   00000000   0x460A             MOV      R2,R1
    404            return u8g_SetContrastLL(u8g, u8g->dev, contrast);
   \   00000002   0x6841             LDR      R1,[R0, #+4]
   \   00000004   0x....             B.N      u8g_SetContrastLL
    405          }
    406          

   \                                 In section .text, align 2, keep-with-next
    407          void u8g_SleepOn(u8g_t *u8g)
    408          {
    409            u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_ON, NULL);
   \                     u8g_SleepOn: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x2210             MOVS     R2,#+16
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x....             B.N      u8g_call_dev_fn
    410          }
    411          

   \                                 In section .text, align 2, keep-with-next
    412          void u8g_SleepOff(u8g_t *u8g)
    413          {
    414            u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
   \                     u8g_SleepOff: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x2211             MOVS     R2,#+17
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x....             B.N      u8g_call_dev_fn
    415          }
    416          
    417          

   \                                 In section .text, align 2, keep-with-next
    418          void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
    419          {
   \                     u8g_DrawPixel: (+1)
   \   00000000   0x4613             MOV      R3,R2
    420            u8g_DrawPixelLL(u8g, u8g->dev, x, y);
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x....             B.N      u8g_DrawPixelLL
    421          }
    422          

   \                                 In section .text, align 2, keep-with-next
    423          void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
    424          {
   \                     u8g_Draw8Pixel: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
    425            u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
   \   00000004   0x9401             STR      R4,[SP, #+4]
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0x460A             MOV      R2,R1
   \   0000000C   0x6841             LDR      R1,[R0, #+4]
   \   0000000E   0x.... 0x....      BL       u8g_Draw8PixelLL
    426          }
   \   00000012   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    427          

   \                                 In section .text, align 2, keep-with-next
    428          void u8g_Draw4TPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
    429          {
   \                     u8g_Draw4TPixel: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
    430            u8g_Draw4TPixelLL(u8g, u8g->dev, x, y, dir, pixel);
   \   00000004   0x9401             STR      R4,[SP, #+4]
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0x460A             MOV      R2,R1
   \   0000000C   0x6841             LDR      R1,[R0, #+4]
   \   0000000E   0x.... 0x....      BL       u8g_Draw4TPixelLL
    431          }
   \   00000012   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    432          
    433          
    434          /* u8g_IsBBXIntersection() has been moved to u8g_clip.c */
    435          #ifdef OBSOLETE_CODE
    436          uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
    437          {
    438            /* new code */
    439            u8g_dev_arg_bbx_t arg;
    440            arg.x = x;
    441            arg.y = y;
    442            arg.w = w;
    443            arg.h = h;
    444            return u8g_is_box_bbx_intersection(&(u8g->current_page), &arg);
    445          
    446            /* old code */
    447            //return u8g_IsBBXIntersectionLL(u8g, u8g->dev, x, y, w, h);
    448          }
    449          #endif
    450          
    451          /*
    452            idx: index for the palette entry (0..255)
    453            r: value for red (0..255)
    454            g: value for green (0..255)
    455            b: value for blue (0..255)
    456          */

   \                                 In section .text, align 2, keep-with-next
    457          void u8g_SetColorEntry(u8g_t *u8g, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
    458          {
   \                     u8g_SetColorEntry: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
    459            u8g_dev_arg_irgb_t irgb;
    460            irgb.idx = idx;
   \   00000004   0xF88D 0x1000      STRB     R1,[SP, #+0]
    461            irgb.r = r;
   \   00000008   0xF88D 0x2001      STRB     R2,[SP, #+1]
    462            irgb.g = g;
   \   0000000C   0xF88D 0x3002      STRB     R3,[SP, #+2]
    463            irgb.b = b;  
   \   00000010   0xF88D 0x4003      STRB     R4,[SP, #+3]
    464            u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
   \   00000014   0x466B             MOV      R3,SP
   \   00000016   0x223C             MOVS     R2,#+60
   \   00000018   0x6841             LDR      R1,[R0, #+4]
   \   0000001A   0x.... 0x....      BL       u8g_call_dev_fn
    465          }
   \   0000001E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    466          

   \                                 In section .text, align 2, keep-with-next
    467          void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
    468          {
    469            u8g->arg_pixel.color = idx;
   \                     u8g_SetColorIndex: (+1)
   \   00000000   0xF880 0x1031      STRB     R1,[R0, #+49]
    470            /*u8g->color_index = idx; */ /* must be removed */
    471          }
   \   00000004   0x4770             BX       LR               ;; return
    472          

   \                                 In section .text, align 2, keep-with-next
    473          void u8g_SetHiColor(u8g_t *u8g, uint16_t rgb)
    474          {
    475            u8g->arg_pixel.color = rgb&255;
   \                     u8g_SetHiColor: (+1)
   \   00000000   0x3031             ADDS     R0,R0,#+49
   \   00000002   0x7001             STRB     R1,[R0, #+0]
    476            u8g->arg_pixel.hi_color = rgb>>8;
   \   00000004   0x0A09             LSRS     R1,R1,#+8
   \   00000006   0x7041             STRB     R1,[R0, #+1]
    477            /*u8g->color_index = idx; */ /* must be removed */
    478          }
   \   00000008   0x4770             BX       LR               ;; return
    479          

   \                                 In section .text, align 2, keep-with-next
    480          void u8g_SetHiColorByRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
    481          {
   \                     u8g_SetHiColorByRGB: (+1)
   \   00000000   0xB410             PUSH     {R4}
    482            
    483            r &= ~7;
    484            g >>= 2;
   \   00000002   0x0892             LSRS     R2,R2,#+2
    485            b >>= 3;
    486            u8g->arg_pixel.color = b;
   \   00000004   0x08DB             LSRS     R3,R3,#+3
   \   00000006   0xF100 0x0431      ADD      R4,R0,#+49
   \   0000000A   0x7023             STRB     R3,[R4, #+0]
    487            u8g->arg_pixel.color |= (g & 7) << 5;
   \   0000000C   0xEA43 0x1342      ORR      R3,R3,R2, LSL #+5
   \   00000010   0x7023             STRB     R3,[R4, #+0]
    488            u8g->arg_pixel.hi_color = r;
   \   00000012   0xF001 0x01F8      AND      R1,R1,#0xF8
   \   00000016   0x7061             STRB     R1,[R4, #+1]
    489            u8g->arg_pixel.hi_color |= (g>>3) & 7;
   \   00000018   0xF3C2 0x00C2      UBFX     R0,R2,#+3,#+3
   \   0000001C   0x4301             ORRS     R1,R0,R1
   \   0000001E   0x7061             STRB     R1,[R4, #+1]
    490            
    491            //u8g_SetHiColor(u8g, U8G_GET_HICOLOR_BY_RGB(r,g,b));
    492          }
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    493          

   \                                 In section .text, align 2, keep-with-next
    494          void u8g_SetRGB(u8g_t *u8g, uint8_t r, uint8_t g, uint8_t b)
    495          {
   \                     u8g_SetRGB: (+1)
   \   00000000   0xB43C             PUSH     {R2-R5}
    496            if ( u8g->mode == U8G_MODE_R3G3B2 ) 
   \   00000002   0xF100 0x0413      ADD      R4,R0,#+19
   \   00000006   0x7825             LDRB     R5,[R4, #+0]
   \   00000008   0x2D28             CMP      R5,#+40
   \   0000000A   0xD109             BNE.N    ??u8g_SetRGB_0
    497            {
    498              r &= 0x0e0;
    499              g &= 0x0e0;
    500              g >>= 3;
    501              b >>= 6;
    502              u8g->arg_pixel.color = r | g | b;
   \   0000000C   0xF001 0x01E0      AND      R1,R1,#0xE0
   \   00000010   0x08D2             LSRS     R2,R2,#+3
   \   00000012   0xF002 0x021C      AND      R2,R2,#0x1C
   \   00000016   0x4311             ORRS     R1,R2,R1
   \   00000018   0xEA41 0x1193      ORR      R1,R1,R3, LSR #+6
   \   0000001C   0x77A1             STRB     R1,[R4, #+30]
   \   0000001E   0xE008             B.N      ??u8g_SetRGB_1
    503            }
    504            else if ( u8g->mode == U8G_MODE_HICOLOR )
   \                     ??u8g_SetRGB_0: (+1)
   \   00000020   0x2D30             CMP      R5,#+48
   \   00000022   0xD102             BNE.N    ??u8g_SetRGB_2
    505            {
    506              u8g_SetHiColorByRGB(u8g, r,g,b);
   \   00000024   0xB002             ADD      SP,SP,#+8
   \   00000026   0xBC30             POP      {R4,R5}
   \   00000028   0x....             B.N      u8g_SetHiColorByRGB
    507            }
    508            else
    509            {
    510              u8g->arg_pixel.color = r;
   \                     ??u8g_SetRGB_2: (+1)
   \   0000002A   0x77A1             STRB     R1,[R4, #+30]
    511              u8g->arg_pixel.hi_color = g;
   \   0000002C   0x77E2             STRB     R2,[R4, #+31]
    512              u8g->arg_pixel.blue = b;
   \   0000002E   0xF880 0x3033      STRB     R3,[R0, #+51]
    513            }
    514          }
   \                     ??u8g_SetRGB_1: (+1)
   \   00000032   0xBC33             POP      {R0,R1,R4,R5}
   \   00000034   0x4770             BX       LR               ;; return
    515          
    516          

   \                                 In section .text, align 2, keep-with-next
    517          uint8_t u8g_GetColorIndex(u8g_t *u8g)
    518          {
    519            return u8g->arg_pixel.color;
   \                     u8g_GetColorIndex: (+1)
   \   00000000   0xF890 0x0031      LDRB     R0,[R0, #+49]
   \   00000004   0x4770             BX       LR               ;; return
    520          }
    521          

   \                                 In section .text, align 2, keep-with-next
    522          uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
    523          {
    524            uint8_t mode;
    525            mode = u8g_GetMode(u8g);
    526            if ( mode == U8G_MODE_R3G3B2 ) 
   \                     u8g_GetDefaultForegroundColor: (+1)
   \   00000000   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000002   0x2828             CMP      R0,#+40
   \   00000004   0xD101             BNE.N    ??u8g_GetDefaultForegroundColor_0
    527              return 255;     /* white */
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0x4770             BX       LR
    528            else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
   \                     ??u8g_GetDefaultForegroundColor_0: (+1)
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??u8g_GetDefaultForegroundColor_1
    529              return 3;         /* max intensity */
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x4770             BX       LR
    530            else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    531              return 1;         /* pixel on */
   \                     ??u8g_GetDefaultForegroundColor_1: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x4770             BX       LR               ;; return
    532            return 1;
                   ^
Warning[Pe111]: statement is unreachable
    533          }
    534          

   \                                 In section .text, align 2, keep-with-next
    535          void u8g_SetDefaultForegroundColor(u8g_t *u8g)
    536          {
   \                     u8g_SetDefaultForegroundColor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    537            if ( u8g->mode == U8G_MODE_HICOLOR )
   \   00000004   0xF104 0x0013      ADD      R0,R4,#+19
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x2930             CMP      R1,#+48
   \   0000000C   0xD103             BNE.N    ??u8g_SetDefaultForegroundColor_0
    538            {
    539              u8g->arg_pixel.color = 0x0ff;
   \   0000000E   0x21FF             MOVS     R1,#+255
   \   00000010   0x7781             STRB     R1,[R0, #+30]
    540              u8g->arg_pixel.hi_color = 0x0ff;
   \   00000012   0x77C1             STRB     R1,[R0, #+31]
   \   00000014   0xBD10             POP      {R4,PC}
    541            }
    542            else
    543            {
    544              u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
   \                     ??u8g_SetDefaultForegroundColor_0: (+1)
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       u8g_GetDefaultForegroundColor
   \   0000001C   0x4601             MOV      R1,R0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x....             B.N      u8g_SetColorIndex
    545            }
    546          }
    547          

   \                                 In section .text, align 2, keep-with-next
    548          uint8_t u8g_GetDefaultBackgroundColor(u8g_t *u8g)
    549          {
    550            return 0;
   \                     u8g_GetDefaultBackgroundColor: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    551          }
    552          

   \                                 In section .text, align 2, keep-with-next
    553          void u8g_SetDefaultBackgroundColor(u8g_t *u8g)
    554          {
   \                     u8g_SetDefaultBackgroundColor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    555            u8g_SetColorIndex(u8g, u8g_GetDefaultBackgroundColor(u8g));         /* pixel on / black */
   \   00000004   0x.... 0x....      BL       u8g_GetDefaultBackgroundColor
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x....             B.N      u8g_SetColorIndex
    556          }
    557          

   \                                 In section .text, align 2, keep-with-next
    558          uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
    559          {
    560            uint8_t mode;
    561            mode = u8g_GetMode(u8g);
    562            if ( mode == U8G_MODE_R3G3B2 ) 
   \                     u8g_GetDefaultMidColor: (+1)
   \   00000000   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000002   0x2828             CMP      R0,#+40
   \   00000004   0xD101             BNE.N    ??u8g_GetDefaultMidColor_0
    563              return 0x06d;     /* gray: 01101101 */
   \   00000006   0x206D             MOVS     R0,#+109
   \   00000008   0x4770             BX       LR
    564            else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
   \                     ??u8g_GetDefaultMidColor_0: (+1)
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??u8g_GetDefaultMidColor_1
    565              return 1;         /* low mid intensity */
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x4770             BX       LR
    566            else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    567              return 1;         /* pixel on */
   \                     ??u8g_GetDefaultMidColor_1: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x4770             BX       LR               ;; return
    568            return 1;   /* default */
                   ^
Warning[Pe111]: statement is unreachable
    569          }
    570          

   \                                 In section .text, align 2, keep-with-next
    571          void u8g_SetDefaultMidColor(u8g_t *u8g)
    572          {
   \                     u8g_SetDefaultMidColor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    573            u8g_SetColorIndex(u8g, u8g_GetDefaultMidColor(u8g));
   \   00000004   0x.... 0x....      BL       u8g_GetDefaultMidColor
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x....             B.N      u8g_SetColorIndex
    574          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     u8g_state_dummy_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     lcd_hal_delay_enable
    575          
    576          
    577          
    578          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   u8g_Begin
         8   -> u8g_InitLL
         8   -> u8g_UpdateDimension
      16   u8g_Draw4TPixel
        16   -> u8g_Draw4TPixelLL
      16   u8g_Draw4TPixelLL
         0   -> u8g_call_dev_fn
      16   u8g_Draw8Pixel
        16   -> u8g_Draw8PixelLL
      16   u8g_Draw8PixelLL
         0   -> u8g_call_dev_fn
       0   u8g_DrawPixel
         0   -> u8g_DrawPixelLL
       8   u8g_DrawPixelLL
         0   -> u8g_call_dev_fn
       0   u8g_FirstPage
         0   -> u8g_FirstPageLL
      16   u8g_FirstPageLL
         0   -- Indirect call
        16   -- Indirect call
        16   -> u8g_call_dev_fn
       0   u8g_GetColorIndex
       0   u8g_GetDefaultBackgroundColor
       0   u8g_GetDefaultForegroundColor
       0   u8g_GetDefaultMidColor
       8   u8g_GetHeightLL
         8   -> u8g_call_dev_fn
       0   u8g_GetModeLL
         0   -> u8g_call_dev_fn
       8   u8g_GetWidthLL
         8   -> u8g_call_dev_fn
      16   u8g_Init
         0   -> u8g_Begin
        16   -> u8g_init_data
      56   u8g_Init8Bit
         0   -> u8g_Begin
        56   -> u8g_init_data
      32   u8g_Init8BitFixedPort
         0   -> u8g_Begin
        32   -> u8g_init_data
      16   u8g_InitComFn
         0   -> u8g_Begin
        16   -> u8g_init_data
      24   u8g_InitHWSPI
         0   -> u8g_Begin
        24   -> u8g_init_data
      16   u8g_InitI2C
         0   -> u8g_Begin
        16   -> u8g_init_data
      16   u8g_InitLL
        16   -- Indirect call
        16   -> u8g_call_dev_fn
      56   u8g_InitRW8Bit
         0   -> u8g_Begin
        56   -> u8g_init_data
      32   u8g_InitSPI
         0   -> u8g_Begin
        32   -> u8g_init_data
       8   u8g_NextPage
         8   -- Indirect call
         0   -> u8g_NextPageLL
      16   u8g_NextPageLL
        16   -- Indirect call
        16   -> u8g_call_dev_fn
      16   u8g_SetColorEntry
        16   -> u8g_call_dev_fn
       0   u8g_SetColorIndex
       0   u8g_SetContrast
         0   -> u8g_SetContrastLL
       8   u8g_SetContrastLL
         8   -> u8g_call_dev_fn
       8   u8g_SetDefaultBackgroundColor
         8   -> u8g_GetDefaultBackgroundColor
         0   -> u8g_SetColorIndex
       8   u8g_SetDefaultForegroundColor
         8   -> u8g_GetDefaultForegroundColor
         0   -> u8g_SetColorIndex
       8   u8g_SetDefaultMidColor
         8   -> u8g_GetDefaultMidColor
         0   -> u8g_SetColorIndex
       0   u8g_SetHiColor
       4   u8g_SetHiColorByRGB
      16   u8g_SetRGB
         0   -> u8g_SetHiColorByRGB
       0   u8g_SleepOff
         0   -> u8g_call_dev_fn
       0   u8g_SleepOn
         0   -> u8g_call_dev_fn
       8   u8g_UpdateDimension
         8   -> u8g_GetHeightLL
         8   -> u8g_GetModeLL
         8   -> u8g_GetWidthLL
         0   -> u8g_call_dev_fn
       8   u8g_call_dev_fn
         8   -- Indirect call
       8   u8g_init_data
         8   -> u8g_SetColorIndex
         8   -> u8g_SetFontPosBaseline


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      28  u8g_Begin
      20  u8g_Draw4TPixel
      28  u8g_Draw4TPixelLL
      20  u8g_Draw8Pixel
      28  u8g_Draw8PixelLL
       8  u8g_DrawPixel
      20  u8g_DrawPixelLL
       4  u8g_FirstPage
      54  u8g_FirstPageLL
       6  u8g_GetColorIndex
       4  u8g_GetDefaultBackgroundColor
      22  u8g_GetDefaultForegroundColor
      22  u8g_GetDefaultMidColor
      16  u8g_GetHeightLL
       6  u8g_GetModeLL
      16  u8g_GetWidthLL
      32  u8g_Init
     114  u8g_Init8Bit
      52  u8g_Init8BitFixedPort
      48  u8g_InitComFn
      40  u8g_InitHWSPI
      26  u8g_InitI2C
      42  u8g_InitLL
     108  u8g_InitRW8Bit
      52  u8g_InitSPI
      22  u8g_NextPage
      58  u8g_NextPageLL
      32  u8g_SetColorEntry
       6  u8g_SetColorIndex
       6  u8g_SetContrast
      12  u8g_SetContrastLL
      18  u8g_SetDefaultBackgroundColor
      38  u8g_SetDefaultForegroundColor
      18  u8g_SetDefaultMidColor
      10  u8g_SetHiColor
      36  u8g_SetHiColorByRGB
      54  u8g_SetRGB
       8  u8g_SleepOff
       8  u8g_SleepOn
      48  u8g_UpdateDimension
       8  u8g_call_dev_fn
      86  u8g_init_data

 
 1 292 bytes in section .text
 
 1 292 bytes of CODE memory

Errors: none
Warnings: 2
