###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1327_96x96_gr.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW46BA.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1327_96x96_gr.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        F:\nano\EWARM\mksRobinLite\List\u8g_dev_ssd1327_96x96_gr.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_ssd1327_96x96_gr.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1327_96x96_gr.c
      1          /*
      2          
      3            u8g_dev_ssd1327_96x96_gr.c
      4            
      5            2-Bit (graylevel) Driver for SSD1327 Controller (OLED Display)
      6            Tested with Seedstudio 96x96 Oled (LY120)
      7            http://www.seeedstudio.com/wiki/index.php?title=Twig_-_OLED_96x96
      8          
      9            Universal 8bit Graphics Library
     10            
     11            Copyright (c) 2012, olikraus@gmail.com
     12            All rights reserved.
     13          
     14            Redistribution and use in source and binary forms, with or without modification, 
     15            are permitted provided that the following conditions are met:
     16          
     17            * Redistributions of source code must retain the above copyright notice, this list 
     18              of conditions and the following disclaimer.
     19              
     20            * Redistributions in binary form must reproduce the above copyright notice, this 
     21              list of conditions and the following disclaimer in the documentation and/or other 
     22              materials provided with the distribution.
     23          
     24            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     25            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     26            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     27            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     28            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     29            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     30            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     31            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     32            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     33            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     34            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     35            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     36            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     37            
     38            SSD130x       Monochrom OLED Controller
     39            SSD131x       Character OLED Controller
     40            SSD132x       Graylevel OLED Controller
     41            SSD1331       Color OLED Controller       
     42          
     43          */
     44          
     45          #include "u8g.h"
     46          
     47          #define WIDTH 96
     48          #define HEIGHT 96
     49          #define XOFFSET 8
     50          
     51          /*  
     52            http://www.seeedstudio.com/wiki/index.php?title=Twig_-_OLED_96x96
     53          */

   \                                 In section .text, align 4, keep-with-next
     54          static const uint8_t u8g_dev_ssd1327_2bit_96x96_init_seq[] PROGMEM = {
   \                     u8g_dev_ssd1327_2bit_96x96_init_seq:
   \   00000000   0xFF 0x0A          DC8 255, 10, 255, 208, 255, 224, 255, 193, 255, 209, 253, 18, 174, 168
   \              0xFF 0xD0    
   \              0xFF 0xE0    
   \              0xFF 0xC1    
   \              0xFF 0xD1    
   \              0xFD 0x12    
   \              0xAE 0xA8    
   \   0000000E   0x5F 0xA1          DC8 95, 161, 0, 162, 96, 160, 70, 171, 1, 129, 83, 177, 81, 179, 1, 185
   \              0x00 0xA2    
   \              0x60 0xA0    
   \              0x46 0xAB    
   \              0x01 0x81    
   \              0x53 0xB1    
   \              0x51 0xB3    
   \              0x01 0xB9    
   \   0000001E   0xBC 0x08          DC8 188, 8, 190, 7, 182, 1, 213, 98, 165, 175, 255, 100, 164, 255, 100
   \              0xBE 0x07    
   \              0xB6 0x01    
   \              0xD5 0x62    
   \              0xA5 0xAF    
   \              0xFF 0x64    
   \              0xA4 0xFF    
   \              0x64         
   \   0000002D   0xA5 0xAF          DC8 165, 175, 255, 100, 164, 21, 8, 55, 117, 8, 95, 255, 225, 15, 15, 0
   \              0xFF 0x64    
   \              0xA4 0x15    
   \              0x08 0x37    
   \              0x75 0x08    
   \              0x5F 0xFF    
   \              0xE1 0x0F    
   \              0x0F 0x00    
   \   0000003D   0x00 0x0F          DC8 0, 15, 15, 0, 0, 15, 15, 0, 0, 15, 15, 0, 0, 15, 15, 0, 0, 15, 15
   \              0x0F 0x00    
   \              0x00 0x0F    
   \              0x0F 0x00    
   \              0x00 0x0F    
   \              0x0F 0x00    
   \              0x00 0x0F    
   \              0x0F 0x00    
   \              0x00 0x0F    
   \              0x0F         
   \   00000050   0x00 0x00          DC8 0, 0, 15, 15, 0, 0, 15, 15, 0, 0, 255, 208, 255, 254, 0, 0
   \              0x0F 0x0F    
   \              0x00 0x00    
   \              0x0F 0x0F    
   \              0x00 0x00    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
   \              0x00 0x00    
     55            U8G_ESC_DLY(10),              /* delay 10 ms */
     56            U8G_ESC_CS(0),                 /* disable chip */
     57            U8G_ESC_ADR(0),               /* instruction mode */
     58            U8G_ESC_RST(1),               /* do reset low pulse with (1*16)+2 milliseconds */
     59            U8G_ESC_CS(1),                /* enable chip */
     60            0x0fd, 0x012,			/* unlock display, usually not required because the display is unlocked after reset */
     61            0x0ae,             			/* display off, sleep mode */
     62            0x0a8, 0x05f,			/* multiplex ratio: 0x05f * 1/64 duty */
     63            0x0a1, 0x000,            		/* display start line */
     64            0x0a2, 0x060,           		/* display offset, shift mapping ram counter */
     65            //0x0a2, 0x04c,           		/* NHD: display offset, shift mapping ram counter */
     66            0x0a0, 0x046,  			/* remap configuration, vertical address increment, enable nibble remap (upper nibble is left) */
     67            //0x0a0, 0x056,  			/* NHD: remap configuration, vertical address increment, enable nibble remap (upper nibble is left) */
     68            0x0ab, 0x001,			/* Enable internal VDD regulator (RESET) */
     69            0x081, 0x053,          		/* contrast, brightness, 0..128, Newhaven: 0x040, LY120 0x053, 0x070 seems also ok */
     70            0x0b1, 0x051,          		/* phase length */
     71            0x0b3, 0x001,           		/* set display clock divide ratio/oscillator frequency */
     72            0x0b9,					/* use linear lookup table */
     73          #if 0
     74            0x0b8,                                /* set gray scale table */
     75                //0x01, 0x011, 0x022, 0x032, 0x043, 0x054, 0x065, 0x076,
     76                0x01, 0x011, 0x022, 0x032, 0x043, 0x054, 0x077, 0x077,            // 4L mode uses 0, 2, 4, 7
     77          #endif  
     78            0x0bc, 0x008,                    	/* pre-charge voltage level */
     79            0x0be, 0x007,                     	/* VCOMH voltage */
     80            0x0b6, 0x001,			/* second precharge */
     81            0x0d5, 0x062,			/* enable second precharge, internal vsl (bit0 = 0) */
     82            
     83          #if 0
     84            // the following commands are not used by the SeeedGrayOLED sequence */
     85            0x0ad, 0x002,                     /* master configuration: disable embedded DC-DC, enable internal VCOMH */
     86            0x086,                                /* full current range (0x084, 0x085, 0x086) */
     87            0x0b2, 0x051,                    /* frame frequency (row period) */
     88            0x0b4, 0x002,                    /* set pre-charge compensation level (not documented in the SDD1325 datasheet, but used in the NHD init seq.) */
     89            0x0b0, 0x028,                    /* enable pre-charge compensation (not documented in the SDD1325 datasheet, but used in the NHD init seq.) */
     90            0x0bf, 0x002|0x00d,           /* VSL voltage level (not documented in the SDD1325 datasheet, but used in the NHD init seq.) */
     91          #endif 
     92          
     93            0x0a5,                                 /* all pixel on */
     94            //0x02e,					/* no scroll (according to SeeedGrayOLED sequence) */
     95            0x0af,                                  /* display on */
     96            U8G_ESC_DLY(100),             /* delay 100 ms */
     97            0x0a4,                                 /* normal display mode */
     98            U8G_ESC_DLY(100),             /* delay 100 ms */
     99            0x0a5,                                 /* all pixel on */
    100            0x0af,                                  /* display on */
    101            U8G_ESC_DLY(100),             /* delay 100 ms */
    102            0x0a4,                                 /* normal display mode */
    103            
    104            0x015,       /* column address... */
    105            0x008,       /* start at column 8, special for the LY120 ??? */
    106            0x037,       /* end at column 55, note: there are two pixel in one column */
    107            
    108            0x075,       /* row address... */
    109            0x008,       
    110            0x05f,       
    111            
    112            U8G_ESC_ADR(1),               /* data mode */
    113            0x000f, 0x000f, 0x0000, 0x0000, 0x000f,0x000f,0x0000,0x0000,
    114            0x000f, 0x000f, 0x0000, 0x0000, 0x000f,0x000f,0x0000,0x0000,
    115            0x000f, 0x000f, 0x0000, 0x0000, 0x000f,0x000f,0x0000,0x0000,
    116            0x000f, 0x000f, 0x0000, 0x0000, 0x000f,0x000f,0x0000,0x0000,
    117            
    118            U8G_ESC_CS(0),             /* disable chip */
    119            U8G_ESC_END                /* end of sequence */
    120          };
    121          

   \                                 In section .text, align 4, keep-with-next
    122          static const uint8_t u8g_dev_ssd1327_2bit_96x96_prepare_page_seq[] PROGMEM = {
   \                     u8g_dev_ssd1327_2bit_96x96_prepare_page_seq:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 21, 8, 55, 117, 255, 254, 0, 0
   \              0xFF 0xD1    
   \              0x15 0x08    
   \              0x37 0x75    
   \              0xFF 0xFE    
   \              0x00 0x00    
    123            U8G_ESC_ADR(0),               /* instruction mode */
    124            U8G_ESC_CS(1),                /* enable chip */
    125            0x015,       /* column address... */
    126            XOFFSET,       /* start at column 8, special for the LY120 ??? */
    127            0x037,       /* end at column 55, note: there are two pixel in one column */
    128            0x075,       /* row address... */
    129            U8G_ESC_END                /* end of sequence */
    130          };
    131          
    132          

   \                                 In section .text, align 4, keep-with-next
    133          static void u8g_dev_ssd1327_2bit_prepare_page(u8g_t *u8g, u8g_dev_t *dev)
    134          {
   \                     u8g_dev_ssd1327_2bit_prepare_page: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    135            uint8_t page = ((u8g_pb_t *)(dev->dev_mem))->p.page;
   \   00000006   0x6868             LDR      R0,[R5, #+4]
   \   00000008   0x7906             LDRB     R6,[R0, #+4]
    136            
    137            u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_prepare_page_seq);
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R2,u8g_dev_ssd1327_2bit_96x96_prepare_page_seq
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_WriteEscSeqP
    138            
    139            page <<= 2;
   \   00000014   0x00B6             LSLS     R6,R6,#+2
    140            u8g_WriteByte(u8g, dev, page);       /* start at the selected page */
   \   00000016   0x4632             MOV      R2,R6
   \   00000018   0xB2D2             UXTB     R2,R2
   \   0000001A   0x4629             MOV      R1,R5
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       u8g_WriteByte
    141            page += 3;
    142            u8g_WriteByte(u8g, dev, page);       /* end within the selected page */  
   \   00000022   0x1CF6             ADDS     R6,R6,#+3
   \   00000024   0x4632             MOV      R2,R6
   \   00000026   0xB2D2             UXTB     R2,R2
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       u8g_WriteByte
    143            
    144            u8g_SetAddress(u8g, dev, 1);          /* data mode */
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003A   0x.... 0x....      B.W      u8g_SetAddress
    145          }
    146          

   \                                 In section .text, align 4, keep-with-next
    147          static void u8g_dev_ssd1327_2bit_2x_prepare_page(u8g_t *u8g, u8g_dev_t *dev, uint8_t is_odd)
    148          {
   \                     u8g_dev_ssd1327_2bit_2x_prepare_page: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    149            uint8_t page = ((u8g_pb_t *)(dev->dev_mem))->p.page;
   \   00000008   0x6868             LDR      R0,[R5, #+4]
   \   0000000A   0x7907             LDRB     R7,[R0, #+4]
    150            
    151            u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_prepare_page_seq);
   \   0000000C   0x....             ADR.N    R2,u8g_dev_ssd1327_2bit_96x96_prepare_page_seq
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_WriteEscSeqP
    152            
    153            page <<= 1;
    154            page += is_odd;
    155            
    156            page <<= 2;
   \   00000014   0xEB06 0x0647      ADD      R6,R6,R7, LSL #+1
   \   00000018   0x00B6             LSLS     R6,R6,#+2
    157            u8g_WriteByte(u8g, dev, page);       /* start at the selected page */
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0xB2D2             UXTB     R2,R2
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       u8g_WriteByte
    158            page += 3;
    159            u8g_WriteByte(u8g, dev, page);       /* end within the selected page */  
   \   00000026   0x1CF6             ADDS     R6,R6,#+3
   \   00000028   0x4632             MOV      R2,R6
   \   0000002A   0xB2D2             UXTB     R2,R2
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       u8g_WriteByte
    160            
    161            u8g_SetAddress(u8g, dev, 1);          /* data mode */
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000003E   0x.... 0x....      B.W      u8g_SetAddress
    162          }
    163          
    164          /* assumes row autoincrement and activated nibble remap */

   \                                 In section .text, align 2, keep-with-next
    165          static  void u8g_dev_ssd1327_2bit_write_4_pixel(u8g_t *u8g, u8g_dev_t *dev, uint8_t left, uint8_t right)
    166          {
   \                     u8g_dev_ssd1327_2bit_write_4_pixel: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    167            uint8_t d, tmp, cnt;
    168            static uint8_t buf[4];
    169            buf[0] = 0;
   \   00000002   0x....             LDR.N    R4,??DataTable3
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x6025             STR      R5,[R4, #+0]
    170            buf[1] = 0;
    171            buf[2] = 0;
    172            buf[3] = 0;
    173            cnt = 0;
    174            do 
    175            {
    176              if ( left == 0 && right == 0 )
   \                     ??u8g_dev_ssd1327_2bit_write_4_pixel_0: (+1)
   \   00000008   0xEA53 0x0602      ORRS     R6,R3,R2
   \   0000000C   0xD00E             BEQ.N    ??u8g_dev_ssd1327_2bit_write_4_pixel_1
    177                break;
    178              d = left;
    179              d &= 3;
    180              d <<= 4;    
    181              tmp = right;    
    182              tmp &= 3;
    183              d |= tmp;
    184              d <<= 2;
    185              buf[cnt] = d;
   \   0000000E   0xF003 0x0603      AND      R6,R3,#0x3
   \   00000012   0xEA46 0x1602      ORR      R6,R6,R2, LSL #+4
   \   00000016   0x00B6             LSLS     R6,R6,#+2
   \   00000018   0x462F             MOV      R7,R5
   \   0000001A   0xB2FF             UXTB     R7,R7
   \   0000001C   0x55E6             STRB     R6,[R4, R7]
    186              left >>= 2;
   \   0000001E   0x0892             LSRS     R2,R2,#+2
    187              right >>= 2;
   \   00000020   0x089B             LSRS     R3,R3,#+2
    188              cnt++;
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
    189            }while ( cnt < 4 );
   \   00000024   0x462E             MOV      R6,R5
   \   00000026   0xB2F6             UXTB     R6,R6
   \   00000028   0x2E03             CMP      R6,#+3
   \   0000002A   0xDDED             BLE.N    ??u8g_dev_ssd1327_2bit_write_4_pixel_0
    190            u8g_WriteSequence(u8g, dev, 4, buf);
   \                     ??u8g_dev_ssd1327_2bit_write_4_pixel_1: (+1)
   \   0000002C   0x4623             MOV      R3,R4
   \   0000002E   0x2204             MOVS     R2,#+4
   \   00000030   0xBCF0             POP      {R4-R7}
   \   00000032   0x.... 0x....      B.W      u8g_WriteSequence
    191          }

   \                                 In section .bss, align 4
   \                     `u8g_dev_ssd1327_2bit_write_4_pixel::buf`:
   \   00000000                      DS8 4
    192          

   \                                 In section .text, align 2, keep-with-next
    193          static void u8g_dev_ssd1327_2bit_write_buffer(u8g_t *u8g, u8g_dev_t *dev)
    194          {
   \                     u8g_dev_ssd1327_2bit_write_buffer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    195            uint8_t cnt, left, right;
    196            uint8_t *ptr;
    197            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000006   0x6868             LDR      R0,[R5, #+4]
    198            
    199            cnt = pb->width;
    200            cnt >>= 1;
   \   00000008   0x7946             LDRB     R6,[R0, #+5]
   \   0000000A   0x0876             LSRS     R6,R6,#+1
    201            ptr = pb->buf;
   \   0000000C   0x6887             LDR      R7,[R0, #+8]
    202            do
    203            {
    204              left = *ptr++;
   \                     ??u8g_dev_ssd1327_2bit_write_buffer_0: (+1)
   \   0000000E   0x783A             LDRB     R2,[R7, #+0]
    205              right = *ptr++;
   \   00000010   0x787B             LDRB     R3,[R7, #+1]
   \   00000012   0x1CBF             ADDS     R7,R7,#+2
    206              u8g_dev_ssd1327_2bit_write_4_pixel(u8g, dev, left, right);
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_write_4_pixel
    207              cnt--;
   \   0000001C   0x1E76             SUBS     R6,R6,#+1
    208            } while( cnt > 0 );
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F3             BNE.N    ??u8g_dev_ssd1327_2bit_write_buffer_0
    209          }
   \   00000026   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    210          

   \                                 In section .text, align 2, keep-with-next
    211          static void u8g_dev_ssd1327_2bit_2x_write_buffer(u8g_t *u8g, u8g_dev_t *dev, uint8_t is_odd)
    212          {
   \                     u8g_dev_ssd1327_2bit_2x_write_buffer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    213            uint8_t cnt, left, right;
    214            uint8_t *ptr;
    215            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000006   0x6868             LDR      R0,[R5, #+4]
    216            
    217            ptr = pb->buf;
   \   00000008   0x6886             LDR      R6,[R0, #+8]
    218            cnt = pb->width;
   \   0000000A   0x7947             LDRB     R7,[R0, #+5]
    219            if ( is_odd )
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD001             BEQ.N    ??u8g_dev_ssd1327_2bit_2x_write_buffer_0
    220              ptr += cnt;
   \   00000010   0x4638             MOV      R0,R7
   \   00000012   0x4406             ADD      R6,R6,R0
    221            cnt >>= 1;
   \                     ??u8g_dev_ssd1327_2bit_2x_write_buffer_0: (+1)
   \   00000014   0x087F             LSRS     R7,R7,#+1
    222            do
    223            {
    224              left = *ptr++;
   \                     ??u8g_dev_ssd1327_2bit_2x_write_buffer_1: (+1)
   \   00000016   0x7832             LDRB     R2,[R6, #+0]
    225              right = *ptr++;
   \   00000018   0x7873             LDRB     R3,[R6, #+1]
   \   0000001A   0x1CB6             ADDS     R6,R6,#+2
    226              u8g_dev_ssd1327_2bit_write_4_pixel(u8g, dev, left, right);
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_write_4_pixel
    227              cnt--;
   \   00000024   0x1E7F             SUBS     R7,R7,#+1
    228            } while( cnt > 0 );
   \   00000026   0x4638             MOV      R0,R7
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD1F3             BNE.N    ??u8g_dev_ssd1327_2bit_2x_write_buffer_1
    229          }
   \   0000002E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    230          

   \                                 In section .text, align 4, keep-with-next
    231          uint8_t u8g_dev_ssd1327_96x96_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    232          {
   \                     u8g_dev_ssd1327_96x96_gr_fn: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    233            switch(msg)
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xD004             BEQ.N    ??u8g_dev_ssd1327_96x96_gr_fn_0
   \   00000010   0x280F             CMP      R0,#+15
   \   00000012   0xD022             BEQ.N    ??u8g_dev_ssd1327_96x96_gr_fn_1
   \   00000014   0x2815             CMP      R0,#+21
   \   00000016   0xD013             BEQ.N    ??u8g_dev_ssd1327_96x96_gr_fn_2
   \   00000018   0xE009             B.N      ??u8g_dev_ssd1327_96x96_gr_fn_3
    234            {
    235              case U8G_DEV_MSG_INIT:
    236                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_ssd1327_96x96_gr_fn_0: (+1)
   \   0000001A   0x2202             MOVS     R2,#+2
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       u8g_InitCom
    237                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_init_seq);
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R2,u8g_dev_ssd1327_2bit_96x96_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    238                break;
    239              case U8G_DEV_MSG_STOP:
    240                break;
    241              case U8G_DEV_MSG_PAGE_NEXT:
    242                {
    243                  u8g_dev_ssd1327_2bit_prepare_page(u8g, dev);
    244                  u8g_dev_ssd1327_2bit_write_buffer(u8g, dev);
    245                  u8g_SetChipSelect(u8g, dev, 0);        
    246                }
    247                break;
    248              case U8G_DEV_MSG_CONTRAST:
    249                u8g_SetChipSelect(u8g, dev, 1);
    250                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    251                u8g_WriteByte(u8g, dev, 0x081);
    252                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    253                u8g_SetChipSelect(u8g, dev, 0);      
    254                return 1;
    255            }
    256            return u8g_dev_pb8v2_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ssd1327_96x96_gr_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb8v2_base_fn
   \                     ??u8g_dev_ssd1327_96x96_gr_fn_2: (+1)
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_prepare_page
   \   00000046   0x4629             MOV      R1,R5
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_write_buffer
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x4629             MOV      R1,R5
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000058   0xE7E9             B.N      ??u8g_dev_ssd1327_96x96_gr_fn_3
   \                     ??u8g_dev_ssd1327_96x96_gr_fn_1: (+1)
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       u8g_SetAddress
   \   0000006C   0x2281             MOVS     R2,#+129
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       u8g_WriteByte
   \   00000076   0x783A             LDRB     R2,[R7, #+0]
   \   00000078   0x0852             LSRS     R2,R2,#+1
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       u8g_WriteByte
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x4629             MOV      R1,R5
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xBDF2             POP      {R1,R4-R7,PC}
    257          }
    258          

   \                                 In section .text, align 4, keep-with-next
    259          uint8_t u8g_dev_ssd1327_96x96_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    260          {
   \                     u8g_dev_ssd1327_96x96_2x_gr_fn: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    261            switch(msg)
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xD004             BEQ.N    ??u8g_dev_ssd1327_96x96_2x_gr_fn_0
   \   00000010   0x280F             CMP      R0,#+15
   \   00000012   0xD02E             BEQ.N    ??u8g_dev_ssd1327_96x96_2x_gr_fn_1
   \   00000014   0x2815             CMP      R0,#+21
   \   00000016   0xD013             BEQ.N    ??u8g_dev_ssd1327_96x96_2x_gr_fn_2
   \   00000018   0xE009             B.N      ??u8g_dev_ssd1327_96x96_2x_gr_fn_3
    262            {
    263              case U8G_DEV_MSG_INIT:
    264                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_ssd1327_96x96_2x_gr_fn_0: (+1)
   \   0000001A   0x2202             MOVS     R2,#+2
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       u8g_InitCom
    265                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_init_seq);
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R2,u8g_dev_ssd1327_2bit_96x96_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    266                break;
    267              case U8G_DEV_MSG_STOP:
    268                break;
    269              case U8G_DEV_MSG_PAGE_NEXT:
    270                {
    271                  u8g_dev_ssd1327_2bit_2x_prepare_page(u8g, dev, 0);
    272                  u8g_dev_ssd1327_2bit_2x_write_buffer(u8g, dev, 0);
    273                  u8g_dev_ssd1327_2bit_2x_prepare_page(u8g, dev, 1);
    274                  u8g_dev_ssd1327_2bit_2x_write_buffer(u8g, dev, 1);
    275                  u8g_SetChipSelect(u8g, dev, 0);        
    276                }
    277                break;
    278              case U8G_DEV_MSG_CONTRAST:
    279                u8g_SetChipSelect(u8g, dev, 1);
    280                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    281                u8g_WriteByte(u8g, dev, 0x081);
    282                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    283                u8g_SetChipSelect(u8g, dev, 0);      
    284                return 1;
    285            }
    286            return u8g_dev_pb16v2_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ssd1327_96x96_2x_gr_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb16v2_base_fn
   \                     ??u8g_dev_ssd1327_96x96_2x_gr_fn_2: (+1)
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_2x_prepare_page
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_2x_write_buffer
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_2x_prepare_page
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x4629             MOV      R1,R5
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       u8g_dev_ssd1327_2bit_2x_write_buffer
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000070   0xE7DD             B.N      ??u8g_dev_ssd1327_96x96_2x_gr_fn_3
   \                     ??u8g_dev_ssd1327_96x96_2x_gr_fn_1: (+1)
   \   00000072   0x2201             MOVS     R2,#+1
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0x4629             MOV      R1,R5
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x.... 0x....      BL       u8g_SetAddress
   \   00000084   0x2281             MOVS     R2,#+129
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       u8g_WriteByte
   \   0000008E   0x783A             LDRB     R2,[R7, #+0]
   \   00000090   0x0852             LSRS     R2,R2,#+1
   \   00000092   0x4629             MOV      R1,R5
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       u8g_WriteByte
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0xBDF2             POP      {R1,R4-R7,PC}
    287          }
    288          

   \                                 In section .bss, align 4
    289          U8G_PB_DEV(u8g_dev_ssd1327_96x96_gr_sw_spi , WIDTH, HEIGHT, 4, u8g_dev_ssd1327_96x96_gr_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_ssd1327_96x96_gr_sw_spi_buf:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1327_96x96_gr_sw_spi_pb
   \                     u8g_dev_ssd1327_96x96_gr_sw_spi_pb:
   \   00000000   0x04 0x60          DC8 4, 96, 0, 0, 0, 96, 0, 0
   \              0x00 0x00    
   \              0x00 0x60    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1327_96x96_gr_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1327_96x96_gr_sw_spi
   \                     u8g_dev_ssd1327_96x96_gr_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_gr_fn, u8g_dev_ssd1327_96x96_gr_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    290          U8G_PB_DEV(u8g_dev_ssd1327_96x96_gr_hw_spi , WIDTH, HEIGHT, 4, u8g_dev_ssd1327_96x96_gr_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_ssd1327_96x96_gr_hw_spi_buf:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1327_96x96_gr_hw_spi_pb
   \                     u8g_dev_ssd1327_96x96_gr_hw_spi_pb:
   \   00000000   0x04 0x60          DC8 4, 96, 0, 0, 0, 96, 0, 0
   \              0x00 0x00    
   \              0x00 0x60    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1327_96x96_gr_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1327_96x96_gr_hw_spi
   \                     u8g_dev_ssd1327_96x96_gr_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_gr_fn, u8g_dev_ssd1327_96x96_gr_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    291          U8G_PB_DEV(u8g_dev_ssd1327_96x96_gr_i2c , WIDTH, HEIGHT, 4, u8g_dev_ssd1327_96x96_gr_fn, U8G_COM_SSD_I2C);
   \                     u8g_dev_ssd1327_96x96_gr_i2c_buf:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1327_96x96_gr_i2c_pb
   \                     u8g_dev_ssd1327_96x96_gr_i2c_pb:
   \   00000000   0x04 0x60          DC8 4, 96, 0, 0, 0, 96, 0, 0
   \              0x00 0x00    
   \              0x00 0x60    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1327_96x96_gr_i2c_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1327_96x96_gr_i2c
   \                     u8g_dev_ssd1327_96x96_gr_i2c:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_gr_fn, u8g_dev_ssd1327_96x96_gr_i2c_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    292          
    293          #define DWIDTH (2*WIDTH)

   \                                 In section .bss, align 4
    294          uint8_t u8g_dev_ssd1327_96x96_2x_buf[DWIDTH] U8G_NOCOMMON ; 
   \                     u8g_dev_ssd1327_96x96_2x_buf:
   \   00000000                      DS8 192

   \                                 In section .data, align 4
    295          u8g_pb_t u8g_dev_ssd1327_96x96_2x_pb = { {8, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_ssd1327_96x96_2x_buf}; 
   \                     u8g_dev_ssd1327_96x96_2x_pb:
   \   00000000   0x08 0x60          DC8 8, 96, 0, 0, 0, 96, 0, 0
   \              0x00 0x00    
   \              0x00 0x60    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1327_96x96_2x_buf

   \                                 In section .data, align 4
    296          u8g_dev_t u8g_dev_ssd1327_96x96_2x_gr_sw_spi = { u8g_dev_ssd1327_96x96_2x_gr_fn, &u8g_dev_ssd1327_96x96_2x_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_ssd1327_96x96_2x_gr_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_2x_gr_fn, u8g_dev_ssd1327_96x96_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    297          u8g_dev_t u8g_dev_ssd1327_96x96_2x_gr_hw_spi = { u8g_dev_ssd1327_96x96_2x_gr_fn, &u8g_dev_ssd1327_96x96_2x_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_ssd1327_96x96_2x_gr_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_2x_gr_fn, u8g_dev_ssd1327_96x96_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    298          u8g_dev_t u8g_dev_ssd1327_96x96_2x_gr_i2c = { u8g_dev_ssd1327_96x96_2x_gr_fn, &u8g_dev_ssd1327_96x96_2x_pb, U8G_COM_SSD_I2C };
   \                     u8g_dev_ssd1327_96x96_2x_gr_i2c:
   \   00000000   0x........         DC32 u8g_dev_ssd1327_96x96_2x_gr_fn, u8g_dev_ssd1327_96x96_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `u8g_dev_ssd1327_2bit_write_4_pixel::buf`
    299          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   u8g_dev_ssd1327_2bit_2x_prepare_page
         0   -> u8g_SetAddress
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
      24   u8g_dev_ssd1327_2bit_2x_write_buffer
        24   -> u8g_dev_ssd1327_2bit_write_4_pixel
      16   u8g_dev_ssd1327_2bit_prepare_page
         0   -> u8g_SetAddress
        16   -> u8g_WriteByte
        16   -> u8g_WriteEscSeqP
      16   u8g_dev_ssd1327_2bit_write_4_pixel
         0   -> u8g_WriteSequence
      24   u8g_dev_ssd1327_2bit_write_buffer
        24   -> u8g_dev_ssd1327_2bit_write_4_pixel
      24   u8g_dev_ssd1327_96x96_2x_gr_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb16v2_base_fn
        24   -> u8g_dev_ssd1327_2bit_2x_prepare_page
        24   -> u8g_dev_ssd1327_2bit_2x_write_buffer
      24   u8g_dev_ssd1327_96x96_gr_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8v2_base_fn
        24   -> u8g_dev_ssd1327_2bit_prepare_page
        24   -> u8g_dev_ssd1327_2bit_write_buffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  buf
      66  u8g_dev_ssd1327_2bit_2x_prepare_page
      48  u8g_dev_ssd1327_2bit_2x_write_buffer
      96  u8g_dev_ssd1327_2bit_96x96_init_seq
      12  u8g_dev_ssd1327_2bit_96x96_prepare_page_seq
      62  u8g_dev_ssd1327_2bit_prepare_page
      54  u8g_dev_ssd1327_2bit_write_4_pixel
      40  u8g_dev_ssd1327_2bit_write_buffer
     192  u8g_dev_ssd1327_96x96_2x_buf
     168  u8g_dev_ssd1327_96x96_2x_gr_fn
      12  u8g_dev_ssd1327_96x96_2x_gr_hw_spi
      12  u8g_dev_ssd1327_96x96_2x_gr_i2c
      12  u8g_dev_ssd1327_96x96_2x_gr_sw_spi
      12  u8g_dev_ssd1327_96x96_2x_pb
     144  u8g_dev_ssd1327_96x96_gr_fn
      12  u8g_dev_ssd1327_96x96_gr_hw_spi
      96  u8g_dev_ssd1327_96x96_gr_hw_spi_buf
      12  u8g_dev_ssd1327_96x96_gr_hw_spi_pb
      12  u8g_dev_ssd1327_96x96_gr_i2c
      96  u8g_dev_ssd1327_96x96_gr_i2c_buf
      12  u8g_dev_ssd1327_96x96_gr_i2c_pb
      12  u8g_dev_ssd1327_96x96_gr_sw_spi
      96  u8g_dev_ssd1327_96x96_gr_sw_spi_buf
      12  u8g_dev_ssd1327_96x96_gr_sw_spi_pb

 
 484 bytes in section .bss
 120 bytes in section .data
 694 bytes in section .text
 
 694 bytes of CODE memory
 604 bytes of DATA memory

Errors: none
Warnings: none
