###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1610_dogxl160.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4B61.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1610_dogxl160.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        F:\nano\EWARM\mksRobinLite\List\u8g_dev_uc1610_dogxl160.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_uc1610_dogxl160.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1610_dogxl160.c
      1          /*
      2          
      3            u8g_dev_uc1610_dogxl160.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          #define WIDTH 160
     40          #define HEIGHT 104
     41          

   \                                 In section .text, align 4, keep-with-next
     42          static const uint8_t u8g_dev_uc1610_dogxl160_init_seq[] PROGMEM = {
   \                     u8g_dev_uc1610_dogxl160_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 193, 255, 209, 241, 103, 192, 64, 80, 43
   \              0xFF 0xE0    
   \              0xFF 0xC1    
   \              0xFF 0xD1    
   \              0xF1 0x67    
   \              0xC0 0x40    
   \              0x50 0x2B    
   \   0000000E   0xEB 0x81          DC8 235, 129, 95, 137, 166, 211, 175, 255, 100, 165, 255, 100, 255, 100
   \              0x5F 0x89    
   \              0xA6 0xD3    
   \              0xAF 0xFF    
   \              0x64 0xA5    
   \              0xFF 0x64    
   \              0xFF 0x64    
   \   0000001C   0xA4 0xFF          DC8 164, 255, 208, 255, 254, 0, 0, 0
   \              0xD0 0xFF    
   \              0xFE 0x00    
   \              0x00 0x00    
     43            U8G_ESC_CS(0),             /* disable chip */
     44            U8G_ESC_ADR(0),           /* instruction mode */
     45            U8G_ESC_RST(1),           /* do reset low pulse with (1*16)+2 milliseconds */
     46            U8G_ESC_CS(1),             /* enable chip */
     47            0x0f1,	        /* set display height-1 */
     48            0x067,		/*  */
     49            0x0c0,		/* SEG & COM normal */
     50            0x040,		/* set display start line */
     51            0x050,		/* */
     52            0x02b,		/* set panelloading */
     53            0x0eb,		/* set bias 1/2 */
     54            0x081,		/* set contrast */
     55            0x05f,		/* */
     56            0x089,		/* set auto increment */
     57            0x0a6,		/* normal pixel mode */
     58            0x0d3,		/* 0xd3=40% RMS separation for gray levels */
     59            0x0af,		/* display on */
     60            U8G_ESC_DLY(100),       /* delay 100 ms */
     61            0x0a5,		                /* display all points, ST7565, UC1610 */
     62            U8G_ESC_DLY(100),       /* delay 100 ms */
     63            U8G_ESC_DLY(100),       /* delay 100 ms */
     64            0x0a4,		                /* normal display */
     65            
     66            
     67            U8G_ESC_CS(0),             /* disable chip */
     68            U8G_ESC_END                /* end of sequence */
     69          };
     70          

   \                                 In section .text, align 4, keep-with-next
     71          static const uint8_t u8g_dev_uc1610_dogxl160_data_start[] PROGMEM = {
   \                     u8g_dev_uc1610_dogxl160_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 16, 0, 255, 254
   \              0xFF 0xD1    
   \              0x10 0x00    
   \              0xFF 0xFE    
     72            U8G_ESC_ADR(0),           /* instruction mode */
     73            U8G_ESC_CS(1),             /* enable chip */
     74            0x010,		/* set upper 4 bit of the col adr to 0 */
     75            0x000,		/* set lower 4 bit of the col adr to 0 */      
     76            U8G_ESC_END                /* end of sequence */
     77          };
     78          

   \                                 In section .text, align 2, keep-with-next
     79          static uint8_t u8g_dev_1to2(uint8_t n)
     80          {
     81            register uint8_t a,b,c;
     82            a = n;
     83            a &= 1;
     84            n <<= 1;
     85            b = n;
   \                     u8g_dev_1to2: (+1)
   \   00000000   0x0042             LSLS     R2,R0,#+1
     86            b &= 4;  
     87            n <<= 1;
   \   00000002   0x0051             LSLS     R1,R2,#+1
     88            c = n;
     89            c &= 16;
     90            n <<= 1;
     91            n &= 64;
     92            n |= a;
     93            n |= b;
     94            n |= c;
   \   00000004   0x004B             LSLS     R3,R1,#+1
   \   00000006   0xF003 0x0340      AND      R3,R3,#0x40
   \   0000000A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000000E   0x4318             ORRS     R0,R0,R3
   \   00000010   0xF002 0x0204      AND      R2,R2,#0x4
   \   00000014   0x4310             ORRS     R0,R2,R0
   \   00000016   0xF001 0x0110      AND      R1,R1,#0x10
   \   0000001A   0x4308             ORRS     R0,R1,R0
     95            n |= n << 1;
     96            return n;
   \   0000001C   0xEA40 0x0040      ORR      R0,R0,R0, LSL #+1
   \   00000020   0x4770             BX       LR               ;; return
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          uint8_t u8g_dev_uc1610_dogxl160_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    100          {
   \                     u8g_dev_uc1610_dogxl160_bw_fn: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    101            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1610_dogxl160_bw_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD06F             BEQ.N    ??u8g_dev_uc1610_dogxl160_bw_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD014             BEQ.N    ??u8g_dev_uc1610_dogxl160_bw_fn_2
   \   0000001A   0xE009             B.N      ??u8g_dev_uc1610_dogxl160_bw_fn_3
    102            {
    103              case U8G_DEV_MSG_INIT:
    104                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       u8g_InitCom
    105                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_init_seq);
   \   00000024   0x.... 0x....      ADR.W    R2,u8g_dev_uc1610_dogxl160_init_seq
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       u8g_WriteEscSeqP
    106                break;
    107              case U8G_DEV_MSG_STOP:
    108                break;
    109              case U8G_DEV_MSG_PAGE_NEXT:
    110                {
    111                  int i;
    112                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    113                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    114                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2) ); /* select current page 1/2 (UC1610) */
    115                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    116                  for( i = 0; i < WIDTH; i++ )
    117                  {
    118                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)(pb->buf))[i] ) );          
    119                  }
    120          
    121                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    122                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2+1) ); /* select current page 2/2 (UC1610) */
    123                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    124                  for( i = 0; i < WIDTH; i++ )
    125                  {
    126                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)(pb->buf))[i] >> 4 ) );          
    127                  }
    128                  
    129                  u8g_SetChipSelect(u8g, dev, 0);
    130                }
    131                break;
    132              case U8G_DEV_MSG_CONTRAST:
    133                u8g_SetChipSelect(u8g, dev, 1);
    134                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    135                u8g_WriteByte(u8g, dev, 0x081);
    136                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    137                u8g_SetChipSelect(u8g, dev, 0);      
    138                return 1;
    139            }
    140            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_3: (+1)
   \   00000030   0x463B             MOV      R3,R7
   \   00000032   0x4632             MOV      R2,R6
   \   00000034   0x4621             MOV      R1,R4
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_4: (+1)
   \   00000040   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_2: (+1)
   \   00000044   0xF8D4 0x8004      LDR      R8,[R4, #+4]
   \   00000048   0x.... 0x....      ADR.W    R9,u8g_dev_uc1610_dogxl160_data_start
   \   0000004C   0x464A             MOV      R2,R9
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000054   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000058   0x0052             LSLS     R2,R2,#+1
   \   0000005A   0xF042 0x0260      ORR      R2,R2,#0x60
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x4621             MOV      R1,R4
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       u8g_WriteByte
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x4621             MOV      R1,R4
   \   0000006C   0x4628             MOV      R0,R5
   \   0000006E   0x.... 0x....      BL       u8g_SetAddress
   \   00000072   0xF04F 0x0A00      MOV      R10,#+0
   \   00000076   0xE00C             B.N      ??u8g_dev_uc1610_dogxl160_bw_fn_5
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_6: (+1)
   \   00000078   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   0000007C   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   00000080   0x.... 0x....      BL       u8g_dev_1to2
   \   00000084   0x4602             MOV      R2,R0
   \   00000086   0x4621             MOV      R1,R4
   \   00000088   0x4628             MOV      R0,R5
   \   0000008A   0x.... 0x....      BL       u8g_WriteByte
   \   0000008E   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_5: (+1)
   \   00000092   0xF1BA 0x0FA0      CMP      R10,#+160
   \   00000096   0xDBEF             BLT.N    ??u8g_dev_uc1610_dogxl160_bw_fn_6
   \   00000098   0x464A             MOV      R2,R9
   \   0000009A   0x4621             MOV      R1,R4
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000A2   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   000000A6   0x0052             LSLS     R2,R2,#+1
   \   000000A8   0x1C52             ADDS     R2,R2,#+1
   \   000000AA   0xF042 0x0260      ORR      R2,R2,#0x60
   \   000000AE   0xB2D2             UXTB     R2,R2
   \   000000B0   0x4621             MOV      R1,R4
   \   000000B2   0x4628             MOV      R0,R5
   \   000000B4   0x.... 0x....      BL       u8g_WriteByte
   \   000000B8   0x2201             MOVS     R2,#+1
   \   000000BA   0x4621             MOV      R1,R4
   \   000000BC   0x4628             MOV      R0,R5
   \   000000BE   0x.... 0x....      BL       u8g_SetAddress
   \   000000C2   0xF04F 0x0900      MOV      R9,#+0
   \   000000C6   0xE00D             B.N      ??u8g_dev_uc1610_dogxl160_bw_fn_7
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_8: (+1)
   \   000000C8   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000CC   0xF810 0x0009      LDRB     R0,[R0, R9]
   \   000000D0   0x0900             LSRS     R0,R0,#+4
   \   000000D2   0x.... 0x....      BL       u8g_dev_1to2
   \   000000D6   0x4602             MOV      R2,R0
   \   000000D8   0x4621             MOV      R1,R4
   \   000000DA   0x4628             MOV      R0,R5
   \   000000DC   0x.... 0x....      BL       u8g_WriteByte
   \   000000E0   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_7: (+1)
   \   000000E4   0xF1B9 0x0FA0      CMP      R9,#+160
   \   000000E8   0xDBEE             BLT.N    ??u8g_dev_uc1610_dogxl160_bw_fn_8
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0x4621             MOV      R1,R4
   \   000000EE   0x4628             MOV      R0,R5
   \   000000F0   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000F4   0xE79C             B.N      ??u8g_dev_uc1610_dogxl160_bw_fn_3
   \                     ??u8g_dev_uc1610_dogxl160_bw_fn_1: (+1)
   \   000000F6   0x2201             MOVS     R2,#+1
   \   000000F8   0x4628             MOV      R0,R5
   \   000000FA   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x4621             MOV      R1,R4
   \   00000102   0x4628             MOV      R0,R5
   \   00000104   0x.... 0x....      BL       u8g_SetAddress
   \   00000108   0x2281             MOVS     R2,#+129
   \   0000010A   0x4621             MOV      R1,R4
   \   0000010C   0x4628             MOV      R0,R5
   \   0000010E   0x.... 0x....      BL       u8g_WriteByte
   \   00000112   0x783A             LDRB     R2,[R7, #+0]
   \   00000114   0x0852             LSRS     R2,R2,#+1
   \   00000116   0x4621             MOV      R1,R4
   \   00000118   0x4628             MOV      R0,R5
   \   0000011A   0x.... 0x....      BL       u8g_WriteByte
   \   0000011E   0x2200             MOVS     R2,#+0
   \   00000120   0x4621             MOV      R1,R4
   \   00000122   0x4628             MOV      R0,R5
   \   00000124   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0xE789             B.N      ??u8g_dev_uc1610_dogxl160_bw_fn_4
    141          }
    142          

   \                                 In section .text, align 4, keep-with-next
    143          uint8_t u8g_dev_uc1610_dogxl160_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    144          {
   \                     u8g_dev_uc1610_dogxl160_gr_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    145            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1610_dogxl160_gr_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD038             BEQ.N    ??u8g_dev_uc1610_dogxl160_gr_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD013             BEQ.N    ??u8g_dev_uc1610_dogxl160_gr_fn_2
   \   0000001A   0xE008             B.N      ??u8g_dev_uc1610_dogxl160_gr_fn_3
    146            {
    147              case U8G_DEV_MSG_INIT:
    148                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_InitCom
    149                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_init_seq);
   \   00000024   0x....             ADR.N    R2,u8g_dev_uc1610_dogxl160_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    150                break;
    151              case U8G_DEV_MSG_STOP:
    152                break;
    153              case U8G_DEV_MSG_PAGE_NEXT:
    154                {
    155                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    156                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    157                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page) ); /* select current page (UC1610) */
    158                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    159                  if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    160                    return 0;
    161                  u8g_SetChipSelect(u8g, dev, 0);
    162                }
    163                break;
    164              case U8G_DEV_MSG_CONTRAST:
    165                u8g_SetChipSelect(u8g, dev, 1);
    166                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    167                u8g_WriteByte(u8g, dev, 0x081);
    168                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    169                u8g_SetChipSelect(u8g, dev, 0);      
    170                return 1;
    171            }
    172            return u8g_dev_pb8v2_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000003A   0x.... 0x....      B.W      u8g_dev_pb8v2_base_fn
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_4: (+1)
   \   0000003E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_2: (+1)
   \   00000042   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000046   0xBF00             Nop      
   \   00000048   0x....             ADR.N    R2,u8g_dev_uc1610_dogxl160_data_start
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000050   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000054   0xF042 0x0260      ORR      R2,R2,#0x60
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       u8g_WriteByte
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0x4629             MOV      R1,R5
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       u8g_SetAddress
   \   0000006A   0x462A             MOV      R2,R5
   \   0000006C   0x4621             MOV      R1,R4
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD101             BNE.N    ??u8g_dev_uc1610_dogxl160_gr_fn_5
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE7E0             B.N      ??u8g_dev_uc1610_dogxl160_gr_fn_4
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_5: (+1)
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000086   0xE7D2             B.N      ??u8g_dev_uc1610_dogxl160_gr_fn_3
   \                     ??u8g_dev_uc1610_dogxl160_gr_fn_1: (+1)
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x4629             MOV      R1,R5
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       u8g_SetAddress
   \   0000009A   0x2281             MOVS     R2,#+129
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       u8g_WriteByte
   \   000000A4   0x783A             LDRB     R2,[R7, #+0]
   \   000000A6   0x0852             LSRS     R2,R2,#+1
   \   000000A8   0x4629             MOV      R1,R5
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       u8g_WriteByte
   \   000000B0   0x2200             MOVS     R2,#+0
   \   000000B2   0x4629             MOV      R1,R5
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0xE7BF             B.N      ??u8g_dev_uc1610_dogxl160_gr_fn_4
    173          }
    174          

   \                                 In section .text, align 4, keep-with-next
    175          uint8_t u8g_dev_uc1610_dogxl160_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    176          {
   \                     u8g_dev_uc1610_dogxl160_2x_bw_fn: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
    177            switch(msg)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD005             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xF000 0x80C0      BEQ.W    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_1
   \   00000018   0x2815             CMP      R0,#+21
   \   0000001A   0xD014             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_2
   \   0000001C   0xE009             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_3
    178            {
    179              case U8G_DEV_MSG_INIT:
    180                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_0: (+1)
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x4640             MOV      R0,R8
   \   00000022   0x.... 0x....      BL       u8g_InitCom
    181                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_init_seq);
   \   00000026   0xBF00             Nop      
   \   00000028   0x....             ADR.N    R2,u8g_dev_uc1610_dogxl160_init_seq
   \   0000002A   0x4621             MOV      R1,R4
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x.... 0x....      BL       u8g_WriteEscSeqP
    182                break;
    183              case U8G_DEV_MSG_STOP:
    184                break;
    185              case U8G_DEV_MSG_PAGE_NEXT:
    186                {
    187                  int i;
    188                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    189                  
    190                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    191                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*4) ); /* select current page 1/2 (UC1610) */
    192                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    193                  for( i = 0; i < WIDTH; i++ )
    194                  {
    195                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)(pb->buf))[i] ) );          
    196                  }
    197          
    198                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    199                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*4+1) ); /* select current page 2/2 (UC1610) */
    200                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    201                  for( i = 0; i < WIDTH; i++ )
    202                  {
    203                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)(pb->buf))[i] >> 4 ) );          
    204                  }
    205          
    206                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    207                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*4+2) ); /* select current page 1/2 (UC1610) */
    208                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    209                  for( i = 0; i < WIDTH; i++ )
    210                  {
    211                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)((uint8_t *)(pb->buf)+WIDTH))[i] ) );          
    212                  }
    213          
    214                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    215                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*4+3) ); /* select current page 2/2 (UC1610) */
    216                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    217                  for( i = 0; i < WIDTH; i++ )
    218                  {
    219                    u8g_WriteByte(u8g, dev, u8g_dev_1to2( ((uint8_t *)((uint8_t *)(pb->buf)+WIDTH))[i] >> 4 ) );          
    220                  }
    221                  
    222                  u8g_SetChipSelect(u8g, dev, 0);
    223                }
    224                break;
    225              case U8G_DEV_MSG_CONTRAST:
    226                u8g_SetChipSelect(u8g, dev, 1);
    227                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    228                u8g_WriteByte(u8g, dev, 0x081);
    229                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    230                u8g_SetChipSelect(u8g, dev, 0);      
    231                return 1;
    232            }
    233            return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_3: (+1)
   \   00000032   0x4633             MOV      R3,R6
   \   00000034   0x462A             MOV      R2,R5
   \   00000036   0x4621             MOV      R1,R4
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   0000003E   0x.... 0x....      B.W      u8g_dev_pb16v1_base_fn
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_4: (+1)
   \   00000042   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_2: (+1)
   \   00000046   0xF8D4 0x9004      LDR      R9,[R4, #+4]
   \   0000004A   0xBF00             Nop      
   \   0000004C   0x....             ADR.N    R7,u8g_dev_uc1610_dogxl160_data_start
   \   0000004E   0x463A             MOV      R2,R7
   \   00000050   0x4640             MOV      R0,R8
   \   00000052   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000056   0xF899 0x2004      LDRB     R2,[R9, #+4]
   \   0000005A   0x0092             LSLS     R2,R2,#+2
   \   0000005C   0xF042 0x0260      ORR      R2,R2,#0x60
   \   00000060   0xB2D2             UXTB     R2,R2
   \   00000062   0x4621             MOV      R1,R4
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0x.... 0x....      BL       u8g_WriteByte
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x4621             MOV      R1,R4
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       u8g_SetAddress
   \   00000074   0xF04F 0x0A00      MOV      R10,#+0
   \   00000078   0xE00C             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_5
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_6: (+1)
   \   0000007A   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   0000007E   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   00000082   0x.... 0x....      BL       u8g_dev_1to2
   \   00000086   0x4602             MOV      R2,R0
   \   00000088   0x4621             MOV      R1,R4
   \   0000008A   0x4640             MOV      R0,R8
   \   0000008C   0x.... 0x....      BL       u8g_WriteByte
   \   00000090   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_5: (+1)
   \   00000094   0xF1BA 0x0FA0      CMP      R10,#+160
   \   00000098   0xDBEF             BLT.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_6
   \   0000009A   0x463A             MOV      R2,R7
   \   0000009C   0x4621             MOV      R1,R4
   \   0000009E   0x4640             MOV      R0,R8
   \   000000A0   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000A4   0xF899 0x2004      LDRB     R2,[R9, #+4]
   \   000000A8   0x0092             LSLS     R2,R2,#+2
   \   000000AA   0x1C52             ADDS     R2,R2,#+1
   \   000000AC   0xF042 0x0260      ORR      R2,R2,#0x60
   \   000000B0   0xB2D2             UXTB     R2,R2
   \   000000B2   0x4621             MOV      R1,R4
   \   000000B4   0x4640             MOV      R0,R8
   \   000000B6   0x.... 0x....      BL       u8g_WriteByte
   \   000000BA   0x2201             MOVS     R2,#+1
   \   000000BC   0x4621             MOV      R1,R4
   \   000000BE   0x4640             MOV      R0,R8
   \   000000C0   0x.... 0x....      BL       u8g_SetAddress
   \   000000C4   0xF04F 0x0A00      MOV      R10,#+0
   \   000000C8   0xE00D             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_7
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_8: (+1)
   \   000000CA   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   000000CE   0xF810 0x000A      LDRB     R0,[R0, R10]
   \   000000D2   0x0900             LSRS     R0,R0,#+4
   \   000000D4   0x.... 0x....      BL       u8g_dev_1to2
   \   000000D8   0x4602             MOV      R2,R0
   \   000000DA   0x4621             MOV      R1,R4
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x.... 0x....      BL       u8g_WriteByte
   \   000000E2   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_7: (+1)
   \   000000E6   0xF1BA 0x0FA0      CMP      R10,#+160
   \   000000EA   0xDBEE             BLT.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_8
   \   000000EC   0x463A             MOV      R2,R7
   \   000000EE   0x4621             MOV      R1,R4
   \   000000F0   0x4640             MOV      R0,R8
   \   000000F2   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000F6   0xF899 0x2004      LDRB     R2,[R9, #+4]
   \   000000FA   0x0092             LSLS     R2,R2,#+2
   \   000000FC   0x1C92             ADDS     R2,R2,#+2
   \   000000FE   0xF042 0x0260      ORR      R2,R2,#0x60
   \   00000102   0xB2D2             UXTB     R2,R2
   \   00000104   0x4621             MOV      R1,R4
   \   00000106   0x4640             MOV      R0,R8
   \   00000108   0x.... 0x....      BL       u8g_WriteByte
   \   0000010C   0x2201             MOVS     R2,#+1
   \   0000010E   0x4621             MOV      R1,R4
   \   00000110   0x4640             MOV      R0,R8
   \   00000112   0x.... 0x....      BL       u8g_SetAddress
   \   00000116   0xF04F 0x0A00      MOV      R10,#+0
   \   0000011A   0xE00D             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_9
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_10: (+1)
   \   0000011C   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   00000120   0x4450             ADD      R0,R0,R10
   \   00000122   0xF890 0x00A0      LDRB     R0,[R0, #+160]
   \   00000126   0x.... 0x....      BL       u8g_dev_1to2
   \   0000012A   0x4602             MOV      R2,R0
   \   0000012C   0x4621             MOV      R1,R4
   \   0000012E   0x4640             MOV      R0,R8
   \   00000130   0x.... 0x....      BL       u8g_WriteByte
   \   00000134   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_9: (+1)
   \   00000138   0xF1BA 0x0FA0      CMP      R10,#+160
   \   0000013C   0xDBEE             BLT.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_10
   \   0000013E   0x463A             MOV      R2,R7
   \   00000140   0x4621             MOV      R1,R4
   \   00000142   0x4640             MOV      R0,R8
   \   00000144   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000148   0xF899 0x2004      LDRB     R2,[R9, #+4]
   \   0000014C   0x0092             LSLS     R2,R2,#+2
   \   0000014E   0x1CD2             ADDS     R2,R2,#+3
   \   00000150   0xF042 0x0260      ORR      R2,R2,#0x60
   \   00000154   0xB2D2             UXTB     R2,R2
   \   00000156   0x4621             MOV      R1,R4
   \   00000158   0x4640             MOV      R0,R8
   \   0000015A   0x.... 0x....      BL       u8g_WriteByte
   \   0000015E   0x2201             MOVS     R2,#+1
   \   00000160   0x4621             MOV      R1,R4
   \   00000162   0x4640             MOV      R0,R8
   \   00000164   0x.... 0x....      BL       u8g_SetAddress
   \   00000168   0x2700             MOVS     R7,#+0
   \   0000016A   0xE00D             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_11
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_12: (+1)
   \   0000016C   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   00000170   0x4438             ADD      R0,R0,R7
   \   00000172   0xF890 0x00A0      LDRB     R0,[R0, #+160]
   \   00000176   0x0900             LSRS     R0,R0,#+4
   \   00000178   0x.... 0x....      BL       u8g_dev_1to2
   \   0000017C   0x4602             MOV      R2,R0
   \   0000017E   0x4621             MOV      R1,R4
   \   00000180   0x4640             MOV      R0,R8
   \   00000182   0x.... 0x....      BL       u8g_WriteByte
   \   00000186   0x1C7F             ADDS     R7,R7,#+1
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_11: (+1)
   \   00000188   0x2FA0             CMP      R7,#+160
   \   0000018A   0xDBEF             BLT.N    ??u8g_dev_uc1610_dogxl160_2x_bw_fn_12
   \   0000018C   0x2200             MOVS     R2,#+0
   \   0000018E   0x4621             MOV      R1,R4
   \   00000190   0x4640             MOV      R0,R8
   \   00000192   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000196   0xE74C             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_3
   \                     ??u8g_dev_uc1610_dogxl160_2x_bw_fn_1: (+1)
   \   00000198   0x2201             MOVS     R2,#+1
   \   0000019A   0x4640             MOV      R0,R8
   \   0000019C   0x.... 0x....      BL       u8g_SetChipSelect
   \   000001A0   0x2200             MOVS     R2,#+0
   \   000001A2   0x4621             MOV      R1,R4
   \   000001A4   0x4640             MOV      R0,R8
   \   000001A6   0x.... 0x....      BL       u8g_SetAddress
   \   000001AA   0x2281             MOVS     R2,#+129
   \   000001AC   0x4621             MOV      R1,R4
   \   000001AE   0x4640             MOV      R0,R8
   \   000001B0   0x.... 0x....      BL       u8g_WriteByte
   \   000001B4   0x7832             LDRB     R2,[R6, #+0]
   \   000001B6   0x0852             LSRS     R2,R2,#+1
   \   000001B8   0x4621             MOV      R1,R4
   \   000001BA   0x4640             MOV      R0,R8
   \   000001BC   0x.... 0x....      BL       u8g_WriteByte
   \   000001C0   0x2200             MOVS     R2,#+0
   \   000001C2   0x4621             MOV      R1,R4
   \   000001C4   0x4640             MOV      R0,R8
   \   000001C6   0x.... 0x....      BL       u8g_SetChipSelect
   \   000001CA   0x2001             MOVS     R0,#+1
   \   000001CC   0xE739             B.N      ??u8g_dev_uc1610_dogxl160_2x_bw_fn_4
    234          }
    235          

   \                                 In section .text, align 4, keep-with-next
    236          uint8_t u8g_dev_uc1610_dogxl160_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    237          {
   \                     u8g_dev_uc1610_dogxl160_2x_gr_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    238            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_gr_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD05E             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_gr_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD014             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_gr_fn_2
   \   0000001A   0xE008             B.N      ??u8g_dev_uc1610_dogxl160_2x_gr_fn_3
    239            {
    240              case U8G_DEV_MSG_INIT:
    241                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_InitCom
    242                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_init_seq);
   \   00000024   0x....             ADR.N    R2,u8g_dev_uc1610_dogxl160_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
    243                break;
    244              case U8G_DEV_MSG_STOP:
    245                break;
    246              case U8G_DEV_MSG_PAGE_NEXT:
    247                {
    248                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    249                  
    250                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    251                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2) ); /* select current page (UC1610) */
    252                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    253                  if ( u8g_WriteSequence(u8g, dev, WIDTH, pb->buf) == 0 )
    254                    return 0;
    255          
    256                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
    257                  u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2+1) ); /* select current page (UC1610) */
    258                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    259                  if ( u8g_WriteSequence(u8g, dev, WIDTH, (uint8_t *)(pb->buf)+WIDTH) == 0 )
    260                    return 0;
    261                  
    262                  u8g_SetChipSelect(u8g, dev, 0);
    263                }
    264                break;
    265              case U8G_DEV_MSG_CONTRAST:
    266                u8g_SetChipSelect(u8g, dev, 1);
    267                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    268                u8g_WriteByte(u8g, dev, 0x081);
    269                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
    270                u8g_SetChipSelect(u8g, dev, 0);      
    271                return 1;
    272            }
    273            return u8g_dev_pb16v2_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb16v2_base_fn
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_4: (+1)
   \   00000040   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_2: (+1)
   \   00000044   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000048   0x.... 0x....      ADR.W    R9,u8g_dev_uc1610_dogxl160_data_start
   \   0000004C   0x464A             MOV      R2,R9
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000054   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000058   0x0052             LSLS     R2,R2,#+1
   \   0000005A   0xF042 0x0260      ORR      R2,R2,#0x60
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x4629             MOV      R1,R5
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       u8g_WriteByte
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x4629             MOV      R1,R5
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_SetAddress
   \   00000072   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   00000076   0x22A0             MOVS     R2,#+160
   \   00000078   0x4629             MOV      R1,R5
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       u8g_WriteSequence
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD01F             BEQ.N    ??u8g_dev_uc1610_dogxl160_2x_gr_fn_5
   \   00000084   0x464A             MOV      R2,R9
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   0000008E   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000092   0x0052             LSLS     R2,R2,#+1
   \   00000094   0x1C52             ADDS     R2,R2,#+1
   \   00000096   0xF042 0x0260      ORR      R2,R2,#0x60
   \   0000009A   0xB2D2             UXTB     R2,R2
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       u8g_WriteByte
   \   000000A4   0x2201             MOVS     R2,#+1
   \   000000A6   0x4629             MOV      R1,R5
   \   000000A8   0x4620             MOV      R0,R4
   \   000000AA   0x.... 0x....      BL       u8g_SetAddress
   \   000000AE   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000B2   0xF100 0x03A0      ADD      R3,R0,#+160
   \   000000B6   0x22A0             MOVS     R2,#+160
   \   000000B8   0x4629             MOV      R1,R5
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       u8g_WriteSequence
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD101             BNE.N    ??u8g_dev_uc1610_dogxl160_2x_gr_fn_6
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_5: (+1)
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0xE7BB             B.N      ??u8g_dev_uc1610_dogxl160_2x_gr_fn_4
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_6: (+1)
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x4629             MOV      R1,R5
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000D2   0xE7AC             B.N      ??u8g_dev_uc1610_dogxl160_2x_gr_fn_3
   \                     ??u8g_dev_uc1610_dogxl160_2x_gr_fn_1: (+1)
   \   000000D4   0x2201             MOVS     R2,#+1
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000DC   0x2200             MOVS     R2,#+0
   \   000000DE   0x4629             MOV      R1,R5
   \   000000E0   0x4620             MOV      R0,R4
   \   000000E2   0x.... 0x....      BL       u8g_SetAddress
   \   000000E6   0x2281             MOVS     R2,#+129
   \   000000E8   0x4629             MOV      R1,R5
   \   000000EA   0x4620             MOV      R0,R4
   \   000000EC   0x.... 0x....      BL       u8g_WriteByte
   \   000000F0   0x783A             LDRB     R2,[R7, #+0]
   \   000000F2   0x0852             LSRS     R2,R2,#+1
   \   000000F4   0x4629             MOV      R1,R5
   \   000000F6   0x4620             MOV      R0,R4
   \   000000F8   0x.... 0x....      BL       u8g_WriteByte
   \   000000FC   0x2200             MOVS     R2,#+0
   \   000000FE   0x4629             MOV      R1,R5
   \   00000100   0x4620             MOV      R0,R4
   \   00000102   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0xE79A             B.N      ??u8g_dev_uc1610_dogxl160_2x_gr_fn_4
    274          }
    275          

   \                                 In section .bss, align 4
    276          U8G_PB_DEV(u8g_dev_uc1610_dogxl160_bw_sw_spi, WIDTH, HEIGHT, 8, u8g_dev_uc1610_dogxl160_bw_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_uc1610_dogxl160_bw_sw_spi_buf:
   \   00000000                      DS8 160

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1610_dogxl160_bw_sw_spi_pb
   \                     u8g_dev_uc1610_dogxl160_bw_sw_spi_pb:
   \   00000000   0x08 0x68          DC8 8, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1610_dogxl160_bw_sw_spi
   \                     u8g_dev_uc1610_dogxl160_bw_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_fn
   \   00000004   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_sw_spi_pb, u8g_com_null_fn
   \              0x........   

   \                                 In section .bss, align 4
    277          U8G_PB_DEV(u8g_dev_uc1610_dogxl160_bw_hw_spi, WIDTH, HEIGHT, 8, u8g_dev_uc1610_dogxl160_bw_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_uc1610_dogxl160_bw_hw_spi_buf:
   \   00000000                      DS8 160

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1610_dogxl160_bw_hw_spi_pb
   \                     u8g_dev_uc1610_dogxl160_bw_hw_spi_pb:
   \   00000000   0x08 0x68          DC8 8, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1610_dogxl160_bw_hw_spi
   \                     u8g_dev_uc1610_dogxl160_bw_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_fn
   \   00000004   0x........         DC32 u8g_dev_uc1610_dogxl160_bw_hw_spi_pb, u8g_com_null_fn
   \              0x........   
    278          

   \                                 In section .bss, align 4
    279          U8G_PB_DEV(u8g_dev_uc1610_dogxl160_gr_sw_spi, WIDTH, HEIGHT, 4, u8g_dev_uc1610_dogxl160_gr_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_uc1610_dogxl160_gr_sw_spi_buf:
   \   00000000                      DS8 160

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1610_dogxl160_gr_sw_spi_pb
   \                     u8g_dev_uc1610_dogxl160_gr_sw_spi_pb:
   \   00000000   0x04 0x68          DC8 4, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1610_dogxl160_gr_sw_spi
   \                     u8g_dev_uc1610_dogxl160_gr_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_fn
   \   00000004   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_sw_spi_pb, u8g_com_null_fn
   \              0x........   

   \                                 In section .bss, align 4
    280          U8G_PB_DEV(u8g_dev_uc1610_dogxl160_gr_hw_spi, WIDTH, HEIGHT, 4, u8g_dev_uc1610_dogxl160_gr_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_uc1610_dogxl160_gr_hw_spi_buf:
   \   00000000                      DS8 160

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1610_dogxl160_gr_hw_spi_pb
   \                     u8g_dev_uc1610_dogxl160_gr_hw_spi_pb:
   \   00000000   0x04 0x68          DC8 4, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1610_dogxl160_gr_hw_spi
   \                     u8g_dev_uc1610_dogxl160_gr_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_fn
   \   00000004   0x........         DC32 u8g_dev_uc1610_dogxl160_gr_hw_spi_pb, u8g_com_null_fn
   \              0x........   
    281          

   \                                 In section .bss, align 4
    282          uint8_t u8g_dev_uc1610_dogxl160_2x_bw_buf[WIDTH*2] U8G_NOCOMMON ; 
   \                     u8g_dev_uc1610_dogxl160_2x_bw_buf:
   \   00000000                      DS8 320

   \                                 In section .data, align 4
    283          u8g_pb_t u8g_dev_uc1610_dogxl160_2x_bw_pb = { {16, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_uc1610_dogxl160_2x_bw_buf}; 
   \                     u8g_dev_uc1610_dogxl160_2x_bw_pb:
   \   00000000   0x10 0x68          DC8 16, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_bw_buf

   \                                 In section .data, align 4
    284          u8g_dev_t u8g_dev_uc1610_dogxl160_2x_bw_sw_spi = { u8g_dev_uc1610_dogxl160_2x_bw_fn, &u8g_dev_uc1610_dogxl160_2x_bw_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_uc1610_dogxl160_2x_bw_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_bw_fn, u8g_dev_uc1610_dogxl160_2x_bw_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    285          u8g_dev_t u8g_dev_uc1610_dogxl160_2x_bw_hw_spi = { u8g_dev_uc1610_dogxl160_2x_bw_fn, &u8g_dev_uc1610_dogxl160_2x_bw_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_uc1610_dogxl160_2x_bw_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_bw_fn, u8g_dev_uc1610_dogxl160_2x_bw_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    286          

   \                                 In section .bss, align 4
    287          uint8_t u8g_dev_uc1610_dogxl160_2x_gr_buf[WIDTH*2] U8G_NOCOMMON ; 
   \                     u8g_dev_uc1610_dogxl160_2x_gr_buf:
   \   00000000                      DS8 320

   \                                 In section .data, align 4
    288          u8g_pb_t u8g_dev_uc1610_dogxl160_2x_gr_pb = { {8, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_uc1610_dogxl160_2x_gr_buf}; 
   \                     u8g_dev_uc1610_dogxl160_2x_gr_pb:
   \   00000000   0x08 0x68          DC8 8, 104, 0, 0, 0, 160, 0, 0
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_gr_buf

   \                                 In section .data, align 4
    289          u8g_dev_t u8g_dev_uc1610_dogxl160_2x_gr_sw_spi = { u8g_dev_uc1610_dogxl160_2x_gr_fn, &u8g_dev_uc1610_dogxl160_2x_gr_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_uc1610_dogxl160_2x_gr_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_gr_fn, u8g_dev_uc1610_dogxl160_2x_gr_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    290          u8g_dev_t u8g_dev_uc1610_dogxl160_2x_gr_hw_spi = { u8g_dev_uc1610_dogxl160_2x_gr_fn, &u8g_dev_uc1610_dogxl160_2x_gr_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_uc1610_dogxl160_2x_gr_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1610_dogxl160_2x_gr_fn, u8g_dev_uc1610_dogxl160_2x_gr_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_dev_1to2
      32   u8g_dev_uc1610_dogxl160_2x_bw_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_dev_1to2
         0   -> u8g_dev_pb16v1_base_fn
      32   u8g_dev_uc1610_dogxl160_2x_gr_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb16v2_base_fn
      32   u8g_dev_uc1610_dogxl160_bw_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_dev_1to2
         0   -> u8g_dev_pb8v1_base_fn
      24   u8g_dev_uc1610_dogxl160_gr_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8v2_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      34  u8g_dev_1to2
     320  u8g_dev_uc1610_dogxl160_2x_bw_buf
     462  u8g_dev_uc1610_dogxl160_2x_bw_fn
      12  u8g_dev_uc1610_dogxl160_2x_bw_hw_spi
      12  u8g_dev_uc1610_dogxl160_2x_bw_pb
      12  u8g_dev_uc1610_dogxl160_2x_bw_sw_spi
     320  u8g_dev_uc1610_dogxl160_2x_gr_buf
     266  u8g_dev_uc1610_dogxl160_2x_gr_fn
      12  u8g_dev_uc1610_dogxl160_2x_gr_hw_spi
      12  u8g_dev_uc1610_dogxl160_2x_gr_pb
      12  u8g_dev_uc1610_dogxl160_2x_gr_sw_spi
     300  u8g_dev_uc1610_dogxl160_bw_fn
      12  u8g_dev_uc1610_dogxl160_bw_hw_spi
     160  u8g_dev_uc1610_dogxl160_bw_hw_spi_buf
      12  u8g_dev_uc1610_dogxl160_bw_hw_spi_pb
      12  u8g_dev_uc1610_dogxl160_bw_sw_spi
     160  u8g_dev_uc1610_dogxl160_bw_sw_spi_buf
      12  u8g_dev_uc1610_dogxl160_bw_sw_spi_pb
       8  u8g_dev_uc1610_dogxl160_data_start
     190  u8g_dev_uc1610_dogxl160_gr_fn
      12  u8g_dev_uc1610_dogxl160_gr_hw_spi
     160  u8g_dev_uc1610_dogxl160_gr_hw_spi_buf
      12  u8g_dev_uc1610_dogxl160_gr_hw_spi_pb
      12  u8g_dev_uc1610_dogxl160_gr_sw_spi
     160  u8g_dev_uc1610_dogxl160_gr_sw_spi_buf
      12  u8g_dev_uc1610_dogxl160_gr_sw_spi_pb
      36  u8g_dev_uc1610_dogxl160_init_seq

 
 1 280 bytes in section .bss
   168 bytes in section .data
 1 296 bytes in section .text
 
 1 296 bytes of CODE memory
 1 448 bytes of DATA memory

Errors: none
Warnings: none
