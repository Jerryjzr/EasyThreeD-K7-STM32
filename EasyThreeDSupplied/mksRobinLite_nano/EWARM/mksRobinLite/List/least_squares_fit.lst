###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:00
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EW747A.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\least_squares_fit.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\least_squares_fit.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * Least Squares Best Fit by Roxy and Ed Williams
     25           *
     26           * This algorithm is high speed and has a very small code footprint.
     27           * Its results are identical to both the Iterative Least-Squares published
     28           * earlier by Roxy and the QR_SOLVE solution. If used in place of QR_SOLVE
     29           * it saves roughly 10K of program memory. It also does not require all of
     30           * coordinates to be present during the calculations. Each point can be
     31           * probed and then discarded.
     32           *
     33           */
     34          
     35          #include "MarlinConfig.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")
     36          
     37          //#if ENABLED(AUTO_BED_LEVELING_UBL)  // Currently only used by UBL, but is applicable to Grid Based (Linear) Bed Leveling
     38          #if 1
     39          #include "macros.h"
     40          #include <math.h>
     41          
     42          #include "least_squares_fit.h"

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void incremental_LSF_reset(struct linear_fit_data *lsf) {
     45            memset(lsf, 0, sizeof(linear_fit_data));
   \                     _Z21incremental_LSF_resetP15linear_fit_data: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x213C             MOVS     R1,#+60
   \        0x4   0x.... 0x....      B.W      __aeabi_memset4
     46          }
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void incremental_LSF(struct linear_fit_data *lsf, float x, float y, float z) {
   \                     _Z15incremental_LSFP15linear_fit_datafff: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4698             MOV      R8,R3
     49            lsf->xbar += x;
   \        0xC   0x6868             LDR      R0,[R5, #+4]
   \        0xE   0x.... 0x....      BL       __aeabi_fadd
   \       0x12   0x6068             STR      R0,[R5, #+4]
     50            lsf->ybar += y;
   \       0x14   0x68A8             LDR      R0,[R5, #+8]
   \       0x16   0x4639             MOV      R1,R7
   \       0x18   0x.... 0x....      BL       __aeabi_fadd
   \       0x1C   0x60A8             STR      R0,[R5, #+8]
     51            lsf->zbar += z;
   \       0x1E   0x68E8             LDR      R0,[R5, #+12]
   \       0x20   0x4641             MOV      R1,R8
   \       0x22   0x.... 0x....      BL       __aeabi_fadd
   \       0x26   0x60E8             STR      R0,[R5, #+12]
     52            lsf->x2bar += sq(x);
   \       0x28   0x46B2             MOV      R10,R6
   \       0x2A   0x2402             MOVS     R4,#+2
   \       0x2C   0xF04F 0x597E      MOV      R9,#+1065353216
   \       0x30   0x46CB             MOV      R11,R9
   \       0x32   0xE004             B.N      ??incremental_LSF_0
   \                     ??incremental_LSF_1: (+1)
   \       0x34   0x4650             MOV      R0,R10
   \       0x36   0x4651             MOV      R1,R10
   \       0x38   0x.... 0x....      BL       __aeabi_fmul
   \       0x3C   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_0: (+1)
   \       0x3E   0x07E0             LSLS     R0,R4,#+31
   \       0x40   0xD504             BPL.N    ??incremental_LSF_2
   \       0x42   0x4658             MOV      R0,R11
   \       0x44   0x4651             MOV      R1,R10
   \       0x46   0x.... 0x....      BL       __aeabi_fmul
   \       0x4A   0x4683             MOV      R11,R0
   \                     ??incremental_LSF_2: (+1)
   \       0x4C   0x0864             LSRS     R4,R4,#+1
   \       0x4E   0xD1F1             BNE.N    ??incremental_LSF_1
   \       0x50   0x6928             LDR      R0,[R5, #+16]
   \       0x52   0x4659             MOV      R1,R11
   \       0x54   0x.... 0x....      BL       __aeabi_fadd
   \       0x58   0x6128             STR      R0,[R5, #+16]
     53            lsf->y2bar += sq(y);
   \       0x5A   0x46BA             MOV      R10,R7
   \       0x5C   0x2402             MOVS     R4,#+2
   \       0x5E   0x46CB             MOV      R11,R9
   \       0x60   0xE004             B.N      ??incremental_LSF_3
   \                     ??incremental_LSF_4: (+1)
   \       0x62   0x4650             MOV      R0,R10
   \       0x64   0x4651             MOV      R1,R10
   \       0x66   0x.... 0x....      BL       __aeabi_fmul
   \       0x6A   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_3: (+1)
   \       0x6C   0x07E0             LSLS     R0,R4,#+31
   \       0x6E   0xD504             BPL.N    ??incremental_LSF_5
   \       0x70   0x4658             MOV      R0,R11
   \       0x72   0x4651             MOV      R1,R10
   \       0x74   0x.... 0x....      BL       __aeabi_fmul
   \       0x78   0x4683             MOV      R11,R0
   \                     ??incremental_LSF_5: (+1)
   \       0x7A   0x0864             LSRS     R4,R4,#+1
   \       0x7C   0xD1F1             BNE.N    ??incremental_LSF_4
   \       0x7E   0x6968             LDR      R0,[R5, #+20]
   \       0x80   0x4659             MOV      R1,R11
   \       0x82   0x.... 0x....      BL       __aeabi_fadd
   \       0x86   0x6168             STR      R0,[R5, #+20]
     54            lsf->z2bar += sq(z);
   \       0x88   0x46C2             MOV      R10,R8
   \       0x8A   0x2402             MOVS     R4,#+2
   \       0x8C   0xE004             B.N      ??incremental_LSF_6
   \                     ??incremental_LSF_7: (+1)
   \       0x8E   0x4650             MOV      R0,R10
   \       0x90   0x4651             MOV      R1,R10
   \       0x92   0x.... 0x....      BL       __aeabi_fmul
   \       0x96   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_6: (+1)
   \       0x98   0x07E0             LSLS     R0,R4,#+31
   \       0x9A   0xD504             BPL.N    ??incremental_LSF_8
   \       0x9C   0x4648             MOV      R0,R9
   \       0x9E   0x4651             MOV      R1,R10
   \       0xA0   0x.... 0x....      BL       __aeabi_fmul
   \       0xA4   0x4681             MOV      R9,R0
   \                     ??incremental_LSF_8: (+1)
   \       0xA6   0x0864             LSRS     R4,R4,#+1
   \       0xA8   0xD1F1             BNE.N    ??incremental_LSF_7
   \       0xAA   0x69A8             LDR      R0,[R5, #+24]
   \       0xAC   0x4649             MOV      R1,R9
   \       0xAE   0x.... 0x....      BL       __aeabi_fadd
   \       0xB2   0x61A8             STR      R0,[R5, #+24]
     55            lsf->xybar += x * y;
   \       0xB4   0x4630             MOV      R0,R6
   \       0xB6   0x4639             MOV      R1,R7
   \       0xB8   0x.... 0x....      BL       __aeabi_fmul
   \       0xBC   0x69E9             LDR      R1,[R5, #+28]
   \       0xBE   0x.... 0x....      BL       __aeabi_fadd
   \       0xC2   0x61E8             STR      R0,[R5, #+28]
     56            lsf->xzbar += x * z;
   \       0xC4   0x4630             MOV      R0,R6
   \       0xC6   0x4641             MOV      R1,R8
   \       0xC8   0x.... 0x....      BL       __aeabi_fmul
   \       0xCC   0x6A29             LDR      R1,[R5, #+32]
   \       0xCE   0x.... 0x....      BL       __aeabi_fadd
   \       0xD2   0x6228             STR      R0,[R5, #+32]
     57            lsf->yzbar += y * z;
   \       0xD4   0x4638             MOV      R0,R7
   \       0xD6   0x4641             MOV      R1,R8
   \       0xD8   0x.... 0x....      BL       __aeabi_fmul
   \       0xDC   0x6A69             LDR      R1,[R5, #+36]
   \       0xDE   0x.... 0x....      BL       __aeabi_fadd
   \       0xE2   0x6268             STR      R0,[R5, #+36]
     58            lsf->max_absx = max(fabs(x), lsf->max_absx);
   \       0xE4   0xF026 0x4100      BIC      R1,R6,#0x80000000
   \       0xE8   0x6AA8             LDR      R0,[R5, #+40]
   \       0xEA   0x.... 0x....      BL       __aeabi_cfcmple
   \       0xEE   0xD201             BCS.N    ??incremental_LSF_9
   \       0xF0   0xF026 0x4000      BIC      R0,R6,#0x80000000
   \                     ??incremental_LSF_9: (+1)
   \       0xF4   0x62A8             STR      R0,[R5, #+40]
     59            lsf->max_absy = max(fabs(y), lsf->max_absy);
   \       0xF6   0xF027 0x4100      BIC      R1,R7,#0x80000000
   \       0xFA   0x6AE8             LDR      R0,[R5, #+44]
   \       0xFC   0x.... 0x....      BL       __aeabi_cfcmple
   \      0x100   0xD201             BCS.N    ??incremental_LSF_10
   \      0x102   0xF027 0x4000      BIC      R0,R7,#0x80000000
   \                     ??incremental_LSF_10: (+1)
   \      0x106   0x62E8             STR      R0,[R5, #+44]
     60            lsf->n++;
   \      0x108   0x6828             LDR      R0,[R5, #+0]
   \      0x10A   0x1C40             ADDS     R0,R0,#+1
   \      0x10C   0x6028             STR      R0,[R5, #+0]
     61          }
   \      0x10E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
     62          

   \                                 In section .text, align 2, keep-with-next
     63          int finish_incremental_LSF(struct linear_fit_data *lsf) {
   \                     _Z22finish_incremental_LSFP15linear_fit_data: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
     64            const float N = (float)lsf->n;
   \        0x6   0x6830             LDR      R0,[R6, #+0]
   \        0x8   0x.... 0x....      BL       __aeabi_i2f
   \        0xC   0x4607             MOV      R7,R0
     65          
     66            lsf->xbar /= N;
   \        0xE   0x6870             LDR      R0,[R6, #+4]
   \       0x10   0x4639             MOV      R1,R7
   \       0x12   0x.... 0x....      BL       __aeabi_fdiv
   \       0x16   0x6070             STR      R0,[R6, #+4]
     67            lsf->ybar /= N;
   \       0x18   0x68B0             LDR      R0,[R6, #+8]
   \       0x1A   0x4639             MOV      R1,R7
   \       0x1C   0x.... 0x....      BL       __aeabi_fdiv
   \       0x20   0x60B0             STR      R0,[R6, #+8]
     68            lsf->zbar /= N;
   \       0x22   0x68F0             LDR      R0,[R6, #+12]
   \       0x24   0x4639             MOV      R1,R7
   \       0x26   0x.... 0x....      BL       __aeabi_fdiv
   \       0x2A   0x60F0             STR      R0,[R6, #+12]
     69            lsf->x2bar = lsf->x2bar / N - sq(lsf->xbar);
   \       0x2C   0xF8D6 0x8004      LDR      R8,[R6, #+4]
   \       0x30   0x2402             MOVS     R4,#+2
   \       0x32   0xF04F 0x557E      MOV      R5,#+1065353216
   \       0x36   0x46A9             MOV      R9,R5
   \       0x38   0xE004             B.N      ??finish_incremental_LSF_0
   \                     ??finish_incremental_LSF_1: (+1)
   \       0x3A   0x4640             MOV      R0,R8
   \       0x3C   0x4641             MOV      R1,R8
   \       0x3E   0x.... 0x....      BL       __aeabi_fmul
   \       0x42   0x4680             MOV      R8,R0
   \                     ??finish_incremental_LSF_0: (+1)
   \       0x44   0x07E0             LSLS     R0,R4,#+31
   \       0x46   0xD504             BPL.N    ??finish_incremental_LSF_2
   \       0x48   0x4648             MOV      R0,R9
   \       0x4A   0x4641             MOV      R1,R8
   \       0x4C   0x.... 0x....      BL       __aeabi_fmul
   \       0x50   0x4681             MOV      R9,R0
   \                     ??finish_incremental_LSF_2: (+1)
   \       0x52   0x0864             LSRS     R4,R4,#+1
   \       0x54   0xD1F1             BNE.N    ??finish_incremental_LSF_1
   \       0x56   0x6930             LDR      R0,[R6, #+16]
   \       0x58   0x4639             MOV      R1,R7
   \       0x5A   0x.... 0x....      BL       __aeabi_fdiv
   \       0x5E   0x4649             MOV      R1,R9
   \       0x60   0x.... 0x....      BL       __aeabi_fsub
   \       0x64   0x6130             STR      R0,[R6, #+16]
     70            lsf->y2bar = lsf->y2bar / N - sq(lsf->ybar);
   \       0x66   0xF8D6 0x8008      LDR      R8,[R6, #+8]
   \       0x6A   0x2402             MOVS     R4,#+2
   \       0x6C   0x46A9             MOV      R9,R5
   \       0x6E   0xE004             B.N      ??finish_incremental_LSF_3
   \                     ??finish_incremental_LSF_4: (+1)
   \       0x70   0x4640             MOV      R0,R8
   \       0x72   0x4641             MOV      R1,R8
   \       0x74   0x.... 0x....      BL       __aeabi_fmul
   \       0x78   0x4680             MOV      R8,R0
   \                     ??finish_incremental_LSF_3: (+1)
   \       0x7A   0x07E0             LSLS     R0,R4,#+31
   \       0x7C   0xD504             BPL.N    ??finish_incremental_LSF_5
   \       0x7E   0x4648             MOV      R0,R9
   \       0x80   0x4641             MOV      R1,R8
   \       0x82   0x.... 0x....      BL       __aeabi_fmul
   \       0x86   0x4681             MOV      R9,R0
   \                     ??finish_incremental_LSF_5: (+1)
   \       0x88   0x0864             LSRS     R4,R4,#+1
   \       0x8A   0xD1F1             BNE.N    ??finish_incremental_LSF_4
   \       0x8C   0x6970             LDR      R0,[R6, #+20]
   \       0x8E   0x4639             MOV      R1,R7
   \       0x90   0x.... 0x....      BL       __aeabi_fdiv
   \       0x94   0x4649             MOV      R1,R9
   \       0x96   0x.... 0x....      BL       __aeabi_fsub
   \       0x9A   0x6170             STR      R0,[R6, #+20]
     71            lsf->z2bar = lsf->z2bar / N - sq(lsf->zbar);
   \       0x9C   0xF8D6 0x800C      LDR      R8,[R6, #+12]
   \       0xA0   0x2402             MOVS     R4,#+2
   \       0xA2   0x46A9             MOV      R9,R5
   \       0xA4   0xE004             B.N      ??finish_incremental_LSF_6
   \                     ??finish_incremental_LSF_7: (+1)
   \       0xA6   0x4640             MOV      R0,R8
   \       0xA8   0x4641             MOV      R1,R8
   \       0xAA   0x.... 0x....      BL       __aeabi_fmul
   \       0xAE   0x4680             MOV      R8,R0
   \                     ??finish_incremental_LSF_6: (+1)
   \       0xB0   0x07E0             LSLS     R0,R4,#+31
   \       0xB2   0xD504             BPL.N    ??finish_incremental_LSF_8
   \       0xB4   0x4648             MOV      R0,R9
   \       0xB6   0x4641             MOV      R1,R8
   \       0xB8   0x.... 0x....      BL       __aeabi_fmul
   \       0xBC   0x4681             MOV      R9,R0
   \                     ??finish_incremental_LSF_8: (+1)
   \       0xBE   0x0864             LSRS     R4,R4,#+1
   \       0xC0   0xD1F1             BNE.N    ??finish_incremental_LSF_7
   \       0xC2   0x69B0             LDR      R0,[R6, #+24]
   \       0xC4   0x4639             MOV      R1,R7
   \       0xC6   0x.... 0x....      BL       __aeabi_fdiv
   \       0xCA   0x4649             MOV      R1,R9
   \       0xCC   0x.... 0x....      BL       __aeabi_fsub
   \       0xD0   0x61B0             STR      R0,[R6, #+24]
     72            lsf->xybar = lsf->xybar / N - lsf->xbar * lsf->ybar;
   \       0xD2   0x69F0             LDR      R0,[R6, #+28]
   \       0xD4   0x4639             MOV      R1,R7
   \       0xD6   0x.... 0x....      BL       __aeabi_fdiv
   \       0xDA   0x4604             MOV      R4,R0
   \       0xDC   0x6871             LDR      R1,[R6, #+4]
   \       0xDE   0x68B0             LDR      R0,[R6, #+8]
   \       0xE0   0x.... 0x....      BL       __aeabi_fmul
   \       0xE4   0x4601             MOV      R1,R0
   \       0xE6   0x4620             MOV      R0,R4
   \       0xE8   0x.... 0x....      BL       __aeabi_fsub
   \       0xEC   0x61F0             STR      R0,[R6, #+28]
     73            lsf->yzbar = lsf->yzbar / N - lsf->ybar * lsf->zbar;
   \       0xEE   0x6A70             LDR      R0,[R6, #+36]
   \       0xF0   0x4639             MOV      R1,R7
   \       0xF2   0x.... 0x....      BL       __aeabi_fdiv
   \       0xF6   0x4604             MOV      R4,R0
   \       0xF8   0x68B1             LDR      R1,[R6, #+8]
   \       0xFA   0x68F0             LDR      R0,[R6, #+12]
   \       0xFC   0x.... 0x....      BL       __aeabi_fmul
   \      0x100   0x4601             MOV      R1,R0
   \      0x102   0x4620             MOV      R0,R4
   \      0x104   0x.... 0x....      BL       __aeabi_fsub
   \      0x108   0x6270             STR      R0,[R6, #+36]
     74            lsf->xzbar = lsf->xzbar / N - lsf->xbar * lsf->zbar;
   \      0x10A   0x6A30             LDR      R0,[R6, #+32]
   \      0x10C   0x4639             MOV      R1,R7
   \      0x10E   0x.... 0x....      BL       __aeabi_fdiv
   \      0x112   0x4604             MOV      R4,R0
   \      0x114   0x6871             LDR      R1,[R6, #+4]
   \      0x116   0x68F0             LDR      R0,[R6, #+12]
   \      0x118   0x.... 0x....      BL       __aeabi_fmul
   \      0x11C   0x4601             MOV      R1,R0
   \      0x11E   0x4620             MOV      R0,R4
   \      0x120   0x.... 0x....      BL       __aeabi_fsub
   \      0x124   0x6230             STR      R0,[R6, #+32]
     75            const float DD = lsf->x2bar * lsf->y2bar - sq(lsf->xybar);
   \      0x126   0x69F7             LDR      R7,[R6, #+28]
   \      0x128   0x2402             MOVS     R4,#+2
   \      0x12A   0xE004             B.N      ??finish_incremental_LSF_9
   \                     ??finish_incremental_LSF_10: (+1)
   \      0x12C   0x4638             MOV      R0,R7
   \      0x12E   0x4639             MOV      R1,R7
   \      0x130   0x.... 0x....      BL       __aeabi_fmul
   \      0x134   0x4607             MOV      R7,R0
   \                     ??finish_incremental_LSF_9: (+1)
   \      0x136   0x07E0             LSLS     R0,R4,#+31
   \      0x138   0xD504             BPL.N    ??finish_incremental_LSF_11
   \      0x13A   0x4628             MOV      R0,R5
   \      0x13C   0x4639             MOV      R1,R7
   \      0x13E   0x.... 0x....      BL       __aeabi_fmul
   \      0x142   0x4605             MOV      R5,R0
   \                     ??finish_incremental_LSF_11: (+1)
   \      0x144   0x0864             LSRS     R4,R4,#+1
   \      0x146   0xD1F1             BNE.N    ??finish_incremental_LSF_10
   \      0x148   0x6931             LDR      R1,[R6, #+16]
   \      0x14A   0x6970             LDR      R0,[R6, #+20]
   \      0x14C   0x.... 0x....      BL       __aeabi_fmul
   \      0x150   0x4629             MOV      R1,R5
   \      0x152   0x.... 0x....      BL       __aeabi_fsub
   \      0x156   0x4607             MOV      R7,R0
     76            if (fabs(DD) <= 1e-10 * (lsf->max_absx + lsf->max_absy))
   \      0x158   0xF027 0x4000      BIC      R0,R7,#0x80000000
   \      0x15C   0x.... 0x....      BL       __aeabi_f2d
   \      0x160   0x4602             MOV      R2,R0
   \      0x162   0x460B             MOV      R3,R1
   \      0x164   0x4614             MOV      R4,R2
   \      0x166   0x461D             MOV      R5,R3
   \      0x168   0x6AB1             LDR      R1,[R6, #+40]
   \      0x16A   0x6AF0             LDR      R0,[R6, #+44]
   \      0x16C   0x.... 0x....      BL       __aeabi_fadd
   \      0x170   0x.... 0x....      BL       __aeabi_f2d
   \      0x174   0x....             LDR.N    R2,??DataTable1  ;; 0xd9d7bdbb
   \      0x176   0x....             LDR.N    R3,??DataTable1_1  ;; 0x3ddb7cdf
   \      0x178   0x.... 0x....      BL       __aeabi_dmul
   \      0x17C   0x4622             MOV      R2,R4
   \      0x17E   0x462B             MOV      R3,R5
   \      0x180   0x.... 0x....      BL       __aeabi_cdrcmple
   \      0x184   0xD801             BHI.N    ??finish_incremental_LSF_12
     77              return 1;
   \      0x186   0x2001             MOVS     R0,#+1
   \      0x188   0xE035             B.N      ??finish_incremental_LSF_13
     78          
     79            lsf->A = (lsf->yzbar * lsf->xybar - lsf->xzbar * lsf->y2bar) / DD;
   \                     ??finish_incremental_LSF_12: (+1)
   \      0x18A   0x6A71             LDR      R1,[R6, #+36]
   \      0x18C   0x69F0             LDR      R0,[R6, #+28]
   \      0x18E   0x.... 0x....      BL       __aeabi_fmul
   \      0x192   0x4604             MOV      R4,R0
   \      0x194   0x6A31             LDR      R1,[R6, #+32]
   \      0x196   0x6970             LDR      R0,[R6, #+20]
   \      0x198   0x.... 0x....      BL       __aeabi_fmul
   \      0x19C   0x4601             MOV      R1,R0
   \      0x19E   0x4620             MOV      R0,R4
   \      0x1A0   0x.... 0x....      BL       __aeabi_fsub
   \      0x1A4   0x4639             MOV      R1,R7
   \      0x1A6   0x.... 0x....      BL       __aeabi_fdiv
   \      0x1AA   0x6330             STR      R0,[R6, #+48]
     80            lsf->B = (lsf->xzbar * lsf->xybar - lsf->yzbar * lsf->x2bar) / DD;
   \      0x1AC   0x6A31             LDR      R1,[R6, #+32]
   \      0x1AE   0x69F0             LDR      R0,[R6, #+28]
   \      0x1B0   0x.... 0x....      BL       __aeabi_fmul
   \      0x1B4   0x4604             MOV      R4,R0
   \      0x1B6   0x6A71             LDR      R1,[R6, #+36]
   \      0x1B8   0x6930             LDR      R0,[R6, #+16]
   \      0x1BA   0x.... 0x....      BL       __aeabi_fmul
   \      0x1BE   0x4601             MOV      R1,R0
   \      0x1C0   0x4620             MOV      R0,R4
   \      0x1C2   0x.... 0x....      BL       __aeabi_fsub
   \      0x1C6   0x4639             MOV      R1,R7
   \      0x1C8   0x.... 0x....      BL       __aeabi_fdiv
   \      0x1CC   0x4604             MOV      R4,R0
   \      0x1CE   0x6374             STR      R4,[R6, #+52]
     81            lsf->D = -(lsf->zbar + lsf->A * lsf->xbar + lsf->B * lsf->ybar);
   \      0x1D0   0x6B31             LDR      R1,[R6, #+48]
   \      0x1D2   0x6870             LDR      R0,[R6, #+4]
   \      0x1D4   0x.... 0x....      BL       __aeabi_fmul
   \      0x1D8   0x68F1             LDR      R1,[R6, #+12]
   \      0x1DA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1DE   0x4605             MOV      R5,R0
   \      0x1E0   0x68B0             LDR      R0,[R6, #+8]
   \      0x1E2   0x4621             MOV      R1,R4
   \      0x1E4   0x.... 0x....      BL       __aeabi_fmul
   \      0x1E8   0x4629             MOV      R1,R5
   \      0x1EA   0x.... 0x....      BL       __aeabi_fadd
   \      0x1EE   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \      0x1F2   0x63B0             STR      R0,[R6, #+56]
     82            return 0;
   \      0x1F4   0x2000             MOVS     R0,#+0
   \                     ??finish_incremental_LSF_13: (+1)
   \      0x1F6   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
     83          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0xD9D7'BDBB        DC32     0xd9d7bdbb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x3DDB'7CDF        DC32     0x3ddb7cdf
     84          
     85          #endif // AUTO_BED_LEVELING_UBL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   finish_incremental_LSF(linear_fit_data *)
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32 __aeabi_cdrcmple
      40   incremental_LSF(linear_fit_data *, float, float, float)
        40   -> __aeabi_fadd
        40   -> __aeabi_fmul
        40 __aeabi_cfcmple
       0   incremental_LSF_reset(linear_fit_data *)
         0   -> __aeabi_memset4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
     506  finish_incremental_LSF(linear_fit_data *)
     274  incremental_LSF(linear_fit_data *, float, float, float)
       8  incremental_LSF_reset(linear_fit_data *)

 
 796 bytes in section .text
 
 796 bytes of CODE memory

Errors: none
Warnings: 3
