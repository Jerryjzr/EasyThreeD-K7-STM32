###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_scale.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5A4D.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_scale.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_scale.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_scale.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_scale.c
      1          /*
      2          
      3            u8g_scale.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2012, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33          
     34            Scale screen by some constant factors. Usefull for making bigger fonts wiht less
     35            memory consumption
     36              
     37          */
     38          
     39          #include "u8g.h"
     40          
     41          uint8_t u8g_dev_scale_2x2_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
     42          
     43          

   \                                 In section .data, align 4
     44          u8g_dev_t u8g_dev_scale = { u8g_dev_scale_2x2_fn, NULL, NULL };
   \                     u8g_dev_scale:
   \   00000000   0x........         DC32 u8g_dev_scale_2x2_fn, 0H, 0H
   \              0x00000000   
   \              0x00000000   
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void u8g_UndoScale(u8g_t *u8g)
     47          {
     48            if ( u8g->dev != &u8g_dev_scale )
   \                     u8g_UndoScale: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x428A             CMP      R2,R1
   \   00000006   0xD103             BNE.N    ??u8g_UndoScale_0
     49              return;
     50            u8g->dev = u8g_dev_scale.dev_mem;
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x6041             STR      R1,[R0, #+4]
     51            u8g_UpdateDimension(u8g);
   \   0000000C   0x.... 0x....      B.W      u8g_UpdateDimension
   \                     ??u8g_UndoScale_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
     52          }
     53          

   \                                 In section .text, align 2, keep-with-next
     54          void u8g_SetScale2x2(u8g_t *u8g)
     55          {
     56            if ( u8g->dev != &u8g_dev_scale )
   \                     u8g_SetScale2x2: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x....             LDR.N    R2,??DataTable1
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD001             BEQ.N    ??u8g_SetScale2x2_0
     57            {
     58              u8g_dev_scale.dev_mem = u8g->dev;
   \   00000008   0x6051             STR      R1,[R2, #+4]
     59              u8g->dev = &u8g_dev_scale;
   \   0000000A   0x6042             STR      R2,[R0, #+4]
     60            }
     61            u8g_dev_scale.dev_fn = u8g_dev_scale_2x2_fn;
   \                     ??u8g_SetScale2x2_0: (+1)
   \   0000000C   0x.... 0x....      ADR.W    R1,u8g_dev_scale_2x2_fn
   \   00000010   0x6011             STR      R1,[R2, #+0]
     62            u8g_UpdateDimension(u8g);
   \   00000012   0x.... 0x....      B.W      u8g_UpdateDimension
     63          }
     64          
     65          

   \                                 In section .text, align 4, keep-with-next
     66          uint8_t u8g_dev_scale_2x2_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     67          {
   \                     u8g_dev_scale_2x2_fn: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x461E             MOV      R6,R3
     68            u8g_dev_t *chain = (u8g_dev_t *)(dev->dev_mem);
   \   00000008   0x684F             LDR      R7,[R1, #+4]
     69            uint8_t pixel;
     70            uint16_t scaled_pixel;
     71            uint8_t i;
     72            uint8_t dir;
     73            u8g_uint_t x, y, xx,yy;
     74            
     75            switch(msg)
   \   0000000A   0x4610             MOV      R0,R2
   \   0000000C   0x2817             CMP      R0,#+23
   \   0000000E   0xD01A             BEQ.N    ??u8g_dev_scale_2x2_fn_1
   \   00000010   0x2832             CMP      R0,#+50
   \   00000012   0xD02B             BEQ.N    ??u8g_dev_scale_2x2_fn_2
   \   00000014   0x283B             CMP      R0,#+59
   \   00000016   0xD057             BEQ.N    ??u8g_dev_scale_2x2_fn_3
   \   00000018   0x2846             CMP      R0,#+70
   \   0000001A   0xD008             BEQ.N    ??u8g_dev_scale_2x2_fn_4
   \   0000001C   0x2847             CMP      R0,#+71
   \   0000001E   0x4639             MOV      R1,R7
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0xD00B             BEQ.N    ??u8g_dev_scale_2x2_fn_5
     76            {
     77              default:
     78                return u8g_call_dev_fn(u8g, chain, msg, arg);
   \   00000024   0xB001             ADD      SP,SP,#+4
   \   00000026   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   0000002A   0x.... 0x....      B.W      u8g_call_dev_fn
     79              case U8G_DEV_MSG_GET_WIDTH:
     80                *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g, chain) / 2;
   \                     ??u8g_dev_scale_2x2_fn_4: (+1)
   \   0000002E   0x4639             MOV      R1,R7
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       u8g_GetWidthLL
   \   00000036   0x0840             LSRS     R0,R0,#+1
   \   00000038   0x7030             STRB     R0,[R6, #+0]
     81                break;
   \   0000003A   0xE0BC             B.N      ??u8g_dev_scale_2x2_fn_6
     82              case U8G_DEV_MSG_GET_HEIGHT:
     83                *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g, chain) / 2;
   \                     ??u8g_dev_scale_2x2_fn_5: (+1)
   \   0000003C   0x.... 0x....      BL       u8g_GetHeightLL
   \   00000040   0x0840             LSRS     R0,R0,#+1
   \   00000042   0x7030             STRB     R0,[R6, #+0]
     84                break;
   \   00000044   0xE0B7             B.N      ??u8g_dev_scale_2x2_fn_6
     85              case U8G_DEV_MSG_GET_PAGE_BOX:
     86                /* get page size from next device in the chain */
     87                u8g_call_dev_fn(u8g, chain, msg, arg);
   \                     ??u8g_dev_scale_2x2_fn_1: (+1)
   \   00000046   0x2217             MOVS     R2,#+23
   \   00000048   0x4639             MOV      R1,R7
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       u8g_call_dev_fn
     88                ((u8g_box_t *)arg)->x0 /= 2;
   \   00000050   0x7830             LDRB     R0,[R6, #+0]
   \   00000052   0x0840             LSRS     R0,R0,#+1
   \   00000054   0x7030             STRB     R0,[R6, #+0]
     89                ((u8g_box_t *)arg)->x1 /= 2;
   \   00000056   0x78B0             LDRB     R0,[R6, #+2]
   \   00000058   0x0840             LSRS     R0,R0,#+1
   \   0000005A   0x70B0             STRB     R0,[R6, #+2]
     90                ((u8g_box_t *)arg)->y0 /= 2;
   \   0000005C   0x7870             LDRB     R0,[R6, #+1]
   \   0000005E   0x0840             LSRS     R0,R0,#+1
   \   00000060   0x7070             STRB     R0,[R6, #+1]
     91                ((u8g_box_t *)arg)->y1 /= 2;
   \   00000062   0x78F0             LDRB     R0,[R6, #+3]
   \   00000064   0x0840             LSRS     R0,R0,#+1
   \   00000066   0x70F0             STRB     R0,[R6, #+3]
     92                return 1;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xE0A5             B.N      ??u8g_dev_scale_2x2_fn_7
     93              case U8G_DEV_MSG_SET_PIXEL:
     94                x = ((u8g_dev_arg_pixel_t *)arg)->x;
     95                x *= 2;
   \                     ??u8g_dev_scale_2x2_fn_2: (+1)
   \   0000006C   0x7834             LDRB     R4,[R6, #+0]
   \   0000006E   0x0064             LSLS     R4,R4,#+1
     96                y = ((u8g_dev_arg_pixel_t *)arg)->y;
     97                y *= 2;
   \   00000070   0xF896 0x8001      LDRB     R8,[R6, #+1]
   \   00000074   0xEA4F 0x0848      LSL      R8,R8,#+1
     98                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   00000078   0x7034             STRB     R4,[R6, #+0]
     99                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   0000007A   0xF886 0x8001      STRB     R8,[R6, #+1]
    100                u8g_call_dev_fn(u8g, chain, msg, arg);
   \   0000007E   0x2232             MOVS     R2,#+50
   \   00000080   0x4639             MOV      R1,R7
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x.... 0x....      BL       u8g_call_dev_fn
    101                x++;
   \   00000088   0x1C64             ADDS     R4,R4,#+1
    102                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   0000008A   0x7034             STRB     R4,[R6, #+0]
    103                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   0000008C   0xF886 0x8001      STRB     R8,[R6, #+1]
    104                u8g_call_dev_fn(u8g, chain, msg, arg);
   \   00000090   0x4633             MOV      R3,R6
   \   00000092   0x2232             MOVS     R2,#+50
   \   00000094   0x4639             MOV      R1,R7
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x.... 0x....      BL       u8g_call_dev_fn
    105                y++;
   \   0000009C   0xF108 0x0801      ADD      R8,R8,#+1
    106                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000A0   0x7034             STRB     R4,[R6, #+0]
    107                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000A2   0xF886 0x8001      STRB     R8,[R6, #+1]
    108                u8g_call_dev_fn(u8g, chain, msg, arg);
   \   000000A6   0x4633             MOV      R3,R6
   \   000000A8   0x2232             MOVS     R2,#+50
   \   000000AA   0x4639             MOV      R1,R7
   \   000000AC   0x4628             MOV      R0,R5
   \   000000AE   0x.... 0x....      BL       u8g_call_dev_fn
    109                x--;
    110                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   000000B2   0x1E60             SUBS     R0,R4,#+1
   \   000000B4   0x7030             STRB     R0,[R6, #+0]
    111                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   000000B6   0xF886 0x8001      STRB     R8,[R6, #+1]
    112                u8g_call_dev_fn(u8g, chain, msg, arg);    
   \   000000BA   0x4633             MOV      R3,R6
   \   000000BC   0x2232             MOVS     R2,#+50
   \   000000BE   0x4639             MOV      R1,R7
   \   000000C0   0x4628             MOV      R0,R5
   \   000000C2   0x.... 0x....      BL       u8g_call_dev_fn
    113                break;
   \   000000C6   0xE076             B.N      ??u8g_dev_scale_2x2_fn_6
    114              case U8G_DEV_MSG_SET_8PIXEL:
    115                pixel = ((u8g_dev_arg_pixel_t *)arg)->pixel;
   \                     ??u8g_dev_scale_2x2_fn_3: (+1)
   \   000000C8   0x78B0             LDRB     R0,[R6, #+2]
    116                dir = ((u8g_dev_arg_pixel_t *)arg)->dir;
   \   000000CA   0x78F1             LDRB     R1,[R6, #+3]
   \   000000CC   0xF88D 0x1000      STRB     R1,[SP, #+0]
    117                scaled_pixel = 0;
   \   000000D0   0x2400             MOVS     R4,#+0
    118                for( i = 0; i < 8; i++ )
   \   000000D2   0x4621             MOV      R1,R4
   \   000000D4   0xE006             B.N      ??u8g_dev_scale_2x2_fn_8
    119                {
    120          	scaled_pixel<<=2;
   \                     ??u8g_dev_scale_2x2_fn_9: (+1)
   \   000000D6   0x00A4             LSLS     R4,R4,#+2
    121          	if ( pixel & 128 )
   \   000000D8   0x0602             LSLS     R2,R0,#+24
   \   000000DA   0xD501             BPL.N    ??u8g_dev_scale_2x2_fn_10
    122          	{
    123          	  scaled_pixel |= 3;
   \   000000DC   0xF044 0x0403      ORR      R4,R4,#0x3
    124          	}
    125          	pixel<<=1;
   \                     ??u8g_dev_scale_2x2_fn_10: (+1)
   \   000000E0   0x0040             LSLS     R0,R0,#+1
    126                }
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \                     ??u8g_dev_scale_2x2_fn_8: (+1)
   \   000000E4   0x460A             MOV      R2,R1
   \   000000E6   0xB2D2             UXTB     R2,R2
   \   000000E8   0x2A08             CMP      R2,#+8
   \   000000EA   0xDBF4             BLT.N    ??u8g_dev_scale_2x2_fn_9
    127                x = ((u8g_dev_arg_pixel_t *)arg)->x;
    128                x *= 2;
   \   000000EC   0xF896 0x8000      LDRB     R8,[R6, #+0]
   \   000000F0   0xEA4F 0x0848      LSL      R8,R8,#+1
    129                xx = x;
   \   000000F4   0x46C2             MOV      R10,R8
    130                y = ((u8g_dev_arg_pixel_t *)arg)->y;
    131                y *= 2;
   \   000000F6   0xF896 0x9001      LDRB     R9,[R6, #+1]
   \   000000FA   0xEA4F 0x0949      LSL      R9,R9,#+1
    132                yy = y;
   \   000000FE   0x46CB             MOV      R11,R9
    133                if ( ((u8g_dev_arg_pixel_t *)arg)->dir & 1 )
   \   00000100   0x78F0             LDRB     R0,[R6, #+3]
   \   00000102   0x07C0             LSLS     R0,R0,#+31
   \   00000104   0xD502             BPL.N    ??u8g_dev_scale_2x2_fn_11
    134                {
    135          	xx++;
   \   00000106   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   0000010A   0xE001             B.N      ??u8g_dev_scale_2x2_fn_12
    136                }
    137                else
    138                {
    139          	yy++;
   \                     ??u8g_dev_scale_2x2_fn_11: (+1)
   \   0000010C   0xF10B 0x0B01      ADD      R11,R11,#+1
    140                }
    141                
    142                ((u8g_dev_arg_pixel_t *)arg)->pixel = scaled_pixel>>8;      
   \                     ??u8g_dev_scale_2x2_fn_12: (+1)
   \   00000110   0x4620             MOV      R0,R4
   \   00000112   0xB280             UXTH     R0,R0
   \   00000114   0x0A00             LSRS     R0,R0,#+8
   \   00000116   0x70B0             STRB     R0,[R6, #+2]
    143                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \   00000118   0xF886 0x8000      STRB     R8,[R6, #+0]
    144                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   0000011C   0xF886 0x9001      STRB     R9,[R6, #+1]
    145                ((u8g_dev_arg_pixel_t *)arg)->dir = dir;
   \   00000120   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000124   0x70F0             STRB     R0,[R6, #+3]
    146                u8g_call_dev_fn(u8g, chain, msg, arg);    
   \   00000126   0x223B             MOVS     R2,#+59
   \   00000128   0x4639             MOV      R1,R7
   \   0000012A   0x4628             MOV      R0,R5
   \   0000012C   0x.... 0x....      BL       u8g_call_dev_fn
    147          
    148                
    149                ((u8g_dev_arg_pixel_t *)arg)->x = xx;
   \   00000130   0xF886 0xA000      STRB     R10,[R6, #+0]
    150                ((u8g_dev_arg_pixel_t *)arg)->y = yy;
   \   00000134   0xF886 0xB001      STRB     R11,[R6, #+1]
    151                ((u8g_dev_arg_pixel_t *)arg)->dir = dir;
   \   00000138   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000013C   0x70F0             STRB     R0,[R6, #+3]
    152                u8g_call_dev_fn(u8g, chain, msg, arg);    
   \   0000013E   0x4633             MOV      R3,R6
   \   00000140   0x223B             MOVS     R2,#+59
   \   00000142   0x4639             MOV      R1,R7
   \   00000144   0x4628             MOV      R0,R5
   \   00000146   0x.... 0x....      BL       u8g_call_dev_fn
    153                
    154                ((u8g_dev_arg_pixel_t *)arg)->pixel = scaled_pixel&255;
   \   0000014A   0x70B4             STRB     R4,[R6, #+2]
    155                //((u8g_dev_arg_pixel_t *)arg)->pixel = 0x00;
    156                switch(dir)
   \   0000014C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000150   0x2803             CMP      R0,#+3
   \   00000152   0xD816             BHI.N    ??u8g_dev_scale_2x2_fn_13
   \   00000154   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_dev_scale_2x2_fn_0:
   \   00000158   0x02 0x07          DC8      0x2,0x7,0xC,0x11
   \              0x0C 0x11    
    157                {
    158          	case 0:
    159           	  x+=8;
   \                     ??u8g_dev_scale_2x2_fn_14: (+1)
   \   0000015C   0xF108 0x0808      ADD      R8,R8,#+8
    160          	  xx+=8;
   \   00000160   0xF10A 0x0A08      ADD      R10,R10,#+8
    161          	  break;
   \   00000164   0xE00D             B.N      ??u8g_dev_scale_2x2_fn_13
    162          	case 1:
    163          	  y+=8;
   \                     ??u8g_dev_scale_2x2_fn_15: (+1)
   \   00000166   0xF109 0x0908      ADD      R9,R9,#+8
    164          	  yy+=8;
   \   0000016A   0xF10B 0x0B08      ADD      R11,R11,#+8
    165          	  break;
   \   0000016E   0xE008             B.N      ??u8g_dev_scale_2x2_fn_13
    166          	case 2:
    167          	  x-=8;
   \                     ??u8g_dev_scale_2x2_fn_16: (+1)
   \   00000170   0xF1A8 0x0808      SUB      R8,R8,#+8
    168          	  xx-=8;
   \   00000174   0xF1AA 0x0A08      SUB      R10,R10,#+8
    169          	  break;
   \   00000178   0xE003             B.N      ??u8g_dev_scale_2x2_fn_13
    170          	case 3:
    171          	  y-=8;
   \                     ??u8g_dev_scale_2x2_fn_17: (+1)
   \   0000017A   0xF1A9 0x0908      SUB      R9,R9,#+8
    172          	  yy-=8;
   \   0000017E   0xF1AB 0x0B08      SUB      R11,R11,#+8
    173          	  break;
    174                }
    175                ((u8g_dev_arg_pixel_t *)arg)->x = x;
   \                     ??u8g_dev_scale_2x2_fn_13: (+1)
   \   00000182   0xF886 0x8000      STRB     R8,[R6, #+0]
    176                ((u8g_dev_arg_pixel_t *)arg)->y = y;
   \   00000186   0xF886 0x9001      STRB     R9,[R6, #+1]
    177                ((u8g_dev_arg_pixel_t *)arg)->dir = dir;
   \   0000018A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000018E   0x70F0             STRB     R0,[R6, #+3]
    178                u8g_call_dev_fn(u8g, chain, msg, arg);    
   \   00000190   0x4633             MOV      R3,R6
   \   00000192   0x223B             MOVS     R2,#+59
   \   00000194   0x4639             MOV      R1,R7
   \   00000196   0x4628             MOV      R0,R5
   \   00000198   0x.... 0x....      BL       u8g_call_dev_fn
    179                
    180                ((u8g_dev_arg_pixel_t *)arg)->x = xx;
   \   0000019C   0xF886 0xA000      STRB     R10,[R6, #+0]
    181                ((u8g_dev_arg_pixel_t *)arg)->y = yy;
   \   000001A0   0xF886 0xB001      STRB     R11,[R6, #+1]
    182                ((u8g_dev_arg_pixel_t *)arg)->dir = dir;
   \   000001A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001A8   0x70F0             STRB     R0,[R6, #+3]
    183                u8g_call_dev_fn(u8g, chain, msg, arg);    
   \   000001AA   0x4633             MOV      R3,R6
   \   000001AC   0x223B             MOVS     R2,#+59
   \   000001AE   0x4639             MOV      R1,R7
   \   000001B0   0x4628             MOV      R0,R5
   \   000001B2   0x.... 0x....      BL       u8g_call_dev_fn
    184                break;
    185            }
    186            return 1;
   \                     ??u8g_dev_scale_2x2_fn_6: (+1)
   \   000001B6   0x2001             MOVS     R0,#+1
   \                     ??u8g_dev_scale_2x2_fn_7: (+1)
   \   000001B8   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    187          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     u8g_dev_scale
    188          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_SetScale2x2
         0   -> u8g_UpdateDimension
       0   u8g_UndoScale
         0   -> u8g_UpdateDimension
      40   u8g_dev_scale_2x2_fn
        40   -> u8g_GetHeightLL
        40   -> u8g_GetWidthLL
         0   -> u8g_call_dev_fn
        40   -> u8g_call_dev_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      22  u8g_SetScale2x2
      18  u8g_UndoScale
      12  u8g_dev_scale
     444  u8g_dev_scale_2x2_fn

 
  12 bytes in section .data
 488 bytes in section .text
 
 488 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
