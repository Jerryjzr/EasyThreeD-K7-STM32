###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb14v1.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5156.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb14v1.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_pb14v1.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_pb14v1.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb14v1.c
      1          /*
      2          
      3            u8g_pb14v1.c
      4            
      5            14bit height monochrom (1 bit) page buffer, 
      6            byte has vertical orientation, 7 bits per byte
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2011, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37          
     38          */
     39          
     40          #include "u8g.h"
     41          #include <string.h>
     42          
     43          
     44          void u8g_pb14v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width) U8G_NOINLINE;
     45          void u8g_pb14v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index) U8G_NOINLINE;
     46          void u8g_pb14v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel) U8G_NOINLINE ;
     47          void u8g_pb14v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;
     48          
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void u8g_pb14v1_Clear(u8g_pb_t *b)
     51          {
     52            uint8_t *ptr = (uint8_t *)b->buf;
   \                     u8g_pb14v1_Clear: (+1)
   \   00000000   0x6881             LDR      R1,[R0, #+8]
     53            uint8_t *end_ptr = ptr;
     54            end_ptr += b->width*2;
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   00000008   0x2200             MOVS     R2,#+0
     55            do
     56            {
     57              *ptr++ = 0;
   \                     ??u8g_pb14v1_Clear_0: (+1)
   \   0000000A   0xF801 0x2B01      STRB     R2,[R1], #+1
     58            } while( ptr != end_ptr );
   \   0000000E   0x4281             CMP      R1,R0
   \   00000010   0xD1FB             BNE.N    ??u8g_pb14v1_Clear_0
     59          }
   \   00000012   0x4770             BX       LR               ;; return
     60          
     61          /* Obsolete, usually set by the init of the structure */

   \                                 In section .text, align 2, keep-with-next
     62          void u8g_pb14v1_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
     63          {
     64            b->buf = buf;
   \                     u8g_pb14v1_Init: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
     65            b->width = width;
   \   00000002   0x7142             STRB     R2,[R0, #+5]
     66            u8g_pb14v1_Clear(b);
   \   00000004   0x....             B.N      u8g_pb14v1_Clear
     67          }
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void u8g_pb14v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
     70          {
   \                     u8g_pb14v1_set_pixel: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     71            register uint8_t mask;
     72            uint8_t *ptr = b->buf;
   \   00000002   0x6885             LDR      R5,[R0, #+8]
     73            
     74            y -= b->p.page_y0;
   \   00000004   0x7884             LDRB     R4,[R0, #+2]
   \   00000006   0x1B12             SUBS     R2,R2,R4
     75            if ( y >= 7 )
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0xB2E4             UXTB     R4,R4
   \   0000000C   0x2C07             CMP      R4,#+7
   \   0000000E   0xDB02             BLT.N    ??u8g_pb14v1_set_pixel_0
     76            {
     77              ptr += b->width;
   \   00000010   0x7940             LDRB     R0,[R0, #+5]
   \   00000012   0x4405             ADD      R5,R5,R0
     78              y -= 7;
   \   00000014   0x1FD2             SUBS     R2,R2,#+7
     79            }
     80            mask = 1;
     81            mask <<= y;
   \                     ??u8g_pb14v1_set_pixel_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xFA00 0xF202      LSL      R2,R0,R2
     82            ptr += x;
   \   0000001C   0x1868             ADDS     R0,R5,R1
     83            if ( color_index )
   \   0000001E   0x7801             LDRB     R1,[R0, #+0]
   \   00000020   0x2B00             CMP      R3,#+0
   \   00000022   0xD002             BEQ.N    ??u8g_pb14v1_set_pixel_1
     84            {
     85              *ptr |= mask;
   \   00000024   0x430A             ORRS     R2,R2,R1
   \   00000026   0x7002             STRB     R2,[R0, #+0]
   \   00000028   0xE003             B.N      ??u8g_pb14v1_set_pixel_2
     86            }
     87            else
     88            {
     89              mask ^=0xff;
     90              *ptr &= mask;
   \                     ??u8g_pb14v1_set_pixel_1: (+1)
   \   0000002A   0xF082 0x02FF      EOR      R2,R2,#0xFF
   \   0000002E   0x400A             ANDS     R2,R2,R1
   \   00000030   0x7002             STRB     R2,[R0, #+0]
     91            }
     92          }
   \                     ??u8g_pb14v1_set_pixel_2: (+1)
   \   00000032   0xBC30             POP      {R4,R5}
   \   00000034   0x4770             BX       LR               ;; return
     93          
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void u8g_pb14v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
     96          {
   \                     u8g_pb14v1_SetPixel: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
     97            if ( arg_pixel->y < b->p.page_y0 )
   \   00000002   0x784A             LDRB     R2,[R1, #+1]
   \   00000004   0x7883             LDRB     R3,[R0, #+2]
   \   00000006   0x429A             CMP      R2,R3
   \   00000008   0xD30B             BCC.N    ??u8g_pb14v1_SetPixel_0
     98              return;
     99            if ( arg_pixel->y > b->p.page_y1 )
   \   0000000A   0x78C3             LDRB     R3,[R0, #+3]
   \   0000000C   0x4293             CMP      R3,R2
   \   0000000E   0xD308             BCC.N    ??u8g_pb14v1_SetPixel_0
    100              return;
    101            if ( arg_pixel->x >= b->width )
   \   00000010   0x780C             LDRB     R4,[R1, #+0]
   \   00000012   0x7943             LDRB     R3,[R0, #+5]
   \   00000014   0x429C             CMP      R4,R3
   \   00000016   0xD204             BCS.N    ??u8g_pb14v1_SetPixel_0
    102              return;
    103            u8g_pb14v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
   \   00000018   0x790B             LDRB     R3,[R1, #+4]
   \   0000001A   0x4621             MOV      R1,R4
   \   0000001C   0xB001             ADD      SP,SP,#+4
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0x....             B.N      u8g_pb14v1_set_pixel
   \                     ??u8g_pb14v1_SetPixel_0: (+1)
   \   00000022   0xBC11             POP      {R0,R4}
   \   00000024   0x4770             BX       LR               ;; return
    104          }
    105          

   \                                 In section .text, align 4, keep-with-next
    106          void u8g_pb14v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    107          {
   \                     u8g_pb14v1_Set8PixelStd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    108            register uint8_t pixel = arg_pixel->pixel;
   \   00000006   0x78AE             LDRB     R6,[R5, #+2]
    109            do
    110            {
    111              if ( pixel & 128 )
   \                     ??u8g_pb14v1_Set8PixelStd_1: (+1)
   \   00000008   0x0630             LSLS     R0,R6,#+24
   \   0000000A   0xD503             BPL.N    ??u8g_pb14v1_Set8PixelStd_2
    112              {
    113                u8g_pb14v1_SetPixel(b, arg_pixel);
   \   0000000C   0x4629             MOV      R1,R5
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_pb14v1_SetPixel
    114              }
    115              switch( arg_pixel->dir )
   \                     ??u8g_pb14v1_Set8PixelStd_2: (+1)
   \   00000014   0x78E8             LDRB     R0,[R5, #+3]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD812             BHI.N    ??u8g_pb14v1_Set8PixelStd_3
   \   0000001A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pb14v1_Set8PixelStd_0:
   \   0000001E   0x02 0x06          DC8      0x2,0x6,0xA,0xE
   \              0x0A 0x0E    
    116              {
    117                case 0: arg_pixel->x++; break;
   \                     ??u8g_pb14v1_Set8PixelStd_4: (+1)
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x7028             STRB     R0,[R5, #+0]
   \   00000028   0xE00A             B.N      ??u8g_pb14v1_Set8PixelStd_3
    118                case 1: arg_pixel->y++; break;
   \                     ??u8g_pb14v1_Set8PixelStd_5: (+1)
   \   0000002A   0x7868             LDRB     R0,[R5, #+1]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x7068             STRB     R0,[R5, #+1]
   \   00000030   0xE006             B.N      ??u8g_pb14v1_Set8PixelStd_3
    119                case 2: arg_pixel->x--; break;
   \                     ??u8g_pb14v1_Set8PixelStd_6: (+1)
   \   00000032   0x7828             LDRB     R0,[R5, #+0]
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x7028             STRB     R0,[R5, #+0]
   \   00000038   0xE002             B.N      ??u8g_pb14v1_Set8PixelStd_3
    120                case 3: arg_pixel->y--; break;
   \                     ??u8g_pb14v1_Set8PixelStd_7: (+1)
   \   0000003A   0x7868             LDRB     R0,[R5, #+1]
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x7068             STRB     R0,[R5, #+1]
    121              }
    122              pixel <<= 1;
   \                     ??u8g_pb14v1_Set8PixelStd_3: (+1)
   \   00000040   0x0076             LSLS     R6,R6,#+1
    123            } while( pixel != 0  );
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1DE             BNE.N    ??u8g_pb14v1_Set8PixelStd_1
    124          }
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    125          
    126          

   \                                 In section .text, align 4, keep-with-next
    127          void u8g_pb14v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    128          {
   \                     u8g_pb14v1_Set8PixelOpt2: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
    129            register uint8_t pixel = arg_pixel->pixel;
   \   00000008   0xF897 0x8002      LDRB     R8,[R7, #+2]
    130            u8g_uint_t dx = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
    131            u8g_uint_t dy = 0;
   \   0000000E   0x4625             MOV      R5,R4
    132            
    133            switch( arg_pixel->dir )
   \   00000010   0x78F8             LDRB     R0,[R7, #+3]
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD804             BHI.N    ??u8g_pb14v1_Set8PixelOpt2_1
   \   00000016   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pb14v1_Set8PixelOpt2_0:
   \   0000001A   0x02 0x18          DC8      0x2,0x18,0x1A,0x1C
   \              0x1A 0x1C    
    134            {
    135              case 0: dx++; break;
   \                     ??u8g_pb14v1_Set8PixelOpt2_2: (+1)
   \   0000001E   0x2401             MOVS     R4,#+1
    136              case 1: dy++; break;
    137              case 2: dx--; break;
    138              case 3: dy--; break;
    139            }
    140            
    141            do
    142            {
    143              if ( pixel & 128 )
   \                     ??u8g_pb14v1_Set8PixelOpt2_1: (+1)
   \   00000020   0xEA5F 0x6008      LSLS     R0,R8,#+24
   \   00000024   0xD503             BPL.N    ??u8g_pb14v1_Set8PixelOpt2_3
    144                u8g_pb14v1_SetPixel(b, arg_pixel);
   \   00000026   0x4639             MOV      R1,R7
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0x.... 0x....      BL       u8g_pb14v1_SetPixel
    145              arg_pixel->x += dx;
   \                     ??u8g_pb14v1_Set8PixelOpt2_3: (+1)
   \   0000002E   0x7838             LDRB     R0,[R7, #+0]
   \   00000030   0x1820             ADDS     R0,R4,R0
   \   00000032   0x7038             STRB     R0,[R7, #+0]
    146              arg_pixel->y += dy;
   \   00000034   0x7878             LDRB     R0,[R7, #+1]
   \   00000036   0x1828             ADDS     R0,R5,R0
   \   00000038   0x7078             STRB     R0,[R7, #+1]
    147              pixel <<= 1;
   \   0000003A   0xEA4F 0x0848      LSL      R8,R8,#+1
    148            } while( pixel != 0  );
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD1EC             BNE.N    ??u8g_pb14v1_Set8PixelOpt2_1
    149            
    150          }
   \   00000046   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_pb14v1_Set8PixelOpt2_4: (+1)
   \   0000004A   0x2501             MOVS     R5,#+1
   \   0000004C   0xE7E8             B.N      ??u8g_pb14v1_Set8PixelOpt2_1
   \                     ??u8g_pb14v1_Set8PixelOpt2_5: (+1)
   \   0000004E   0x24FF             MOVS     R4,#+255
   \   00000050   0xE7E6             B.N      ??u8g_pb14v1_Set8PixelOpt2_1
   \                     ??u8g_pb14v1_Set8PixelOpt2_6: (+1)
   \   00000052   0x25FF             MOVS     R5,#+255
   \   00000054   0xE7E4             B.N      ??u8g_pb14v1_Set8PixelOpt2_1
    151          

   \                                 In section .text, align 2, keep-with-next
    152          uint8_t u8g_dev_pb14v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    153          {
   \                     u8g_dev_pb14v1_base_fn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x461C             MOV      R4,R3
    154            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000004   0x684D             LDR      R5,[R1, #+4]
    155            switch(msg)
   \   00000006   0x2A14             CMP      R2,#+20
   \   00000008   0xD01C             BEQ.N    ??u8g_dev_pb14v1_base_fn_0
   \   0000000A   0x2A15             CMP      R2,#+21
   \   0000000C   0xD021             BEQ.N    ??u8g_dev_pb14v1_base_fn_1
   \   0000000E   0x2A17             CMP      R2,#+23
   \   00000010   0xD02A             BEQ.N    ??u8g_dev_pb14v1_base_fn_2
   \   00000012   0x2A32             CMP      R2,#+50
   \   00000014   0xD011             BEQ.N    ??u8g_dev_pb14v1_base_fn_3
   \   00000016   0x2A3B             CMP      R2,#+59
   \   00000018   0xD004             BEQ.N    ??u8g_dev_pb14v1_base_fn_4
   \   0000001A   0x2A46             CMP      R2,#+70
   \   0000001C   0xD029             BEQ.N    ??u8g_dev_pb14v1_base_fn_5
   \   0000001E   0x2A47             CMP      R2,#+71
   \   00000020   0xD02A             BEQ.N    ??u8g_dev_pb14v1_base_fn_6
   \   00000022   0xE02B             B.N      ??u8g_dev_pb14v1_base_fn_7
    156            {
    157              case U8G_DEV_MSG_SET_8PIXEL:
    158                if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
   \                     ??u8g_dev_pb14v1_base_fn_4: (+1)
   \   00000024   0x4621             MOV      R1,R4
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       u8g_pb_Is8PixelVisible
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD025             BEQ.N    ??u8g_dev_pb14v1_base_fn_7
    159                  u8g_pb14v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       u8g_pb14v1_Set8PixelOpt2
   \   00000038   0xE020             B.N      ??u8g_dev_pb14v1_base_fn_7
    160                break;
    161              case U8G_DEV_MSG_SET_PIXEL:
    162                  u8g_pb14v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
   \                     ??u8g_dev_pb14v1_base_fn_3: (+1)
   \   0000003A   0x4621             MOV      R1,R4
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       u8g_pb14v1_SetPixel
    163                break;
   \   00000042   0xE01B             B.N      ??u8g_dev_pb14v1_base_fn_7
    164              case U8G_DEV_MSG_INIT:
    165                break;
    166              case U8G_DEV_MSG_STOP:
    167                break;
    168              case U8G_DEV_MSG_PAGE_FIRST:
    169                u8g_pb14v1_Clear(pb);
   \                     ??u8g_dev_pb14v1_base_fn_0: (+1)
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       u8g_pb14v1_Clear
    170                u8g_page_First(&(pb->p));
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       u8g_page_First
    171                break;
   \   00000050   0xE014             B.N      ??u8g_dev_pb14v1_base_fn_7
    172              case U8G_DEV_MSG_PAGE_NEXT:
    173                if ( u8g_page_Next(&(pb->p)) == 0 )
   \                     ??u8g_dev_pb14v1_base_fn_1: (+1)
   \   00000052   0x4628             MOV      R0,R5
   \   00000054   0x.... 0x....      BL       u8g_page_Next
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD101             BNE.N    ??u8g_dev_pb14v1_base_fn_8
    174                  return 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xBD32             POP      {R1,R4,R5,PC}
    175                u8g_pb14v1_Clear(pb);
   \                     ??u8g_dev_pb14v1_base_fn_8: (+1)
   \   00000060   0x4628             MOV      R0,R5
   \   00000062   0x.... 0x....      BL       u8g_pb14v1_Clear
    176                break;
   \   00000066   0xE009             B.N      ??u8g_dev_pb14v1_base_fn_7
    177          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    178              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    179                return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
    180          #endif
    181              case U8G_DEV_MSG_GET_PAGE_BOX:
    182                u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
   \                     ??u8g_dev_pb14v1_base_fn_2: (+1)
   \   00000068   0x4621             MOV      R1,R4
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       u8g_pb_GetPageBox
    183                break;
   \   00000070   0xE004             B.N      ??u8g_dev_pb14v1_base_fn_7
    184              case U8G_DEV_MSG_GET_WIDTH:
    185                *((u8g_uint_t *)arg) = pb->width;
   \                     ??u8g_dev_pb14v1_base_fn_5: (+1)
   \   00000072   0x7968             LDRB     R0,[R5, #+5]
   \   00000074   0x7020             STRB     R0,[R4, #+0]
    186                break;
   \   00000076   0xE001             B.N      ??u8g_dev_pb14v1_base_fn_7
    187              case U8G_DEV_MSG_GET_HEIGHT:
    188                *((u8g_uint_t *)arg) = pb->p.total_height;
   \                     ??u8g_dev_pb14v1_base_fn_6: (+1)
   \   00000078   0x7868             LDRB     R0,[R5, #+1]
   \   0000007A   0x7020             STRB     R0,[R4, #+0]
    189                break;
    190              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    191                break;
    192              case U8G_DEV_MSG_SET_XY_CB:
    193                break;
    194              case U8G_DEV_MSG_GET_MODE:
    195                return U8G_MODE_BW;
    196            }
    197            return 1;
   \                     ??u8g_dev_pb14v1_base_fn_7: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    198          }
    199           
    200            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_dev_pb14v1_base_fn
        16   -> u8g_page_First
        16   -> u8g_page_Next
        16   -> u8g_pb14v1_Clear
        16   -> u8g_pb14v1_Set8PixelOpt2
        16   -> u8g_pb14v1_SetPixel
        16   -> u8g_pb_GetPageBox
        16   -> u8g_pb_Is8PixelVisible
       0   u8g_pb14v1_Clear
       0   u8g_pb14v1_Init
         0   -> u8g_pb14v1_Clear
      24   u8g_pb14v1_Set8PixelOpt2
        24   -> u8g_pb14v1_SetPixel
      16   u8g_pb14v1_Set8PixelStd
        16   -> u8g_pb14v1_SetPixel
       8   u8g_pb14v1_SetPixel
         0   -> u8g_pb14v1_set_pixel
       8   u8g_pb14v1_set_pixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  u8g_dev_pb14v1_base_fn
      20  u8g_pb14v1_Clear
       6  u8g_pb14v1_Init
      86  u8g_pb14v1_Set8PixelOpt2
      76  u8g_pb14v1_Set8PixelStd
      38  u8g_pb14v1_SetPixel
      54  u8g_pb14v1_set_pixel

 
 408 bytes in section .text
 
 408 bytes of CODE memory

Errors: none
Warnings: none
