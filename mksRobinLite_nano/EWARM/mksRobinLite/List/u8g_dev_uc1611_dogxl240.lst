###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1611_dogxl240.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4C1E.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1611_dogxl240.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        F:\nano\EWARM\mksRobinLite\List\u8g_dev_uc1611_dogxl240.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_uc1611_dogxl240.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_uc1611_dogxl240.c
      1          /*
      2          
      3            u8g_dev_uc1611_dogxl240.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2014, dev.menges.jonas@gmail.com, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          
     40          #define WIDTH 240
     41          #define HEIGHT 128
     42          #define PAGE_HEIGHT 8
     43          
     44          

   \                                 In section .text, align 4, keep-with-next
     45          static const uint8_t u8g_dev_uc1611_dogxl240_init_seq[] PROGMEM = {
   \                     u8g_dev_uc1611_dogxl240_init_seq:
   \   00000000   0xFF 0xD1          DC8 255, 209, 255, 224, 241, 127, 242, 0, 243, 127, 129, 170, 192, 2
   \              0xFF 0xE0    
   \              0xF1 0x7F    
   \              0xF2 0x00    
   \              0xF3 0x7F    
   \              0x81 0xAA    
   \              0xC0 0x02    
   \   0000000E   0xA3 0xE9          DC8 163, 233, 169, 209, 255, 208, 255, 254, 0, 0
   \              0xA9 0xD1    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
   \              0x00 0x00    
     46            U8G_ESC_CS(1),             // enable chip
     47            U8G_ESC_ADR(0),           // instruction mode
     48            0xF1,     // set last COM electrode
     49            0x7F,     // DOGXL240
     50            0xF2,     // set display start line
     51            0x00,     // 0
     52            0xF3,     // set display end line
     53            0x7F,     // DOGXL240
     54            0x81,     // set contrast (0-255)
     55            0xAA,     // DOGXL240 
     56            0xC0,     // set view
     57            //0x04,     // topview
     58            0x02,     // bottomview
     59            0xA3,     // set line rate (9.4k)
     60            0xE9,     // set bias ratio (10)
     61            0xA9,     // enable display
     62            0xD1,      // set black and white mode
     63            U8G_ESC_CS(0),             // disable chip
     64            U8G_ESC_END                // end of sequence
     65          };
     66          

   \                                 In section .text, align 2, keep-with-next
     67          static void u8g_dev_dogxl240_set_page(u8g_t *u8g, u8g_dev_t *dev, unsigned char page)
     68          {
   \                     u8g_dev_dogxl240_set_page: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     69            u8g_WriteByte(u8g, dev, 0x70);
   \   00000008   0x2270             MOVS     R2,#+112
   \   0000000A   0x.... 0x....      BL       u8g_WriteByte
     70            u8g_WriteByte(u8g, dev, 0x60 + (page&0x0F));
   \   0000000E   0xF006 0x060F      AND      R6,R6,#0xF
   \   00000012   0x3660             ADDS     R6,R6,#+96
   \   00000014   0x4632             MOV      R2,R6
   \   00000016   0xB2D2             UXTB     R2,R2
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000020   0x.... 0x....      B.W      u8g_WriteByte
     71          }
     72          

   \                                 In section .text, align 4, keep-with-next
     73          static const uint8_t u8g_dev_uc1611_dogxl240_data_start[] PROGMEM = {
   \                     u8g_dev_uc1611_dogxl240_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 16, 0, 255, 254
   \              0xFF 0xD1    
   \              0x10 0x00    
   \              0xFF 0xFE    
     74            U8G_ESC_ADR(0),           /* instruction mode */
     75            U8G_ESC_CS(1),            /* enable chip */
     76            0x10,                     /* set upper 4 bit of the col adr to 0 */
     77            0x00,                     /* set lower 4 bit of the col adr to 0 */
     78            U8G_ESC_END               /* end of sequence */
     79          };
     80          

   \                                 In section .text, align 4, keep-with-next
     81          static uint8_t u8g_dev_uc1611_dogxl240_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     82          {
   \                     u8g_dev_uc1611_dogxl240_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
     83            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD004             BEQ.N    ??u8g_dev_uc1611_dogxl240_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD036             BEQ.N    ??u8g_dev_uc1611_dogxl240_fn_1
   \   00000016   0x2815             CMP      R0,#+21
   \   00000018   0xD013             BEQ.N    ??u8g_dev_uc1611_dogxl240_fn_2
   \   0000001A   0xE008             B.N      ??u8g_dev_uc1611_dogxl240_fn_3
     84            {
     85              case U8G_DEV_MSG_INIT:
     86                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_uc1611_dogxl240_fn_0: (+1)
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       u8g_InitCom
     87                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_init_seq);
   \   00000024   0x....             ADR.N    R2,u8g_dev_uc1611_dogxl240_init_seq
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       u8g_WriteEscSeqP
     88                break;
     89              case U8G_DEV_MSG_STOP:
     90                break;
     91              case U8G_DEV_MSG_PAGE_NEXT:
     92                {
     93                u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
     94                u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_data_start);
     95                u8g_dev_dogxl240_set_page(u8g, dev, pb->p.page);   /* select current page (uc1611) */
     96                u8g_SetAddress(u8g, dev, 1);     /* data mode */
     97                if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
     98                  return 0;
     99                u8g_SetChipSelect(u8g, dev, 1);
    100                }
    101                break;
    102              case U8G_DEV_MSG_CONTRAST:
    103                u8g_SetChipSelect(u8g, dev, 0);
    104                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    105                u8g_WriteByte(u8g, dev, 0x81);
    106                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);	/* set contrast from, keep gain at 0 */
    107                u8g_SetChipSelect(u8g, dev, 1);
    108                return 1;
    109            }
    110            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_uc1611_dogxl240_fn_3: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000003A   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
   \                     ??u8g_dev_uc1611_dogxl240_fn_4: (+1)
   \   0000003E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_uc1611_dogxl240_fn_2: (+1)
   \   00000042   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000046   0xBF00             Nop      
   \   00000048   0x....             ADR.N    R2,u8g_dev_uc1611_dogxl240_data_start
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000050   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       u8g_dev_dogxl240_set_page
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x4629             MOV      R1,R5
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       u8g_SetAddress
   \   00000066   0x462A             MOV      R2,R5
   \   00000068   0x4621             MOV      R1,R4
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD101             BNE.N    ??u8g_dev_uc1611_dogxl240_fn_5
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE7E2             B.N      ??u8g_dev_uc1611_dogxl240_fn_4
   \                     ??u8g_dev_uc1611_dogxl240_fn_5: (+1)
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000082   0xE7D4             B.N      ??u8g_dev_uc1611_dogxl240_fn_3
   \                     ??u8g_dev_uc1611_dogxl240_fn_1: (+1)
   \   00000084   0x2200             MOVS     R2,#+0
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x4629             MOV      R1,R5
   \   00000090   0x4620             MOV      R0,R4
   \   00000092   0x.... 0x....      BL       u8g_SetAddress
   \   00000096   0x2281             MOVS     R2,#+129
   \   00000098   0x4629             MOV      R1,R5
   \   0000009A   0x4620             MOV      R0,R4
   \   0000009C   0x.... 0x....      BL       u8g_WriteByte
   \   000000A0   0x783A             LDRB     R2,[R7, #+0]
   \   000000A2   0x0892             LSRS     R2,R2,#+2
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_WriteByte
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0xE7C1             B.N      ??u8g_dev_uc1611_dogxl240_fn_4
    111          }
    112          

   \                                 In section .bss, align 4
    113          U8G_PB_DEV(u8g_dev_uc1611_dogxl240_i2c , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_uc1611_dogxl240_fn, U8G_COM_UC_I2C);
   \                     u8g_dev_uc1611_dogxl240_i2c_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1611_dogxl240_i2c_pb
   \                     u8g_dev_uc1611_dogxl240_i2c_pb:
   \   00000000   0x08 0x80          DC8 8, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1611_dogxl240_i2c_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1611_dogxl240_i2c
   \                     u8g_dev_uc1611_dogxl240_i2c:
   \   00000000   0x........         DC32 u8g_dev_uc1611_dogxl240_fn, u8g_dev_uc1611_dogxl240_i2c_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    114          U8G_PB_DEV(u8g_dev_uc1611_dogxl240_sw_spi , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_uc1611_dogxl240_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_uc1611_dogxl240_sw_spi_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1611_dogxl240_sw_spi_pb
   \                     u8g_dev_uc1611_dogxl240_sw_spi_pb:
   \   00000000   0x08 0x80          DC8 8, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1611_dogxl240_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1611_dogxl240_sw_spi
   \                     u8g_dev_uc1611_dogxl240_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1611_dogxl240_fn, u8g_dev_uc1611_dogxl240_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    115          U8G_PB_DEV(u8g_dev_uc1611_dogxl240_hw_spi , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_uc1611_dogxl240_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_uc1611_dogxl240_hw_spi_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_uc1611_dogxl240_hw_spi_pb
   \                     u8g_dev_uc1611_dogxl240_hw_spi_pb:
   \   00000000   0x08 0x80          DC8 8, 128, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_uc1611_dogxl240_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_uc1611_dogxl240_hw_spi
   \                     u8g_dev_uc1611_dogxl240_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_uc1611_dogxl240_fn, u8g_dev_uc1611_dogxl240_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    116          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_dev_dogxl240_set_page
         0   -> u8g_WriteByte
        16   -> u8g_WriteByte
      24   u8g_dev_uc1611_dogxl240_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
        24   -> u8g_dev_dogxl240_set_page
         0   -> u8g_dev_pb8v1_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  u8g_dev_dogxl240_set_page
       8  u8g_dev_uc1611_dogxl240_data_start
     186  u8g_dev_uc1611_dogxl240_fn
      12  u8g_dev_uc1611_dogxl240_hw_spi
     240  u8g_dev_uc1611_dogxl240_hw_spi_buf
      12  u8g_dev_uc1611_dogxl240_hw_spi_pb
      12  u8g_dev_uc1611_dogxl240_i2c
     240  u8g_dev_uc1611_dogxl240_i2c_buf
      12  u8g_dev_uc1611_dogxl240_i2c_pb
      24  u8g_dev_uc1611_dogxl240_init_seq
      12  u8g_dev_uc1611_dogxl240_sw_spi
     240  u8g_dev_uc1611_dogxl240_sw_spi_buf
      12  u8g_dev_uc1611_dogxl240_sw_spi_pb

 
 720 bytes in section .bss
  72 bytes in section .data
 254 bytes in section .text
 
 254 bytes of CODE memory
 792 bytes of DATA memory

Errors: none
Warnings: none
