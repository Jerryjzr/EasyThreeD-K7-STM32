###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  22:13:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWF35E.tmp
#        (F:\nano\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\stm32f1xx_hal_dma.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\stm32f1xx_hal_dma.o
#
###############################################################################

F:\nano\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f1xx_hal_dma.c
      4            * @author  MCD Application Team
      5            * @version V1.0.4
      6            * @date    29-April-2016
      7            * @brief   DMA HAL module driver.
      8            *    
      9            *          This file provides firmware functions to manage the following 
     10            *          functionalities of the Direct Memory Access (DMA) peripheral:
     11            *           + Initialization and de-initialization functions
     12            *           + IO operation functions
     13            *           + Peripheral State and errors functions
     14            @verbatim     
     15            ==============================================================================      
     16                                  ##### How to use this driver #####
     17            ============================================================================== 
     18            [..]
     19             (#) Enable and configure the peripheral to be connected to the DMA Channel
     20                 (except for internal SRAM / FLASH memories: no initialization is 
     21                 necessary) please refer to Reference manual for connection between peripherals
     22                 and DMA requests.
     23          
     24             (#) For a given Channel, program the required configuration through the following parameters:   
     25                 Transfer Direction, Source and Destination data formats, 
     26                 Circular or Normal mode, Channel Priority level, Source and Destination Increment mode, 
     27                 using HAL_DMA_Init() function.
     28          
     29             (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of error 
     30                 detection.
     31                              
     32             (#) Use HAL_DMA_Abort() function to abort the current transfer
     33                             
     34               -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
     35               *** Polling mode IO operation ***
     36               =================================   
     37              [..] 
     38                (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source 
     39                    address and destination address and the Length of data to be transferred
     40                (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this  
     41                    case a fixed Timeout can be configured by User depending from his application.
     42          
     43               *** Interrupt mode IO operation ***    
     44               =================================== 
     45              [..]
     46                (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
     47                (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ() 
     48                (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of  
     49                    Source address and destination address and the Length of data to be transferred. 
     50                    In this case the DMA interrupt is configured 
     51                (+) Use HAL_DMAy_Channelx_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
     52                (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can 
     53                    add his own function by customization of function pointer XferCpltCallback and 
     54                    XferErrorCallback (i.e a member of DMA handle structure). 
     55          
     56               *** DMA HAL driver macros list ***
     57               ============================================= 
     58               [..]
     59                 Below the list of most used macros in DMA HAL driver.
     60          
     61                 (+) __HAL_DMA_ENABLE: Enable the specified DMA Channel.
     62                 (+) __HAL_DMA_DISABLE: Disable the specified DMA Channel.
     63                 (+) __HAL_DMA_GET_FLAG: Get the DMA Channel pending flags.
     64                 (+) __HAL_DMA_CLEAR_FLAG: Clear the DMA Channel pending flags.
     65                 (+) __HAL_DMA_ENABLE_IT: Enable the specified DMA Channel interrupts.
     66                 (+) __HAL_DMA_DISABLE_IT: Disable the specified DMA Channel interrupts.
     67                 (+) __HAL_DMA_GET_IT_SOURCE: Check whether the specified DMA Channel interrupt has occurred or not. 
     68          
     69               [..] 
     70                (@) You can refer to the DMA HAL driver header file for more useful macros  
     71          
     72            @endverbatim
     73            ******************************************************************************
     74            * @attention
     75            *
     76            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     77            *
     78            * Redistribution and use in source and binary forms, with or without modification,
     79            * are permitted provided that the following conditions are met:
     80            *   1. Redistributions of source code must retain the above copyright notice,
     81            *      this list of conditions and the following disclaimer.
     82            *   2. Redistributions in binary form must reproduce the above copyright notice,
     83            *      this list of conditions and the following disclaimer in the documentation
     84            *      and/or other materials provided with the distribution.
     85            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     86            *      may be used to endorse or promote products derived from this software
     87            *      without specific prior written permission.
     88            *
     89            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     90            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     91            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     92            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     93            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     94            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     95            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     96            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     97            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     98            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     99            *
    100            ******************************************************************************
    101            */ 
    102          
    103          /* Includes ------------------------------------------------------------------*/
    104          #include "stm32f1xx_hal.h"
    105          
    106          /** @addtogroup STM32F1xx_HAL_Driver
    107            * @{
    108            */
    109          
    110          /** @defgroup DMA DMA
    111            * @brief DMA HAL module driver
    112            * @{
    113            */
    114          
    115          #ifdef HAL_DMA_MODULE_ENABLED
    116          
    117          /* Private typedef -----------------------------------------------------------*/
    118          /* Private define ------------------------------------------------------------*/
    119          /** @defgroup DMA_Private_Constants DMA Private Constants
    120            * @{
    121            */
    122          #define HAL_TIMEOUT_DMA_ABORT    ((uint32_t)1000)  /* 1s */
    123          /**
    124            * @}
    125            */
    126          
    127          /* Private macro -------------------------------------------------------------*/
    128          /* Private variables ---------------------------------------------------------*/
    129          /* Private function prototypes -----------------------------------------------*/
    130          /** @defgroup DMA_Private_Functions DMA Private Functions
    131            * @{
    132            */
    133          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
    134          /**
    135            * @}
    136            */
    137          
    138          /* Exported functions ---------------------------------------------------------*/
    139          
    140          /** @defgroup DMA_Exported_Functions DMA Exported Functions
    141            * @{
    142            */
    143          
    144          /** @defgroup DMA_Exported_Functions_Group1 Initialization and de-initialization functions
    145           *  @brief   Initialization and de-initialization functions 
    146           *
    147          @verbatim   
    148           ===============================================================================
    149                       ##### Initialization and de-initialization functions  #####
    150           ===============================================================================  
    151              [..]
    152              This section provides functions allowing to initialize the DMA Channel source
    153              and destination addresses, incrementation and data sizes, transfer direction, 
    154              circular/normal mode selection, memory-to-memory mode selection and Channel priority value.
    155              [..]
    156              The HAL_DMA_Init() function follows the DMA configuration procedures as described in
    157              reference manual.  
    158          
    159          @endverbatim
    160            * @{
    161            */
    162            
    163          /**
    164            * @brief  Initializes the DMA according to the specified
    165            *         parameters in the DMA_InitTypeDef and create the associated handle.
    166            * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
    167            *               the configuration information for the specified DMA Channel.  
    168            * @retval HAL status
    169            */

   \                                 In section .text, align 2, keep-with-next
    170          HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
    171          { 
    172            uint32_t tmp = 0;
    173            
    174            /* Check the DMA handle allocation */
    175            if(hdma == NULL)
   \                     HAL_DMA_Init: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD101             BNE.N    ??HAL_DMA_Init_0
    176            {
    177              return HAL_ERROR;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR
    178            }
    179            
    180            /* Check the parameters */
    181            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    182            assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
    183            assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
    184            assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
    185            assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
    186            assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
    187            assert_param(IS_DMA_MODE(hdma->Init.Mode));
    188            assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
    189            
    190            if(hdma->State == HAL_DMA_STATE_RESET)
   \                     ??HAL_DMA_Init_0: (+1)
   \   00000008   0xF990 0x1021      LDRSB    R1,[R0, #+33]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD102             BNE.N    ??HAL_DMA_Init_1
    191            {  
    192              /* Allocate lock resource and initialize it */
    193              hdma->Lock = HAL_UNLOCKED;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xF880 0x1020      STRB     R1,[R0, #+32]
    194            }
    195            
    196            /* Change DMA peripheral state */
    197            hdma->State = HAL_DMA_STATE_BUSY;
   \                     ??HAL_DMA_Init_1: (+1)
   \   00000016   0x2102             MOVS     R1,#+2
   \   00000018   0xF880 0x1021      STRB     R1,[R0, #+33]
    198          
    199            /* Get the CR register value */
    200            tmp = hdma->Instance->CCR;
   \   0000001C   0x6802             LDR      R2,[R0, #+0]
   \   0000001E   0x6813             LDR      R3,[R2, #+0]
    201            
    202            /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
    203            tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
    204                                DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
    205                                DMA_CCR_DIR));
    206            
    207            /* Prepare the DMA Channel configuration */
    208            tmp |=  hdma->Init.Direction        |
    209                    hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    210                    hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    211                    hdma->Init.Mode                | hdma->Init.Priority;
    212          
    213            /* Write to DMA Channel CR register */
    214            hdma->Instance->CCR = tmp;  
   \   00000020   0xF36F 0x130D      BFC      R3,#+4,#+10
   \   00000024   0x6841             LDR      R1,[R0, #+4]
   \   00000026   0x430B             ORRS     R3,R1,R3
   \   00000028   0x6881             LDR      R1,[R0, #+8]
   \   0000002A   0x430B             ORRS     R3,R1,R3
   \   0000002C   0x68C1             LDR      R1,[R0, #+12]
   \   0000002E   0x430B             ORRS     R3,R1,R3
   \   00000030   0x6901             LDR      R1,[R0, #+16]
   \   00000032   0x430B             ORRS     R3,R1,R3
   \   00000034   0x6941             LDR      R1,[R0, #+20]
   \   00000036   0x430B             ORRS     R3,R1,R3
   \   00000038   0x6981             LDR      R1,[R0, #+24]
   \   0000003A   0x430B             ORRS     R3,R1,R3
   \   0000003C   0x69C1             LDR      R1,[R0, #+28]
   \   0000003E   0x430B             ORRS     R3,R1,R3
   \   00000040   0x6013             STR      R3,[R2, #+0]
    215            
    216            /* Initialise the error code */
    217            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x6341             STR      R1,[R0, #+52]
    218          
    219            /* Initialize the DMA state*/
    220            hdma->State = HAL_DMA_STATE_READY;
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0xF880 0x1021      STRB     R1,[R0, #+33]
    221            
    222            return HAL_OK;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x4770             BX       LR               ;; return
    223          }
    224          
    225          /**
    226            * @brief  DeInitializes the DMA peripheral 
    227            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    228            *               the configuration information for the specified DMA Channel.  
    229            * @retval HAL status
    230            */

   \                                 In section .text, align 2, keep-with-next
    231          HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
    232          {
   \                     HAL_DMA_DeInit: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    233            /* Check the DMA handle allocation */
    234            if(hdma == NULL)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD003             BEQ.N    ??HAL_DMA_DeInit_0
    235            {
    236              return HAL_ERROR;
    237            }
    238            
    239            /* Check the parameters */
    240            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    241          
    242            /* Check the DMA peripheral state */
    243            if(hdma->State == HAL_DMA_STATE_BUSY)
   \   00000006   0xF990 0x1021      LDRSB    R1,[R0, #+33]
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD101             BNE.N    ??HAL_DMA_DeInit_1
    244            {
    245               return HAL_ERROR;
   \                     ??HAL_DMA_DeInit_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE113             B.N      ??HAL_DMA_DeInit_2
    246            }
    247          
    248            /* Disable the selected DMA Channelx */
    249            __HAL_DMA_DISABLE(hdma);
   \                     ??HAL_DMA_DeInit_1: (+1)
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0x680A             LDR      R2,[R1, #+0]
   \   00000016   0x0852             LSRS     R2,R2,#+1
   \   00000018   0x0052             LSLS     R2,R2,#+1
   \   0000001A   0x600A             STR      R2,[R1, #+0]
    250            
    251            /* Reset DMA Channel control register */
    252            hdma->Instance->CCR  = 0;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6802             LDR      R2,[R0, #+0]
   \   00000020   0x6011             STR      R1,[R2, #+0]
    253            
    254            /* Reset DMA Channel Number of Data to Transfer register */
    255            hdma->Instance->CNDTR = 0;
   \   00000022   0x6802             LDR      R2,[R0, #+0]
   \   00000024   0x6051             STR      R1,[R2, #+4]
    256            
    257            /* Reset DMA Channel peripheral address register */
    258            hdma->Instance->CPAR  = 0;
   \   00000026   0x6802             LDR      R2,[R0, #+0]
   \   00000028   0x6091             STR      R1,[R2, #+8]
    259            
    260            /* Reset DMA Channel memory address register */
    261            hdma->Instance->CMAR = 0;
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x60D1             STR      R1,[R2, #+12]
    262          
    263            /* Clear all flags */
    264            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \   0000002E   0x6802             LDR      R2,[R0, #+0]
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40020080
   \   00000034   0x428A             CMP      R2,R1
   \   00000036   0xD91F             BLS.N    ??HAL_DMA_DeInit_3
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable2_1  ;; 0x40020408
   \   0000003C   0x429A             CMP      R2,R3
   \   0000003E   0xD101             BNE.N    ??HAL_DMA_DeInit_4
   \   00000040   0x2202             MOVS     R2,#+2
   \   00000042   0xE015             B.N      ??HAL_DMA_DeInit_5
   \                     ??HAL_DMA_DeInit_4: (+1)
   \   00000044   0x.... 0x....      LDR.W    R3,??DataTable2_2  ;; 0x4002041c
   \   00000048   0x429A             CMP      R2,R3
   \   0000004A   0xD101             BNE.N    ??HAL_DMA_DeInit_6
   \   0000004C   0x2220             MOVS     R2,#+32
   \   0000004E   0xE00F             B.N      ??HAL_DMA_DeInit_5
   \                     ??HAL_DMA_DeInit_6: (+1)
   \   00000050   0x.... 0x....      LDR.W    R3,??DataTable2_3  ;; 0x40020430
   \   00000054   0x429A             CMP      R2,R3
   \   00000056   0xD102             BNE.N    ??HAL_DMA_DeInit_7
   \   00000058   0xF44F 0x7200      MOV      R2,#+512
   \   0000005C   0xE008             B.N      ??HAL_DMA_DeInit_5
   \                     ??HAL_DMA_DeInit_7: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R3,??DataTable2_4  ;; 0x40020444
   \   00000062   0x429A             CMP      R2,R3
   \   00000064   0xD102             BNE.N    ??HAL_DMA_DeInit_8
   \   00000066   0xF44F 0x5200      MOV      R2,#+8192
   \   0000006A   0xE001             B.N      ??HAL_DMA_DeInit_5
   \                     ??HAL_DMA_DeInit_8: (+1)
   \   0000006C   0xF44F 0x3200      MOV      R2,#+131072
   \                     ??HAL_DMA_DeInit_5: (+1)
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable2_5  ;; 0x40020404
   \   00000074   0x601A             STR      R2,[R3, #+0]
   \   00000076   0xE031             B.N      ??HAL_DMA_DeInit_9
   \                     ??HAL_DMA_DeInit_3: (+1)
   \   00000078   0x.... 0x....      LDR.W    R3,??DataTable2_6  ;; 0x40020008
   \   0000007C   0x429A             CMP      R2,R3
   \   0000007E   0xD024             BEQ.N    ??HAL_DMA_DeInit_10
   \   00000080   0x.... 0x....      LDR.W    R3,??DataTable2_7  ;; 0x4002001c
   \   00000084   0x429A             CMP      R2,R3
   \   00000086   0xD022             BEQ.N    ??HAL_DMA_DeInit_11
   \   00000088   0x.... 0x....      LDR.W    R3,??DataTable2_8  ;; 0x40020030
   \   0000008C   0x429A             CMP      R2,R3
   \   0000008E   0xD020             BEQ.N    ??HAL_DMA_DeInit_12
   \   00000090   0x.... 0x....      LDR.W    R3,??DataTable2_9  ;; 0x40020044
   \   00000094   0x429A             CMP      R2,R3
   \   00000096   0xD102             BNE.N    ??HAL_DMA_DeInit_13
   \   00000098   0xF44F 0x5200      MOV      R2,#+8192
   \   0000009C   0xE01B             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_13: (+1)
   \   0000009E   0x.... 0x....      LDR.W    R3,??DataTable2_10  ;; 0x40020058
   \   000000A2   0x429A             CMP      R2,R3
   \   000000A4   0xD102             BNE.N    ??HAL_DMA_DeInit_15
   \   000000A6   0xF44F 0x3200      MOV      R2,#+131072
   \   000000AA   0xE014             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_15: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R3,??DataTable2_11  ;; 0x4002006c
   \   000000B0   0x429A             CMP      R2,R3
   \   000000B2   0xD102             BNE.N    ??HAL_DMA_DeInit_16
   \   000000B4   0xF44F 0x1200      MOV      R2,#+2097152
   \   000000B8   0xE00D             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_16: (+1)
   \   000000BA   0x428A             CMP      R2,R1
   \   000000BC   0xD102             BNE.N    ??HAL_DMA_DeInit_17
   \   000000BE   0xF04F 0x7200      MOV      R2,#+33554432
   \   000000C2   0xE008             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_17: (+1)
   \   000000C4   0xF44F 0x3200      MOV      R2,#+131072
   \   000000C8   0xE005             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_10: (+1)
   \   000000CA   0x2202             MOVS     R2,#+2
   \   000000CC   0xE003             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_11: (+1)
   \   000000CE   0x2220             MOVS     R2,#+32
   \   000000D0   0xE001             B.N      ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_12: (+1)
   \   000000D2   0xF44F 0x7200      MOV      R2,#+512
   \                     ??HAL_DMA_DeInit_14: (+1)
   \   000000D6   0x.... 0x....      LDR.W    R3,??DataTable2_12  ;; 0x40020004
   \   000000DA   0x601A             STR      R2,[R3, #+0]
    265            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_9: (+1)
   \   000000DC   0x6802             LDR      R2,[R0, #+0]
   \   000000DE   0x428A             CMP      R2,R1
   \   000000E0   0xD91F             BLS.N    ??HAL_DMA_DeInit_18
   \   000000E2   0x.... 0x....      LDR.W    R3,??DataTable2_1  ;; 0x40020408
   \   000000E6   0x429A             CMP      R2,R3
   \   000000E8   0xD101             BNE.N    ??HAL_DMA_DeInit_19
   \   000000EA   0x2208             MOVS     R2,#+8
   \   000000EC   0xE015             B.N      ??HAL_DMA_DeInit_20
   \                     ??HAL_DMA_DeInit_19: (+1)
   \   000000EE   0x.... 0x....      LDR.W    R3,??DataTable2_2  ;; 0x4002041c
   \   000000F2   0x429A             CMP      R2,R3
   \   000000F4   0xD101             BNE.N    ??HAL_DMA_DeInit_21
   \   000000F6   0x2280             MOVS     R2,#+128
   \   000000F8   0xE00F             B.N      ??HAL_DMA_DeInit_20
   \                     ??HAL_DMA_DeInit_21: (+1)
   \   000000FA   0x.... 0x....      LDR.W    R3,??DataTable2_3  ;; 0x40020430
   \   000000FE   0x429A             CMP      R2,R3
   \   00000100   0xD102             BNE.N    ??HAL_DMA_DeInit_22
   \   00000102   0xF44F 0x6200      MOV      R2,#+2048
   \   00000106   0xE008             B.N      ??HAL_DMA_DeInit_20
   \                     ??HAL_DMA_DeInit_22: (+1)
   \   00000108   0x.... 0x....      LDR.W    R3,??DataTable2_4  ;; 0x40020444
   \   0000010C   0x429A             CMP      R2,R3
   \   0000010E   0xD102             BNE.N    ??HAL_DMA_DeInit_23
   \   00000110   0xF44F 0x4200      MOV      R2,#+32768
   \   00000114   0xE001             B.N      ??HAL_DMA_DeInit_20
   \                     ??HAL_DMA_DeInit_23: (+1)
   \   00000116   0xF44F 0x2200      MOV      R2,#+524288
   \                     ??HAL_DMA_DeInit_20: (+1)
   \   0000011A   0x.... 0x....      LDR.W    R3,??DataTable2_5  ;; 0x40020404
   \   0000011E   0x601A             STR      R2,[R3, #+0]
   \   00000120   0xE031             B.N      ??HAL_DMA_DeInit_24
   \                     ??HAL_DMA_DeInit_18: (+1)
   \   00000122   0x.... 0x....      LDR.W    R3,??DataTable2_6  ;; 0x40020008
   \   00000126   0x429A             CMP      R2,R3
   \   00000128   0xD024             BEQ.N    ??HAL_DMA_DeInit_25
   \   0000012A   0x.... 0x....      LDR.W    R3,??DataTable2_7  ;; 0x4002001c
   \   0000012E   0x429A             CMP      R2,R3
   \   00000130   0xD022             BEQ.N    ??HAL_DMA_DeInit_26
   \   00000132   0x.... 0x....      LDR.W    R3,??DataTable2_8  ;; 0x40020030
   \   00000136   0x429A             CMP      R2,R3
   \   00000138   0xD020             BEQ.N    ??HAL_DMA_DeInit_27
   \   0000013A   0x.... 0x....      LDR.W    R3,??DataTable2_9  ;; 0x40020044
   \   0000013E   0x429A             CMP      R2,R3
   \   00000140   0xD102             BNE.N    ??HAL_DMA_DeInit_28
   \   00000142   0xF44F 0x4200      MOV      R2,#+32768
   \   00000146   0xE01B             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_28: (+1)
   \   00000148   0x.... 0x....      LDR.W    R3,??DataTable2_10  ;; 0x40020058
   \   0000014C   0x429A             CMP      R2,R3
   \   0000014E   0xD102             BNE.N    ??HAL_DMA_DeInit_30
   \   00000150   0xF44F 0x2200      MOV      R2,#+524288
   \   00000154   0xE014             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_30: (+1)
   \   00000156   0x.... 0x....      LDR.W    R3,??DataTable2_11  ;; 0x4002006c
   \   0000015A   0x429A             CMP      R2,R3
   \   0000015C   0xD102             BNE.N    ??HAL_DMA_DeInit_31
   \   0000015E   0xF44F 0x0200      MOV      R2,#+8388608
   \   00000162   0xE00D             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_31: (+1)
   \   00000164   0x428A             CMP      R2,R1
   \   00000166   0xD102             BNE.N    ??HAL_DMA_DeInit_32
   \   00000168   0xF04F 0x6200      MOV      R2,#+134217728
   \   0000016C   0xE008             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_32: (+1)
   \   0000016E   0xF44F 0x2200      MOV      R2,#+524288
   \   00000172   0xE005             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_25: (+1)
   \   00000174   0x2208             MOVS     R2,#+8
   \   00000176   0xE003             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_26: (+1)
   \   00000178   0x2280             MOVS     R2,#+128
   \   0000017A   0xE001             B.N      ??HAL_DMA_DeInit_29
   \                     ??HAL_DMA_DeInit_27: (+1)
   \   0000017C   0xF44F 0x6200      MOV      R2,#+2048
   \                     ??HAL_DMA_DeInit_29: (+1)
   \   00000180   0x.... 0x....      LDR.W    R3,??DataTable2_12  ;; 0x40020004
   \   00000184   0x601A             STR      R2,[R3, #+0]
    266            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_24: (+1)
   \   00000186   0x6802             LDR      R2,[R0, #+0]
   \   00000188   0x428A             CMP      R2,R1
   \   0000018A   0xD91F             BLS.N    ??HAL_DMA_DeInit_33
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x40020408
   \   00000190   0x428A             CMP      R2,R1
   \   00000192   0xD101             BNE.N    ??HAL_DMA_DeInit_34
   \   00000194   0x2104             MOVS     R1,#+4
   \   00000196   0xE015             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_34: (+1)
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x4002041c
   \   0000019C   0x428A             CMP      R2,R1
   \   0000019E   0xD101             BNE.N    ??HAL_DMA_DeInit_36
   \   000001A0   0x2140             MOVS     R1,#+64
   \   000001A2   0xE00F             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_36: (+1)
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable2_3  ;; 0x40020430
   \   000001A8   0x428A             CMP      R2,R1
   \   000001AA   0xD102             BNE.N    ??HAL_DMA_DeInit_37
   \   000001AC   0xF44F 0x6180      MOV      R1,#+1024
   \   000001B0   0xE008             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_37: (+1)
   \   000001B2   0x.... 0x....      LDR.W    R1,??DataTable2_4  ;; 0x40020444
   \   000001B6   0x428A             CMP      R2,R1
   \   000001B8   0xD102             BNE.N    ??HAL_DMA_DeInit_38
   \   000001BA   0xF44F 0x4180      MOV      R1,#+16384
   \   000001BE   0xE001             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_38: (+1)
   \   000001C0   0xF44F 0x2180      MOV      R1,#+262144
   \                     ??HAL_DMA_DeInit_35: (+1)
   \   000001C4   0x.... 0x....      LDR.W    R2,??DataTable2_5  ;; 0x40020404
   \   000001C8   0x6011             STR      R1,[R2, #+0]
   \   000001CA   0xE031             B.N      ??HAL_DMA_DeInit_39
   \                     ??HAL_DMA_DeInit_33: (+1)
   \   000001CC   0x.... 0x....      LDR.W    R3,??DataTable2_6  ;; 0x40020008
   \   000001D0   0x429A             CMP      R2,R3
   \   000001D2   0xD024             BEQ.N    ??HAL_DMA_DeInit_40
   \   000001D4   0x.... 0x....      LDR.W    R3,??DataTable2_7  ;; 0x4002001c
   \   000001D8   0x429A             CMP      R2,R3
   \   000001DA   0xD022             BEQ.N    ??HAL_DMA_DeInit_41
   \   000001DC   0x.... 0x....      LDR.W    R3,??DataTable2_8  ;; 0x40020030
   \   000001E0   0x429A             CMP      R2,R3
   \   000001E2   0xD020             BEQ.N    ??HAL_DMA_DeInit_42
   \   000001E4   0x.... 0x....      LDR.W    R3,??DataTable2_9  ;; 0x40020044
   \   000001E8   0x429A             CMP      R2,R3
   \   000001EA   0xD102             BNE.N    ??HAL_DMA_DeInit_43
   \   000001EC   0xF44F 0x4180      MOV      R1,#+16384
   \   000001F0   0xE01B             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_43: (+1)
   \   000001F2   0x.... 0x....      LDR.W    R3,??DataTable2_10  ;; 0x40020058
   \   000001F6   0x429A             CMP      R2,R3
   \   000001F8   0xD102             BNE.N    ??HAL_DMA_DeInit_45
   \   000001FA   0xF44F 0x2180      MOV      R1,#+262144
   \   000001FE   0xE014             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_45: (+1)
   \   00000200   0x.... 0x....      LDR.W    R3,??DataTable2_11  ;; 0x4002006c
   \   00000204   0x429A             CMP      R2,R3
   \   00000206   0xD102             BNE.N    ??HAL_DMA_DeInit_46
   \   00000208   0xF44F 0x0180      MOV      R1,#+4194304
   \   0000020C   0xE00D             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_46: (+1)
   \   0000020E   0x428A             CMP      R2,R1
   \   00000210   0xD102             BNE.N    ??HAL_DMA_DeInit_47
   \   00000212   0xF04F 0x6180      MOV      R1,#+67108864
   \   00000216   0xE008             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_47: (+1)
   \   00000218   0xF44F 0x2180      MOV      R1,#+262144
   \   0000021C   0xE005             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_40: (+1)
   \   0000021E   0x2104             MOVS     R1,#+4
   \   00000220   0xE003             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_41: (+1)
   \   00000222   0x2140             MOVS     R1,#+64
   \   00000224   0xE001             B.N      ??HAL_DMA_DeInit_44
   \                     ??HAL_DMA_DeInit_42: (+1)
   \   00000226   0xF44F 0x6180      MOV      R1,#+1024
   \                     ??HAL_DMA_DeInit_44: (+1)
   \   0000022A   0x.... 0x....      LDR.W    R2,??DataTable2_12  ;; 0x40020004
   \   0000022E   0x6011             STR      R1,[R2, #+0]
    267            
    268            /* Initialize the error code */
    269            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \                     ??HAL_DMA_DeInit_39: (+1)
   \   00000230   0x2100             MOVS     R1,#+0
   \   00000232   0x6341             STR      R1,[R0, #+52]
    270          
    271            /* Initialize the DMA state */
    272            hdma->State = HAL_DMA_STATE_RESET;
   \   00000234   0xF880 0x1021      STRB     R1,[R0, #+33]
    273          
    274            /* Release Lock */
    275            __HAL_UNLOCK(hdma);
    276          
    277            return HAL_OK;
   \   00000238   0x4608             MOV      R0,R1
   \                     ??HAL_DMA_DeInit_2: (+1)
   \   0000023A   0xB001             ADD      SP,SP,#+4
   \   0000023C   0x4770             BX       LR               ;; return
    278          }
    279          
    280          /**
    281            * @}
    282            */
    283          
    284          /** @defgroup DMA_Exported_Functions_Group2 Input and Output operation functions 
    285           *  @brief   I/O operation functions  
    286           *
    287          @verbatim   
    288           ===============================================================================
    289                                #####  IO operation functions  #####
    290           ===============================================================================  
    291              [..]  This section provides functions allowing to:
    292                (+) Configure the source, destination address and data length and Start DMA transfer
    293                (+) Configure the source, destination address and data length and 
    294                    Start DMA transfer with interrupt
    295                (+) Abort DMA transfer
    296                (+) Poll for transfer complete
    297                (+) Handle DMA interrupt request  
    298          
    299          @endverbatim
    300            * @{
    301            */
    302          
    303          /**
    304            * @brief  Starts the DMA Transfer.
    305            * @param  hdma      : pointer to a DMA_HandleTypeDef structure that contains
    306            *                     the configuration information for the specified DMA Channel.  
    307            * @param  SrcAddress: The source memory Buffer address
    308            * @param  DstAddress: The destination memory Buffer address
    309            * @param  DataLength: The length of data to be transferred from source to destination
    310            * @retval HAL status
    311            */

   \                                 In section .text, align 2, keep-with-next
    312          HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    313          {
   \                     HAL_DMA_Start: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    314            /* Process locked */
    315            __HAL_LOCK(hdma);
    316          
    317            /* Change DMA peripheral state */
    318            hdma->State = HAL_DMA_STATE_BUSY;
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0xF884 0x0021      STRB     R0,[R4, #+33]
    319          
    320             /* Check the parameters */
    321            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    322            
    323            /* Disable the peripheral */
    324            __HAL_DMA_DISABLE(hdma);
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x6805             LDR      R5,[R0, #+0]
   \   0000000E   0x086D             LSRS     R5,R5,#+1
   \   00000010   0x006D             LSLS     R5,R5,#+1
   \   00000012   0x6005             STR      R5,[R0, #+0]
    325            
    326            /* Configure the source, destination address and the data length */
    327            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       DMA_SetConfig
    328          
    329            /* Enable the Peripheral */
    330            __HAL_DMA_ENABLE(hdma);
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000022   0x6001             STR      R1,[R0, #+0]
    331          
    332            return HAL_OK; 
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    333          }
    334          
    335          /**
    336            * @brief  Start the DMA Transfer with interrupt enabled.
    337            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    338            *                     the configuration information for the specified DMA Channel.  
    339            * @param  SrcAddress: The source memory Buffer address
    340            * @param  DstAddress: The destination memory Buffer address
    341            * @param  DataLength: The length of data to be transferred from source to destination
    342            * @retval HAL status
    343            */

   \                                 In section .text, align 2, keep-with-next
    344          HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    345          {
   \                     HAL_DMA_Start_IT: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    346            /* Process locked */
    347            __HAL_LOCK(hdma);
    348          
    349            /* Change DMA peripheral state */
    350            hdma->State = HAL_DMA_STATE_BUSY;
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0xF884 0x0021      STRB     R0,[R4, #+33]
    351          
    352             /* Check the parameters */
    353            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    354            
    355            /* Disable the peripheral */
    356            __HAL_DMA_DISABLE(hdma);
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x6805             LDR      R5,[R0, #+0]
   \   0000000E   0x086D             LSRS     R5,R5,#+1
   \   00000010   0x006D             LSLS     R5,R5,#+1
   \   00000012   0x6005             STR      R5,[R0, #+0]
    357            
    358            /* Configure the source, destination address and the data length */
    359            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       DMA_SetConfig
    360            
    361            /* Enable the transfer complete interrupt */
    362            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000022   0x6001             STR      R1,[R0, #+0]
    363          
    364            /* Enable the Half transfer complete interrupt */
    365            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    366          
    367            /* Enable the transfer Error interrupt */
    368            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000036   0x6001             STR      R1,[R0, #+0]
    369            
    370             /* Enable the Peripheral */
    371            __HAL_DMA_ENABLE(hdma);
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000040   0x6001             STR      R1,[R0, #+0]
    372            
    373            return HAL_OK;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    374          } 
    375          
    376          /**
    377            * @brief  Aborts the DMA Transfer.
    378            * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
    379            *                 the configuration information for the specified DMA Channel.
    380            *                   
    381            * @note  After disabling a DMA Channel, a check for wait until the DMA Channel is 
    382            *        effectively disabled is added. If a Channel is disabled 
    383            *        while a data transfer is ongoing, the current data will be transferred
    384            *        and the Channel will be effectively disabled only after the transfer of
    385            *        this single data is finished.  
    386            * @retval HAL status
    387            */

   \                                 In section .text, align 2, keep-with-next
    388          HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
    389          {
   \                     HAL_DMA_Abort: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    390            uint32_t tickstart = 0x00;
    391            
    392            /* Disable the channel */
    393            __HAL_DMA_DISABLE(hdma);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x0849             LSRS     R1,R1,#+1
   \   0000000A   0x0049             LSLS     R1,R1,#+1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    394          
    395            /* Get tick */
    396            tickstart = HAL_GetTick();
   \   0000000E   0x.... 0x....      BL       HAL_GetTick
   \   00000012   0x4605             MOV      R5,R0
    397            
    398            /* Check if the DMA Channel is effectively disabled */
    399            while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
   \                     ??HAL_DMA_Abort_0: (+1)
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x07C0             LSLS     R0,R0,#+31
   \   0000001A   0xD50E             BPL.N    ??HAL_DMA_Abort_1
    400            {
    401              /* Check for the Timeout */
    402              if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
   \   0000001C   0x.... 0x....      BL       HAL_GetTick
   \   00000020   0x1B40             SUBS     R0,R0,R5
   \   00000022   0xF240 0x31E9      MOVW     R1,#+1001
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD3F4             BCC.N    ??HAL_DMA_Abort_0
    403              {
    404                /* Update error code */
    405                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
   \   0000002A   0x6B60             LDR      R0,[R4, #+52]
   \   0000002C   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000030   0x6360             STR      R0,[R4, #+52]
    406          
    407                /* Change the DMA state */
    408                hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0xF884 0x0021      STRB     R0,[R4, #+33]
    409          
    410                /* Process Unlocked */
    411                __HAL_UNLOCK(hdma);
    412          
    413                return HAL_TIMEOUT;
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}
    414              }
    415            }
    416            /* Change the DMA state */
    417            hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_Abort_1: (+1)
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF884 0x0021      STRB     R0,[R4, #+33]
    418            
    419            /* Process Unlocked */
    420            __HAL_UNLOCK(hdma);
    421            
    422            return HAL_OK;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    423          }
    424          
    425          /**
    426            * @brief  Polling for transfer complete.
    427            * @param  hdma:    pointer to a DMA_HandleTypeDef structure that contains
    428            *                  the configuration information for the specified DMA Channel.
    429            * @param  CompleteLevel: Specifies the DMA level complete.  
    430            * @param  Timeout:       Timeout duration.
    431            * @retval HAL status
    432            */

   \                                 In section .text, align 2, keep-with-next
    433          HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
    434          {
   \                     HAL_DMA_PollForTransfer: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
    435            uint32_t temp;
    436            uint32_t tickstart = 0x00;
    437            
    438            /* Get the level transfer complete flag */
    439            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \   0000000A   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable2  ;; 0x40020080
   \   00000012   0x.... 0x....      LDR.W    R7,??DataTable2_6  ;; 0x40020008
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD142             BNE.N    ??HAL_DMA_PollForTransfer_0
    440            {
    441              /* Transfer Complete flag */
    442              temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
   \   0000001A   0x42B8             CMP      R0,R7
   \   0000001C   0xD025             BEQ.N    ??HAL_DMA_PollForTransfer_1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0x4002001c
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD028             BEQ.N    ??HAL_DMA_PollForTransfer_2
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40020030
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD02B             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable2_9  ;; 0x40020044
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_4
   \   00000036   0xF44F 0x5900      MOV      R9,#+8192
   \   0000003A   0xE073             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_4: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable2_10  ;; 0x40020058
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_6
   \   00000044   0xF44F 0x3900      MOV      R9,#+131072
   \   00000048   0xE06C             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_6: (+1)
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable2_11  ;; 0x4002006c
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_7
   \   00000052   0xF44F 0x1900      MOV      R9,#+2097152
   \   00000056   0xE065             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_7: (+1)
   \   00000058   0x42B0             CMP      R0,R6
   \   0000005A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_8
   \   0000005C   0xF04F 0x7900      MOV      R9,#+33554432
   \   00000060   0xE060             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_8: (+1)
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020408
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_9
   \                     ??HAL_DMA_PollForTransfer_1: (+1)
   \   0000006A   0xF04F 0x0902      MOV      R9,#+2
   \   0000006E   0xE059             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_9: (+1)
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x4002041c
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_10
   \                     ??HAL_DMA_PollForTransfer_2: (+1)
   \   00000078   0xF04F 0x0920      MOV      R9,#+32
   \   0000007C   0xE052             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_10: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable2_3  ;; 0x40020430
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_11
   \                     ??HAL_DMA_PollForTransfer_3: (+1)
   \   00000086   0xF44F 0x7900      MOV      R9,#+512
   \   0000008A   0xE04B             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_11: (+1)
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable2_4  ;; 0x40020444
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_12
   \   00000094   0xF44F 0x5900      MOV      R9,#+8192
   \   00000098   0xE044             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_12: (+1)
   \   0000009A   0xF44F 0x3900      MOV      R9,#+131072
   \   0000009E   0xE041             B.N      ??HAL_DMA_PollForTransfer_5
    443            }
    444            else
    445            {
    446              /* Half Transfer Complete flag */
    447              temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
   \                     ??HAL_DMA_PollForTransfer_0: (+1)
   \   000000A0   0x42B8             CMP      R0,R7
   \   000000A2   0xD025             BEQ.N    ??HAL_DMA_PollForTransfer_13
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0x4002001c
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD028             BEQ.N    ??HAL_DMA_PollForTransfer_14
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40020030
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD02B             BEQ.N    ??HAL_DMA_PollForTransfer_15
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable2_9  ;; 0x40020044
   \   000000B8   0x4288             CMP      R0,R1
   \   000000BA   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_16
   \   000000BC   0xF44F 0x4980      MOV      R9,#+16384
   \   000000C0   0xE030             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_16: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable2_10  ;; 0x40020058
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_17
   \   000000CA   0xF44F 0x2980      MOV      R9,#+262144
   \   000000CE   0xE029             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_17: (+1)
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable2_11  ;; 0x4002006c
   \   000000D4   0x4288             CMP      R0,R1
   \   000000D6   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_18
   \   000000D8   0xF44F 0x0980      MOV      R9,#+4194304
   \   000000DC   0xE022             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_18: (+1)
   \   000000DE   0x42B0             CMP      R0,R6
   \   000000E0   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_19
   \   000000E2   0xF04F 0x6980      MOV      R9,#+67108864
   \   000000E6   0xE01D             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_19: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020408
   \   000000EC   0x4288             CMP      R0,R1
   \   000000EE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_20
   \                     ??HAL_DMA_PollForTransfer_13: (+1)
   \   000000F0   0xF04F 0x0904      MOV      R9,#+4
   \   000000F4   0xE016             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_20: (+1)
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x4002041c
   \   000000FA   0x4288             CMP      R0,R1
   \   000000FC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_21
   \                     ??HAL_DMA_PollForTransfer_14: (+1)
   \   000000FE   0xF04F 0x0940      MOV      R9,#+64
   \   00000102   0xE00F             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_21: (+1)
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable2_3  ;; 0x40020430
   \   00000108   0x4288             CMP      R0,R1
   \   0000010A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_22
   \                     ??HAL_DMA_PollForTransfer_15: (+1)
   \   0000010C   0xF44F 0x6980      MOV      R9,#+1024
   \   00000110   0xE008             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_22: (+1)
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable2_4  ;; 0x40020444
   \   00000116   0x4288             CMP      R0,R1
   \   00000118   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_23
   \   0000011A   0xF44F 0x4980      MOV      R9,#+16384
   \   0000011E   0xE001             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_23: (+1)
   \   00000120   0xF44F 0x2980      MOV      R9,#+262144
    448            }
    449          
    450            /* Get tick */
    451            tickstart = HAL_GetTick();
   \                     ??HAL_DMA_PollForTransfer_5: (+1)
   \   00000124   0x.... 0x....      BL       HAL_GetTick
   \   00000128   0x4682             MOV      R10,R0
    452          
    453            while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
   \                     ??HAL_DMA_PollForTransfer_24: (+1)
   \   0000012A   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \   0000012E   0x42B1             CMP      R1,R6
   \   00000130   0xD905             BLS.N    ??HAL_DMA_PollForTransfer_25
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable3_1  ;; 0x40020400
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0xEA09 0x0000      AND      R0,R9,R0
   \   0000013C   0xE004             B.N      ??HAL_DMA_PollForTransfer_26
   \                     ??HAL_DMA_PollForTransfer_25: (+1)
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x40020000
   \   00000142   0x6800             LDR      R0,[R0, #+0]
   \   00000144   0xEA09 0x0000      AND      R0,R9,R0
   \                     ??HAL_DMA_PollForTransfer_26: (+1)
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xF040 0x8153      BNE.W    ??HAL_DMA_PollForTransfer_27
    454            {
    455              if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
   \   0000014E   0x42B1             CMP      R1,R6
   \   00000150   0xD920             BLS.N    ??HAL_DMA_PollForTransfer_28
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable3_1  ;; 0x40020400
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40020408
   \   0000015C   0x4291             CMP      R1,R2
   \   0000015E   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_29
   \   00000160   0x2208             MOVS     R2,#+8
   \   00000162   0xE015             B.N      ??HAL_DMA_PollForTransfer_30
   \                     ??HAL_DMA_PollForTransfer_29: (+1)
   \   00000164   0x.... 0x....      LDR.W    R2,??DataTable2_2  ;; 0x4002041c
   \   00000168   0x4291             CMP      R1,R2
   \   0000016A   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_31
   \   0000016C   0x2280             MOVS     R2,#+128
   \   0000016E   0xE00F             B.N      ??HAL_DMA_PollForTransfer_30
   \                     ??HAL_DMA_PollForTransfer_31: (+1)
   \   00000170   0x.... 0x....      LDR.W    R2,??DataTable2_3  ;; 0x40020430
   \   00000174   0x4291             CMP      R1,R2
   \   00000176   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_32
   \   00000178   0xF44F 0x6200      MOV      R2,#+2048
   \   0000017C   0xE008             B.N      ??HAL_DMA_PollForTransfer_30
   \                     ??HAL_DMA_PollForTransfer_32: (+1)
   \   0000017E   0x.... 0x....      LDR.W    R2,??DataTable2_4  ;; 0x40020444
   \   00000182   0x4291             CMP      R1,R2
   \   00000184   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_33
   \   00000186   0xF44F 0x4200      MOV      R2,#+32768
   \   0000018A   0xE001             B.N      ??HAL_DMA_PollForTransfer_30
   \                     ??HAL_DMA_PollForTransfer_33: (+1)
   \   0000018C   0xF44F 0x2200      MOV      R2,#+524288
   \                     ??HAL_DMA_PollForTransfer_30: (+1)
   \   00000190   0x4010             ANDS     R0,R2,R0
   \   00000192   0xE02B             B.N      ??HAL_DMA_PollForTransfer_34
   \                     ??HAL_DMA_PollForTransfer_28: (+1)
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x40020000
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0x42B9             CMP      R1,R7
   \   0000019C   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_35
   \   0000019E   0x....             LDR.N    R2,??DataTable2_7  ;; 0x4002001c
   \   000001A0   0x4291             CMP      R1,R2
   \   000001A2   0xD01E             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \   000001A4   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40020030
   \   000001A6   0x4291             CMP      R1,R2
   \   000001A8   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_37
   \   000001AA   0x....             LDR.N    R2,??DataTable2_9  ;; 0x40020044
   \   000001AC   0x4291             CMP      R1,R2
   \   000001AE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_38
   \   000001B0   0xF44F 0x4200      MOV      R2,#+32768
   \   000001B4   0xE019             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_38: (+1)
   \   000001B6   0x....             LDR.N    R2,??DataTable2_10  ;; 0x40020058
   \   000001B8   0x4291             CMP      R1,R2
   \   000001BA   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_40
   \   000001BC   0xF44F 0x2200      MOV      R2,#+524288
   \   000001C0   0xE013             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_40: (+1)
   \   000001C2   0x....             LDR.N    R2,??DataTable2_11  ;; 0x4002006c
   \   000001C4   0x4291             CMP      R1,R2
   \   000001C6   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_41
   \   000001C8   0xF44F 0x0200      MOV      R2,#+8388608
   \   000001CC   0xE00D             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_41: (+1)
   \   000001CE   0x42B1             CMP      R1,R6
   \   000001D0   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_42
   \   000001D2   0xF04F 0x6200      MOV      R2,#+134217728
   \   000001D6   0xE008             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_42: (+1)
   \   000001D8   0xF44F 0x2200      MOV      R2,#+524288
   \   000001DC   0xE005             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_35: (+1)
   \   000001DE   0x2208             MOVS     R2,#+8
   \   000001E0   0xE003             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_36: (+1)
   \   000001E2   0x2280             MOVS     R2,#+128
   \   000001E4   0xE001             B.N      ??HAL_DMA_PollForTransfer_39
   \                     ??HAL_DMA_PollForTransfer_37: (+1)
   \   000001E6   0xF44F 0x6200      MOV      R2,#+2048
   \                     ??HAL_DMA_PollForTransfer_39: (+1)
   \   000001EA   0x4010             ANDS     R0,R2,R0
   \                     ??HAL_DMA_PollForTransfer_34: (+1)
   \   000001EC   0x2800             CMP      R0,#+0
   \   000001EE   0xD054             BEQ.N    ??HAL_DMA_PollForTransfer_43
    456              {      
    457                /* Clear the transfer error flags */
    458                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   000001F0   0x42B1             CMP      R1,R6
   \   000001F2   0xD91C             BLS.N    ??HAL_DMA_PollForTransfer_44
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable3  ;; 0x40020408
   \   000001F8   0x4281             CMP      R1,R0
   \   000001FA   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_45
   \   000001FC   0x2008             MOVS     R0,#+8
   \   000001FE   0xE012             B.N      ??HAL_DMA_PollForTransfer_46
   \                     ??HAL_DMA_PollForTransfer_45: (+1)
   \   00000200   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4002041c
   \   00000202   0x4281             CMP      R1,R0
   \   00000204   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_47
   \   00000206   0x2080             MOVS     R0,#+128
   \   00000208   0xE00D             B.N      ??HAL_DMA_PollForTransfer_46
   \                     ??HAL_DMA_PollForTransfer_47: (+1)
   \   0000020A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40020430
   \   0000020C   0x4281             CMP      R1,R0
   \   0000020E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_48
   \   00000210   0xF44F 0x6000      MOV      R0,#+2048
   \   00000214   0xE007             B.N      ??HAL_DMA_PollForTransfer_46
   \                     ??HAL_DMA_PollForTransfer_48: (+1)
   \   00000216   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40020444
   \   00000218   0x4281             CMP      R1,R0
   \   0000021A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_49
   \   0000021C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000220   0xE001             B.N      ??HAL_DMA_PollForTransfer_46
   \                     ??HAL_DMA_PollForTransfer_49: (+1)
   \   00000222   0xF44F 0x2000      MOV      R0,#+524288
   \                     ??HAL_DMA_PollForTransfer_46: (+1)
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x40020400
   \   0000022A   0x6048             STR      R0,[R1, #+4]
   \   0000022C   0xE02A             B.N      ??HAL_DMA_PollForTransfer_50
   \                     ??HAL_DMA_PollForTransfer_44: (+1)
   \   0000022E   0x42B9             CMP      R1,R7
   \   00000230   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_51
   \   00000232   0x....             LDR.N    R0,??DataTable2_7  ;; 0x4002001c
   \   00000234   0x4281             CMP      R1,R0
   \   00000236   0xD01E             BEQ.N    ??HAL_DMA_PollForTransfer_52
   \   00000238   0x....             LDR.N    R0,??DataTable2_8  ;; 0x40020030
   \   0000023A   0x4281             CMP      R1,R0
   \   0000023C   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_53
   \   0000023E   0x....             LDR.N    R0,??DataTable2_9  ;; 0x40020044
   \   00000240   0x4281             CMP      R1,R0
   \   00000242   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_54
   \   00000244   0xF44F 0x4000      MOV      R0,#+32768
   \   00000248   0xE019             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_54: (+1)
   \   0000024A   0x....             LDR.N    R0,??DataTable2_10  ;; 0x40020058
   \   0000024C   0x4281             CMP      R1,R0
   \   0000024E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_56
   \   00000250   0xF44F 0x2000      MOV      R0,#+524288
   \   00000254   0xE013             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_56: (+1)
   \   00000256   0x....             LDR.N    R0,??DataTable2_11  ;; 0x4002006c
   \   00000258   0x4281             CMP      R1,R0
   \   0000025A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_57
   \   0000025C   0xF44F 0x0000      MOV      R0,#+8388608
   \   00000260   0xE00D             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_57: (+1)
   \   00000262   0x42B1             CMP      R1,R6
   \   00000264   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_58
   \   00000266   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000026A   0xE008             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_58: (+1)
   \   0000026C   0xF44F 0x2000      MOV      R0,#+524288
   \   00000270   0xE005             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_51: (+1)
   \   00000272   0x2008             MOVS     R0,#+8
   \   00000274   0xE003             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_52: (+1)
   \   00000276   0x2080             MOVS     R0,#+128
   \   00000278   0xE001             B.N      ??HAL_DMA_PollForTransfer_55
   \                     ??HAL_DMA_PollForTransfer_53: (+1)
   \   0000027A   0xF44F 0x6000      MOV      R0,#+2048
   \                     ??HAL_DMA_PollForTransfer_55: (+1)
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020000
   \   00000282   0x6048             STR      R0,[R1, #+4]
    459                
    460                /* Update error code */
    461                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
   \                     ??HAL_DMA_PollForTransfer_50: (+1)
   \   00000284   0xF8D8 0x0034      LDR      R0,[R8, #+52]
   \   00000288   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000028C   0xF8C8 0x0034      STR      R0,[R8, #+52]
    462          
    463                /* Change the DMA state */
    464                hdma->State= HAL_DMA_STATE_ERROR;
   \   00000290   0x2004             MOVS     R0,#+4
   \   00000292   0xF888 0x0021      STRB     R0,[R8, #+33]
    465                
    466                /* Process Unlocked */
    467                __HAL_UNLOCK(hdma);
    468                
    469                return HAL_ERROR;
   \   00000296   0x2001             MOVS     R0,#+1
   \   00000298   0xE0AA             B.N      ??HAL_DMA_PollForTransfer_59
    470              }
    471              /* Check for the Timeout */
    472              if(Timeout != HAL_MAX_DELAY)
   \                     ??HAL_DMA_PollForTransfer_43: (+1)
   \   0000029A   0xF115 0x0F01      CMN      R5,#+1
   \   0000029E   0xF43F 0xAF44      BEQ.W    ??HAL_DMA_PollForTransfer_24
    473              {
    474                if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
   \   000002A2   0x2D00             CMP      R5,#+0
   \   000002A4   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_60
   \   000002A6   0x.... 0x....      BL       HAL_GetTick
   \   000002AA   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000002AE   0x4285             CMP      R5,R0
   \   000002B0   0xF4BF 0xAF3B      BCS.W    ??HAL_DMA_PollForTransfer_24
    475                {
    476                  /* Update error code */
    477                  SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
   \                     ??HAL_DMA_PollForTransfer_60: (+1)
   \   000002B4   0xF8D8 0x0034      LDR      R0,[R8, #+52]
   \   000002B8   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002BC   0xF8C8 0x0034      STR      R0,[R8, #+52]
    478                  
    479                  /* Change the DMA state */
    480                  hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   000002C0   0x2003             MOVS     R0,#+3
   \   000002C2   0xF888 0x0021      STRB     R0,[R8, #+33]
    481          
    482                  /* Process Unlocked */
    483                  __HAL_UNLOCK(hdma);
    484                  
    485                  return HAL_TIMEOUT;
   \   000002C6   0xE093             B.N      ??HAL_DMA_PollForTransfer_59
    486                }
    487              }
    488            }
    489          
    490            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
    491            {
    492              /* Clear the transfer complete flag */
    493              __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_61: (+1)
   \   000002C8   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4002041c
   \   000002CA   0x4281             CMP      R1,R0
   \   000002CC   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_62
   \   000002CE   0x2020             MOVS     R0,#+32
   \   000002D0   0xE00D             B.N      ??HAL_DMA_PollForTransfer_63
   \                     ??HAL_DMA_PollForTransfer_62: (+1)
   \   000002D2   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40020430
   \   000002D4   0x4281             CMP      R1,R0
   \   000002D6   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_64
   \   000002D8   0xF44F 0x7000      MOV      R0,#+512
   \   000002DC   0xE007             B.N      ??HAL_DMA_PollForTransfer_63
   \                     ??HAL_DMA_PollForTransfer_64: (+1)
   \   000002DE   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40020444
   \   000002E0   0x4281             CMP      R1,R0
   \   000002E2   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_65
   \   000002E4   0xF44F 0x5000      MOV      R0,#+8192
   \   000002E8   0xE001             B.N      ??HAL_DMA_PollForTransfer_63
   \                     ??HAL_DMA_PollForTransfer_65: (+1)
   \   000002EA   0xF44F 0x3000      MOV      R0,#+131072
   \                     ??HAL_DMA_PollForTransfer_63: (+1)
   \   000002EE   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x40020400
   \   000002F2   0x6048             STR      R0,[R1, #+4]
   \   000002F4   0xE02A             B.N      ??HAL_DMA_PollForTransfer_66
   \                     ??HAL_DMA_PollForTransfer_67: (+1)
   \   000002F6   0x42B9             CMP      R1,R7
   \   000002F8   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_68
   \   000002FA   0x....             LDR.N    R0,??DataTable2_7  ;; 0x4002001c
   \   000002FC   0x4281             CMP      R1,R0
   \   000002FE   0xD01E             BEQ.N    ??HAL_DMA_PollForTransfer_69
   \   00000300   0x....             LDR.N    R0,??DataTable2_8  ;; 0x40020030
   \   00000302   0x4281             CMP      R1,R0
   \   00000304   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_70
   \   00000306   0x....             LDR.N    R0,??DataTable2_9  ;; 0x40020044
   \   00000308   0x4281             CMP      R1,R0
   \   0000030A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_71
   \   0000030C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000310   0xE019             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_71: (+1)
   \   00000312   0x....             LDR.N    R0,??DataTable2_10  ;; 0x40020058
   \   00000314   0x4281             CMP      R1,R0
   \   00000316   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_73
   \   00000318   0xF44F 0x3000      MOV      R0,#+131072
   \   0000031C   0xE013             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_73: (+1)
   \   0000031E   0x....             LDR.N    R0,??DataTable2_11  ;; 0x4002006c
   \   00000320   0x4281             CMP      R1,R0
   \   00000322   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_74
   \   00000324   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000328   0xE00D             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_74: (+1)
   \   0000032A   0x42B1             CMP      R1,R6
   \   0000032C   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_75
   \   0000032E   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000332   0xE008             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_75: (+1)
   \   00000334   0xF44F 0x3000      MOV      R0,#+131072
   \   00000338   0xE005             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_68: (+1)
   \   0000033A   0x2002             MOVS     R0,#+2
   \   0000033C   0xE003             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_69: (+1)
   \   0000033E   0x2020             MOVS     R0,#+32
   \   00000340   0xE001             B.N      ??HAL_DMA_PollForTransfer_72
   \                     ??HAL_DMA_PollForTransfer_70: (+1)
   \   00000342   0xF44F 0x7000      MOV      R0,#+512
   \                     ??HAL_DMA_PollForTransfer_72: (+1)
   \   00000346   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020000
   \   0000034A   0x6048             STR      R0,[R1, #+4]
    494          
    495              /* The selected Channelx EN bit is cleared (DMA is disabled and 
    496              all transfers are complete) */
    497              hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_PollForTransfer_66: (+1)
   \   0000034C   0x2001             MOVS     R0,#+1
   \   0000034E   0xF888 0x0021      STRB     R0,[R8, #+33]
   \   00000352   0xE04C             B.N      ??HAL_DMA_PollForTransfer_76
    498          
    499            }
    500            else
    501            { 
    502              /* Clear the half transfer complete flag */
    503              __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_77: (+1)
   \   00000354   0x42B1             CMP      R1,R6
   \   00000356   0xD91C             BLS.N    ??HAL_DMA_PollForTransfer_78
   \   00000358   0x.... 0x....      LDR.W    R0,??DataTable3  ;; 0x40020408
   \   0000035C   0x4281             CMP      R1,R0
   \   0000035E   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_79
   \   00000360   0x2004             MOVS     R0,#+4
   \   00000362   0xE012             B.N      ??HAL_DMA_PollForTransfer_80
   \                     ??HAL_DMA_PollForTransfer_79: (+1)
   \   00000364   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4002041c
   \   00000366   0x4281             CMP      R1,R0
   \   00000368   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_81
   \   0000036A   0x2040             MOVS     R0,#+64
   \   0000036C   0xE00D             B.N      ??HAL_DMA_PollForTransfer_80
   \                     ??HAL_DMA_PollForTransfer_81: (+1)
   \   0000036E   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40020430
   \   00000370   0x4281             CMP      R1,R0
   \   00000372   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_82
   \   00000374   0xF44F 0x6080      MOV      R0,#+1024
   \   00000378   0xE007             B.N      ??HAL_DMA_PollForTransfer_80
   \                     ??HAL_DMA_PollForTransfer_82: (+1)
   \   0000037A   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40020444
   \   0000037C   0x4281             CMP      R1,R0
   \   0000037E   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_83
   \   00000380   0xF44F 0x4080      MOV      R0,#+16384
   \   00000384   0xE001             B.N      ??HAL_DMA_PollForTransfer_80
   \                     ??HAL_DMA_PollForTransfer_83: (+1)
   \   00000386   0xF44F 0x2080      MOV      R0,#+262144
   \                     ??HAL_DMA_PollForTransfer_80: (+1)
   \   0000038A   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x40020400
   \   0000038E   0x6048             STR      R0,[R1, #+4]
   \   00000390   0xE02A             B.N      ??HAL_DMA_PollForTransfer_84
   \                     ??HAL_DMA_PollForTransfer_78: (+1)
   \   00000392   0x42B9             CMP      R1,R7
   \   00000394   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_85
   \   00000396   0x....             LDR.N    R0,??DataTable2_7  ;; 0x4002001c
   \   00000398   0x4281             CMP      R1,R0
   \   0000039A   0xD01E             BEQ.N    ??HAL_DMA_PollForTransfer_86
   \   0000039C   0x....             LDR.N    R0,??DataTable2_8  ;; 0x40020030
   \   0000039E   0x4281             CMP      R1,R0
   \   000003A0   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_87
   \   000003A2   0x....             LDR.N    R0,??DataTable2_9  ;; 0x40020044
   \   000003A4   0x4281             CMP      R1,R0
   \   000003A6   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_88
   \   000003A8   0xF44F 0x4080      MOV      R0,#+16384
   \   000003AC   0xE019             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_88: (+1)
   \   000003AE   0x....             LDR.N    R0,??DataTable2_10  ;; 0x40020058
   \   000003B0   0x4281             CMP      R1,R0
   \   000003B2   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_90
   \   000003B4   0xF44F 0x2080      MOV      R0,#+262144
   \   000003B8   0xE013             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_90: (+1)
   \   000003BA   0x....             LDR.N    R0,??DataTable2_11  ;; 0x4002006c
   \   000003BC   0x4281             CMP      R1,R0
   \   000003BE   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_91
   \   000003C0   0xF44F 0x0080      MOV      R0,#+4194304
   \   000003C4   0xE00D             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_91: (+1)
   \   000003C6   0x42B1             CMP      R1,R6
   \   000003C8   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_92
   \   000003CA   0xF04F 0x6080      MOV      R0,#+67108864
   \   000003CE   0xE008             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_92: (+1)
   \   000003D0   0xF44F 0x2080      MOV      R0,#+262144
   \   000003D4   0xE005             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_85: (+1)
   \   000003D6   0x2004             MOVS     R0,#+4
   \   000003D8   0xE003             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_86: (+1)
   \   000003DA   0x2040             MOVS     R0,#+64
   \   000003DC   0xE001             B.N      ??HAL_DMA_PollForTransfer_89
   \                     ??HAL_DMA_PollForTransfer_87: (+1)
   \   000003DE   0xF44F 0x6080      MOV      R0,#+1024
   \                     ??HAL_DMA_PollForTransfer_89: (+1)
   \   000003E2   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020000
   \   000003E6   0x6048             STR      R0,[R1, #+4]
    504            
    505              /* The selected Channelx EN bit is cleared (DMA is disabled and 
    506              all transfers of half buffer are complete) */
    507              hdma->State = HAL_DMA_STATE_READY_HALF;
   \                     ??HAL_DMA_PollForTransfer_84: (+1)
   \   000003E8   0x2011             MOVS     R0,#+17
   \   000003EA   0xF888 0x0021      STRB     R0,[R8, #+33]
    508            }
    509            
    510            /* Process unlocked */
    511            __HAL_UNLOCK(hdma);
    512          
    513            return HAL_OK;
   \                     ??HAL_DMA_PollForTransfer_76: (+1)
   \   000003EE   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_59: (+1)
   \   000003F0   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   \                     ??HAL_DMA_PollForTransfer_27: (+1)
   \   000003F4   0x2C00             CMP      R4,#+0
   \   000003F6   0xD1AD             BNE.N    ??HAL_DMA_PollForTransfer_77
   \   000003F8   0x42B1             CMP      R1,R6
   \   000003FA   0xF67F 0xAF7C      BLS.W    ??HAL_DMA_PollForTransfer_67
   \   000003FE   0x.... 0x....      LDR.W    R0,??DataTable3  ;; 0x40020408
   \   00000402   0x4281             CMP      R1,R0
   \   00000404   0xF47F 0xAF60      BNE.W    ??HAL_DMA_PollForTransfer_61
   \   00000408   0x2002             MOVS     R0,#+2
   \   0000040A   0xE770             B.N      ??HAL_DMA_PollForTransfer_63
    514          }
    515          
    516          /**
    517            * @brief  Handles DMA interrupt request.
    518            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    519            *               the configuration information for the specified DMA Channel.  
    520            * @retval None
    521            */

   \                                 In section .text, align 2, keep-with-next
    522          void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
    523          {
   \                     HAL_DMA_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    524            /* Transfer Error Interrupt management ***************************************/
    525            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
   \   00000004   0x6821             LDR      R1,[R4, #+0]
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable3_3  ;; 0x40020080
   \   0000000C   0x42AA             CMP      R2,R5
   \   0000000E   0xD920             BLS.N    ??HAL_DMA_IRQHandler_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable3_1  ;; 0x40020400
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable3  ;; 0x40020408
   \   0000001A   0x429A             CMP      R2,R3
   \   0000001C   0xD101             BNE.N    ??HAL_DMA_IRQHandler_1
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0xE015             B.N      ??HAL_DMA_IRQHandler_2
   \                     ??HAL_DMA_IRQHandler_1: (+1)
   \   00000022   0x.... 0x....      LDR.W    R3,??DataTable3_4  ;; 0x4002041c
   \   00000026   0x429A             CMP      R2,R3
   \   00000028   0xD101             BNE.N    ??HAL_DMA_IRQHandler_3
   \   0000002A   0x2280             MOVS     R2,#+128
   \   0000002C   0xE00F             B.N      ??HAL_DMA_IRQHandler_2
   \                     ??HAL_DMA_IRQHandler_3: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable3_5  ;; 0x40020430
   \   00000032   0x429A             CMP      R2,R3
   \   00000034   0xD102             BNE.N    ??HAL_DMA_IRQHandler_4
   \   00000036   0xF44F 0x6200      MOV      R2,#+2048
   \   0000003A   0xE008             B.N      ??HAL_DMA_IRQHandler_2
   \                     ??HAL_DMA_IRQHandler_4: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable3_6  ;; 0x40020444
   \   00000040   0x429A             CMP      R2,R3
   \   00000042   0xD102             BNE.N    ??HAL_DMA_IRQHandler_5
   \   00000044   0xF44F 0x4200      MOV      R2,#+32768
   \   00000048   0xE001             B.N      ??HAL_DMA_IRQHandler_2
   \                     ??HAL_DMA_IRQHandler_5: (+1)
   \   0000004A   0xF44F 0x2200      MOV      R2,#+524288
   \                     ??HAL_DMA_IRQHandler_2: (+1)
   \   0000004E   0x4010             ANDS     R0,R2,R0
   \   00000050   0xE032             B.N      ??HAL_DMA_IRQHandler_6
   \                     ??HAL_DMA_IRQHandler_0: (+1)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x40020000
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      LDR.W    R3,??DataTable3_7  ;; 0x40020008
   \   0000005C   0x429A             CMP      R2,R3
   \   0000005E   0xD024             BEQ.N    ??HAL_DMA_IRQHandler_7
   \   00000060   0x.... 0x....      LDR.W    R3,??DataTable3_8  ;; 0x4002001c
   \   00000064   0x429A             CMP      R2,R3
   \   00000066   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_8
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable3_9  ;; 0x40020030
   \   0000006C   0x429A             CMP      R2,R3
   \   0000006E   0xD020             BEQ.N    ??HAL_DMA_IRQHandler_9
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable3_10  ;; 0x40020044
   \   00000074   0x429A             CMP      R2,R3
   \   00000076   0xD102             BNE.N    ??HAL_DMA_IRQHandler_10
   \   00000078   0xF44F 0x4200      MOV      R2,#+32768
   \   0000007C   0xE01B             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_10: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R3,??DataTable3_11  ;; 0x40020058
   \   00000082   0x429A             CMP      R2,R3
   \   00000084   0xD102             BNE.N    ??HAL_DMA_IRQHandler_12
   \   00000086   0xF44F 0x2200      MOV      R2,#+524288
   \   0000008A   0xE014             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_12: (+1)
   \   0000008C   0x.... 0x....      LDR.W    R3,??DataTable3_12  ;; 0x4002006c
   \   00000090   0x429A             CMP      R2,R3
   \   00000092   0xD102             BNE.N    ??HAL_DMA_IRQHandler_13
   \   00000094   0xF44F 0x0200      MOV      R2,#+8388608
   \   00000098   0xE00D             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_13: (+1)
   \   0000009A   0x42AA             CMP      R2,R5
   \   0000009C   0xD102             BNE.N    ??HAL_DMA_IRQHandler_14
   \   0000009E   0xF04F 0x6200      MOV      R2,#+134217728
   \   000000A2   0xE008             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_14: (+1)
   \   000000A4   0xF44F 0x2200      MOV      R2,#+524288
   \   000000A8   0xE005             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_7: (+1)
   \   000000AA   0x2208             MOVS     R2,#+8
   \   000000AC   0xE003             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_8: (+1)
   \   000000AE   0x2280             MOVS     R2,#+128
   \   000000B0   0xE001             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_9: (+1)
   \   000000B2   0xF44F 0x6200      MOV      R2,#+2048
   \                     ??HAL_DMA_IRQHandler_11: (+1)
   \   000000B6   0x4010             ANDS     R0,R2,R0
   \                     ??HAL_DMA_IRQHandler_6: (+1)
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD069             BEQ.N    ??HAL_DMA_IRQHandler_15
    526            {
    527              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
   \   000000BC   0x6808             LDR      R0,[R1, #+0]
   \   000000BE   0x0700             LSLS     R0,R0,#+28
   \   000000C0   0xD566             BPL.N    ??HAL_DMA_IRQHandler_15
    528              {
    529                /* Disable the transfer error interrupt */
    530                __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
   \   000000C2   0x6808             LDR      R0,[R1, #+0]
   \   000000C4   0xF020 0x0008      BIC      R0,R0,#0x8
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    531                
    532                /* Clear the transfer error flag */
    533                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   000000CA   0x6820             LDR      R0,[R4, #+0]
   \   000000CC   0x42A8             CMP      R0,R5
   \   000000CE   0xD91F             BLS.N    ??HAL_DMA_IRQHandler_16
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40020408
   \   000000D4   0x4288             CMP      R0,R1
   \   000000D6   0xD101             BNE.N    ??HAL_DMA_IRQHandler_17
   \   000000D8   0x2008             MOVS     R0,#+8
   \   000000DA   0xE015             B.N      ??HAL_DMA_IRQHandler_18
   \                     ??HAL_DMA_IRQHandler_17: (+1)
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x4002041c
   \   000000E0   0x4288             CMP      R0,R1
   \   000000E2   0xD101             BNE.N    ??HAL_DMA_IRQHandler_19
   \   000000E4   0x2080             MOVS     R0,#+128
   \   000000E6   0xE00F             B.N      ??HAL_DMA_IRQHandler_18
   \                     ??HAL_DMA_IRQHandler_19: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x40020430
   \   000000EC   0x4288             CMP      R0,R1
   \   000000EE   0xD102             BNE.N    ??HAL_DMA_IRQHandler_20
   \   000000F0   0xF44F 0x6000      MOV      R0,#+2048
   \   000000F4   0xE008             B.N      ??HAL_DMA_IRQHandler_18
   \                     ??HAL_DMA_IRQHandler_20: (+1)
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable3_6  ;; 0x40020444
   \   000000FA   0x4288             CMP      R0,R1
   \   000000FC   0xD102             BNE.N    ??HAL_DMA_IRQHandler_21
   \   000000FE   0xF44F 0x4000      MOV      R0,#+32768
   \   00000102   0xE001             B.N      ??HAL_DMA_IRQHandler_18
   \                     ??HAL_DMA_IRQHandler_21: (+1)
   \   00000104   0xF44F 0x2000      MOV      R0,#+524288
   \                     ??HAL_DMA_IRQHandler_18: (+1)
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x40020400
   \   0000010C   0x6048             STR      R0,[R1, #+4]
   \   0000010E   0xE031             B.N      ??HAL_DMA_IRQHandler_22
   \                     ??HAL_DMA_IRQHandler_16: (+1)
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable3_7  ;; 0x40020008
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD024             BEQ.N    ??HAL_DMA_IRQHandler_23
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable3_8  ;; 0x4002001c
   \   0000011C   0x4288             CMP      R0,R1
   \   0000011E   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_24
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable3_9  ;; 0x40020030
   \   00000124   0x4288             CMP      R0,R1
   \   00000126   0xD020             BEQ.N    ??HAL_DMA_IRQHandler_25
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x40020044
   \   0000012C   0x4288             CMP      R0,R1
   \   0000012E   0xD102             BNE.N    ??HAL_DMA_IRQHandler_26
   \   00000130   0xF44F 0x4000      MOV      R0,#+32768
   \   00000134   0xE01B             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_26: (+1)
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable3_11  ;; 0x40020058
   \   0000013A   0x4288             CMP      R0,R1
   \   0000013C   0xD102             BNE.N    ??HAL_DMA_IRQHandler_28
   \   0000013E   0xF44F 0x2000      MOV      R0,#+524288
   \   00000142   0xE014             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_28: (+1)
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable3_12  ;; 0x4002006c
   \   00000148   0x4288             CMP      R0,R1
   \   0000014A   0xD102             BNE.N    ??HAL_DMA_IRQHandler_29
   \   0000014C   0xF44F 0x0000      MOV      R0,#+8388608
   \   00000150   0xE00D             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_29: (+1)
   \   00000152   0x42A8             CMP      R0,R5
   \   00000154   0xD102             BNE.N    ??HAL_DMA_IRQHandler_30
   \   00000156   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000015A   0xE008             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_30: (+1)
   \   0000015C   0xF44F 0x2000      MOV      R0,#+524288
   \   00000160   0xE005             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_23: (+1)
   \   00000162   0x2008             MOVS     R0,#+8
   \   00000164   0xE003             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_24: (+1)
   \   00000166   0x2080             MOVS     R0,#+128
   \   00000168   0xE001             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_25: (+1)
   \   0000016A   0xF44F 0x6000      MOV      R0,#+2048
   \                     ??HAL_DMA_IRQHandler_27: (+1)
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x40020000
   \   00000172   0x6048             STR      R0,[R1, #+4]
    534                
    535                /* Update error code */
    536                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
   \                     ??HAL_DMA_IRQHandler_22: (+1)
   \   00000174   0xF104 0x0028      ADD      R0,R4,#+40
   \   00000178   0x68C1             LDR      R1,[R0, #+12]
   \   0000017A   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000017E   0x60C1             STR      R1,[R0, #+12]
    537                
    538                /* Change the DMA state */
    539                hdma->State = HAL_DMA_STATE_ERROR;
   \   00000180   0x2104             MOVS     R1,#+4
   \   00000182   0xF884 0x1021      STRB     R1,[R4, #+33]
    540                
    541                /* Process Unlocked */
    542                __HAL_UNLOCK(hdma); 
    543                
    544                if (hdma->XferErrorCallback != NULL)
   \   00000186   0x6881             LDR      R1,[R0, #+8]
   \   00000188   0x2900             CMP      R1,#+0
   \   0000018A   0xD001             BEQ.N    ??HAL_DMA_IRQHandler_15
    545                {
    546                  /* Transfer error callback */
    547                  hdma->XferErrorCallback(hdma);
   \   0000018C   0x4620             MOV      R0,R4
   \   0000018E   0x4788             BLX      R1
    548                }
    549              }
    550            }
    551          
    552            /* Half Transfer Complete Interrupt management ******************************/
    553            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_15: (+1)
   \   00000190   0x6821             LDR      R1,[R4, #+0]
   \   00000192   0x460A             MOV      R2,R1
   \   00000194   0x42AA             CMP      R2,R5
   \   00000196   0xD920             BLS.N    ??HAL_DMA_IRQHandler_31
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable3_1  ;; 0x40020400
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R3,??DataTable3  ;; 0x40020408
   \   000001A2   0x429A             CMP      R2,R3
   \   000001A4   0xD101             BNE.N    ??HAL_DMA_IRQHandler_32
   \   000001A6   0x2204             MOVS     R2,#+4
   \   000001A8   0xE015             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_32: (+1)
   \   000001AA   0x.... 0x....      LDR.W    R3,??DataTable3_4  ;; 0x4002041c
   \   000001AE   0x429A             CMP      R2,R3
   \   000001B0   0xD101             BNE.N    ??HAL_DMA_IRQHandler_34
   \   000001B2   0x2240             MOVS     R2,#+64
   \   000001B4   0xE00F             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_34: (+1)
   \   000001B6   0x.... 0x....      LDR.W    R3,??DataTable3_5  ;; 0x40020430
   \   000001BA   0x429A             CMP      R2,R3
   \   000001BC   0xD102             BNE.N    ??HAL_DMA_IRQHandler_35
   \   000001BE   0xF44F 0x6280      MOV      R2,#+1024
   \   000001C2   0xE008             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_35: (+1)
   \   000001C4   0x.... 0x....      LDR.W    R3,??DataTable3_6  ;; 0x40020444
   \   000001C8   0x429A             CMP      R2,R3
   \   000001CA   0xD102             BNE.N    ??HAL_DMA_IRQHandler_36
   \   000001CC   0xF44F 0x4280      MOV      R2,#+16384
   \   000001D0   0xE001             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_36: (+1)
   \   000001D2   0xF44F 0x2280      MOV      R2,#+262144
   \                     ??HAL_DMA_IRQHandler_33: (+1)
   \   000001D6   0x4010             ANDS     R0,R2,R0
   \   000001D8   0xE030             B.N      ??HAL_DMA_IRQHandler_37
   \                     ??HAL_DMA_IRQHandler_31: (+1)
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x40020000
   \   000001DE   0x6800             LDR      R0,[R0, #+0]
   \   000001E0   0x.... 0x....      LDR.W    R3,??DataTable3_7  ;; 0x40020008
   \   000001E4   0x429A             CMP      R2,R3
   \   000001E6   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_38
   \   000001E8   0x.... 0x....      LDR.W    R3,??DataTable3_8  ;; 0x4002001c
   \   000001EC   0x429A             CMP      R2,R3
   \   000001EE   0xD020             BEQ.N    ??HAL_DMA_IRQHandler_39
   \   000001F0   0x.... 0x....      LDR.W    R3,??DataTable3_9  ;; 0x40020030
   \   000001F4   0x429A             CMP      R2,R3
   \   000001F6   0xD01E             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   000001F8   0x.... 0x....      LDR.W    R3,??DataTable3_10  ;; 0x40020044
   \   000001FC   0x429A             CMP      R2,R3
   \   000001FE   0xD102             BNE.N    ??HAL_DMA_IRQHandler_41
   \   00000200   0xF44F 0x4280      MOV      R2,#+16384
   \   00000204   0xE019             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_41: (+1)
   \   00000206   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40020058
   \   00000208   0x429A             CMP      R2,R3
   \   0000020A   0xD102             BNE.N    ??HAL_DMA_IRQHandler_43
   \   0000020C   0xF44F 0x2280      MOV      R2,#+262144
   \   00000210   0xE013             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_43: (+1)
   \   00000212   0x....             LDR.N    R3,??DataTable3_12  ;; 0x4002006c
   \   00000214   0x429A             CMP      R2,R3
   \   00000216   0xD102             BNE.N    ??HAL_DMA_IRQHandler_44
   \   00000218   0xF44F 0x0280      MOV      R2,#+4194304
   \   0000021C   0xE00D             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_44: (+1)
   \   0000021E   0x42AA             CMP      R2,R5
   \   00000220   0xD102             BNE.N    ??HAL_DMA_IRQHandler_45
   \   00000222   0xF04F 0x6280      MOV      R2,#+67108864
   \   00000226   0xE008             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_45: (+1)
   \   00000228   0xF44F 0x2280      MOV      R2,#+262144
   \   0000022C   0xE005             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_38: (+1)
   \   0000022E   0x2204             MOVS     R2,#+4
   \   00000230   0xE003             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_39: (+1)
   \   00000232   0x2240             MOVS     R2,#+64
   \   00000234   0xE001             B.N      ??HAL_DMA_IRQHandler_42
   \                     ??HAL_DMA_IRQHandler_40: (+1)
   \   00000236   0xF44F 0x6280      MOV      R2,#+1024
   \                     ??HAL_DMA_IRQHandler_42: (+1)
   \   0000023A   0x4010             ANDS     R0,R2,R0
   \                     ??HAL_DMA_IRQHandler_37: (+1)
   \   0000023C   0x2800             CMP      R0,#+0
   \   0000023E   0xD05C             BEQ.N    ??HAL_DMA_IRQHandler_46
    554            {
    555              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
   \   00000240   0x6808             LDR      R0,[R1, #+0]
   \   00000242   0x0740             LSLS     R0,R0,#+29
   \   00000244   0xD559             BPL.N    ??HAL_DMA_IRQHandler_46
    556              { 
    557                /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    558                if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
   \   00000246   0x6808             LDR      R0,[R1, #+0]
   \   00000248   0x0680             LSLS     R0,R0,#+26
   \   0000024A   0xD403             BMI.N    ??HAL_DMA_IRQHandler_47
    559                {
    560                  /* Disable the half transfer interrupt */
    561                  __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
   \   0000024C   0x6808             LDR      R0,[R1, #+0]
   \   0000024E   0xF020 0x0004      BIC      R0,R0,#0x4
   \   00000252   0x6008             STR      R0,[R1, #+0]
    562                }
    563                /* Clear the half transfer complete flag */
    564                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_47: (+1)
   \   00000254   0x6820             LDR      R0,[R4, #+0]
   \   00000256   0x42A8             CMP      R0,R5
   \   00000258   0xD91A             BLS.N    ??HAL_DMA_IRQHandler_48
   \   0000025A   0x....             LDR.N    R1,??DataTable3  ;; 0x40020408
   \   0000025C   0x4288             CMP      R0,R1
   \   0000025E   0xD101             BNE.N    ??HAL_DMA_IRQHandler_49
   \   00000260   0x2004             MOVS     R0,#+4
   \   00000262   0xE012             B.N      ??HAL_DMA_IRQHandler_50
   \                     ??HAL_DMA_IRQHandler_49: (+1)
   \   00000264   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4002041c
   \   00000266   0x4288             CMP      R0,R1
   \   00000268   0xD101             BNE.N    ??HAL_DMA_IRQHandler_51
   \   0000026A   0x2040             MOVS     R0,#+64
   \   0000026C   0xE00D             B.N      ??HAL_DMA_IRQHandler_50
   \                     ??HAL_DMA_IRQHandler_51: (+1)
   \   0000026E   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40020430
   \   00000270   0x4288             CMP      R0,R1
   \   00000272   0xD102             BNE.N    ??HAL_DMA_IRQHandler_52
   \   00000274   0xF44F 0x6080      MOV      R0,#+1024
   \   00000278   0xE007             B.N      ??HAL_DMA_IRQHandler_50
   \                     ??HAL_DMA_IRQHandler_52: (+1)
   \   0000027A   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40020444
   \   0000027C   0x4288             CMP      R0,R1
   \   0000027E   0xD102             BNE.N    ??HAL_DMA_IRQHandler_53
   \   00000280   0xF44F 0x4080      MOV      R0,#+16384
   \   00000284   0xE001             B.N      ??HAL_DMA_IRQHandler_50
   \                     ??HAL_DMA_IRQHandler_53: (+1)
   \   00000286   0xF44F 0x2080      MOV      R0,#+262144
   \                     ??HAL_DMA_IRQHandler_50: (+1)
   \   0000028A   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40020400
   \   0000028C   0x6048             STR      R0,[R1, #+4]
   \   0000028E   0xE02A             B.N      ??HAL_DMA_IRQHandler_54
   \                     ??HAL_DMA_IRQHandler_48: (+1)
   \   00000290   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40020008
   \   00000292   0x4288             CMP      R0,R1
   \   00000294   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_55
   \   00000296   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4002001c
   \   00000298   0x4288             CMP      R0,R1
   \   0000029A   0xD01E             BEQ.N    ??HAL_DMA_IRQHandler_56
   \   0000029C   0x....             LDR.N    R1,??DataTable3_9  ;; 0x40020030
   \   0000029E   0x4288             CMP      R0,R1
   \   000002A0   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_57
   \   000002A2   0x....             LDR.N    R1,??DataTable3_10  ;; 0x40020044
   \   000002A4   0x4288             CMP      R0,R1
   \   000002A6   0xD102             BNE.N    ??HAL_DMA_IRQHandler_58
   \   000002A8   0xF44F 0x4080      MOV      R0,#+16384
   \   000002AC   0xE019             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_58: (+1)
   \   000002AE   0x....             LDR.N    R1,??DataTable3_11  ;; 0x40020058
   \   000002B0   0x4288             CMP      R0,R1
   \   000002B2   0xD102             BNE.N    ??HAL_DMA_IRQHandler_60
   \   000002B4   0xF44F 0x2080      MOV      R0,#+262144
   \   000002B8   0xE013             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_60: (+1)
   \   000002BA   0x....             LDR.N    R1,??DataTable3_12  ;; 0x4002006c
   \   000002BC   0x4288             CMP      R0,R1
   \   000002BE   0xD102             BNE.N    ??HAL_DMA_IRQHandler_61
   \   000002C0   0xF44F 0x0080      MOV      R0,#+4194304
   \   000002C4   0xE00D             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_61: (+1)
   \   000002C6   0x42A8             CMP      R0,R5
   \   000002C8   0xD102             BNE.N    ??HAL_DMA_IRQHandler_62
   \   000002CA   0xF04F 0x6080      MOV      R0,#+67108864
   \   000002CE   0xE008             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_62: (+1)
   \   000002D0   0xF44F 0x2080      MOV      R0,#+262144
   \   000002D4   0xE005             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_55: (+1)
   \   000002D6   0x2004             MOVS     R0,#+4
   \   000002D8   0xE003             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_56: (+1)
   \   000002DA   0x2040             MOVS     R0,#+64
   \   000002DC   0xE001             B.N      ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_57: (+1)
   \   000002DE   0xF44F 0x6080      MOV      R0,#+1024
   \                     ??HAL_DMA_IRQHandler_59: (+1)
   \   000002E2   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40020000
   \   000002E4   0x6048             STR      R0,[R1, #+4]
    565          
    566                /* Change DMA peripheral state */
    567                hdma->State = HAL_DMA_STATE_READY_HALF;
   \                     ??HAL_DMA_IRQHandler_54: (+1)
   \   000002E6   0x2011             MOVS     R0,#+17
   \   000002E8   0xF884 0x0021      STRB     R0,[R4, #+33]
    568          
    569                if(hdma->XferHalfCpltCallback != NULL)
   \   000002EC   0xF104 0x0028      ADD      R0,R4,#+40
   \   000002F0   0x6841             LDR      R1,[R0, #+4]
   \   000002F2   0x2900             CMP      R1,#+0
   \   000002F4   0xD001             BEQ.N    ??HAL_DMA_IRQHandler_46
    570                {
    571                  /* Half transfer callback */
    572                  hdma->XferHalfCpltCallback(hdma);
   \   000002F6   0x4620             MOV      R0,R4
   \   000002F8   0x4788             BLX      R1
    573                }
    574              }
    575            }
    576            
    577            /* Transfer Complete Interrupt management ***********************************/
    578            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_46: (+1)
   \   000002FA   0x6821             LDR      R1,[R4, #+0]
   \   000002FC   0x460A             MOV      R2,R1
   \   000002FE   0x42AA             CMP      R2,R5
   \   00000300   0xD91B             BLS.N    ??HAL_DMA_IRQHandler_63
   \   00000302   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40020400
   \   00000304   0x6800             LDR      R0,[R0, #+0]
   \   00000306   0x....             LDR.N    R3,??DataTable3  ;; 0x40020408
   \   00000308   0x429A             CMP      R2,R3
   \   0000030A   0xD101             BNE.N    ??HAL_DMA_IRQHandler_64
   \   0000030C   0x2202             MOVS     R2,#+2
   \   0000030E   0xE012             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_64: (+1)
   \   00000310   0x....             LDR.N    R3,??DataTable3_4  ;; 0x4002041c
   \   00000312   0x429A             CMP      R2,R3
   \   00000314   0xD101             BNE.N    ??HAL_DMA_IRQHandler_66
   \   00000316   0x2220             MOVS     R2,#+32
   \   00000318   0xE00D             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_66: (+1)
   \   0000031A   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40020430
   \   0000031C   0x429A             CMP      R2,R3
   \   0000031E   0xD102             BNE.N    ??HAL_DMA_IRQHandler_67
   \   00000320   0xF44F 0x7200      MOV      R2,#+512
   \   00000324   0xE007             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_67: (+1)
   \   00000326   0x....             LDR.N    R3,??DataTable3_6  ;; 0x40020444
   \   00000328   0x429A             CMP      R2,R3
   \   0000032A   0xD102             BNE.N    ??HAL_DMA_IRQHandler_68
   \   0000032C   0xF44F 0x5200      MOV      R2,#+8192
   \   00000330   0xE001             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_68: (+1)
   \   00000332   0xF44F 0x3200      MOV      R2,#+131072
   \                     ??HAL_DMA_IRQHandler_65: (+1)
   \   00000336   0x4010             ANDS     R0,R2,R0
   \   00000338   0xE02B             B.N      ??HAL_DMA_IRQHandler_69
   \                     ??HAL_DMA_IRQHandler_63: (+1)
   \   0000033A   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40020000
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0x....             LDR.N    R3,??DataTable3_7  ;; 0x40020008
   \   00000340   0x429A             CMP      R2,R3
   \   00000342   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_70
   \   00000344   0x....             LDR.N    R3,??DataTable3_8  ;; 0x4002001c
   \   00000346   0x429A             CMP      R2,R3
   \   00000348   0xD01E             BEQ.N    ??HAL_DMA_IRQHandler_71
   \   0000034A   0x....             LDR.N    R3,??DataTable3_9  ;; 0x40020030
   \   0000034C   0x429A             CMP      R2,R3
   \   0000034E   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_72
   \   00000350   0x....             LDR.N    R3,??DataTable3_10  ;; 0x40020044
   \   00000352   0x429A             CMP      R2,R3
   \   00000354   0xD102             BNE.N    ??HAL_DMA_IRQHandler_73
   \   00000356   0xF44F 0x5200      MOV      R2,#+8192
   \   0000035A   0xE019             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_73: (+1)
   \   0000035C   0x....             LDR.N    R3,??DataTable3_11  ;; 0x40020058
   \   0000035E   0x429A             CMP      R2,R3
   \   00000360   0xD102             BNE.N    ??HAL_DMA_IRQHandler_75
   \   00000362   0xF44F 0x3200      MOV      R2,#+131072
   \   00000366   0xE013             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_75: (+1)
   \   00000368   0x....             LDR.N    R3,??DataTable3_12  ;; 0x4002006c
   \   0000036A   0x429A             CMP      R2,R3
   \   0000036C   0xD102             BNE.N    ??HAL_DMA_IRQHandler_76
   \   0000036E   0xF44F 0x1200      MOV      R2,#+2097152
   \   00000372   0xE00D             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_76: (+1)
   \   00000374   0x42AA             CMP      R2,R5
   \   00000376   0xD102             BNE.N    ??HAL_DMA_IRQHandler_77
   \   00000378   0xF04F 0x7200      MOV      R2,#+33554432
   \   0000037C   0xE008             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_77: (+1)
   \   0000037E   0xF44F 0x3200      MOV      R2,#+131072
   \   00000382   0xE005             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_70: (+1)
   \   00000384   0x2202             MOVS     R2,#+2
   \   00000386   0xE003             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_71: (+1)
   \   00000388   0x2220             MOVS     R2,#+32
   \   0000038A   0xE001             B.N      ??HAL_DMA_IRQHandler_74
   \                     ??HAL_DMA_IRQHandler_72: (+1)
   \   0000038C   0xF44F 0x7200      MOV      R2,#+512
   \                     ??HAL_DMA_IRQHandler_74: (+1)
   \   00000390   0x4010             ANDS     R0,R2,R0
   \                     ??HAL_DMA_IRQHandler_69: (+1)
   \   00000392   0x2800             CMP      R0,#+0
   \   00000394   0xD060             BEQ.N    ??HAL_DMA_IRQHandler_78
    579            {
    580              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
   \   00000396   0x6808             LDR      R0,[R1, #+0]
   \   00000398   0x0780             LSLS     R0,R0,#+30
   \   0000039A   0xD55D             BPL.N    ??HAL_DMA_IRQHandler_78
    581              {
    582                if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
   \   0000039C   0x6808             LDR      R0,[R1, #+0]
   \   0000039E   0x0680             LSLS     R0,R0,#+26
   \   000003A0   0xD403             BMI.N    ??HAL_DMA_IRQHandler_79
    583                {
    584                  /* Disable the transfer complete interrupt */
    585                  __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
   \   000003A2   0x6808             LDR      R0,[R1, #+0]
   \   000003A4   0xF020 0x0002      BIC      R0,R0,#0x2
   \   000003A8   0x6008             STR      R0,[R1, #+0]
    586                }
    587                /* Clear the transfer complete flag */
    588                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_79: (+1)
   \   000003AA   0x6820             LDR      R0,[R4, #+0]
   \   000003AC   0x42A8             CMP      R0,R5
   \   000003AE   0xD91A             BLS.N    ??HAL_DMA_IRQHandler_80
   \   000003B0   0x....             LDR.N    R1,??DataTable3  ;; 0x40020408
   \   000003B2   0x4288             CMP      R0,R1
   \   000003B4   0xD101             BNE.N    ??HAL_DMA_IRQHandler_81
   \   000003B6   0x2002             MOVS     R0,#+2
   \   000003B8   0xE012             B.N      ??HAL_DMA_IRQHandler_82
   \                     ??HAL_DMA_IRQHandler_81: (+1)
   \   000003BA   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4002041c
   \   000003BC   0x4288             CMP      R0,R1
   \   000003BE   0xD101             BNE.N    ??HAL_DMA_IRQHandler_83
   \   000003C0   0x2020             MOVS     R0,#+32
   \   000003C2   0xE00D             B.N      ??HAL_DMA_IRQHandler_82
   \                     ??HAL_DMA_IRQHandler_83: (+1)
   \   000003C4   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40020430
   \   000003C6   0x4288             CMP      R0,R1
   \   000003C8   0xD102             BNE.N    ??HAL_DMA_IRQHandler_84
   \   000003CA   0xF44F 0x7000      MOV      R0,#+512
   \   000003CE   0xE007             B.N      ??HAL_DMA_IRQHandler_82
   \                     ??HAL_DMA_IRQHandler_84: (+1)
   \   000003D0   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40020444
   \   000003D2   0x4288             CMP      R0,R1
   \   000003D4   0xD102             BNE.N    ??HAL_DMA_IRQHandler_85
   \   000003D6   0xF44F 0x5000      MOV      R0,#+8192
   \   000003DA   0xE001             B.N      ??HAL_DMA_IRQHandler_82
   \                     ??HAL_DMA_IRQHandler_85: (+1)
   \   000003DC   0xF44F 0x3000      MOV      R0,#+131072
   \                     ??HAL_DMA_IRQHandler_82: (+1)
   \   000003E0   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40020400
   \   000003E2   0x6048             STR      R0,[R1, #+4]
   \   000003E4   0xE02A             B.N      ??HAL_DMA_IRQHandler_86
   \                     ??HAL_DMA_IRQHandler_80: (+1)
   \   000003E6   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40020008
   \   000003E8   0x4288             CMP      R0,R1
   \   000003EA   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_87
   \   000003EC   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4002001c
   \   000003EE   0x4288             CMP      R0,R1
   \   000003F0   0xD01E             BEQ.N    ??HAL_DMA_IRQHandler_88
   \   000003F2   0x....             LDR.N    R1,??DataTable3_9  ;; 0x40020030
   \   000003F4   0x4288             CMP      R0,R1
   \   000003F6   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_89
   \   000003F8   0x....             LDR.N    R1,??DataTable3_10  ;; 0x40020044
   \   000003FA   0x4288             CMP      R0,R1
   \   000003FC   0xD102             BNE.N    ??HAL_DMA_IRQHandler_90
   \   000003FE   0xF44F 0x5000      MOV      R0,#+8192
   \   00000402   0xE019             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_90: (+1)
   \   00000404   0x....             LDR.N    R1,??DataTable3_11  ;; 0x40020058
   \   00000406   0x4288             CMP      R0,R1
   \   00000408   0xD102             BNE.N    ??HAL_DMA_IRQHandler_92
   \   0000040A   0xF44F 0x3000      MOV      R0,#+131072
   \   0000040E   0xE013             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_92: (+1)
   \   00000410   0x....             LDR.N    R1,??DataTable3_12  ;; 0x4002006c
   \   00000412   0x4288             CMP      R0,R1
   \   00000414   0xD102             BNE.N    ??HAL_DMA_IRQHandler_93
   \   00000416   0xF44F 0x1000      MOV      R0,#+2097152
   \   0000041A   0xE00D             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_93: (+1)
   \   0000041C   0x42A8             CMP      R0,R5
   \   0000041E   0xD102             BNE.N    ??HAL_DMA_IRQHandler_94
   \   00000420   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000424   0xE008             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_94: (+1)
   \   00000426   0xF44F 0x3000      MOV      R0,#+131072
   \   0000042A   0xE005             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_87: (+1)
   \   0000042C   0x2002             MOVS     R0,#+2
   \   0000042E   0xE003             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_88: (+1)
   \   00000430   0x2020             MOVS     R0,#+32
   \   00000432   0xE001             B.N      ??HAL_DMA_IRQHandler_91
   \                     ??HAL_DMA_IRQHandler_89: (+1)
   \   00000434   0xF44F 0x7000      MOV      R0,#+512
   \                     ??HAL_DMA_IRQHandler_91: (+1)
   \   00000438   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40020000
   \   0000043A   0x6048             STR      R0,[R1, #+4]
    589              
    590                /* Update error code */
    591                SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
   \                     ??HAL_DMA_IRQHandler_86: (+1)
   \   0000043C   0xF104 0x0028      ADD      R0,R4,#+40
   \   00000440   0x68C1             LDR      R1,[R0, #+12]
   \   00000442   0x60C1             STR      R1,[R0, #+12]
    592          
    593                /* Change the DMA state */
    594                hdma->State = HAL_DMA_STATE_READY;
   \   00000444   0x2101             MOVS     R1,#+1
   \   00000446   0xF884 0x1021      STRB     R1,[R4, #+33]
    595              
    596                /* Process Unlocked */
    597                __HAL_UNLOCK(hdma);
    598              
    599                if(hdma->XferCpltCallback != NULL)
   \   0000044A   0x6801             LDR      R1,[R0, #+0]
   \   0000044C   0x2900             CMP      R1,#+0
   \   0000044E   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_78
    600                {       
    601                  /* Transfer complete callback */
    602                  hdma->XferCpltCallback(hdma);
   \   00000450   0x4620             MOV      R0,R4
   \   00000452   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000456   0x4708             BX       R1
    603                }
    604              }
    605            }
    606          }
   \                     ??HAL_DMA_IRQHandler_78: (+1)
   \   00000458   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    607          
    608          /**
    609            * @}
    610            */
    611          
    612          /** @defgroup DMA_Exported_Functions_Group3 Peripheral State functions
    613           *  @brief    Peripheral State functions 
    614           *
    615          @verbatim   
    616           ===============================================================================
    617                              ##### State and Errors functions #####
    618           ===============================================================================
    619              [..]
    620              This subsection provides functions allowing to
    621                (+) Check the DMA state
    622                (+) Get error code
    623          
    624          @endverbatim
    625            * @{
    626            */
    627          
    628          /**
    629            * @brief  Returns the DMA state.
    630            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    631            *               the configuration information for the specified DMA Channel.  
    632            * @retval HAL state
    633            */

   \                                 In section .text, align 2, keep-with-next
    634          HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
    635          {
    636            return hdma->State;
   \                     HAL_DMA_GetState: (+1)
   \   00000000   0xF990 0x0021      LDRSB    R0,[R0, #+33]
   \   00000004   0x4770             BX       LR               ;; return
    637          }
    638          
    639          /**
    640            * @brief  Return the DMA error code
    641            * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
    642            *              the configuration information for the specified DMA Channel.
    643            * @retval DMA Error Code
    644            */

   \                                 In section .text, align 2, keep-with-next
    645          uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
    646          {
    647            return hdma->ErrorCode;
   \                     HAL_DMA_GetError: (+1)
   \   00000000   0x6B40             LDR      R0,[R0, #+52]
   \   00000002   0x4770             BX       LR               ;; return
    648          }
    649          
    650          /**
    651            * @}
    652            */
    653          
    654          /**
    655            * @}
    656            */
    657          
    658          /** @addtogroup DMA_Private_Functions DMA Private Functions
    659            * @{
    660            */
    661          
    662          /**
    663            * @brief  Sets the DMA Transfer parameter.
    664            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    665            *                     the configuration information for the specified DMA Channel.  
    666            * @param  SrcAddress: The source memory Buffer address
    667            * @param  DstAddress: The destination memory Buffer address
    668            * @param  DataLength: The length of data to be transferred from source to destination
    669            * @retval HAL status
    670            */

   \                                 In section .text, align 2, keep-with-next
    671          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    672          {
   \                     DMA_SetConfig: (+1)
   \   00000000   0xB410             PUSH     {R4}
    673            /* Configure DMA Channel data length */
    674            hdma->Instance->CNDTR = DataLength;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x6063             STR      R3,[R4, #+4]
    675            
    676            /* Peripheral to Memory */
    677            if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x6844             LDR      R4,[R0, #+4]
   \   0000000A   0x2C10             CMP      R4,#+16
   \   0000000C   0xD103             BNE.N    ??DMA_SetConfig_0
    678            {
    679              /* Configure DMA Channel destination address */
    680              hdma->Instance->CPAR = DstAddress;
   \   0000000E   0x609A             STR      R2,[R3, #+8]
    681              
    682              /* Configure DMA Channel source address */
    683              hdma->Instance->CMAR = SrcAddress;
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x60C1             STR      R1,[R0, #+12]
   \   00000014   0xE002             B.N      ??DMA_SetConfig_1
    684            }
    685            /* Memory to Peripheral */
    686            else
    687            {
    688              /* Configure DMA Channel source address */
    689              hdma->Instance->CPAR = SrcAddress;
   \                     ??DMA_SetConfig_0: (+1)
   \   00000016   0x6099             STR      R1,[R3, #+8]
    690              
    691              /* Configure DMA Channel destination address */
    692              hdma->Instance->CMAR = DstAddress;
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x60C2             STR      R2,[R0, #+12]
    693            }
    694          }
   \                     ??DMA_SetConfig_1: (+1)
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020080         DC32     0x40020080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40020408         DC32     0x40020408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4002041C         DC32     0x4002041c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40020430         DC32     0x40020430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40020444         DC32     0x40020444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40020404         DC32     0x40020404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40020030         DC32     0x40020030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40020044         DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x4002006C         DC32     0x4002006c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020408         DC32     0x40020408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40020080         DC32     0x40020080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4002041C         DC32     0x4002041c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40020430         DC32     0x40020430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40020444         DC32     0x40020444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40020030         DC32     0x40020030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40020044         DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x4002006C         DC32     0x4002006c
    695          
    696          /**
    697            * @}
    698            */
    699          
    700          #endif /* HAL_DMA_MODULE_ENABLED */
    701          /**
    702            * @}
    703            */
    704          
    705          /**
    706            * @}
    707            */
    708          
    709          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   DMA_SetConfig
      16   HAL_DMA_Abort
        16   -> HAL_GetTick
       4   HAL_DMA_DeInit
       0   HAL_DMA_GetError
       0   HAL_DMA_GetState
      16   HAL_DMA_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   HAL_DMA_Init
      40   HAL_DMA_PollForTransfer
        40   -> HAL_GetTick
      16   HAL_DMA_Start
        16   -> DMA_SetConfig
      16   HAL_DMA_Start_IT
        16   -> DMA_SetConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      32  DMA_SetConfig
      68  HAL_DMA_Abort
     574  HAL_DMA_DeInit
       4  HAL_DMA_GetError
       6  HAL_DMA_GetState
    1114  HAL_DMA_IRQHandler
      80  HAL_DMA_Init
    1036  HAL_DMA_PollForTransfer
      40  HAL_DMA_Start
      70  HAL_DMA_Start_IT

 
 3 128 bytes in section .text
 
 3 128 bytes of CODE memory

Errors: none
Warnings: none
