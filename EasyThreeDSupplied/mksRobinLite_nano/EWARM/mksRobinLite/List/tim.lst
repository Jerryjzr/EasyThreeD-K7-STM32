###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  22:45:22
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\nano\Src\tim.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWC6A2.tmp (F:\nano\Src\tim.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\tim.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\tim.o
#
###############################################################################

F:\nano\Src\tim.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : TIM.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the TIM instances.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2017 STMicroelectronics
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "tim.h"
     37          
     38          /* USER CODE BEGIN 0 */
     39          #include "stm32f1xx_3dprinter_misc.h"
     40          /* USER CODE END 0 */
     41          

   \                                 In section .bss, align 4
     42          TIM_HandleTypeDef htim1;
   \                     htim1:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     43          TIM_HandleTypeDef htim2;
   \                     htim2:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     44          TIM_HandleTypeDef htim3;
   \                     htim3:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     45          TIM_HandleTypeDef htim4;
   \                     htim4:
   \   00000000                      DS8 60
     46          
     47          /* TIM1 init function */

   \                                 In section .text, align 2, keep-with-next
     48          void MX_TIM1_Init(void)
     49          {
   \                     MX_TIM1_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
     50            TIM_ClockConfigTypeDef sClockSourceConfig;
     51            TIM_MasterConfigTypeDef sMasterConfig;
     52            TIM_OC_InitTypeDef sConfigOC;
     53            TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
     54          
     55            htim1.Instance = TIM1;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable6
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40012c00
   \   0000000C   0x6020             STR      R0,[R4, #+0]
     56            htim1.Init.Prescaler = 12;
   \   0000000E   0x200C             MOVS     R0,#+12
   \   00000010   0x6060             STR      R0,[R4, #+4]
     57            htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x60A0             STR      R0,[R4, #+8]
     58            htim1.Init.Period = 9999;
   \   00000016   0xF242 0x700F      MOVW     R0,#+9999
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
     59            htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x6120             STR      R0,[R4, #+16]
     60            htim1.Init.RepetitionCounter = 0;
   \   00000020   0x6160             STR      R0,[R4, #+20]
     61            if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD001             BEQ.N    ??MX_TIM1_Init_0
     62            {
     63              Error_Handler();
   \   0000002C   0x.... 0x....      BL       Error_Handler
     64            }
     65          
     66            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM1_Init_0: (+1)
   \   00000030   0xF44F 0x5080      MOV      R0,#+4096
   \   00000034   0x9010             STR      R0,[SP, #+64]
     67            if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
   \   00000036   0xA910             ADD      R1,SP,#+64
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD001             BEQ.N    ??MX_TIM1_Init_1
     68            {
     69              Error_Handler();
   \   00000042   0x.... 0x....      BL       Error_Handler
     70            }
     71          
     72            if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
   \                     ??MX_TIM1_Init_1: (+1)
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       HAL_TIM_PWM_Init
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD001             BEQ.N    ??MX_TIM1_Init_2
     73            {
     74              Error_Handler();
   \   00000050   0x.... 0x....      BL       Error_Handler
     75            }
     76          
     77            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM1_Init_2: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9000             STR      R0,[SP, #+0]
     78            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000058   0x9001             STR      R0,[SP, #+4]
     79            if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
   \   0000005A   0x4669             MOV      R1,SP
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD001             BEQ.N    ??MX_TIM1_Init_3
     80            {
     81              Error_Handler();
   \   00000066   0x.... 0x....      BL       Error_Handler
     82            }
     83          
     84            sConfigOC.OCMode = TIM_OCMODE_PWM1;
   \                     ??MX_TIM1_Init_3: (+1)
   \   0000006A   0x2060             MOVS     R0,#+96
   \   0000006C   0x9009             STR      R0,[SP, #+36]
     85            sConfigOC.Pulse = 0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x900A             STR      R0,[SP, #+40]
     86            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
   \   00000072   0x900B             STR      R0,[SP, #+44]
     87            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
   \   00000074   0x900C             STR      R0,[SP, #+48]
     88            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
   \   00000076   0x900D             STR      R0,[SP, #+52]
     89            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
   \   00000078   0x900E             STR      R0,[SP, #+56]
     90            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
   \   0000007A   0x900F             STR      R0,[SP, #+60]
     91            if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
   \   0000007C   0x4602             MOV      R2,R0
   \   0000007E   0xA909             ADD      R1,SP,#+36
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       HAL_TIM_PWM_ConfigChannel
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD001             BEQ.N    ??MX_TIM1_Init_4
     92            {
     93              Error_Handler();
   \   0000008A   0x.... 0x....      BL       Error_Handler
     94            }
     95          
     96            //PA11 for narno print_pin
     97            //if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
     98            //{
     99            //  Error_Handler();
    100            //}
    101          
    102            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
   \                     ??MX_TIM1_Init_4: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9002             STR      R0,[SP, #+8]
    103            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
   \   00000092   0x9003             STR      R0,[SP, #+12]
    104            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
   \   00000094   0x9004             STR      R0,[SP, #+16]
    105            sBreakDeadTimeConfig.DeadTime = 0;
   \   00000096   0x9005             STR      R0,[SP, #+20]
    106            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
   \   00000098   0x9006             STR      R0,[SP, #+24]
    107            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
   \   0000009A   0xF44F 0x5000      MOV      R0,#+8192
   \   0000009E   0x9007             STR      R0,[SP, #+28]
    108            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x9008             STR      R0,[SP, #+32]
    109            if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
   \   000000A4   0xA902             ADD      R1,SP,#+8
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       HAL_TIMEx_ConfigBreakDeadTime
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD001             BEQ.N    ??MX_TIM1_Init_5
    110            {
    111              Error_Handler();
   \   000000B0   0x.... 0x....      BL       Error_Handler
    112            }
    113          
    114            HAL_TIM_MspPostInit(&htim1);
   \                     ??MX_TIM1_Init_5: (+1)
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       HAL_TIM_MspPostInit
    115          
    116          }
   \   000000BA   0xB014             ADD      SP,SP,#+80
   \   000000BC   0xBD10             POP      {R4,PC}          ;; return
    117          
    118          /* TIM2 init function */

   \                                 In section .text, align 2, keep-with-next
    119          void MX_TIM2_Init(void)
    120          {
   \                     MX_TIM2_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    121            TIM_ClockConfigTypeDef sClockSourceConfig;
    122            TIM_MasterConfigTypeDef sMasterConfig;
    123          
    124            htim2.Instance = TIM2;
   \   00000004   0x....             LDR.N    R4,??DataTable6_2
   \   00000006   0xF04F 0x4080      MOV      R0,#+1073741824
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    125            //htim2.Init.Prescaler = 72;
    126            htim2.Init.Prescaler = TICK_TIMER_PRESCALER-1;
   \   0000000C   0x2023             MOVS     R0,#+35
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    127            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60A0             STR      R0,[R4, #+8]
    128            htim2.Init.Period = 1000;
   \   00000014   0xF44F 0x707A      MOV      R0,#+1000
   \   00000018   0x60E0             STR      R0,[R4, #+12]
    129            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6120             STR      R0,[R4, #+16]
    130            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ.N    ??MX_TIM2_Init_0
    131            {
    132              Error_Handler();
   \   00000028   0x.... 0x....      BL       Error_Handler
    133            }
    134          
    135            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM2_Init_0: (+1)
   \   0000002C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000030   0x9002             STR      R0,[SP, #+8]
    136            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
   \   00000032   0xA902             ADD      R1,SP,#+8
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD001             BEQ.N    ??MX_TIM2_Init_1
    137            {
    138              Error_Handler();
   \   0000003E   0x.... 0x....      BL       Error_Handler
    139            }
    140          
    141            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM2_Init_1: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
    142            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000046   0x9001             STR      R0,[SP, #+4]
    143            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD001             BEQ.N    ??MX_TIM2_Init_2
    144            {
    145              Error_Handler();
   \   00000054   0x.... 0x....      BL       Error_Handler
    146            }
    147          
    148          }
   \                     ??MX_TIM2_Init_2: (+1)
   \   00000058   0xB006             ADD      SP,SP,#+24
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    149          /* TIM3 init function */

   \                                 In section .text, align 2, keep-with-next
    150          void MX_TIM3_Init(void)
    151          {
   \                     MX_TIM3_Init: (+1)
   \   00000000   0xB518             PUSH     {R3,R4,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    152            TIM_ClockConfigTypeDef sClockSourceConfig;
    153            TIM_MasterConfigTypeDef sMasterConfig;
    154            TIM_OC_InitTypeDef sConfigOC;
    155          
    156            htim3.Instance = TIM3;
   \   00000004   0x....             LDR.N    R4,??DataTable6_3
   \   00000006   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40000400
   \   00000008   0x6020             STR      R0,[R4, #+0]
    157            htim3.Init.Prescaler = 2;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    158            htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    159            htim3.Init.Period = 749;
   \   00000012   0xF240 0x20ED      MOVW     R0,#+749
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    160            htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    161            if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??MX_TIM3_Init_0
    162            {
    163              Error_Handler();
   \   00000026   0x.... 0x....      BL       Error_Handler
    164            }
    165          
    166            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM3_Init_0: (+1)
   \   0000002A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000002E   0x9009             STR      R0,[SP, #+36]
    167            if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
   \   00000030   0xA909             ADD      R1,SP,#+36
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ.N    ??MX_TIM3_Init_1
    168            {
    169              Error_Handler();
   \   0000003C   0x.... 0x....      BL       Error_Handler
    170            }
    171          
    172            if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
   \                     ??MX_TIM3_Init_1: (+1)
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       HAL_TIM_PWM_Init
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD001             BEQ.N    ??MX_TIM3_Init_2
    173            {
    174              Error_Handler();
   \   0000004A   0x.... 0x....      BL       Error_Handler
    175            }
    176          
    177            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM3_Init_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9000             STR      R0,[SP, #+0]
    178            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000052   0x9001             STR      R0,[SP, #+4]
    179            if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
   \   00000054   0x4669             MOV      R1,SP
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD001             BEQ.N    ??MX_TIM3_Init_3
    180            {
    181              Error_Handler();
   \   00000060   0x.... 0x....      BL       Error_Handler
    182            }
    183          
    184            sConfigOC.OCMode = TIM_OCMODE_PWM1;
   \                     ??MX_TIM3_Init_3: (+1)
   \   00000064   0x2060             MOVS     R0,#+96
   \   00000066   0x9002             STR      R0,[SP, #+8]
    185            sConfigOC.Pulse = 0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9003             STR      R0,[SP, #+12]
    186            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
   \   0000006C   0x9004             STR      R0,[SP, #+16]
    187            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
   \   0000006E   0x9006             STR      R0,[SP, #+24]
    188            if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
   \   00000070   0x4602             MOV      R2,R0
   \   00000072   0xA902             ADD      R1,SP,#+8
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       HAL_TIM_PWM_ConfigChannel
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD001             BEQ.N    ??MX_TIM3_Init_4
    189            {
    190              Error_Handler();
   \   0000007E   0x.... 0x....      BL       Error_Handler
    191            }
    192          
    193            if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
   \                     ??MX_TIM3_Init_4: (+1)
   \   00000082   0x2204             MOVS     R2,#+4
   \   00000084   0xA902             ADD      R1,SP,#+8
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       HAL_TIM_PWM_ConfigChannel
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD001             BEQ.N    ??MX_TIM3_Init_5
    194            {
    195              Error_Handler();
   \   00000090   0x.... 0x....      BL       Error_Handler
    196            }
    197          
    198            if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
   \                     ??MX_TIM3_Init_5: (+1)
   \   00000094   0x2208             MOVS     R2,#+8
   \   00000096   0xA902             ADD      R1,SP,#+8
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       HAL_TIM_PWM_ConfigChannel
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD001             BEQ.N    ??MX_TIM3_Init_6
    199            {
    200              Error_Handler();
   \   000000A2   0x.... 0x....      BL       Error_Handler
    201            }
    202          
    203            HAL_TIM_MspPostInit(&htim3);
   \                     ??MX_TIM3_Init_6: (+1)
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       HAL_TIM_MspPostInit
    204          
    205          }
   \   000000AC   0xB00E             ADD      SP,SP,#+56
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    206          /* TIM4 init function */

   \                                 In section .text, align 2, keep-with-next
    207          void MX_TIM4_Init(void)
    208          {
   \                     MX_TIM4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    209            TIM_ClockConfigTypeDef sClockSourceConfig;
    210            TIM_MasterConfigTypeDef sMasterConfig;
    211          
    212            htim4.Instance = TIM4;
   \   00000004   0x....             LDR.N    R4,??DataTable6_5
   \   00000006   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40000800
   \   00000008   0x6020             STR      R0,[R4, #+0]
    213            htim4.Init.Prescaler = 72;
   \   0000000A   0x2048             MOVS     R0,#+72
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    214            htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    215            htim4.Init.Period = 1000;
   \   00000012   0xF44F 0x707A      MOV      R0,#+1000
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    216            htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    217            if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??MX_TIM4_Init_0
    218            {
    219              Error_Handler();
   \   00000026   0x.... 0x....      BL       Error_Handler
    220            }
    221          
    222            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM4_Init_0: (+1)
   \   0000002A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    223            if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
   \   00000030   0xA902             ADD      R1,SP,#+8
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ.N    ??MX_TIM4_Init_1
    224            {
    225              Error_Handler();
   \   0000003C   0x.... 0x....      BL       Error_Handler
    226            }
    227          
    228            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM4_Init_1: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
    229            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000044   0x9001             STR      R0,[SP, #+4]
    230            if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD001             BEQ.N    ??MX_TIM4_Init_2
    231            {
    232              Error_Handler();
   \   00000052   0x.... 0x....      BL       Error_Handler
    233            }
    234          
    235          }
   \                     ??MX_TIM4_Init_2: (+1)
   \   00000056   0xB006             ADD      SP,SP,#+24
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
    236          

   \                                 In section .text, align 2, keep-with-next
    237          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
    238          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    239          
    240            if(tim_baseHandle->Instance==TIM1)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40012c00
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD113             BNE.N    ??HAL_TIM_Base_MspInit_0
    241            {
    242            /* USER CODE BEGIN TIM1_MspInit 0 */
    243          
    244            /* USER CODE END TIM1_MspInit 0 */
    245              /* Peripheral clock enable */
    246              __HAL_RCC_TIM1_CLK_ENABLE();
   \   0000000A   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF441 0x6100      ORR      R1,R1,#0x800
   \   00000012   0x6001             STR      R1,[R0, #+0]
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF400 0x6000      AND      R0,R0,#0x800
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    247          
    248              /* Peripheral interrupt init */
    249              HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 2, 0);
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0x2018             MOVS     R0,#+24
   \   00000024   0x.... 0x....      BL       HAL_NVIC_SetPriority
    250              HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
   \   00000028   0x2018             MOVS     R0,#+24
   \   0000002A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000002E   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
    251            /* USER CODE BEGIN TIM1_MspInit 1 */
    252          
    253            /* USER CODE END TIM1_MspInit 1 */
    254            }
    255            else if(tim_baseHandle->Instance==TIM2)
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \   00000032   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   00000036   0xD113             BNE.N    ??HAL_TIM_Base_MspInit_1
    256            {
    257            /* USER CODE BEGIN TIM2_MspInit 0 */
    258          
    259            /* USER CODE END TIM2_MspInit 0 */
    260              /* Peripheral clock enable */
    261              __HAL_RCC_TIM2_CLK_ENABLE();
   \   00000038   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   0000003A   0x6841             LDR      R1,[R0, #+4]
   \   0000003C   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000040   0x6041             STR      R1,[R0, #+4]
   \   00000042   0x6840             LDR      R0,[R0, #+4]
   \   00000044   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
    262          
    263              /* Peripheral interrupt init */
    264              HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2102             MOVS     R1,#+2
   \   00000050   0x201C             MOVS     R0,#+28
   \   00000052   0x.... 0x....      BL       HAL_NVIC_SetPriority
    265              HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \   00000056   0x201C             MOVS     R0,#+28
   \   00000058   0xE8BD 0x4002      POP      {R1,LR}
   \   0000005C   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
    266            /* USER CODE BEGIN TIM2_MspInit 1 */
    267          
    268            /* USER CODE END TIM2_MspInit 1 */
    269            }
    270            else if(tim_baseHandle->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspInit_1: (+1)
   \   00000060   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40000400
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD113             BNE.N    ??HAL_TIM_Base_MspInit_2
    271            {
    272            /* USER CODE BEGIN TIM3_MspInit 0 */
    273          
    274            /* USER CODE END TIM3_MspInit 0 */
    275              /* Peripheral clock enable */
    276              __HAL_RCC_TIM3_CLK_ENABLE();
   \   00000066   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   00000068   0x6841             LDR      R1,[R0, #+4]
   \   0000006A   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000006E   0x6041             STR      R1,[R0, #+4]
   \   00000070   0x6840             LDR      R0,[R0, #+4]
   \   00000072   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x9800             LDR      R0,[SP, #+0]
    277          
    278              /* Peripheral interrupt init */
    279              HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0x2102             MOVS     R1,#+2
   \   0000007E   0x201D             MOVS     R0,#+29
   \   00000080   0x.... 0x....      BL       HAL_NVIC_SetPriority
    280              HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \   00000084   0x201D             MOVS     R0,#+29
   \   00000086   0xE8BD 0x4002      POP      {R1,LR}
   \   0000008A   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
    281            /* USER CODE BEGIN TIM3_MspInit 1 */
    282          
    283            /* USER CODE END TIM3_MspInit 1 */
    284            }
    285            else if(tim_baseHandle->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspInit_2: (+1)
   \   0000008E   0x....             LDR.N    R1,??DataTable6_6  ;; 0x40000800
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xD113             BNE.N    ??HAL_TIM_Base_MspInit_3
    286            {
    287            /* USER CODE BEGIN TIM4_MspInit 0 */
    288          
    289            /* USER CODE END TIM4_MspInit 0 */
    290              /* Peripheral clock enable */
    291              __HAL_RCC_TIM4_CLK_ENABLE();
   \   00000094   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   00000096   0x6841             LDR      R1,[R0, #+4]
   \   00000098   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000009C   0x6041             STR      R1,[R0, #+4]
   \   0000009E   0x6840             LDR      R0,[R0, #+4]
   \   000000A0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
    292          
    293              /* Peripheral interrupt init */
    294              HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
   \   000000A8   0x2200             MOVS     R2,#+0
   \   000000AA   0x2102             MOVS     R1,#+2
   \   000000AC   0x201E             MOVS     R0,#+30
   \   000000AE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    295              HAL_NVIC_EnableIRQ(TIM4_IRQn);
   \   000000B2   0x201E             MOVS     R0,#+30
   \   000000B4   0xE8BD 0x4002      POP      {R1,LR}
   \   000000B8   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
    296            /* USER CODE BEGIN TIM4_MspInit 1 */
    297          
    298            /* USER CODE END TIM4_MspInit 1 */
    299            }
    300          }
   \                     ??HAL_TIM_Base_MspInit_3: (+1)
   \   000000BC   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    301          void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
    302          {
   \                     HAL_TIM_MspPostInit: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    303          
    304            GPIO_InitTypeDef GPIO_InitStruct;
    305            if(timHandle->Instance==TIM1)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40012c00
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD10A             BNE.N    ??HAL_TIM_MspPostInit_0
    306            {
    307            /* USER CODE BEGIN TIM1_MspPostInit 0 */
    308          
    309            /* USER CODE END TIM1_MspPostInit 0 */
    310              /**TIM1 GPIO Configuration    
    311              PA8     ------> TIM1_CH1
    312              PA11     ------> TIM1_CH4 
    313              */
    314              //PA11 FOR NANO PRINT_KEY
    315              GPIO_InitStruct.Pin = FAN_Pin;//|REV_PWM_Pin;
   \   0000000A   0xF44F 0x7080      MOV      R0,#+256
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    316              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x9001             STR      R0,[SP, #+4]
    317              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \   00000014   0x9003             STR      R0,[SP, #+12]
    318              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_Init
   \   0000001E   0xE014             B.N      ??HAL_TIM_MspPostInit_1
    319          
    320            /* USER CODE BEGIN TIM1_MspPostInit 1 */
    321          
    322            /* USER CODE END TIM1_MspPostInit 1 */
    323            }
    324            else if(timHandle->Instance==TIM3)
   \                     ??HAL_TIM_MspPostInit_0: (+1)
   \   00000020   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40000400
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD111             BNE.N    ??HAL_TIM_MspPostInit_1
    325            {
    326            /* USER CODE BEGIN TIM3_MspPostInit 0 */
    327          
    328            /* USER CODE END TIM3_MspPostInit 0 */
    329            
    330              /**TIM3 GPIO Configuration    
    331              PA6     ------> TIM3_CH1
    332              PA7     ------> TIM3_CH2
    333              PB0     ------> TIM3_CH3 
    334              */
    335              GPIO_InitStruct.Pin = VREF_E_Pin|VREF_Z_Pin;
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9000             STR      R0,[SP, #+0]
    336              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9001             STR      R0,[SP, #+4]
    337              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \   0000002E   0x9003             STR      R0,[SP, #+12]
    338              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40010800
   \   00000034   0x.... 0x....      BL       HAL_GPIO_Init
    339          
    340              GPIO_InitStruct.Pin = VREF_XY_Pin;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9000             STR      R0,[SP, #+0]
    341              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9001             STR      R0,[SP, #+4]
    342              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \   00000040   0x9003             STR      R0,[SP, #+12]
    343              HAL_GPIO_Init(VREF_XY_GPIO_Port, &GPIO_InitStruct);
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40010c00
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    344          
    345            /* USER CODE BEGIN TIM3_MspPostInit 1 */
    346          
    347            /* USER CODE END TIM3_MspPostInit 1 */
    348            }
    349          
    350          }
   \                     ??HAL_TIM_MspPostInit_1: (+1)
   \   0000004A   0xB005             ADD      SP,SP,#+20
   \   0000004C   0xBD00             POP      {PC}             ;; return
    351          

   \                                 In section .text, align 2, keep-with-next
    352          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
    353          {
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
    354          
    355            if(tim_baseHandle->Instance==TIM1)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40012c00
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    356            {
    357            /* USER CODE BEGIN TIM1_MspDeInit 0 */
    358          
    359            /* USER CODE END TIM1_MspDeInit 0 */
    360              /* Peripheral clock disable */
    361              __HAL_RCC_TIM1_CLK_DISABLE();
   \   0000000A   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF421 0x6100      BIC      R1,R1,#0x800
   \   00000012   0x6001             STR      R1,[R0, #+0]
    362          
    363              /* Peripheral interrupt Deinit*/
    364              HAL_NVIC_DisableIRQ(TIM1_BRK_IRQn);
   \   00000014   0x2018             MOVS     R0,#+24
   \   00000016   0xB002             ADD      SP,SP,#+8
   \   00000018   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    365          
    366            /* USER CODE BEGIN TIM1_MspDeInit 1 */
    367          
    368            /* USER CODE END TIM1_MspDeInit 1 */
    369            }
    370            else if(tim_baseHandle->Instance==TIM2)
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \   0000001C   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   00000020   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_1
    371            {
    372            /* USER CODE BEGIN TIM2_MspDeInit 0 */
    373          
    374            /* USER CODE END TIM2_MspDeInit 0 */
    375              /* Peripheral clock disable */
    376              __HAL_RCC_TIM2_CLK_DISABLE();
   \   00000022   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   00000024   0x6841             LDR      R1,[R0, #+4]
   \   00000026   0x0849             LSRS     R1,R1,#+1
   \   00000028   0x0049             LSLS     R1,R1,#+1
   \   0000002A   0x6041             STR      R1,[R0, #+4]
    377          
    378              /* Peripheral interrupt Deinit*/
    379              HAL_NVIC_DisableIRQ(TIM2_IRQn);
   \   0000002C   0x201C             MOVS     R0,#+28
   \   0000002E   0xB002             ADD      SP,SP,#+8
   \   00000030   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    380          
    381            /* USER CODE BEGIN TIM2_MspDeInit 1 */
    382          
    383            /* USER CODE END TIM2_MspDeInit 1 */
    384            }
    385            else if(tim_baseHandle->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspDeInit_1: (+1)
   \   00000034   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40000400
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_2
    386            {
    387            /* USER CODE BEGIN TIM3_MspDeInit 0 */
    388          
    389            /* USER CODE END TIM3_MspDeInit 0 */
    390              /* Peripheral clock disable */
    391              __HAL_RCC_TIM3_CLK_DISABLE();
   \   0000003A   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   0000003C   0x6841             LDR      R1,[R0, #+4]
   \   0000003E   0xF021 0x0102      BIC      R1,R1,#0x2
   \   00000042   0x6041             STR      R1,[R0, #+4]
    392          
    393              /* Peripheral interrupt Deinit*/
    394              HAL_NVIC_DisableIRQ(TIM3_IRQn);
   \   00000044   0x201D             MOVS     R0,#+29
   \   00000046   0xB002             ADD      SP,SP,#+8
   \   00000048   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    395          
    396            /* USER CODE BEGIN TIM3_MspDeInit 1 */
    397          
    398            /* USER CODE END TIM3_MspDeInit 1 */
    399            }
    400            else if(tim_baseHandle->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspDeInit_2: (+1)
   \   0000004C   0x....             LDR.N    R1,??DataTable6_6  ;; 0x40000800
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_3
    401            {
    402            /* USER CODE BEGIN TIM4_MspDeInit 0 */
    403          
    404            /* USER CODE END TIM4_MspDeInit 0 */
    405              /* Peripheral clock disable */
    406              __HAL_RCC_TIM4_CLK_DISABLE();
   \   00000052   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021018
   \   00000054   0x6841             LDR      R1,[R0, #+4]
   \   00000056   0xF021 0x0104      BIC      R1,R1,#0x4
   \   0000005A   0x6041             STR      R1,[R0, #+4]
    407          
    408              /* Peripheral interrupt Deinit*/
    409              HAL_NVIC_DisableIRQ(TIM4_IRQn);
   \   0000005C   0x201E             MOVS     R0,#+30
   \   0000005E   0xB002             ADD      SP,SP,#+8
   \   00000060   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    410          
    411            /* USER CODE BEGIN TIM4_MspDeInit 1 */
    412          
    413            /* USER CODE END TIM4_MspDeInit 1 */
    414            }
    415          } 
   \                     ??HAL_TIM_Base_MspDeInit_3: (+1)
   \   00000064   0xB002             ADD      SP,SP,#+8
   \   00000066   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     htim1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40012C00         DC32     0x40012c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     htim3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x40010C00         DC32     0x40010c00
    416          
    417          /* USER CODE BEGIN 1 */
    418          
    419          /* USER CODE END 1 */
    420          
    421          /**
    422            * @}
    423            */
    424          
    425          /**
    426            * @}
    427            */
    428          
    429          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_TIM_Base_MspDeInit
         0   -> HAL_NVIC_DisableIRQ
       8   HAL_TIM_Base_MspInit
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      24   HAL_TIM_MspPostInit
        24   -> HAL_GPIO_Init
      88   MX_TIM1_Init
        88   -> Error_Handler
        88   -> HAL_TIMEx_ConfigBreakDeadTime
        88   -> HAL_TIMEx_MasterConfigSynchronization
        88   -> HAL_TIM_Base_Init
        88   -> HAL_TIM_ConfigClockSource
        88   -> HAL_TIM_MspPostInit
        88   -> HAL_TIM_PWM_ConfigChannel
        88   -> HAL_TIM_PWM_Init
      32   MX_TIM2_Init
        32   -> Error_Handler
        32   -> HAL_TIMEx_MasterConfigSynchronization
        32   -> HAL_TIM_Base_Init
        32   -> HAL_TIM_ConfigClockSource
      64   MX_TIM3_Init
        64   -> Error_Handler
        64   -> HAL_TIMEx_MasterConfigSynchronization
        64   -> HAL_TIM_Base_Init
        64   -> HAL_TIM_ConfigClockSource
        64   -> HAL_TIM_MspPostInit
        64   -> HAL_TIM_PWM_ConfigChannel
        64   -> HAL_TIM_PWM_Init
      32   MX_TIM4_Init
        32   -> Error_Handler
        32   -> HAL_TIMEx_MasterConfigSynchronization
        32   -> HAL_TIM_Base_Init
        32   -> HAL_TIM_ConfigClockSource


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     104  HAL_TIM_Base_MspDeInit
     190  HAL_TIM_Base_MspInit
      78  HAL_TIM_MspPostInit
     190  MX_TIM1_Init
      92  MX_TIM2_Init
     176  MX_TIM3_Init
      90  MX_TIM4_Init
      60  htim1
      60  htim2
      60  htim3
      60  htim4

 
 240 bytes in section .bss
 960 bytes in section .text
 
 960 bytes of CODE memory
 240 bytes of DATA memory

Errors: none
Warnings: none
