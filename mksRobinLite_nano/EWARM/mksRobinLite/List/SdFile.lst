###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\SdFile.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EW9762.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\SdFile.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\SdFile.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\SdFile.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\SdFile.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * Arduino SdFat Library
     25           * Copyright (C) 2009 by William Greiman
     26           *
     27           * This file is part of the Arduino Sd2Card Library
     28           */
     29          #include "Marlin.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     30          
     31          #if ENABLED(SDSUPPORT)
     32          #include "SdFile.h"

  #define PSTR(str) (str)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\arduino\avr\pgmspace.h",8  Warning[Pa181]: 
          incompatible redefinition of macro "PSTR" (declared at line 59 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\Marlin.h")

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\arduino\avr\pgmspace.h",23  Warning[Pa181]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\arduino\avr\pgmspace.h",26  Warning[Pa181]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\arduino\avr\pgmspace.h",28  Warning[Pa181]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\arduino\avr\pgmspace.h",36  Warning[Pa181]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\Marlin_export.h")

   \                                 In section .text, align 2
   \   __code __interwork __softfp Print::subobject Print()
   \                     _ZN5PrintC2Ev: (+1)
   \        0x0   0x.... 0x....      B.W      _ZN5PrintC1Ev

   \                                 In section .text, align 2
   \   __code __interwork __softfp Print::Print()
   \                     _ZN5PrintC1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6041             STR      R1,[R0, #+4]
   \        0x4   0x4770             BX       LR               ;; return

  class SdFile : public SdBaseFile, public Print {
        ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\SdFile.h",45  Warning[Pe611]: 
          overloaded virtual function "Print::write" is only partially
          overridden in class "SdFile"
     33          /**  Create a file object and open it in the current working directory.
     34           *
     35           * \param[in] path A path with a valid 8.3 DOS name for a file to be opened.
     36           *
     37           * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
     38           * OR of open flags. see SdBaseFile::open(SdBaseFile*, const char*, uint8_t).
     39           */

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp SdFile::subobject SdFile(char const *, uint8_t)
   \                     _ZN6SdFileC2EPKch: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE _ZN6SdFileC1EPKch
   \        0x2                      ;; // Fall through to label SdFile::SdFile(char const *, uint8_t)

   \                                 In section .text, align 2, keep-with-next
     40          SdFile::SdFile(const char* path, uint8_t oflag) : SdBaseFile(path, oflag) {
   \                     _ZN6SdFileC1EPKch: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0xF104 0x0008      ADD      R0,R4,#+8
   \        0x8   0x.... 0x....      BL       _ZN10SdBaseFileC2EPKch
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x.... 0x....      BL       _ZN5PrintC2Ev
   \       0x12   0x....             LDR.N    R0,??DataTable2_1
   \       0x14   0x6020             STR      R0,[R4, #+0]
     41          }
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0xBD10             POP      {R4,PC}          ;; return
     42          //------------------------------------------------------------------------------
     43          /** Write data to an open file.
     44           *
     45           * \note Data is moved to the cache but may not be written to the
     46           * storage device until sync() is called.
     47           *
     48           * \param[in] buf Pointer to the location of the data to be written.
     49           *
     50           * \param[in] nbyte Number of bytes to write.
     51           *
     52           * \return For success write() returns the number of bytes written, always
     53           * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
     54           * include write() is called before a file has been opened, write is called
     55           * for a read-only file, device is full, a corrupt file system or an I/O error.
     56           *
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          int16_t SdFile::write(const void* buf, uint16_t nbyte) {
     59            return SdBaseFile::write(buf, nbyte);
   \                     _ZN6SdFile5writeEPKvt: (+1)
   \        0x0   0x3008             ADDS     R0,R0,#+8
   \        0x2   0x.... 0x....      B.W      _ZN10SdBaseFile5writeEPKvt
     60          }
     61          //------------------------------------------------------------------------------
     62          /** Write a byte to a file. Required by the Arduino Print class.
     63           * \param[in] b the byte to be written.
     64           * Use writeError to check for errors.
     65           */
     66          #if ARDUINO >= 100

   \                                 In section .text, align 2, keep-with-next
     67            size_t SdFile::write(uint8_t b) {
   \                     _ZN6SdFile5writeEh: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
     68              return SdBaseFile::write(&b, 1);
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x3008             ADDS     R0,R0,#+8
   \        0x8   0x.... 0x....      BL       _ZN10SdBaseFile5writeEPKvt
   \        0xC   0xBD02             POP      {R1,PC}          ;; return
     69            }
     70          #else
     71            void SdFile::write(uint8_t b) {
     72              SdBaseFile::write(&b, 1);
     73            }
     74          #endif
     75          //------------------------------------------------------------------------------
     76          /** Write a string to a file. Used by the Arduino Print class.
     77           * \param[in] str Pointer to the string.
     78           * Use writeError to check for errors.
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void SdFile::write(const char* str) {
   \                     _ZN6SdFile5writeEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     81            SdBaseFile::write(str, strlen(str));
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xB292             UXTH     R2,R2
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x16   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x1A   0x.... 0x....      B.W      _ZN10SdBaseFile5writeEPKvt
     82          }
     83          //------------------------------------------------------------------------------
     84          /** Write a PROGMEM string to a file.
     85           * \param[in] str Pointer to the PROGMEM string.
     86           * Use writeError to check for errors.
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void SdFile::write_P(PGM_P str) {
   \                     _ZN6SdFile7write_PEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0xE004             B.N      ??write_P_0
     89            for (uint8_t c; (c = pgm_read_byte(str)); str++) write(c);
   \                     ??write_P_1: (+1)
   \        0x8   0x4620             MOV      R0,R4
   \        0xA   0x6822             LDR      R2,[R4, #+0]
   \        0xC   0x6812             LDR      R2,[R2, #+0]
   \        0xE   0x4790             BLX      R2
   \       0x10   0x1C6D             ADDS     R5,R5,#+1
   \                     ??write_P_0: (+1)
   \       0x12   0x7829             LDRB     R1,[R5, #+0]
   \       0x14   0x0008             MOVS     R0,R1
   \       0x16   0xD1F7             BNE.N    ??write_P_1
     90          }
   \       0x18   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     91          //------------------------------------------------------------------------------
     92          /** Write a PROGMEM string followed by CR/LF to a file.
     93           * \param[in] str Pointer to the PROGMEM string.
     94           * Use writeError to check for errors.
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          void SdFile::writeln_P(PGM_P str) {
   \                     _ZN6SdFile9writeln_PEPKc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     97            write_P(str);
   \        0x4   0x.... 0x....      BL       _ZN6SdFile7write_PEPKc
     98            write_P(PSTR("\r\n"));
   \        0x8   0x....             ADR.N    R1,??DataTable2  ;; 0x0D, 0x0A, 0x00, 0x00
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....             B.N      _ZN6SdFile7write_PEPKc
     99          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     _ZTV6SdFile+0x8

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \        0x3   0x00               DC8 0
    100          
    101          /*---------------------------------config begin-------------------------------------*/
    102          /*
    103          int16_t SdFile::read(const void* buf, uint16_t nbyte) {
    104            return SdBaseFile::read(buf, nbyte);
    105          }
    106          */
    107          /*---------------------------------config end-------------------------------------*/
    108          
    109          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Print::Print()
       0   Print::subobject Print()
         0   -> Print::Print()
       8   SdFile::SdFile(char const *, uint8_t)
         8   -> Print::subobject Print()
         8   -> SdBaseFile::subobject SdBaseFile(char const *, uint8_t)
       0   SdFile::subobject SdFile(char const *, uint8_t)
         0   -> SdFile::SdFile(char const *, uint8_t)
      16   SdFile::write(char const *)
         0   -> SdBaseFile::write(void const *, uint16_t)
        16   -> strlen
       8   SdFile::write(uint8_t)
         8   -> SdBaseFile::write(void const *, uint16_t)
       0   SdFile::write(void const *, uint16_t)
         0   -> SdBaseFile::write(void const *, uint16_t)
      16   SdFile::write_P(char const *)
        16   -- Indirect call
       8   SdFile::writeln_P(char const *)
         0   -> SdFile::write_P(char const *)
         8   -> SdFile::write_P(char const *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ?_0
       6  Print::Print()
       4  Print::subobject Print()
      26  SdFile::SdFile(char const *, uint8_t)
       2  SdFile::subobject SdFile(char const *, uint8_t)
      30  SdFile::write(char const *)
      14  SdFile::write(uint8_t)
       6  SdFile::write(void const *, uint16_t)
      26  SdFile::write_P(char const *)
      18  SdFile::writeln_P(char const *)
      80  -- Other

 
  84 bytes in section .rodata
 140 bytes in section .text
 
 130 bytes of CODE  memory (+ 10 bytes shared)
   4 bytes of CONST memory (+ 80 bytes shared)

Errors: none
Warnings: 9
