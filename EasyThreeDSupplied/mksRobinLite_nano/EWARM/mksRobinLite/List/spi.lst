###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  22:13:50
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\nano\Src\spi.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWE6C4.tmp (F:\nano\Src\spi.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\spi.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\spi.o
#
###############################################################################

F:\nano\Src\spi.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : SPI.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the SPI instances.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2017 STMicroelectronics
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "spi.h"
     37          #include "stm32f10x_spi.h"

  #define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",132  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_DIRECTION_MODE" (declared
          at line 466 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",146  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_MODE" (declared at line
          459 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DataSize_16b) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",158  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_DATASIZE" (declared at
          line 488 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",170  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_CPOL" (declared at line
          496 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",182  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_CPHA" (declared at line
          504 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",194  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_NSS" (declared at line 512
          of "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",212  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_BAUDRATE_PRESCALER"
          (declared at line 521 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) || \
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",230  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_FIRST_BIT" (declared at
          line 535 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define SPI_FLAG_CRCERR                 ((uint16_t)0x0010)
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",408  Warning[Pa181]: 
          incompatible redefinition of macro "SPI_FLAG_CRCERR" (declared at
          line 308 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define SPI_FLAG_MODF                   ((uint16_t)0x0020)
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",409  Warning[Pa181]: 
          incompatible redefinition of macro "SPI_FLAG_MODF" (declared at line
          309 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) ((POLYNOMIAL) >= 0x1)
          ^
"F:\nano\Drivers\STM32F10x_StdPeriph_Driver\Inc\stm32f10x_spi.h",425  Warning[Pa181]: 
          incompatible redefinition of macro "IS_SPI_CRC_POLYNOMIAL" (declared
          at line 558 of
          "F:\nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")
Warning[Ms014]: some characters could not be correctly encoded in
          "F:\nano\EWARM\mksRobinLite\List\spi.s", and have been replaced with
          '@'. The first such character has unicode code point 0x65e0 ("@")
     38          #include "gpio.h"
     39          #include "dma.h"
     40          
     41          /* USER CODE BEGIN 0 */
     42          
     43          /* USER CODE END 0 */
     44          

   \                                 In section .bss, align 4
     45          SPI_HandleTypeDef hspi2;
   \                     hspi2:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
     46          DMA_HandleTypeDef hdma_spi2_rx;
   \                     hdma_spi2_rx:
   \   00000000                      DS8 56
     47          DMA_HandleTypeDef hdma_spi2_tx;
   \                     hdma_spi2_tx:
   \   00000038                      DS8 56
     48          
     49          /* SPI2 init function */

   \                                 In section .text, align 2, keep-with-next
     50          void MX_SPI2_Init(void)
     51          {
   \                     MX_SPI2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     52          
     53            hspi2.Instance = SPI2;
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40003800
   \   00000006   0x6001             STR      R1,[R0, #+0]
     54            hspi2.Init.Mode = SPI_MODE_MASTER;
   \   00000008   0xF44F 0x7182      MOV      R1,#+260
   \   0000000C   0x6041             STR      R1,[R0, #+4]
     55            hspi2.Init.Direction = SPI_DIRECTION_2LINES;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6081             STR      R1,[R0, #+8]
     56            hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
   \   00000012   0x60C1             STR      R1,[R0, #+12]
     57            hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;	//SCK @@@@@@@@
   \   00000014   0x6101             STR      R1,[R0, #+16]
     58            hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;		//@@@@@@@@@@@@@@@
   \   00000016   0x6141             STR      R1,[R0, #+20]
     59          
     60          //  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
     61          //  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
     62            
     63            hspi2.Init.NSS = SPI_NSS_SOFT;
   \   00000018   0xF44F 0x7100      MOV      R1,#+512
   \   0000001C   0x6181             STR      R1,[R0, #+24]
     64            //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
     65            hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;	//CLK = 2.25MHz
   \   0000001E   0x2118             MOVS     R1,#+24
   \   00000020   0x61C1             STR      R1,[R0, #+28]
     66            //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;	//CLK = 560KHz
     67          /*
     68          @@@@@,@@@@@: 
     69          	SdFatConfig.h
     70          		#define SPI_SD_INIT_RATE 6
     71          	CardReader.cpp
     72          		void CardReader::initsd() {	
     73          		#define SPI_SPEED SPI_SIXTEENTH_SPEED
     74          		}
     75          */
     76            hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x6201             STR      R1,[R0, #+32]
     77            hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000026   0x6241             STR      R1,[R0, #+36]
     78            hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
   \   00000028   0x6281             STR      R1,[R0, #+40]
     79            hspi2.Init.CRCPolynomial = 10;
   \   0000002A   0x210A             MOVS     R1,#+10
   \   0000002C   0x62C1             STR      R1,[R0, #+44]
     80            if (HAL_SPI_Init(&hspi2) != HAL_OK)
   \   0000002E   0x.... 0x....      BL       HAL_SPI_Init
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD003             BEQ.N    ??MX_SPI2_Init_0
     81            {
     82              Error_Handler();
   \   00000036   0xE8BD 0x4001      POP      {R0,LR}
   \   0000003A   0x.... 0x....      B.W      Error_Handler
     83            }
     84          
     85          }
   \                     ??MX_SPI2_Init_0: (+1)
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
     88          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB578             PUSH     {R3-R6,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
     89          
     90            GPIO_InitTypeDef GPIO_InitStruct;
     91            if(spiHandle->Instance==SPI2)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40003800
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD157             BNE.N    ??HAL_SPI_MspInit_0
     92            {
     93            /* USER CODE BEGIN SPI2_MspInit 0 */
     94          
     95            /* USER CODE END SPI2_MspInit 0 */
     96              /* Peripheral clock enable */
     97              __HAL_RCC_SPI2_CLK_ENABLE();
   \   0000000E   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002101c
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF441 0x4180      ORR      R1,R1,#0x4000
   \   00000016   0x6001             STR      R1,[R0, #+0]
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF400 0x4080      AND      R0,R0,#0x4000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
     98            
     99              /**SPI2 GPIO Configuration    
    100              PB13     ------> SPI2_SCK
    101              PB14     ------> SPI2_MISO
    102              PB15     ------> SPI2_MOSI 
    103              */
    104              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
   \   00000022   0xF44F 0x4020      MOV      R0,#+40960
   \   00000026   0x9001             STR      R0,[SP, #+4]
    105              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x9002             STR      R0,[SP, #+8]
    106              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x9004             STR      R0,[SP, #+16]
    107              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000030   0x....             LDR.N    R5,??DataTable4_3  ;; 0x40010c00
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0x.... 0x....      BL       HAL_GPIO_Init
    108          
    109              GPIO_InitStruct.Pin = GPIO_PIN_14;
   \   0000003A   0xF44F 0x4080      MOV      R0,#+16384
   \   0000003E   0x9001             STR      R0,[SP, #+4]
    110              GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9002             STR      R0,[SP, #+8]
    111              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000044   0x9003             STR      R0,[SP, #+12]
    112              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0x4628             MOV      R0,R5
   \   0000004A   0x.... 0x....      BL       HAL_GPIO_Init
    113          
    114              /* Peripheral DMA init*/
    115           #if 1	//SPI_DMA
    116              hdma_spi2_rx.Instance = DMA1_Channel4;
   \   0000004E   0x....             LDR.N    R5,??DataTable4_4
   \   00000050   0x....             LDR.N    R6,??DataTable4_5  ;; 0x40020044
   \   00000052   0x602E             STR      R6,[R5, #+0]
    117              hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x6068             STR      R0,[R5, #+4]
    118              hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000058   0x60A8             STR      R0,[R5, #+8]
    119              hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   0000005A   0x2080             MOVS     R0,#+128
   \   0000005C   0x60E8             STR      R0,[R5, #+12]
    120              hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6128             STR      R0,[R5, #+16]
    121              hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
   \   00000062   0x6168             STR      R0,[R5, #+20]
    122              hdma_spi2_rx.Init.Mode = DMA_NORMAL;
   \   00000064   0x61A8             STR      R0,[R5, #+24]
    123              hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
   \   00000066   0x61E8             STR      R0,[R5, #+28]
    124              if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0x.... 0x....      BL       HAL_DMA_Init
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD001             BEQ.N    ??HAL_SPI_MspInit_1
    125              {
    126                Error_Handler();
   \   00000072   0x.... 0x....      BL       Error_Handler
    127              }
    128          
    129              __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   00000076   0x6465             STR      R5,[R4, #+68]
   \   00000078   0x626C             STR      R4,[R5, #+36]
    130          
    131              hdma_spi2_tx.Instance = DMA1_Channel5;
   \   0000007A   0xF106 0x0014      ADD      R0,R6,#+20
   \   0000007E   0x63A8             STR      R0,[R5, #+56]
    132              hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   00000080   0x2010             MOVS     R0,#+16
   \   00000082   0x63E8             STR      R0,[R5, #+60]
    133              hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x6428             STR      R0,[R5, #+64]
    134              hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000088   0x2080             MOVS     R0,#+128
   \   0000008A   0x6468             STR      R0,[R5, #+68]
    135              hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x64A8             STR      R0,[R5, #+72]
    136              hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
   \   00000090   0x64E8             STR      R0,[R5, #+76]
    137              hdma_spi2_tx.Init.Mode = DMA_NORMAL;
   \   00000092   0x6528             STR      R0,[R5, #+80]
    138              hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
   \   00000094   0x6568             STR      R0,[R5, #+84]
    139              if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
   \   00000096   0xF105 0x0038      ADD      R0,R5,#+56
   \   0000009A   0x.... 0x....      BL       HAL_DMA_Init
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD001             BEQ.N    ??HAL_SPI_MspInit_2
    140              {
    141                Error_Handler();
   \   000000A2   0x.... 0x....      BL       Error_Handler
    142              }
    143          
    144              __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   000000A6   0xF105 0x0038      ADD      R0,R5,#+56
   \   000000AA   0x6420             STR      R0,[R4, #+64]
   \   000000AC   0x65EC             STR      R4,[R5, #+92]
    145          
    146              /* Peripheral interrupt init */
    147              HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0x2103             MOVS     R1,#+3
   \   000000B2   0x2024             MOVS     R0,#+36
   \   000000B4   0x.... 0x....      BL       HAL_NVIC_SetPriority
    148              HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   000000B8   0x2024             MOVS     R0,#+36
   \   000000BA   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    149          #endif
    150            /* USER CODE BEGIN SPI2_MspInit 1 */
    151          
    152            /* USER CODE END SPI2_MspInit 1 */
    153            }
    154          }
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   000000BE   0xB006             ADD      SP,SP,#+24
   \   000000C0   0xBD70             POP      {R4-R6,PC}       ;; return
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
    157          {
   \                     HAL_SPI_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    158          
    159            if(spiHandle->Instance==SPI2)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40003800
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD114             BNE.N    ??HAL_SPI_MspDeInit_0
    160            {
    161            /* USER CODE BEGIN SPI2_MspDeInit 0 */
    162          
    163            /* USER CODE END SPI2_MspDeInit 0 */
    164              /* Peripheral clock disable */
    165              __HAL_RCC_SPI2_CLK_DISABLE();
   \   0000000C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002101c
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF421 0x4180      BIC      R1,R1,#0x4000
   \   00000014   0x6001             STR      R1,[R0, #+0]
    166            
    167              /**SPI2 GPIO Configuration    
    168              PB13     ------> SPI2_SCK
    169              PB14     ------> SPI2_MISO
    170              PB15     ------> SPI2_MOSI 
    171              */
    172              HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
   \   00000016   0xF44F 0x4160      MOV      R1,#+57344
   \   0000001A   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40010c00
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_DeInit
    173          #if 1  //SPI_DMA
    174          
    175              /* Peripheral DMA DeInit*/
    176              HAL_DMA_DeInit(spiHandle->hdmarx);
   \   00000020   0x6C60             LDR      R0,[R4, #+68]
   \   00000022   0x.... 0x....      BL       HAL_DMA_DeInit
    177              HAL_DMA_DeInit(spiHandle->hdmatx);
   \   00000026   0x6C20             LDR      R0,[R4, #+64]
   \   00000028   0x.... 0x....      BL       HAL_DMA_DeInit
    178          
    179              /* Peripheral interrupt Deinit*/
    180              HAL_NVIC_DisableIRQ(SPI2_IRQn);
   \   0000002C   0x2024             MOVS     R0,#+36
   \   0000002E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000032   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    181          #endif 
    182            }
    183            /* USER CODE BEGIN SPI2_MspDeInit 1 */
    184          
    185            /* USER CODE END SPI2_MspDeInit 1 */
    186          } 
   \                     ??HAL_SPI_MspDeInit_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    187          
    188          /* USER CODE BEGIN 1 */
    189          
    190          
    191          //SPI2@@@@@@
    192          //SPI@@=fAPB2/@@@@
    193          //@ref SPI_BaudRate_Prescaler:SPI_BaudRatePrescaler_2~SPI_BaudRatePrescaler_256  
    194          //fAPB2@@@@@84Mhz@

   \                                 In section .text, align 2, keep-with-next
    195          void SPI2_SetSpeed(u8 SPI_BaudRatePrescaler)
    196          {
    197            assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//@@@@@
    198          	SPI2->CR1&=0XFFC7;//@3-5@@@@@@@@@@
   \                     SPI2_SetSpeed: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_1  ;; 0x40003800
   \   00000002   0x6813             LDR      R3,[R2, #+0]
   \   00000004   0xF64F 0x71C7      MOVW     R1,#+65479
   \   00000008   0x400B             ANDS     R3,R1,R3
   \   0000000A   0x6013             STR      R3,[R2, #+0]
    199          	SPI2->CR1|=SPI_BaudRatePrescaler;	//@@SPI2@@ 
   \   0000000C   0x6811             LDR      R1,[R2, #+0]
   \   0000000E   0x4308             ORRS     R0,R0,R1
   \   00000010   0x6010             STR      R0,[R2, #+0]
    200          	SPI_Cmd(SPI2,ENABLE); //@@SPI2
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x4610             MOV      R0,R2
   \   00000016   0x.... 0x....      B.W      SPI_Cmd
    201          } 
    202          //SPI2 @@@@@@
    203          //TxData:@@@@@@
    204          //@@@:@@@@@@

   \                                 In section .text, align 2, keep-with-next
    205          u8 SPI2_ReadWriteByte(u8 TxData)
    206          {		 			 
   \                     SPI2_ReadWriteByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x....             LDR.N    R5,??DataTable4_1  ;; 0x40003800
    207           
    208            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET){}//@@@@@@  
   \                     ??SPI2_ReadWriteByte_0: (+1)
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0F9             BEQ.N    ??SPI2_ReadWriteByte_0
    209          	
    210          	SPI_I2S_SendData(SPI2, TxData); //@@@@SPIx@@@@byte  @@
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       SPI_I2S_SendData
    211          		
    212            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET){} //@@@@@@@byte  
   \                     ??SPI2_ReadWriteByte_1: (+1)
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD0F9             BEQ.N    ??SPI2_ReadWriteByte_1
    213           
    214          	return SPI_I2S_ReceiveData(SPI2); //@@@@SPIx@@@@@@@	
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    215           		    
    216          }
    217          

   \                                 In section .text, align 2, keep-with-next
    218          int SPI2_ReadWrite2Bytes(void)  
    219          { 
   \                     SPI2_ReadWrite2Bytes: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    220          	volatile u16 ans=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    221                  u16 temp = 0;
    222          	temp=SPI2_ReadWriteByte(0x00);
   \   00000008   0x.... 0x....      BL       SPI2_ReadWriteByte
    223          	ans=temp<<8;
   \   0000000C   0x0200             LSLS     R0,R0,#+8
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    224          	temp=SPI2_ReadWriteByte(0x00);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       SPI2_ReadWriteByte
    225          	ans|=temp;
   \   00000018   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000001C   0x4308             ORRS     R0,R0,R1
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    226          	ans>>=3;
   \   00000022   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000026   0x08C0             LSRS     R0,R0,#+3
   \   00000028   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    227          	return ans&0x0fff;
   \   0000002C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000030   0xF3C0 0x000B      UBFX     R0,R0,#+0,#+12
   \   00000034   0xBD02             POP      {R1,PC}          ;; return
    228          
    229          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     hspi2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4002101C         DC32     0x4002101c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hdma_spi2_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40020044         DC32     0x40020044
    230          
    231          
    232          
    233          /* USER CODE END 1 */
    234          
    235          /**
    236            * @}
    237            */
    238          
    239          /**
    240            * @}
    241            */
    242          
    243          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_SPI_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      40   HAL_SPI_MspInit
        40   -> Error_Handler
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   MX_SPI2_Init
         0   -> Error_Handler
         8   -> HAL_SPI_Init
       8   SPI2_ReadWrite2Bytes
         8   -> SPI2_ReadWriteByte
      16   SPI2_ReadWriteByte
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
       0   SPI2_SetSpeed
         0   -> SPI_Cmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      56  HAL_SPI_MspDeInit
     194  HAL_SPI_MspInit
      64  MX_SPI2_Init
      54  SPI2_ReadWrite2Bytes
      48  SPI2_ReadWriteByte
      26  SPI2_SetSpeed
     112  hdma_spi2_rx
          hdma_spi2_tx
      88  hspi2

 
 200 bytes in section .bss
 466 bytes in section .text
 
 466 bytes of CODE memory
 200 bytes of DATA memory

Errors: none
Warnings: 12
