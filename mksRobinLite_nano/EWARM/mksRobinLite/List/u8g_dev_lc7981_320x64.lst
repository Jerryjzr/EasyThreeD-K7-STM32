###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_lc7981_320x64.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW43C0.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_lc7981_320x64.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_lc7981_320x64.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_lc7981_320x64.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_lc7981_320x64.c
      1          /*
      2          
      3            u8g_dev_lc7981_320x64.c
      4          
      5            Note: Requires 16 bit mode (Must be enabled in u8g.h)
      6            
      7            Tested with Varitronix MGLS32064-03.pdf
      8            
      9            Universal 8bit Graphics Library
     10            
     11            Copyright (c) 2012, olikraus@gmail.com
     12            All rights reserved.
     13          
     14            Redistribution and use in source and binary forms, with or without modification, 
     15            are permitted provided that the following conditions are met:
     16          
     17            * Redistributions of source code must retain the above copyright notice, this list 
     18              of conditions and the following disclaimer.
     19              
     20            * Redistributions in binary form must reproduce the above copyright notice, this 
     21              list of conditions and the following disclaimer in the documentation and/or other 
     22              materials provided with the distribution.
     23          
     24            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     25            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     26            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     27            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     28            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     29            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     30            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     31            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     32            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     33            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     34            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     35            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     36            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     37            
     38            
     39          */
     40          
     41          #include "u8g.h"
     42          
     43          #ifdef U8G_16BIT
     44          #define WIDTH 320
     45          #else
     46          #define WIDTH 240
     47          #endif
     48          
     49          #define HEIGHT 64
     50          #define PAGE_HEIGHT 8
     51          
     52          
     53          /*
     54            http://www.gaw.ru/pdf/lcd/lcm/Varitronix/graf/MGLS32064-03.pdf
     55          */
     56          

   \                                 In section .text, align 4, keep-with-next
     57          static const uint8_t u8g_dev_lc7981_320x64_init_seq[] PROGMEM = {
   \                     u8g_dev_lc7981_320x64_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 225, 255, 207, 255, 209, 255, 50, 255, 225, 0, 255
   \              0xFF 0xE1    
   \              0xFF 0xCF    
   \              0xFF 0xD1    
   \              0xFF 0x32    
   \              0xFF 0xE1    
   \              0x00 0xFF    
   \   0000000E   0xE0 0x32          DC8 224, 50, 255, 225, 1, 255, 224, 7, 255, 225, 2, 255, 224, 29, 255
   \              0xFF 0xE1    
   \              0x01 0xFF    
   \              0xE0 0x07    
   \              0xFF 0xE1    
   \              0x02 0xFF    
   \              0xE0 0x1D    
   \              0xFF         
   \   0000001D   0xE1 0x03          DC8 225, 3, 255, 224, 127, 255, 225, 8, 255, 224, 0, 255, 225, 9, 255
   \              0xFF 0xE0    
   \              0x7F 0xFF    
   \              0xE1 0x08    
   \              0xFF 0xE0    
   \              0x00 0xFF    
   \              0xE1 0x09    
   \              0xFF         
   \   0000002C   0xE0 0x00          DC8 224, 0, 255, 10, 255, 208, 255, 254
   \              0xFF 0x0A    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
     58            U8G_ESC_CS(0),             /* disable chip */
     59            U8G_ESC_ADR(1),           /* instruction mode */
     60            U8G_ESC_RST(15),           /* do reset low pulse with (15*16)+2 milliseconds (=maximum delay)*/
     61            U8G_ESC_CS(1),             /* enable chip */
     62            U8G_ESC_DLY(50),         /* delay 50 ms */
     63            
     64            
     65            U8G_ESC_ADR(1),               /* instruction mode */
     66            0x000,                                /* mode register */
     67            U8G_ESC_ADR(0),               /* data mode */
     68            0x032,                                /* display on (bit 5), master mode on (bit 4), graphics mode on (bit 1)*/
     69          
     70            U8G_ESC_ADR(1),               /* instruction mode */
     71            0x001,                                /* character/bits per pixel pitch */
     72            U8G_ESC_ADR(0),               /* data mode */
     73            0x007,                                /* 8 bits per pixel */
     74          
     75            U8G_ESC_ADR(1),               /* instruction mode */
     76            0x002,                                /* number of chars/byte width of the screen */
     77            U8G_ESC_ADR(0),               /* data mode */
     78            WIDTH/8-1,                         /* 8 bits per pixel */
     79          
     80            U8G_ESC_ADR(1),               /* instruction mode */
     81            0x003,                                /* time division */
     82            U8G_ESC_ADR(0),               /* data mode */
     83            0x07f,                                /*  */
     84          
     85            U8G_ESC_ADR(1),               /* instruction mode */
     86            0x008,                                /* display start low */
     87            U8G_ESC_ADR(0),               /* data mode */
     88            0x000,                                /*  */
     89          
     90            U8G_ESC_ADR(1),               /* instruction mode */
     91            0x009,                                /* display start high */
     92            U8G_ESC_ADR(0),               /* data mode */
     93            0x000,                                /*  */
     94              
     95            U8G_ESC_DLY(10),               /* delay 10 ms */
     96            
     97            U8G_ESC_CS(0),             /* disable chip */
     98            U8G_ESC_END                /* end of sequence */
     99          };
    100          

   \                                 In section .text, align 4, keep-with-next
    101          uint8_t u8g_dev_lc7981_320x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    102          {
   \                     u8g_dev_lc7981_320x64_fn: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x461E             MOV      R6,R3
    103            switch(msg)
   \   0000000C   0x4638             MOV      R0,R7
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD002             BEQ.N    ??u8g_dev_lc7981_320x64_fn_0
   \   00000012   0x2815             CMP      R0,#+21
   \   00000014   0xD00A             BEQ.N    ??u8g_dev_lc7981_320x64_fn_1
   \   00000016   0xE070             B.N      ??u8g_dev_lc7981_320x64_fn_2
    104            {
    105              case U8G_DEV_MSG_INIT:
    106                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
   \                     ??u8g_dev_lc7981_320x64_fn_0: (+1)
   \   00000018   0x22FF             MOVS     R2,#+255
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       u8g_InitCom
    107                u8g_WriteEscSeqP(u8g, dev, u8g_dev_lc7981_320x64_init_seq);
   \   00000020   0x....             ADR.N    R2,u8g_dev_lc7981_320x64_init_seq
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       u8g_WriteEscSeqP
    108                break;
   \   0000002A   0xE066             B.N      ??u8g_dev_lc7981_320x64_fn_2
    109              case U8G_DEV_MSG_STOP:
    110                break;
    111              case U8G_DEV_MSG_PAGE_NEXT:
    112                {
    113                  uint8_t y, i;
    114                  uint16_t disp_ram_adr;
    115                  uint8_t *ptr;
    116                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \                     ??u8g_dev_lc7981_320x64_fn_1: (+1)
   \   0000002C   0xF8D5 0x9004      LDR      R9,[R5, #+4]
    117                  
    118                  u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       u8g_SetAddress
    119                  u8g_SetChipSelect(u8g, dev, 1);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_SetChipSelect
    120                  y = pb->p.page_y0;
    121                  ptr = pb->buf;
   \   00000042   0xF8D9 0x8008      LDR      R8,[R9, #+8]
    122                  disp_ram_adr = WIDTH/8;
    123                  disp_ram_adr *= y;
   \   00000046   0xF899 0x0002      LDRB     R0,[R9, #+2]
   \   0000004A   0xEBC0 0x1100      RSB      R1,R0,R0, LSL #+4
   \   0000004E   0xEA4F 0x0941      LSL      R9,R1,#+1
   \   00000052   0xFA1F 0xF989      UXTH     R9,R9
    124                  for( i = 0; i < 8; i ++ )
   \   00000056   0xF04F 0x0A00      MOV      R10,#+0
   \   0000005A   0xE045             B.N      ??u8g_dev_lc7981_320x64_fn_3
    125                  {
    126                    u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
   \                     ??u8g_dev_lc7981_320x64_fn_4: (+1)
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x4629             MOV      R1,R5
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       u8g_SetAddress
    127                    u8g_WriteByte(u8g, dev, 0x00a );      /* display ram (cursor) address low byte */
   \   00000066   0x220A             MOVS     R2,#+10
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       u8g_WriteByte
    128                    u8g_SetAddress(u8g, dev, 0);           /* data mode */
   \   00000070   0x2200             MOVS     R2,#+0
   \   00000072   0x4629             MOV      R1,R5
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       u8g_SetAddress
    129                    u8g_WriteByte(u8g, dev, disp_ram_adr & 0x0ff );  
   \   0000007A   0x464A             MOV      R2,R9
   \   0000007C   0xB2D2             UXTB     R2,R2
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_WriteByte
    130          
    131                    u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0x4629             MOV      R1,R5
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       u8g_SetAddress
    132                    u8g_WriteByte(u8g, dev, 0x00b );      /* display ram (cursor) address hight byte */
   \   00000090   0x220B             MOVS     R2,#+11
   \   00000092   0x4629             MOV      R1,R5
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       u8g_WriteByte
    133                    u8g_SetAddress(u8g, dev, 0);           /* data mode */
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       u8g_SetAddress
    134                    u8g_WriteByte(u8g, dev, disp_ram_adr >> 8 );  
   \   000000A4   0x464A             MOV      R2,R9
   \   000000A6   0xB292             UXTH     R2,R2
   \   000000A8   0x0A12             LSRS     R2,R2,#+8
   \   000000AA   0x4629             MOV      R1,R5
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       u8g_WriteByte
    135                    
    136                    u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
   \   000000B2   0x2201             MOVS     R2,#+1
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0x.... 0x....      BL       u8g_SetAddress
    137                    u8g_WriteByte(u8g, dev, 0x00c );      /* write data */
   \   000000BC   0x220C             MOVS     R2,#+12
   \   000000BE   0x4629             MOV      R1,R5
   \   000000C0   0x4620             MOV      R0,R4
   \   000000C2   0x.... 0x....      BL       u8g_WriteByte
    138                    u8g_SetAddress(u8g, dev, 0);           /* data mode */
   \   000000C6   0x2200             MOVS     R2,#+0
   \   000000C8   0x4629             MOV      R1,R5
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       u8g_SetAddress
    139                    u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
   \   000000D0   0x4643             MOV      R3,R8
   \   000000D2   0x221E             MOVS     R2,#+30
   \   000000D4   0x4629             MOV      R1,R5
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       u8g_WriteSequence
    140                    ptr += WIDTH/8;
   \   000000DC   0xF108 0x081E      ADD      R8,R8,#+30
    141                    disp_ram_adr += WIDTH/8;
   \   000000E0   0xF109 0x091E      ADD      R9,R9,#+30
    142                  }
   \   000000E4   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_lc7981_320x64_fn_3: (+1)
   \   000000E8   0x4650             MOV      R0,R10
   \   000000EA   0xB2C0             UXTB     R0,R0
   \   000000EC   0x2808             CMP      R0,#+8
   \   000000EE   0xDBB5             BLT.N    ??u8g_dev_lc7981_320x64_fn_4
    143                  u8g_SetChipSelect(u8g, dev, 0);
   \   000000F0   0x2200             MOVS     R2,#+0
   \   000000F2   0x4629             MOV      R1,R5
   \   000000F4   0x4620             MOV      R0,R4
   \   000000F6   0x.... 0x....      BL       u8g_SetChipSelect
    144                }
    145                break;
    146            }
    147            return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_lc7981_320x64_fn_2: (+1)
   \   000000FA   0x4633             MOV      R3,R6
   \   000000FC   0x463A             MOV      R2,R7
   \   000000FE   0x4629             MOV      R1,R5
   \   00000100   0x4620             MOV      R0,R4
   \   00000102   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   00000106   0x.... 0x....      B.W      u8g_dev_pb8h1f_base_fn
    148          }
    149          

   \                                 In section .bss, align 4
    150          U8G_PB_DEV(u8g_dev_lc7981_320x64_8bit, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_lc7981_320x64_fn, U8G_COM_FAST_PARALLEL);
   \                     u8g_dev_lc7981_320x64_8bit_buf:
   \   00000000                      DS8 240

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_lc7981_320x64_8bit_pb
   \                     u8g_dev_lc7981_320x64_8bit_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 240, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_lc7981_320x64_8bit_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_lc7981_320x64_8bit
   \                     u8g_dev_lc7981_320x64_8bit:
   \   00000000   0x........         DC32 u8g_dev_lc7981_320x64_fn, u8g_dev_lc7981_320x64_8bit_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    151          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_dev_lc7981_320x64_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb8h1f_base_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  u8g_dev_lc7981_320x64_8bit
     240  u8g_dev_lc7981_320x64_8bit_buf
      12  u8g_dev_lc7981_320x64_8bit_pb
     266  u8g_dev_lc7981_320x64_fn
      52  u8g_dev_lc7981_320x64_init_seq

 
 240 bytes in section .bss
  24 bytes in section .data
 318 bytes in section .text
 
 318 bytes of CODE memory
 264 bytes of DATA memory

Errors: none
Warnings: none
