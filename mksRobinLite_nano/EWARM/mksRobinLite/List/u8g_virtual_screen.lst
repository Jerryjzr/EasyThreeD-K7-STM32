###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:13
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_virtual_screen.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5BB8.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_virtual_screen.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_virtual_screen.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_virtual_screen.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_virtual_screen.c
      1          /*
      2          
      3            u8g_virtual_screen.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2012, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          struct _u8g_vs_t
     40          {
     41            u8g_uint_t x;
     42            u8g_uint_t y;
     43            u8g_t *u8g;
     44          };
     45          typedef struct _u8g_vs_t u8g_vs_t;
     46          
     47          #define U8g_VS_MAX 4
     48          uint8_t u8g_vs_cnt = 0;

   \                                 In section .bss, align 4
     49          u8g_vs_t u8g_vs_list[U8g_VS_MAX]; 
   \                     u8g_vs_list:
   \   00000000                      DS8 32
     50          uint8_t u8g_vs_current;
     51          u8g_uint_t u8g_vs_width;
     52          u8g_uint_t u8g_vs_height;
     53          

   \                                 In section .text, align 2, keep-with-next
     54          uint8_t u8g_dev_vs_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     55          {
   \                     u8g_dev_vs_fn: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4615             MOV      R5,R2
   \   00000004   0x461C             MOV      R4,R3
     56            switch(msg)
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x2814             CMP      R0,#+20
   \   0000000A   0xD01D             BEQ.N    ??u8g_dev_vs_fn_0
   \   0000000C   0x2815             CMP      R0,#+21
   \   0000000E   0xD02C             BEQ.N    ??u8g_dev_vs_fn_1
   \   00000010   0x2817             CMP      R0,#+23
   \   00000012   0xD058             BEQ.N    ??u8g_dev_vs_fn_2
   \   00000014   0x2832             CMP      R0,#+50
   \   00000016   0xF000 0x8084      BEQ.W    ??u8g_dev_vs_fn_3
   \   0000001A   0x283B             CMP      R0,#+59
   \   0000001C   0xF000 0x8081      BEQ.W    ??u8g_dev_vs_fn_3
   \   00000020   0x2846             CMP      R0,#+70
   \   00000022   0xD047             BEQ.N    ??u8g_dev_vs_fn_4
   \   00000024   0x2847             CMP      R0,#+71
   \   00000026   0xD04A             BEQ.N    ??u8g_dev_vs_fn_5
     57            {
     58              default:
     59                {
     60          	uint8_t i;
     61          	for( i = 0; i < u8g_vs_cnt; i++ )
   \   00000028   0x2600             MOVS     R6,#+0
   \                     ??u8g_dev_vs_fn_6: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable2
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x4286             CMP      R6,R0
   \   00000030   0xDA43             BGE.N    ??u8g_dev_vs_fn_7
     62          	{
     63          	  u8g_call_dev_fn(u8g_vs_list[i].u8g, u8g_vs_list[i].u8g->dev, msg, arg);
   \   00000032   0x....             LDR.N    R0,??DataTable2_1
   \   00000034   0xF850 0x0036      LDR      R0,[R0, R6, LSL #+3]
   \   00000038   0x4623             MOV      R3,R4
   \   0000003A   0x462A             MOV      R2,R5
   \   0000003C   0x6841             LDR      R1,[R0, #+4]
   \   0000003E   0x.... 0x....      BL       u8g_call_dev_fn
     64          	}
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xB2F6             UXTB     R6,R6
   \   00000046   0xE7F0             B.N      ??u8g_dev_vs_fn_6
     65                }
     66                return 1;
     67              case U8G_DEV_MSG_PAGE_FIRST:
     68                u8g_vs_current = 0;
   \                     ??u8g_dev_vs_fn_0: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable2
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x7041             STRB     R1,[R0, #+1]
     69                if ( u8g_vs_cnt != 0 )
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD008             BEQ.N    ??u8g_dev_vs_fn_8
     70          	return u8g_call_dev_fn(u8g_vs_list[u8g_vs_current].u8g, u8g_vs_list[u8g_vs_current].u8g->dev, msg, arg);
   \   00000054   0x....             LDR.N    R0,??DataTable2_2
   \   00000056   0x6840             LDR      R0,[R0, #+4]
   \   00000058   0x2214             MOVS     R2,#+20
   \   0000005A   0x6841             LDR      R1,[R0, #+4]
   \   0000005C   0xB002             ADD      SP,SP,#+8
   \   0000005E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000062   0x.... 0x....      B.W      u8g_call_dev_fn
     71                return 0;
   \                     ??u8g_dev_vs_fn_8: (+1)
   \   00000066   0x4608             MOV      R0,R1
   \   00000068   0xBD76             POP      {R1,R2,R4-R6,PC}
     72              case U8G_DEV_MSG_PAGE_NEXT:
     73                {	
     74          	uint8_t ret = 0;
   \                     ??u8g_dev_vs_fn_1: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
     75          	if ( u8g_vs_cnt != 0 )
   \   0000006C   0x....             LDR.N    R5,??DataTable2
   \   0000006E   0x7829             LDRB     R1,[R5, #+0]
   \   00000070   0x2900             CMP      R1,#+0
   \   00000072   0xD007             BEQ.N    ??u8g_dev_vs_fn_9
     76          	  ret = u8g_call_dev_fn(u8g_vs_list[u8g_vs_current].u8g, u8g_vs_list[u8g_vs_current].u8g->dev, msg, arg);
   \   00000074   0x....             LDR.N    R0,??DataTable2_1
   \   00000076   0x7869             LDRB     R1,[R5, #+1]
   \   00000078   0xF850 0x0031      LDR      R0,[R0, R1, LSL #+3]
   \   0000007C   0x2215             MOVS     R2,#+21
   \   0000007E   0x6841             LDR      R1,[R0, #+4]
   \   00000080   0x.... 0x....      BL       u8g_call_dev_fn
     77          	if ( ret != 0 )
   \                     ??u8g_dev_vs_fn_9: (+1)
   \   00000084   0x0001             MOVS     R1,R0
   \   00000086   0xD119             BNE.N    ??u8g_dev_vs_fn_10
     78          	  return ret;
     79          	u8g_vs_current++;	/* next device */
   \   00000088   0x7868             LDRB     R0,[R5, #+1]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x7068             STRB     R0,[R5, #+1]
     80          	if ( u8g_vs_current >= u8g_vs_cnt )  /* reached end? */
   \   0000008E   0x4601             MOV      R1,R0
   \   00000090   0x782A             LDRB     R2,[R5, #+0]
   \   00000092   0xB2C9             UXTB     R1,R1
   \   00000094   0x4291             CMP      R1,R2
   \   00000096   0xD301             BCC.N    ??u8g_dev_vs_fn_11
     81          	  return 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xBD76             POP      {R1,R2,R4-R6,PC}
     82          	return u8g_call_dev_fn(u8g_vs_list[u8g_vs_current].u8g, u8g_vs_list[u8g_vs_current].u8g->dev, U8G_DEV_MSG_PAGE_FIRST, arg);	
   \                     ??u8g_dev_vs_fn_11: (+1)
   \   0000009C   0x....             LDR.N    R1,??DataTable2_1
   \   0000009E   0xB2C0             UXTB     R0,R0
   \   000000A0   0xF851 0x0030      LDR      R0,[R1, R0, LSL #+3]
   \   000000A4   0x4623             MOV      R3,R4
   \   000000A6   0x2214             MOVS     R2,#+20
   \   000000A8   0x6841             LDR      R1,[R0, #+4]
   \   000000AA   0xB002             ADD      SP,SP,#+8
   \   000000AC   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000B0   0x.... 0x....      B.W      u8g_call_dev_fn
     83                }
     84                return 0;
                       ^
Warning[Pe111]: statement is unreachable
     85              case U8G_DEV_MSG_GET_WIDTH:
     86                *((u8g_uint_t *)arg) = u8g_vs_width;
   \                     ??u8g_dev_vs_fn_4: (+1)
   \   000000B4   0x....             LDR.N    R0,??DataTable2
   \   000000B6   0x7880             LDRB     R0,[R0, #+2]
   \   000000B8   0x7020             STRB     R0,[R4, #+0]
     87                break;
     88              case U8G_DEV_MSG_GET_HEIGHT:
     89                *((u8g_uint_t *)arg) = u8g_vs_height;
     90                break;
     91              case U8G_DEV_MSG_GET_PAGE_BOX:
     92                if ( u8g_vs_current < u8g_vs_cnt )
     93                {
     94          	u8g_call_dev_fn(u8g_vs_list[u8g_vs_current].u8g, u8g_vs_list[u8g_vs_current].u8g->dev, msg, arg);
     95          	((u8g_box_t *)arg)->x0 += u8g_vs_list[u8g_vs_current].x;
     96          	((u8g_box_t *)arg)->x1 += u8g_vs_list[u8g_vs_current].x;
     97          	((u8g_box_t *)arg)->y0 += u8g_vs_list[u8g_vs_current].y;
     98          	((u8g_box_t *)arg)->y1 += u8g_vs_list[u8g_vs_current].y;
     99                }
    100                else
    101                {
    102          	((u8g_box_t *)arg)->x0 = 0;
    103          	((u8g_box_t *)arg)->x1 = 0;
    104          	((u8g_box_t *)arg)->y0 = 0;
    105          	((u8g_box_t *)arg)->y1 = 0;
    106                }
    107                return 1;
    108              case U8G_DEV_MSG_SET_PIXEL:
    109              case U8G_DEV_MSG_SET_8PIXEL:
    110                if ( u8g_vs_current < u8g_vs_cnt )
    111                {
    112                  ((u8g_dev_arg_pixel_t *)arg)->x -= u8g_vs_list[u8g_vs_current].x;
    113                  ((u8g_dev_arg_pixel_t *)arg)->y -= u8g_vs_list[u8g_vs_current].y;
    114          	return u8g_call_dev_fn(u8g_vs_list[u8g_vs_current].u8g, u8g_vs_list[u8g_vs_current].u8g->dev, msg, arg);
    115                }
    116                break;
    117            }
    118            return 1;
   \                     ??u8g_dev_vs_fn_7: (+1)
   \   000000BA   0x2001             MOVS     R0,#+1
   \                     ??u8g_dev_vs_fn_10: (+1)
   \   000000BC   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??u8g_dev_vs_fn_5: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable2
   \   000000C0   0x78C0             LDRB     R0,[R0, #+3]
   \   000000C2   0x7020             STRB     R0,[R4, #+0]
   \   000000C4   0xE7F9             B.N      ??u8g_dev_vs_fn_7
   \                     ??u8g_dev_vs_fn_2: (+1)
   \   000000C6   0x....             LDR.N    R5,??DataTable2
   \   000000C8   0x7868             LDRB     R0,[R5, #+1]
   \   000000CA   0x7829             LDRB     R1,[R5, #+0]
   \   000000CC   0x4288             CMP      R0,R1
   \   000000CE   0xD222             BCS.N    ??u8g_dev_vs_fn_12
   \   000000D0   0x....             LDR.N    R6,??DataTable2_2
   \   000000D2   0x1D31             ADDS     R1,R6,#+4
   \   000000D4   0xF851 0x0030      LDR      R0,[R1, R0, LSL #+3]
   \   000000D8   0x2217             MOVS     R2,#+23
   \   000000DA   0x6841             LDR      R1,[R0, #+4]
   \   000000DC   0x.... 0x....      BL       u8g_call_dev_fn
   \   000000E0   0x7821             LDRB     R1,[R4, #+0]
   \   000000E2   0x7868             LDRB     R0,[R5, #+1]
   \   000000E4   0xF816 0x0030      LDRB     R0,[R6, R0, LSL #+3]
   \   000000E8   0x1841             ADDS     R1,R0,R1
   \   000000EA   0x7021             STRB     R1,[R4, #+0]
   \   000000EC   0x78A1             LDRB     R1,[R4, #+2]
   \   000000EE   0x7868             LDRB     R0,[R5, #+1]
   \   000000F0   0xF816 0x0030      LDRB     R0,[R6, R0, LSL #+3]
   \   000000F4   0x1841             ADDS     R1,R0,R1
   \   000000F6   0x70A1             STRB     R1,[R4, #+2]
   \   000000F8   0x7861             LDRB     R1,[R4, #+1]
   \   000000FA   0x1C70             ADDS     R0,R6,#+1
   \   000000FC   0x786A             LDRB     R2,[R5, #+1]
   \   000000FE   0xF810 0x0032      LDRB     R0,[R0, R2, LSL #+3]
   \   00000102   0x1841             ADDS     R1,R0,R1
   \   00000104   0x7061             STRB     R1,[R4, #+1]
   \   00000106   0x78E1             LDRB     R1,[R4, #+3]
   \   00000108   0x1C70             ADDS     R0,R6,#+1
   \   0000010A   0x786A             LDRB     R2,[R5, #+1]
   \   0000010C   0xF810 0x0032      LDRB     R0,[R0, R2, LSL #+3]
   \   00000110   0x1841             ADDS     R1,R0,R1
   \   00000112   0x70E1             STRB     R1,[R4, #+3]
   \   00000114   0xE7D1             B.N      ??u8g_dev_vs_fn_7
   \                     ??u8g_dev_vs_fn_12: (+1)
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x7020             STRB     R0,[R4, #+0]
   \   0000011A   0x70A0             STRB     R0,[R4, #+2]
   \   0000011C   0x7060             STRB     R0,[R4, #+1]
   \   0000011E   0x70E0             STRB     R0,[R4, #+3]
   \   00000120   0xE7CB             B.N      ??u8g_dev_vs_fn_7
   \                     ??u8g_dev_vs_fn_3: (+1)
   \   00000122   0x....             LDR.N    R2,??DataTable2
   \   00000124   0x7850             LDRB     R0,[R2, #+1]
   \   00000126   0x7811             LDRB     R1,[R2, #+0]
   \   00000128   0x4288             CMP      R0,R1
   \   0000012A   0xD2C6             BCS.N    ??u8g_dev_vs_fn_7
   \   0000012C   0x....             LDR.N    R1,??DataTable2_2
   \   0000012E   0x7823             LDRB     R3,[R4, #+0]
   \   00000130   0xF811 0x0030      LDRB     R0,[R1, R0, LSL #+3]
   \   00000134   0x1A1B             SUBS     R3,R3,R0
   \   00000136   0x7023             STRB     R3,[R4, #+0]
   \   00000138   0x7863             LDRB     R3,[R4, #+1]
   \   0000013A   0x1C48             ADDS     R0,R1,#+1
   \   0000013C   0x7856             LDRB     R6,[R2, #+1]
   \   0000013E   0xF810 0x0036      LDRB     R0,[R0, R6, LSL #+3]
   \   00000142   0x1A1B             SUBS     R3,R3,R0
   \   00000144   0x7063             STRB     R3,[R4, #+1]
   \   00000146   0x1D08             ADDS     R0,R1,#+4
   \   00000148   0x7851             LDRB     R1,[R2, #+1]
   \   0000014A   0xF850 0x0031      LDR      R0,[R0, R1, LSL #+3]
   \   0000014E   0x4623             MOV      R3,R4
   \   00000150   0x462A             MOV      R2,R5
   \   00000152   0x6841             LDR      R1,[R0, #+4]
   \   00000154   0xB002             ADD      SP,SP,#+8
   \   00000156   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000015A   0x.... 0x....      B.W      u8g_call_dev_fn
    119          }

   \                                 In section .data, align 4
   \                     u8g_vs_cnt:
   \   00000000   0x00               DC8 0
   \                     u8g_vs_current:
   \   00000001   0x00               DC8 0
   \                     u8g_vs_width:
   \   00000002   0x00               DC8 0
   \                     u8g_vs_height:
   \   00000003   0x00               DC8 0
    120          
    121          
    122          
    123          u8g_dev_t u8g_dev_vs = { u8g_dev_vs_fn, NULL, NULL };
   \                     u8g_dev_vs:
   \   00000004   0x........         DC32 u8g_dev_vs_fn, 0H, 0H
   \              0x00000000   
   \              0x00000000   
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void u8g_SetVirtualScreenDimension(u8g_t *vs_u8g, u8g_uint_t width, u8g_uint_t height)
    126          {
   \                     u8g_SetVirtualScreenDimension: (+1)
   \   00000000   0xB410             PUSH     {R4}
    127            if ( vs_u8g->dev != &u8g_dev_vs )
   \   00000002   0x....             LDR.N    R3,??DataTable2
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x1D1C             ADDS     R4,R3,#+4
   \   00000008   0x42A0             CMP      R0,R4
   \   0000000A   0xD101             BNE.N    ??u8g_SetVirtualScreenDimension_0
    128              return; 	/* abort if there is no a virtual screen device */
    129            u8g_vs_width = width;
   \   0000000C   0x7099             STRB     R1,[R3, #+2]
    130            u8g_vs_height = height;  
   \   0000000E   0x70DA             STRB     R2,[R3, #+3]
    131          }
   \                     ??u8g_SetVirtualScreenDimension_0: (+1)
   \   00000010   0xBC10             POP      {R4}
   \   00000012   0x4770             BX       LR               ;; return
    132          

   \                                 In section .text, align 2, keep-with-next
    133          uint8_t u8g_AddToVirtualScreen(u8g_t *vs_u8g, u8g_uint_t x, u8g_uint_t y, u8g_t *child_u8g)
    134          {
   \                     u8g_AddToVirtualScreen: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    135            if ( vs_u8g->dev != &u8g_dev_vs )
   \   00000002   0x....             LDR.N    R4,??DataTable2
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x1D25             ADDS     R5,R4,#+4
   \   00000008   0x42A8             CMP      R0,R5
   \   0000000A   0xD001             BEQ.N    ??u8g_AddToVirtualScreen_0
    136              return 0; 	/* abort if there is no a virtual screen device */
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE00E             B.N      ??u8g_AddToVirtualScreen_1
    137            if ( u8g_vs_cnt >= U8g_VS_MAX )
   \                     ??u8g_AddToVirtualScreen_0: (+1)
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x4605             MOV      R5,R0
   \   00000014   0x2D04             CMP      R5,#+4
   \   00000016   0xDB01             BLT.N    ??u8g_AddToVirtualScreen_2
    138              return 0;  	/* maximum number of  child u8g's reached */
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE008             B.N      ??u8g_AddToVirtualScreen_1
    139            u8g_vs_list[u8g_vs_cnt].u8g = child_u8g;
   \                     ??u8g_AddToVirtualScreen_2: (+1)
   \   0000001C   0x....             LDR.N    R6,??DataTable2_2
   \   0000001E   0xEB06 0x05C5      ADD      R5,R6,R5, LSL #+3
   \   00000022   0x606B             STR      R3,[R5, #+4]
    140            u8g_vs_list[u8g_vs_cnt].x = x;
   \   00000024   0x7029             STRB     R1,[R5, #+0]
    141            u8g_vs_list[u8g_vs_cnt].y = y;
   \   00000026   0x706A             STRB     R2,[R5, #+1]
    142            u8g_vs_cnt++;
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    143            return 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \                     ??u8g_AddToVirtualScreen_1: (+1)
   \   0000002E   0xBC70             POP      {R4-R6}
   \   00000030   0x4770             BX       LR               ;; return
    144          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     u8g_vs_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     u8g_vs_list+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     u8g_vs_list
    145          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   u8g_AddToVirtualScreen
       4   u8g_SetVirtualScreenDimension
      24   u8g_dev_vs_fn
         0   -> u8g_call_dev_fn
        24   -> u8g_call_dev_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      50  u8g_AddToVirtualScreen
      20  u8g_SetVirtualScreenDimension
     350  u8g_dev_vs_fn
      16  u8g_vs_cnt
          u8g_vs_current
          u8g_vs_width
          u8g_vs_height
          u8g_dev_vs
      32  u8g_vs_list

 
  32 bytes in section .bss
  16 bytes in section .data
 432 bytes in section .text
 
 432 bytes of CODE memory
  48 bytes of DATA memory

Errors: none
Warnings: 1
