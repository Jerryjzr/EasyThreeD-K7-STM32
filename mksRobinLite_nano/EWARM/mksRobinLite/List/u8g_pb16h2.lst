###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:11
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb16h2.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5271.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb16h2.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_pb16h2.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_pb16h2.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_pb16h2.c
      1          /*
      2          
      3            u8g_pb16h2.c
      4            
      5            2 bit per pixel page buffer
      6            byte has horizontal orientation
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2011, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37          
     38          */
     39          
     40          #include "u8g.h"
     41          #include <string.h>
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void u8g_pb16h2_Clear(u8g_pb_t *b)
     44          {
     45            uint8_t *ptr = (uint8_t *)b->buf;
   \                     u8g_pb16h2_Clear: (+1)
   \   00000000   0x6881             LDR      R1,[R0, #+8]
     46            uint8_t *end_ptr = ptr;
     47            
     48            /* two bits per pixel, 16 bits height --> 8 pixel --> 4 pixel per byte */
     49            end_ptr += b->width;
     50            end_ptr += b->width;
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   00000008   0x2200             MOVS     R2,#+0
     51            
     52            do
     53            {
     54              *ptr++ = 0;
   \                     ??u8g_pb16h2_Clear_0: (+1)
   \   0000000A   0xF801 0x2B01      STRB     R2,[R1], #+1
     55            } while( ptr != end_ptr );
   \   0000000E   0x4281             CMP      R1,R0
   \   00000010   0xD1FB             BNE.N    ??u8g_pb16h2_Clear_0
     56          }
   \   00000012   0x4770             BX       LR               ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void u8g_pb16h2_Init(u8g_pb_t *b, void *buf, u8g_uint_t width)
     59          {
     60            b->buf = buf;
   \                     u8g_pb16h2_Init: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
     61            b->width = width;
   \   00000002   0x7142             STRB     R2,[R0, #+5]
     62            u8g_pb16h2_Clear(b);
   \   00000004   0x....             B.N      u8g_pb16h2_Clear
     63          }
     64          
     65          static void u8g_pb16h2_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index, uint8_t is_or) U8G_NOINLINE;

   \                                 In section .text, align 2, keep-with-next
     66          static void u8g_pb16h2_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index, uint8_t is_or)
     67          {
   \                     u8g_pb16h2_set_pixel: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x9C03             LDR      R4,[SP, #+12]
     68            register uint8_t mask;
     69            register uint16_t tmp;
     70            
     71            uint8_t *ptr = b->buf;
     72            
     73            y -= b->p.page_y0;
     74            
     75            tmp = b->width;
     76            tmp >>= 2;
     77            tmp *= (uint8_t)y;
     78            ptr += tmp;
     79            
     80            tmp = x;
     81            tmp >>= 2;
     82            ptr += tmp;
   \   00000004   0x6885             LDR      R5,[R0, #+8]
   \   00000006   0x7946             LDRB     R6,[R0, #+5]
   \   00000008   0x08B6             LSRS     R6,R6,#+2
   \   0000000A   0x7880             LDRB     R0,[R0, #+2]
   \   0000000C   0x1A12             SUBS     R2,R2,R0
   \   0000000E   0xB2D2             UXTB     R2,R2
   \   00000010   0x4372             MULS     R2,R2,R6
   \   00000012   0x18A8             ADDS     R0,R5,R2
   \   00000014   0x460A             MOV      R2,R1
   \   00000016   0xEB00 0x0092      ADD      R0,R0,R2, LSR #+2
     83            
     84            tmp = x;
     85            tmp &= 3;
     86            tmp <<= 1;
   \   0000001A   0x0049             LSLS     R1,R1,#+1
   \   0000001C   0xF001 0x0106      AND      R1,R1,#0x6
     87            if ( is_or == 0 )
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD104             BNE.N    ??u8g_pb16h2_set_pixel_0
     88            {
     89              mask = 3;
     90              mask <<= tmp;
     91              mask = ~mask;
     92              *ptr &= mask;
   \   00000024   0x7802             LDRB     R2,[R0, #+0]
   \   00000026   0x2403             MOVS     R4,#+3
   \   00000028   0x408C             LSLS     R4,R4,R1
   \   0000002A   0x43A2             BICS     R2,R2,R4
   \   0000002C   0x7002             STRB     R2,[R0, #+0]
     93            }
     94            color_index &= 3;
     95            color_index <<= tmp;
     96            *ptr |= color_index;
   \                     ??u8g_pb16h2_set_pixel_0: (+1)
   \   0000002E   0x7802             LDRB     R2,[R0, #+0]
   \   00000030   0xF003 0x0303      AND      R3,R3,#0x3
   \   00000034   0xFA03 0xF101      LSL      R1,R3,R1
   \   00000038   0x4311             ORRS     R1,R1,R2
   \   0000003A   0x7001             STRB     R1,[R0, #+0]
     97          }
   \   0000003C   0xBC70             POP      {R4-R6}
   \   0000003E   0x4770             BX       LR               ;; return
     98          
     99          

   \                                 In section .text, align 2, keep-with-next
    100          void u8g_pb16h2_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel, uint8_t is_or)
    101          {
   \                     u8g_pb16h2_SetPixel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4613             MOV      R3,R2
    102            if ( arg_pixel->y < b->p.page_y0 )
   \   00000004   0x784A             LDRB     R2,[R1, #+1]
   \   00000006   0x7884             LDRB     R4,[R0, #+2]
   \   00000008   0x42A2             CMP      R2,R4
   \   0000000A   0xD30B             BCC.N    ??u8g_pb16h2_SetPixel_0
    103              return;
    104            if ( arg_pixel->y > b->p.page_y1 )
   \   0000000C   0x78C4             LDRB     R4,[R0, #+3]
   \   0000000E   0x4294             CMP      R4,R2
   \   00000010   0xD308             BCC.N    ??u8g_pb16h2_SetPixel_0
    105              return;
    106            if ( arg_pixel->x >= b->width )
   \   00000012   0x780C             LDRB     R4,[R1, #+0]
   \   00000014   0x7945             LDRB     R5,[R0, #+5]
   \   00000016   0x42AC             CMP      R4,R5
   \   00000018   0xD204             BCS.N    ??u8g_pb16h2_SetPixel_0
    107              return;
    108            u8g_pb16h2_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color, is_or);
   \   0000001A   0x9300             STR      R3,[SP, #+0]
   \   0000001C   0x790B             LDRB     R3,[R1, #+4]
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x.... 0x....      BL       u8g_pb16h2_set_pixel
    109          }
   \                     ??u8g_pb16h2_SetPixel_0: (+1)
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    110          
    111          

   \                                 In section .text, align 4, keep-with-next
    112          void u8g_pb16h2_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    113          {
   \                     u8g_pb16h2_Set8PixelStd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    114            register uint8_t pixel = arg_pixel->pixel;
   \   00000006   0x78AE             LDRB     R6,[R5, #+2]
    115            do
    116            {
    117              if ( pixel & 128 )
   \                     ??u8g_pb16h2_Set8PixelStd_1: (+1)
   \   00000008   0x0630             LSLS     R0,R6,#+24
   \   0000000A   0xD504             BPL.N    ??u8g_pb16h2_Set8PixelStd_2
    118              {
    119                u8g_pb16h2_SetPixel(b, arg_pixel, 0);
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       u8g_pb16h2_SetPixel
    120              }
    121              switch( arg_pixel->dir )
   \                     ??u8g_pb16h2_Set8PixelStd_2: (+1)
   \   00000016   0x78E8             LDRB     R0,[R5, #+3]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD812             BHI.N    ??u8g_pb16h2_Set8PixelStd_3
   \   0000001C   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pb16h2_Set8PixelStd_0:
   \   00000020   0x02 0x06          DC8      0x2,0x6,0xA,0xE
   \              0x0A 0x0E    
    122              {
    123                case 0: arg_pixel->x++; break;
   \                     ??u8g_pb16h2_Set8PixelStd_4: (+1)
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x7028             STRB     R0,[R5, #+0]
   \   0000002A   0xE00A             B.N      ??u8g_pb16h2_Set8PixelStd_3
    124                case 1: arg_pixel->y++; break;
   \                     ??u8g_pb16h2_Set8PixelStd_5: (+1)
   \   0000002C   0x7868             LDRB     R0,[R5, #+1]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x7068             STRB     R0,[R5, #+1]
   \   00000032   0xE006             B.N      ??u8g_pb16h2_Set8PixelStd_3
    125                case 2: arg_pixel->x--; break;
   \                     ??u8g_pb16h2_Set8PixelStd_6: (+1)
   \   00000034   0x7828             LDRB     R0,[R5, #+0]
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \   00000038   0x7028             STRB     R0,[R5, #+0]
   \   0000003A   0xE002             B.N      ??u8g_pb16h2_Set8PixelStd_3
    126                case 3: arg_pixel->y--; break;
   \                     ??u8g_pb16h2_Set8PixelStd_7: (+1)
   \   0000003C   0x7868             LDRB     R0,[R5, #+1]
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x7068             STRB     R0,[R5, #+1]
    127              }
    128              pixel <<= 1;
   \                     ??u8g_pb16h2_Set8PixelStd_3: (+1)
   \   00000042   0x0076             LSLS     R6,R6,#+1
    129            } while( pixel != 0  );
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1DD             BNE.N    ??u8g_pb16h2_Set8PixelStd_1
    130          }
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    131          

   \                                 In section .text, align 4, keep-with-next
    132          void u8g_pb16h2_Or4PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
    133          {
   \                     u8g_pb16h2_Or4PixelStd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    134            register uint8_t pixel = arg_pixel->pixel;
   \   00000006   0x78AE             LDRB     R6,[R5, #+2]
    135            do
    136            {
    137              arg_pixel->color = pixel & 0x0c0;
   \                     ??u8g_pb16h2_Or4PixelStd_1: (+1)
   \   00000008   0xF006 0x00C0      AND      R0,R6,#0xC0
   \   0000000C   0x7128             STRB     R0,[R5, #+4]
    138              arg_pixel->color >>= 6;
   \   0000000E   0x0980             LSRS     R0,R0,#+6
   \   00000010   0x7128             STRB     R0,[R5, #+4]
    139              u8g_pb16h2_SetPixel(b, arg_pixel, 1);
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       u8g_pb16h2_SetPixel
    140              switch( arg_pixel->dir )
   \   0000001C   0x78E8             LDRB     R0,[R5, #+3]
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD812             BHI.N    ??u8g_pb16h2_Or4PixelStd_2
   \   00000022   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??u8g_pb16h2_Or4PixelStd_0:
   \   00000026   0x02 0x06          DC8      0x2,0x6,0xA,0xE
   \              0x0A 0x0E    
    141              {
    142                case 0: arg_pixel->x++; break;
   \                     ??u8g_pb16h2_Or4PixelStd_3: (+1)
   \   0000002A   0x7828             LDRB     R0,[R5, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x7028             STRB     R0,[R5, #+0]
   \   00000030   0xE00A             B.N      ??u8g_pb16h2_Or4PixelStd_2
    143                case 1: arg_pixel->y++; break;
   \                     ??u8g_pb16h2_Or4PixelStd_4: (+1)
   \   00000032   0x7868             LDRB     R0,[R5, #+1]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x7068             STRB     R0,[R5, #+1]
   \   00000038   0xE006             B.N      ??u8g_pb16h2_Or4PixelStd_2
    144                case 2: arg_pixel->x--; break;
   \                     ??u8g_pb16h2_Or4PixelStd_5: (+1)
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x7028             STRB     R0,[R5, #+0]
   \   00000040   0xE002             B.N      ??u8g_pb16h2_Or4PixelStd_2
    145                case 3: arg_pixel->y--; break;
   \                     ??u8g_pb16h2_Or4PixelStd_6: (+1)
   \   00000042   0x7868             LDRB     R0,[R5, #+1]
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0x7068             STRB     R0,[R5, #+1]
    146              }
    147              pixel <<= 2;
   \                     ??u8g_pb16h2_Or4PixelStd_2: (+1)
   \   00000048   0x00B6             LSLS     R6,R6,#+2
    148            } while( pixel != 0  );
   \   0000004A   0x4630             MOV      R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1DA             BNE.N    ??u8g_pb16h2_Or4PixelStd_1
    149          }
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    150          
    151          

   \                                 In section .text, align 2, keep-with-next
    152          uint8_t u8g_dev_pb16h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    153          {
   \                     u8g_dev_pb16h2_base_fn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x461C             MOV      R4,R3
    154            u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000004   0x684D             LDR      R5,[R1, #+4]
    155            switch(msg)
   \   00000006   0x2A14             CMP      R2,#+20
   \   00000008   0xD02F             BEQ.N    ??u8g_dev_pb16h2_base_fn_0
   \   0000000A   0x2A15             CMP      R2,#+21
   \   0000000C   0xD034             BEQ.N    ??u8g_dev_pb16h2_base_fn_1
   \   0000000E   0x2A17             CMP      R2,#+23
   \   00000010   0xD03D             BEQ.N    ??u8g_dev_pb16h2_base_fn_2
   \   00000012   0x2A2C             CMP      R2,#+44
   \   00000014   0xD023             BEQ.N    ??u8g_dev_pb16h2_base_fn_3
   \   00000016   0x2A2D             CMP      R2,#+45
   \   00000018   0xD01C             BEQ.N    ??u8g_dev_pb16h2_base_fn_4
   \   0000001A   0x2A32             CMP      R2,#+50
   \   0000001C   0xD014             BEQ.N    ??u8g_dev_pb16h2_base_fn_5
   \   0000001E   0x2A3B             CMP      R2,#+59
   \   00000020   0xD006             BEQ.N    ??u8g_dev_pb16h2_base_fn_6
   \   00000022   0x2A46             CMP      R2,#+70
   \   00000024   0xD038             BEQ.N    ??u8g_dev_pb16h2_base_fn_7
   \   00000026   0x2A47             CMP      R2,#+71
   \   00000028   0xD039             BEQ.N    ??u8g_dev_pb16h2_base_fn_8
   \   0000002A   0x2A48             CMP      R2,#+72
   \   0000002C   0xD03A             BEQ.N    ??u8g_dev_pb16h2_base_fn_9
   \   0000002E   0xE009             B.N      ??u8g_dev_pb16h2_base_fn_10
    156            {
    157              case U8G_DEV_MSG_SET_8PIXEL:
    158                if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
   \                     ??u8g_dev_pb16h2_base_fn_6: (+1)
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       u8g_pb_Is8PixelVisible
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD003             BEQ.N    ??u8g_dev_pb16h2_base_fn_10
    159                {
    160                  u8g_pb16h2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       u8g_pb16h2_Set8PixelStd
    161                }
    162                break;
    163              case U8G_DEV_MSG_SET_PIXEL:
    164                u8g_pb16h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg, 0);
    165                break;
    166              case U8G_DEV_MSG_SET_4TPIXEL:
    167                u8g_pb16h2_Or4PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
    168                break;
    169              case U8G_DEV_MSG_SET_TPIXEL:
    170                u8g_pb16h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg, 1);
    171                break;
    172              case U8G_DEV_MSG_INIT:
    173                break;
    174              case U8G_DEV_MSG_STOP:
    175                break;
    176              case U8G_DEV_MSG_PAGE_FIRST:
    177                u8g_page_First(&(pb->p));
    178                u8g_pb16h2_Clear(pb);
    179                break;
    180              case U8G_DEV_MSG_PAGE_NEXT:
    181                if ( u8g_page_Next(&(pb->p)) == 0 )
    182                  return 0;
    183                u8g_pb16h2_Clear(pb);
    184                break;
    185          #ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    186              case U8G_DEV_MSG_IS_BBX_INTERSECTION:
    187                return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
    188          #endif
    189              case U8G_DEV_MSG_GET_PAGE_BOX:
    190                u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    191                break;
    192              case U8G_DEV_MSG_GET_WIDTH:
    193                *((u8g_uint_t *)arg) = pb->width;
    194                break;
    195              case U8G_DEV_MSG_GET_HEIGHT:
    196                *((u8g_uint_t *)arg) = pb->p.total_height;
    197                break;
    198              case U8G_DEV_MSG_SET_COLOR_ENTRY:
    199                break;
    200              case U8G_DEV_MSG_SET_XY_CB:
    201                break;
    202              case U8G_DEV_MSG_GET_MODE:
    203                return U8G_MODE_GRAY2BIT;
    204            }
    205            return 1;
   \                     ??u8g_dev_pb16h2_base_fn_10: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??u8g_dev_pb16h2_base_fn_5: (+1)
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x4621             MOV      R1,R4
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       u8g_pb16h2_SetPixel
   \   00000052   0xE7F7             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_4: (+1)
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       u8g_pb16h2_Or4PixelStd
   \   0000005C   0xE7F2             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_3: (+1)
   \   0000005E   0x2201             MOVS     R2,#+1
   \   00000060   0x4621             MOV      R1,R4
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       u8g_pb16h2_SetPixel
   \   00000068   0xE7EC             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_0: (+1)
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       u8g_page_First
   \   00000070   0x4628             MOV      R0,R5
   \   00000072   0x.... 0x....      BL       u8g_pb16h2_Clear
   \   00000076   0xE7E5             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_1: (+1)
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x.... 0x....      BL       u8g_page_Next
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD101             BNE.N    ??u8g_dev_pb16h2_base_fn_11
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??u8g_dev_pb16h2_base_fn_11: (+1)
   \   00000086   0x4628             MOV      R0,R5
   \   00000088   0x.... 0x....      BL       u8g_pb16h2_Clear
   \   0000008C   0xE7DA             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_2: (+1)
   \   0000008E   0x4621             MOV      R1,R4
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       u8g_pb_GetPageBox
   \   00000096   0xE7D5             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_7: (+1)
   \   00000098   0x7968             LDRB     R0,[R5, #+5]
   \   0000009A   0x7020             STRB     R0,[R4, #+0]
   \   0000009C   0xE7D2             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_8: (+1)
   \   0000009E   0x7868             LDRB     R0,[R5, #+1]
   \   000000A0   0x7020             STRB     R0,[R4, #+0]
   \   000000A2   0xE7CF             B.N      ??u8g_dev_pb16h2_base_fn_10
   \                     ??u8g_dev_pb16h2_base_fn_9: (+1)
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0xBD32             POP      {R1,R4,R5,PC}
    206          }
    207           
    208            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_dev_pb16h2_base_fn
        16   -> u8g_page_First
        16   -> u8g_page_Next
        16   -> u8g_pb16h2_Clear
        16   -> u8g_pb16h2_Or4PixelStd
        16   -> u8g_pb16h2_Set8PixelStd
        16   -> u8g_pb16h2_SetPixel
        16   -> u8g_pb_GetPageBox
        16   -> u8g_pb_Is8PixelVisible
       0   u8g_pb16h2_Clear
       0   u8g_pb16h2_Init
         0   -> u8g_pb16h2_Clear
      16   u8g_pb16h2_Or4PixelStd
        16   -> u8g_pb16h2_SetPixel
      16   u8g_pb16h2_Set8PixelStd
        16   -> u8g_pb16h2_SetPixel
      16   u8g_pb16h2_SetPixel
        16   -> u8g_pb16h2_set_pixel
      12   u8g_pb16h2_set_pixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     168  u8g_dev_pb16h2_base_fn
      20  u8g_pb16h2_Clear
       6  u8g_pb16h2_Init
      84  u8g_pb16h2_Or4PixelStd
      78  u8g_pb16h2_Set8PixelStd
      38  u8g_pb16h2_SetPixel
      64  u8g_pb16h2_set_pixel

 
 458 bytes in section .text
 
 458 bytes of CODE memory

Errors: none
Warnings: none
