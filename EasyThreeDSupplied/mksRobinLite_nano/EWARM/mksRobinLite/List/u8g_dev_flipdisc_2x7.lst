###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:06
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_flipdisc_2x7.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4203.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_flipdisc_2x7.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_flipdisc_2x7.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_flipdisc_2x7.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_flipdisc_2x7.c
      1          /*
      2          
      3            u8g_dev_flipdisc.c
      4            
      5            1-Bit (BW) Driver for flip disc matrix
      6            2x 7 pixel height
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2011, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37          */
     38          
     39          #include "u8g.h"
     40          
     41          #define WIDTH 28
     42          #define HEIGHT 14
     43          #define PAGE_HEIGHT 14
     44          
     45          /*
     46            Write data to the flip disc matrix.
     47            This procedure must be implemented by the user.
     48            Arguments:
     49              id:	Id for the matrix. Currently always 0.
     50              page: 	A page has a height of 14 pixel. For a matrix with HEIGHT == 14 this will be always 0
     51              width: 	The width of the flip disc matrix. Always equal to WIDTH
     52              row1: 	first data line (7 pixel per byte)
     53              row2: 	first data line (7 pixel per byte)
     54          */
     55          void writeFlipDiscMatrix(uint8_t id, uint8_t page, uint8_t width, uint8_t *row1, uint8_t *row2);
     56          
     57          
     58          

   \                                 In section .bss, align 4
     59          void (*u8g_write_flip_disc_matrix)(uint8_t id, uint8_t page, uint8_t width, uint8_t *row1, uint8_t *row2);
   \                     u8g_write_flip_disc_matrix:
   \   00000000                      DS8 4
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void u8g_SetFlipDiscCallback(u8g_t *u8g, void (*cb)(uint8_t id, uint8_t page, uint8_t width, uint8_t *row1, uint8_t *row2))
     62          {
     63            u8g_write_flip_disc_matrix = cb;
   \                     u8g_SetFlipDiscCallback: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1
   \   00000002   0x6001             STR      R1,[R0, #+0]
     64          }
   \   00000004   0x4770             BX       LR               ;; return
     65          

   \                                 In section .text, align 2, keep-with-next
     66          uint8_t u8g_dev_flipdisc_2x7_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     67          {
   \                     u8g_dev_flipdisc_2x7_bw_fn: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
     68            switch(msg)
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0x280F             CMP      R0,#+15
   \   0000000E   0xD017             BEQ.N    ??u8g_dev_flipdisc_2x7_bw_fn_0
   \   00000010   0x2815             CMP      R0,#+21
   \   00000012   0xD10C             BNE.N    ??u8g_dev_flipdisc_2x7_bw_fn_1
     69            {
     70              case U8G_DEV_MSG_INIT:
     71                break;
     72              case U8G_DEV_MSG_STOP:
     73                break;
     74              case U8G_DEV_MSG_PAGE_NEXT:
     75                {
     76                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \   00000014   0x6868             LDR      R0,[R5, #+4]
     77                  
     78          	/* current page: pb->p.page */
     79          	/* ptr to the buffer: pb->buf */
     80          	
     81          	(*u8g_write_flip_disc_matrix)(0, pb->p.page, WIDTH, pb->buf, (uint8_t *)(pb->buf)+WIDTH);
   \   00000016   0x6883             LDR      R3,[R0, #+8]
   \   00000018   0xF103 0x011C      ADD      R1,R3,#+28
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x221C             MOVS     R2,#+28
   \   00000020   0x7901             LDRB     R1,[R0, #+4]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      LDR.W    R12,??DataTable1
   \   00000028   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   0000002C   0x47E0             BLX      R12
     82                }
     83                break;
     84              case U8G_DEV_MSG_CONTRAST:
     85                return 1;
     86            }
     87            return u8g_dev_pb14v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_flipdisc_2x7_bw_fn_1: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000003C   0x.... 0x....      B.W      u8g_dev_pb14v1_base_fn
   \                     ??u8g_dev_flipdisc_2x7_bw_fn_0: (+1)
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xBDF2             POP      {R1,R4-R7,PC}
     88          }
     89          

   \                                 In section .bss, align 4
     90          uint8_t u8g_dev_flipdisc_2x7_bw_buf[WIDTH*2] U8G_NOCOMMON ; 
   \                     u8g_dev_flipdisc_2x7_bw_buf:
   \   00000000                      DS8 56

   \                                 In section .data, align 4
     91          u8g_pb_t u8g_dev_flipdisc_2x7_bw_pb = { {16, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_flipdisc_2x7_bw_buf}; 
   \                     u8g_dev_flipdisc_2x7_bw_pb:
   \   00000000   0x10 0x0E          DC8 16, 14, 0, 0, 0, 28, 0, 0
   \              0x00 0x00    
   \              0x00 0x1C    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_flipdisc_2x7_bw_buf

   \                                 In section .data, align 4
     92          u8g_dev_t u8g_dev_flipdisc_2x7 = { u8g_dev_flipdisc_2x7_bw_fn, &u8g_dev_flipdisc_2x7_bw_pb, u8g_com_null_fn };
   \                     u8g_dev_flipdisc_2x7:
   \   00000000   0x........         DC32 u8g_dev_flipdisc_2x7_bw_fn, u8g_dev_flipdisc_2x7_bw_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     u8g_write_flip_disc_matrix

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_SetFlipDiscCallback
      24   u8g_dev_flipdisc_2x7_bw_fn
        24   -- Indirect call
         0   -> u8g_dev_pb14v1_base_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       6  u8g_SetFlipDiscCallback
      12  u8g_dev_flipdisc_2x7
      56  u8g_dev_flipdisc_2x7_bw_buf
      68  u8g_dev_flipdisc_2x7_bw_fn
      12  u8g_dev_flipdisc_2x7_bw_pb
       4  u8g_write_flip_disc_matrix

 
 60 bytes in section .bss
 24 bytes in section .data
 78 bytes in section .text
 
 78 bytes of CODE memory
 84 bytes of DATA memory

Errors: none
Warnings: none
