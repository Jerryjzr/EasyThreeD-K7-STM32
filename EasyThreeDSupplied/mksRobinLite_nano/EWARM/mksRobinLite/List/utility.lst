###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/May/2021  14:21:37
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\utility.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EW544.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\utility.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\utility.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\utility.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\utility.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "Marlin.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     24          #include "utility.h"
     25          #include "temperature.h"

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\temperature.h",401  Warning[Pa093]: 
          implicit conversion from floating point to integer

        target_temperature_bed = celsius;
                               ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\temperature.h",408  Warning[Pa093]: 
          implicit conversion from floating point to integer
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void safe_delay(millis_t ms) {
   \                     _Z10safe_delaym: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0xE005             B.N      ??safe_delay_0
     28            while (ms > 50) {
     29              ms -= 50;
   \                     ??safe_delay_1: (+1)
   \        0x6   0x3C32             SUBS     R4,R4,#+50
     30              delay(50);
   \        0x8   0x2032             MOVS     R0,#+50
   \        0xA   0x.... 0x....      BL       HAL_Delay
     31              thermalManager.manage_heater();
   \        0xE   0x.... 0x....      BL       _ZN11Temperature13manage_heaterEv
     32            }
   \                     ??safe_delay_0: (+1)
   \       0x12   0x2C33             CMP      R4,#+51
   \       0x14   0xD2F7             BCS.N    ??safe_delay_1
     33            delay(ms);
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x.... 0x....      BL       HAL_Delay
     34            thermalManager.manage_heater(); // This keeps us safe if too many small safe_delay() calls are made
   \       0x1C   0xE8BD 0x4010      POP      {R4,LR}
   \       0x20   0x.... 0x....      B.W      _ZN11Temperature13manage_heaterEv
     35          }
     36          
     37          #if ENABLED(ULTRA_LCD)
     38          

   \                                 In section .bss, align 4
     39            char conv[8] = { 0 };
   \                     conv:
   \        0x0                      DS8 8
     40          
     41            #define DIGIT(n) ('0' + (n))
     42            #define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
     43            #define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
     44            #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
     45          
     46            // Convert unsigned int to string with 12 format

   \                                 In section .text, align 2, keep-with-next
     47            char* itostr2(const uint8_t& xx) {
   \                     _Z7itostr2RKh: (+1)
   \        0x0   0xB410             PUSH     {R4}
     48              conv[5] = DIGIMOD(xx, 10);
   \        0x2   0x7801             LDRB     R1,[R0, #+0]
   \        0x4   0x220A             MOVS     R2,#+10
   \        0x6   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \        0xA   0x.... 0x....      LDR.W    R2,??DataTable13
   \        0xE   0x230A             MOVS     R3,#+10
   \       0x10   0x461C             MOV      R4,R3
   \       0x12   0xFB91 0xF4F4      SDIV     R4,R1,R4
   \       0x16   0xFB03 0x1114      MLS      R1,R3,R4,R1
   \       0x1A   0x3130             ADDS     R1,R1,#+48
   \       0x1C   0x7151             STRB     R1,[R2, #+5]
     49              conv[6] = DIGIMOD(xx, 1);
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0x4619             MOV      R1,R3
   \       0x22   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0x26   0xFB03 0x0311      MLS      R3,R3,R1,R0
   \       0x2A   0x3330             ADDS     R3,R3,#+48
   \       0x2C   0x7193             STRB     R3,[R2, #+6]
     50              return &conv[5];
   \       0x2E   0x1D50             ADDS     R0,R2,#+5
   \       0x30   0xBC10             POP      {R4}
   \       0x32   0x4770             BX       LR               ;; return
     51            }
     52          
     53            // Convert signed int to rj string with 123 or -12 format

   \                                 In section .text, align 2, keep-with-next
     54            char* itostr3(const int& x) {
   \                     _Z7itostr3RKi: (+1)
   \        0x0   0xB410             PUSH     {R4}
     55              int xx = x;
   \        0x2   0x6800             LDR      R0,[R0, #+0]
     56              conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
   \        0x4   0x210A             MOVS     R1,#+10
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD40D             BMI.N    ??itostr3_0
   \        0xA   0x2864             CMP      R0,#+100
   \        0xC   0xDB09             BLT.N    ??itostr3_1
   \        0xE   0x2264             MOVS     R2,#+100
   \       0x10   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \       0x14   0x460A             MOV      R2,R1
   \       0x16   0xFB93 0xF2F2      SDIV     R2,R3,R2
   \       0x1A   0xFB01 0x3212      MLS      R2,R1,R2,R3
   \       0x1E   0x3230             ADDS     R2,R2,#+48
   \       0x20   0xE003             B.N      ??itostr3_2
   \                     ??itostr3_1: (+1)
   \       0x22   0x2220             MOVS     R2,#+32
   \       0x24   0xE001             B.N      ??itostr3_2
   \                     ??itostr3_0: (+1)
   \       0x26   0x4240             RSBS     R0,R0,#+0
   \       0x28   0x222D             MOVS     R2,#+45
   \                     ??itostr3_2: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R3,??DataTable13
   \       0x2E   0x711A             STRB     R2,[R3, #+4]
     57              conv[5] = RJDIGIT(xx, 10);
   \       0x30   0x460A             MOV      R2,R1
   \       0x32   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \       0x36   0x280A             CMP      R0,#+10
   \       0x38   0xDB06             BLT.N    ??itostr3_3
   \       0x3A   0x460C             MOV      R4,R1
   \       0x3C   0xFB92 0xF4F4      SDIV     R4,R2,R4
   \       0x40   0xFB01 0x2414      MLS      R4,R1,R4,R2
   \       0x44   0x3430             ADDS     R4,R4,#+48
   \       0x46   0xE000             B.N      ??itostr3_4
   \                     ??itostr3_3: (+1)
   \       0x48   0x2420             MOVS     R4,#+32
   \                     ??itostr3_4: (+1)
   \       0x4A   0x715C             STRB     R4,[R3, #+5]
     58              conv[6] = DIGIMOD(xx, 1);
   \       0x4C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x50   0x3030             ADDS     R0,R0,#+48
   \       0x52   0x7198             STRB     R0,[R3, #+6]
     59              return &conv[4];
   \       0x54   0x1D18             ADDS     R0,R3,#+4
   \       0x56   0xBC10             POP      {R4}
   \       0x58   0x4770             BX       LR               ;; return
     60            }
     61          
     62            // Convert unsigned int to lj string with 123 format

   \                                 In section .text, align 2, keep-with-next
     63            char* itostr3left(const int& xx) {
   \                     _Z11itostr3leftRKi: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
     64              char *str = &conv[6];
   \        0x2   0x.... 0x....      LDR.W    R2,??DataTable13
   \        0x6   0x1D91             ADDS     R1,R2,#+6
     65              *str = DIGIMOD(xx, 1);
   \        0x8   0x6804             LDR      R4,[R0, #+0]
   \        0xA   0x230A             MOVS     R3,#+10
   \        0xC   0x461D             MOV      R5,R3
   \        0xE   0xFB94 0xF5F5      SDIV     R5,R4,R5
   \       0x12   0xFB03 0x4415      MLS      R4,R3,R5,R4
   \       0x16   0x3430             ADDS     R4,R4,#+48
   \       0x18   0x7194             STRB     R4,[R2, #+6]
     66              if (xx >= 10) {
   \       0x1A   0x6804             LDR      R4,[R0, #+0]
   \       0x1C   0x2C0A             CMP      R4,#+10
   \       0x1E   0xDB17             BLT.N    ??itostr3left_0
     67                *(--str) = DIGIMOD(xx, 10);
   \       0x20   0x1D51             ADDS     R1,R2,#+5
   \       0x22   0x461D             MOV      R5,R3
   \       0x24   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \       0x28   0xFB94 0xF5F5      SDIV     R5,R4,R5
   \       0x2C   0xFB03 0x4415      MLS      R4,R3,R5,R4
   \       0x30   0x3430             ADDS     R4,R4,#+48
   \       0x32   0x7154             STRB     R4,[R2, #+5]
     68                if (xx >= 100)
   \       0x34   0x6800             LDR      R0,[R0, #+0]
   \       0x36   0x2864             CMP      R0,#+100
   \       0x38   0xDB0A             BLT.N    ??itostr3left_0
     69                  *(--str) = DIGIMOD(xx, 100);
   \       0x3A   0x1D11             ADDS     R1,R2,#+4
   \       0x3C   0x2464             MOVS     R4,#+100
   \       0x3E   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \       0x42   0x461C             MOV      R4,R3
   \       0x44   0xFB90 0xF4F4      SDIV     R4,R0,R4
   \       0x48   0xFB03 0x0314      MLS      R3,R3,R4,R0
   \       0x4C   0x3330             ADDS     R3,R3,#+48
   \       0x4E   0x7113             STRB     R3,[R2, #+4]
     70              }
     71              return str;
   \                     ??itostr3left_0: (+1)
   \       0x50   0x4608             MOV      R0,R1
   \       0x52   0xBC30             POP      {R4,R5}
   \       0x54   0x4770             BX       LR               ;; return
     72            }
     73          
     74            // Convert signed int to rj string with 1234, _123, -123, _-12, or __-1 format

   \                                 In section .text, align 2, keep-with-next
     75            char *itostr4sign(const int& x) {
   \                     _Z11itostr4signRKi: (+1)
   \        0x0   0xB410             PUSH     {R4}
     76              const bool neg = x < 0;
   \        0x2   0x6803             LDR      R3,[R0, #+0]
   \        0x4   0x0FD8             LSRS     R0,R3,#+31
     77              const int xx = neg ? -x : x;
   \        0x6   0xD001             BEQ.N    ??itostr4sign_0
   \        0x8   0x4259             RSBS     R1,R3,#+0
   \        0xA   0xE000             B.N      ??itostr4sign_1
   \                     ??itostr4sign_0: (+1)
   \        0xC   0x4619             MOV      R1,R3
     78              if (x >= 1000) {
   \                     ??itostr4sign_1: (+1)
   \        0xE   0x.... 0x....      LDR.W    R2,??DataTable13
   \       0x12   0xF5B3 0x7F7A      CMP      R3,#+1000
   \       0x16   0xDB20             BLT.N    ??itostr4sign_2
     79                conv[3] = DIGIMOD(xx, 1000);
   \       0x18   0xF44F 0x707A      MOV      R0,#+1000
   \       0x1C   0xFB91 0xF3F0      SDIV     R3,R1,R0
   \       0x20   0x200A             MOVS     R0,#+10
   \       0x22   0x4604             MOV      R4,R0
   \       0x24   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x28   0xFB00 0x3314      MLS      R3,R0,R4,R3
   \       0x2C   0x3330             ADDS     R3,R3,#+48
   \       0x2E   0x70D3             STRB     R3,[R2, #+3]
     80                conv[4] = DIGIMOD(xx, 100);
   \       0x30   0x2364             MOVS     R3,#+100
   \       0x32   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x36   0x4604             MOV      R4,R0
   \       0x38   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x3C   0xFB00 0x3314      MLS      R3,R0,R4,R3
   \       0x40   0x3330             ADDS     R3,R3,#+48
   \       0x42   0x7113             STRB     R3,[R2, #+4]
     81                conv[5] = DIGIMOD(xx, 10);
   \       0x44   0x4603             MOV      R3,R0
   \       0x46   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x4A   0x4604             MOV      R4,R0
   \       0x4C   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x50   0xFB00 0x3014      MLS      R0,R0,R4,R3
   \       0x54   0x3030             ADDS     R0,R0,#+48
   \       0x56   0x7150             STRB     R0,[R2, #+5]
   \       0x58   0xE03B             B.N      ??itostr4sign_3
     82              }
     83              else {
     84                if (xx >= 100) {
   \                     ??itostr4sign_2: (+1)
   \       0x5A   0x2964             CMP      R1,#+100
   \       0x5C   0xDB1B             BLT.N    ??itostr4sign_4
     85                  conv[3] = neg ? '-' : ' ';
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD001             BEQ.N    ??itostr4sign_5
   \       0x62   0x202D             MOVS     R0,#+45
   \       0x64   0xE000             B.N      ??itostr4sign_6
   \                     ??itostr4sign_5: (+1)
   \       0x66   0x2020             MOVS     R0,#+32
   \                     ??itostr4sign_6: (+1)
   \       0x68   0x70D0             STRB     R0,[R2, #+3]
     86                  conv[4] = DIGIMOD(xx, 100);
   \       0x6A   0x2064             MOVS     R0,#+100
   \       0x6C   0xFB91 0xF3F0      SDIV     R3,R1,R0
   \       0x70   0x200A             MOVS     R0,#+10
   \       0x72   0x4604             MOV      R4,R0
   \       0x74   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x78   0xFB00 0x3314      MLS      R3,R0,R4,R3
   \       0x7C   0x3330             ADDS     R3,R3,#+48
   \       0x7E   0x7113             STRB     R3,[R2, #+4]
     87                  conv[5] = DIGIMOD(xx, 10);
   \       0x80   0x4603             MOV      R3,R0
   \       0x82   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x86   0x4604             MOV      R4,R0
   \       0x88   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x8C   0xFB00 0x3014      MLS      R0,R0,R4,R3
   \       0x90   0x3030             ADDS     R0,R0,#+48
   \       0x92   0x7150             STRB     R0,[R2, #+5]
   \       0x94   0xE01D             B.N      ??itostr4sign_3
     88                }
     89                else {
     90                  conv[3] = ' ';
   \                     ??itostr4sign_4: (+1)
   \       0x96   0x2320             MOVS     R3,#+32
   \       0x98   0x70D3             STRB     R3,[R2, #+3]
     91                  conv[4] = ' ';
   \       0x9A   0x7113             STRB     R3,[R2, #+4]
     92                  if (xx >= 10) {
   \       0x9C   0x290A             CMP      R1,#+10
   \       0x9E   0xDB12             BLT.N    ??itostr4sign_7
     93                    conv[4] = neg ? '-' : ' ';
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xD001             BEQ.N    ??itostr4sign_8
   \       0xA4   0x202D             MOVS     R0,#+45
   \       0xA6   0xE000             B.N      ??itostr4sign_9
   \                     ??itostr4sign_8: (+1)
   \       0xA8   0x4618             MOV      R0,R3
   \                     ??itostr4sign_9: (+1)
   \       0xAA   0x7110             STRB     R0,[R2, #+4]
     94                    conv[5] = DIGIMOD(xx, 10);
   \       0xAC   0x200A             MOVS     R0,#+10
   \       0xAE   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \       0xB2   0x230A             MOVS     R3,#+10
   \       0xB4   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0xB8   0xEB03 0x0483      ADD      R4,R3,R3, LSL #+2
   \       0xBC   0xEBA0 0x0044      SUB      R0,R0,R4, LSL #+1
   \       0xC0   0x3030             ADDS     R0,R0,#+48
   \       0xC2   0x7150             STRB     R0,[R2, #+5]
   \       0xC4   0xE005             B.N      ??itostr4sign_3
     95                  }
     96                  else {
     97                    conv[5] = neg ? '-' : ' ';
   \                     ??itostr4sign_7: (+1)
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD001             BEQ.N    ??itostr4sign_10
   \       0xCA   0x202D             MOVS     R0,#+45
   \       0xCC   0xE000             B.N      ??itostr4sign_11
   \                     ??itostr4sign_10: (+1)
   \       0xCE   0x4618             MOV      R0,R3
   \                     ??itostr4sign_11: (+1)
   \       0xD0   0x7150             STRB     R0,[R2, #+5]
     98                  }
     99                }
    100              }
    101              conv[6] = DIGIMOD(xx, 1);
   \                     ??itostr4sign_3: (+1)
   \       0xD2   0x200A             MOVS     R0,#+10
   \       0xD4   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \       0xD8   0xEB00 0x0380      ADD      R3,R0,R0, LSL #+2
   \       0xDC   0xEBA1 0x0143      SUB      R1,R1,R3, LSL #+1
   \       0xE0   0x3130             ADDS     R1,R1,#+48
   \       0xE2   0x7191             STRB     R1,[R2, #+6]
    102              return &conv[3];
   \       0xE4   0x1CD0             ADDS     R0,R2,#+3
   \       0xE6   0xBC10             POP      {R4}
   \       0xE8   0x4770             BX       LR               ;; return
    103            }
    104          
    105            // Convert unsigned float to string with 1.23 format

   \                                 In section .text, align 2, keep-with-next
    106            char* ftostr12ns(const float& x) {
   \                     _Z10ftostr12nsRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    107              const long xx = (x < 0 ? -x : x) * 100;
                                     ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x.... 0x....      BL       __aeabi_cfcmple
   \        0xA   0xD201             BCS.N    ??ftostr12ns_0
   \        0xC   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \                     ??ftostr12ns_0: (+1)
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable13_1  ;; 0x42c80000
   \       0x14   0x.... 0x....      BL       __aeabi_fmul
   \       0x18   0x.... 0x....      BL       __aeabi_f2iz
    108              conv[3] = DIGIMOD(xx, 100);
   \       0x1C   0x2164             MOVS     R1,#+100
   \       0x1E   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0x22   0x.... 0x....      LDR.W    R2,??DataTable13
   \       0x26   0x230A             MOVS     R3,#+10
   \       0x28   0x461C             MOV      R4,R3
   \       0x2A   0xFB91 0xF4F4      SDIV     R4,R1,R4
   \       0x2E   0xFB03 0x1114      MLS      R1,R3,R4,R1
   \       0x32   0x3130             ADDS     R1,R1,#+48
   \       0x34   0x70D1             STRB     R1,[R2, #+3]
    109              conv[4] = '.';
   \       0x36   0x212E             MOVS     R1,#+46
   \       0x38   0x7111             STRB     R1,[R2, #+4]
    110              conv[5] = DIGIMOD(xx, 10);
   \       0x3A   0x4619             MOV      R1,R3
   \       0x3C   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0x40   0x461C             MOV      R4,R3
   \       0x42   0xFB91 0xF4F4      SDIV     R4,R1,R4
   \       0x46   0xFB03 0x1414      MLS      R4,R3,R4,R1
   \       0x4A   0x3430             ADDS     R4,R4,#+48
   \       0x4C   0x7154             STRB     R4,[R2, #+5]
    111              conv[6] = DIGIMOD(xx, 1);
   \       0x4E   0xFB03 0x0011      MLS      R0,R3,R1,R0
   \       0x52   0x3030             ADDS     R0,R0,#+48
   \       0x54   0x7190             STRB     R0,[R2, #+6]
    112              return &conv[3];
   \       0x56   0x1CD0             ADDS     R0,R2,#+3
   \       0x58   0xBD10             POP      {R4,PC}          ;; return
    113            }
    114          
    115            // Convert signed float to fixed-length string with 023.45 / -23.45 format

   \                                 In section .text, align 2, keep-with-next
    116            char *ftostr32(const float& x) {
   \                     _Z8ftostr32RKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    117              long xx = x * 100;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x42c80000
   \        0x8   0x.... 0x....      BL       __aeabi_fmul
   \        0xC   0x.... 0x....      BL       __aeabi_f2iz
    118              conv[1] = MINUSOR(xx, DIGIMOD(xx, 10000));
   \       0x10   0x210A             MOVS     R1,#+10
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD40A             BMI.N    ??ftostr32_0
   \       0x16   0xF242 0x7210      MOVW     R2,#+10000
   \       0x1A   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \       0x1E   0x460B             MOV      R3,R1
   \       0x20   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \       0x24   0xFB01 0x2313      MLS      R3,R1,R3,R2
   \       0x28   0x3330             ADDS     R3,R3,#+48
   \       0x2A   0xE001             B.N      ??ftostr32_1
   \                     ??ftostr32_0: (+1)
   \       0x2C   0x4240             RSBS     R0,R0,#+0
   \       0x2E   0x232D             MOVS     R3,#+45
   \                     ??ftostr32_1: (+1)
   \       0x30   0x.... 0x....      LDR.W    R2,??DataTable13
   \       0x34   0x7053             STRB     R3,[R2, #+1]
    119              conv[2] = DIGIMOD(xx, 1000);
   \       0x36   0xF44F 0x737A      MOV      R3,#+1000
   \       0x3A   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x3E   0x460C             MOV      R4,R1
   \       0x40   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x44   0xFB01 0x3314      MLS      R3,R1,R4,R3
   \       0x48   0x3330             ADDS     R3,R3,#+48
   \       0x4A   0x7093             STRB     R3,[R2, #+2]
    120              conv[3] = DIGIMOD(xx, 100);
   \       0x4C   0x2364             MOVS     R3,#+100
   \       0x4E   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x52   0x460C             MOV      R4,R1
   \       0x54   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x58   0xFB01 0x3314      MLS      R3,R1,R4,R3
   \       0x5C   0x3330             ADDS     R3,R3,#+48
   \       0x5E   0x70D3             STRB     R3,[R2, #+3]
    121              conv[4] = '.';
   \       0x60   0x232E             MOVS     R3,#+46
   \       0x62   0x7113             STRB     R3,[R2, #+4]
    122              conv[5] = DIGIMOD(xx, 10);
   \       0x64   0x460B             MOV      R3,R1
   \       0x66   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x6A   0x460C             MOV      R4,R1
   \       0x6C   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x70   0xFB01 0x3414      MLS      R4,R1,R4,R3
   \       0x74   0x3430             ADDS     R4,R4,#+48
   \       0x76   0x7154             STRB     R4,[R2, #+5]
    123              conv[6] = DIGIMOD(xx, 1);
   \       0x78   0xFB01 0x0013      MLS      R0,R1,R3,R0
   \       0x7C   0x3030             ADDS     R0,R0,#+48
   \       0x7E   0x7190             STRB     R0,[R2, #+6]
    124              return &conv[1];
   \       0x80   0x1C50             ADDS     R0,R2,#+1
   \       0x82   0xBD10             POP      {R4,PC}          ;; return
    125            }
    126          
    127            #if ENABLED(LCD_DECIMAL_SMALL_XY)
    128          
    129              // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
    130              char *ftostr4sign(const float& fx) {
    131                const int x = fx * 10;
    132                if (!WITHIN(x, -99, 999)) return itostr4sign((int)fx);
    133                const bool neg = x < 0;
    134                const int xx = neg ? -x : x;
    135                conv[3] = neg ? '-' : (xx >= 100 ? DIGIMOD(xx, 100) : ' ');
    136                conv[4] = DIGIMOD(xx, 10);
    137                conv[5] = '.';
    138                conv[6] = DIGIMOD(xx, 1);
    139                return &conv[3];
    140              }
    141          
    142            #endif // LCD_DECIMAL_SMALL_XY
    143          
    144            // Convert float to fixed-length string with +123.4 / -123.4 format

   \                                 In section .text, align 2, keep-with-next
    145            char* ftostr41sign(const float& x) {
   \                     _Z12ftostr41signRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    146              int xx = x * 10;
                              ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable13_2  ;; 0x41200000
   \        0x8   0x.... 0x....      BL       __aeabi_fmul
   \        0xC   0x.... 0x....      BL       __aeabi_f2iz
    147              conv[1] = MINUSOR(xx, '+');
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD401             BMI.N    ??ftostr41sign_0
   \       0x14   0x222B             MOVS     R2,#+43
   \       0x16   0xE001             B.N      ??ftostr41sign_1
   \                     ??ftostr41sign_0: (+1)
   \       0x18   0x4240             RSBS     R0,R0,#+0
   \       0x1A   0x222D             MOVS     R2,#+45
   \                     ??ftostr41sign_1: (+1)
   \       0x1C   0x.... 0x....      LDR.W    R1,??DataTable13
   \       0x20   0x704A             STRB     R2,[R1, #+1]
    148              conv[2] = DIGIMOD(xx, 1000);
   \       0x22   0xF44F 0x727A      MOV      R2,#+1000
   \       0x26   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \       0x2A   0x220A             MOVS     R2,#+10
   \       0x2C   0x4614             MOV      R4,R2
   \       0x2E   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x32   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x36   0x3330             ADDS     R3,R3,#+48
   \       0x38   0x708B             STRB     R3,[R1, #+2]
    149              conv[3] = DIGIMOD(xx, 100);
   \       0x3A   0x2364             MOVS     R3,#+100
   \       0x3C   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x40   0x4614             MOV      R4,R2
   \       0x42   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x46   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x4A   0x3330             ADDS     R3,R3,#+48
   \       0x4C   0x70CB             STRB     R3,[R1, #+3]
    150              conv[4] = DIGIMOD(xx, 10);
   \       0x4E   0x4613             MOV      R3,R2
   \       0x50   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x54   0x4614             MOV      R4,R2
   \       0x56   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x5A   0xFB02 0x3414      MLS      R4,R2,R4,R3
   \       0x5E   0x3430             ADDS     R4,R4,#+48
   \       0x60   0x710C             STRB     R4,[R1, #+4]
    151              conv[5] = '.';
   \       0x62   0x242E             MOVS     R4,#+46
   \       0x64   0x714C             STRB     R4,[R1, #+5]
    152              conv[6] = DIGIMOD(xx, 1);
   \       0x66   0xFB02 0x0013      MLS      R0,R2,R3,R0
   \       0x6A   0x3030             ADDS     R0,R0,#+48
   \       0x6C   0x7188             STRB     R0,[R1, #+6]
    153              return &conv[1];
   \       0x6E   0x1C48             ADDS     R0,R1,#+1
   \       0x70   0xBD10             POP      {R4,PC}          ;; return
    154            }
    155          
    156            // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format

   \                                 In section .text, align 2, keep-with-next
    157            char* ftostr43sign(const float& x, char plus/*=' '*/) {
   \                     _Z12ftostr43signRKfc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    158              long xx = x * 1000;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x447a0000
   \        0xA   0x.... 0x....      BL       __aeabi_fmul
   \        0xE   0x.... 0x....      BL       __aeabi_f2iz
    159              conv[1] = xx ? MINUSOR(xx, plus) : ' ';
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD003             BEQ.N    ??ftostr43sign_0
   \       0x16   0xD503             BPL.N    ??ftostr43sign_1
   \       0x18   0x4240             RSBS     R0,R0,#+0
   \       0x1A   0x242D             MOVS     R4,#+45
   \       0x1C   0xE000             B.N      ??ftostr43sign_1
   \                     ??ftostr43sign_0: (+1)
   \       0x1E   0x2420             MOVS     R4,#+32
   \                     ??ftostr43sign_1: (+1)
   \       0x20   0x....             LDR.N    R1,??DataTable13
   \       0x22   0x704C             STRB     R4,[R1, #+1]
    160              conv[2] = DIGIMOD(xx, 1000);
   \       0x24   0xF44F 0x727A      MOV      R2,#+1000
   \       0x28   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \       0x2C   0x220A             MOVS     R2,#+10
   \       0x2E   0x4614             MOV      R4,R2
   \       0x30   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x34   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x38   0x3330             ADDS     R3,R3,#+48
   \       0x3A   0x708B             STRB     R3,[R1, #+2]
    161              conv[3] = '.';
   \       0x3C   0x232E             MOVS     R3,#+46
   \       0x3E   0x70CB             STRB     R3,[R1, #+3]
    162              conv[4] = DIGIMOD(xx, 100);
   \       0x40   0x2364             MOVS     R3,#+100
   \       0x42   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x46   0x4614             MOV      R4,R2
   \       0x48   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x4C   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x50   0x3330             ADDS     R3,R3,#+48
   \       0x52   0x710B             STRB     R3,[R1, #+4]
    163              conv[5] = DIGIMOD(xx, 10);
   \       0x54   0x4613             MOV      R3,R2
   \       0x56   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x5A   0x4614             MOV      R4,R2
   \       0x5C   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x60   0xFB02 0x3414      MLS      R4,R2,R4,R3
   \       0x64   0x3430             ADDS     R4,R4,#+48
   \       0x66   0x714C             STRB     R4,[R1, #+5]
    164              conv[6] = DIGIMOD(xx, 1);
   \       0x68   0xFB02 0x0013      MLS      R0,R2,R3,R0
   \       0x6C   0x3030             ADDS     R0,R0,#+48
   \       0x6E   0x7188             STRB     R0,[R1, #+6]
    165              return &conv[1];
   \       0x70   0x1C48             ADDS     R0,R1,#+1
   \       0x72   0xBD10             POP      {R4,PC}          ;; return
    166            }
    167          
    168            // Convert unsigned float to rj string with 12345 format

   \                                 In section .text, align 2, keep-with-next
    169            char* ftostr5rj(const float& x) {
   \                     _Z9ftostr5rjRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    170              const long xx = x < 0 ? -x : x;
                                     ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x.... 0x....      BL       __aeabi_cfcmple
   \        0xA   0xD204             BCS.N    ??ftostr5rj_0
   \        0xC   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \       0x10   0x.... 0x....      BL       __aeabi_f2iz
   \       0x14   0xE001             B.N      ??ftostr5rj_1
   \                     ??ftostr5rj_0: (+1)
   \       0x16   0x.... 0x....      BL       __aeabi_f2iz
    171              conv[2] = RJDIGIT(xx, 10000);
   \                     ??ftostr5rj_1: (+1)
   \       0x1A   0x210A             MOVS     R1,#+10
   \       0x1C   0xF242 0x7210      MOVW     R2,#+10000
   \       0x20   0x4290             CMP      R0,R2
   \       0x22   0xDB08             BLT.N    ??ftostr5rj_2
   \       0x24   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \       0x28   0x460B             MOV      R3,R1
   \       0x2A   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \       0x2E   0xFB01 0x2313      MLS      R3,R1,R3,R2
   \       0x32   0x3330             ADDS     R3,R3,#+48
   \       0x34   0xE000             B.N      ??ftostr5rj_3
   \                     ??ftostr5rj_2: (+1)
   \       0x36   0x2320             MOVS     R3,#+32
   \                     ??ftostr5rj_3: (+1)
   \       0x38   0x....             LDR.N    R2,??DataTable13
   \       0x3A   0x7093             STRB     R3,[R2, #+2]
    172              conv[3] = RJDIGIT(xx, 1000);
   \       0x3C   0xF5B0 0x7F7A      CMP      R0,#+1000
   \       0x40   0xDB0A             BLT.N    ??ftostr5rj_4
   \       0x42   0xF44F 0x737A      MOV      R3,#+1000
   \       0x46   0xFB90 0xF4F3      SDIV     R4,R0,R3
   \       0x4A   0x460B             MOV      R3,R1
   \       0x4C   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \       0x50   0xFB01 0x4313      MLS      R3,R1,R3,R4
   \       0x54   0x3330             ADDS     R3,R3,#+48
   \       0x56   0xE000             B.N      ??ftostr5rj_5
   \                     ??ftostr5rj_4: (+1)
   \       0x58   0x2320             MOVS     R3,#+32
   \                     ??ftostr5rj_5: (+1)
   \       0x5A   0x70D3             STRB     R3,[R2, #+3]
    173              conv[4] = RJDIGIT(xx, 100);
   \       0x5C   0x2864             CMP      R0,#+100
   \       0x5E   0xDB09             BLT.N    ??ftostr5rj_6
   \       0x60   0x2364             MOVS     R3,#+100
   \       0x62   0xFB90 0xF4F3      SDIV     R4,R0,R3
   \       0x66   0x460B             MOV      R3,R1
   \       0x68   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \       0x6C   0xFB01 0x4313      MLS      R3,R1,R3,R4
   \       0x70   0x3330             ADDS     R3,R3,#+48
   \       0x72   0xE000             B.N      ??ftostr5rj_7
   \                     ??ftostr5rj_6: (+1)
   \       0x74   0x2320             MOVS     R3,#+32
   \                     ??ftostr5rj_7: (+1)
   \       0x76   0x7113             STRB     R3,[R2, #+4]
    174              conv[5] = RJDIGIT(xx, 10);
   \       0x78   0x460B             MOV      R3,R1
   \       0x7A   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x7E   0x280A             CMP      R0,#+10
   \       0x80   0xDB06             BLT.N    ??ftostr5rj_8
   \       0x82   0x460C             MOV      R4,R1
   \       0x84   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x88   0xFB01 0x3414      MLS      R4,R1,R4,R3
   \       0x8C   0x3430             ADDS     R4,R4,#+48
   \       0x8E   0xE000             B.N      ??ftostr5rj_9
   \                     ??ftostr5rj_8: (+1)
   \       0x90   0x2420             MOVS     R4,#+32
   \                     ??ftostr5rj_9: (+1)
   \       0x92   0x7154             STRB     R4,[R2, #+5]
    175              conv[6] = DIGIMOD(xx, 1);
   \       0x94   0xFB01 0x0013      MLS      R0,R1,R3,R0
   \       0x98   0x3030             ADDS     R0,R0,#+48
   \       0x9A   0x7190             STRB     R0,[R2, #+6]
    176              return &conv[2];
   \       0x9C   0x1C90             ADDS     R0,R2,#+2
   \       0x9E   0xBD10             POP      {R4,PC}          ;; return
    177            }
    178          
    179            // Convert signed float to string with +1234.5 format

   \                                 In section .text, align 2, keep-with-next
    180            char* ftostr51sign(const float& x) {
   \                     _Z12ftostr51signRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    181              long xx = x * 10;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R0,??DataTable13_2  ;; 0x41200000
   \        0x6   0x.... 0x....      BL       __aeabi_fmul
   \        0xA   0x.... 0x....      BL       __aeabi_f2iz
   \        0xE   0x0001             MOVS     R1,R0
    182              conv[0] = MINUSOR(xx, '+');
   \       0x10   0xD401             BMI.N    ??ftostr51sign_0
   \       0x12   0x222B             MOVS     R2,#+43
   \       0x14   0xE001             B.N      ??ftostr51sign_1
   \                     ??ftostr51sign_0: (+1)
   \       0x16   0x4249             RSBS     R1,R1,#+0
   \       0x18   0x222D             MOVS     R2,#+45
   \                     ??ftostr51sign_1: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable13
   \       0x1C   0x7002             STRB     R2,[R0, #+0]
    183              conv[1] = DIGIMOD(xx, 10000);
   \       0x1E   0xF242 0x7210      MOVW     R2,#+10000
   \       0x22   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x26   0x220A             MOVS     R2,#+10
   \       0x28   0x4614             MOV      R4,R2
   \       0x2A   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x2E   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x32   0x3330             ADDS     R3,R3,#+48
   \       0x34   0x7043             STRB     R3,[R0, #+1]
    184              conv[2] = DIGIMOD(xx, 1000);
   \       0x36   0xF44F 0x737A      MOV      R3,#+1000
   \       0x3A   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x3E   0x4614             MOV      R4,R2
   \       0x40   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x44   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x48   0x3330             ADDS     R3,R3,#+48
   \       0x4A   0x7083             STRB     R3,[R0, #+2]
    185              conv[3] = DIGIMOD(xx, 100);
   \       0x4C   0x2364             MOVS     R3,#+100
   \       0x4E   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x52   0x4614             MOV      R4,R2
   \       0x54   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x58   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x5C   0x3330             ADDS     R3,R3,#+48
   \       0x5E   0x70C3             STRB     R3,[R0, #+3]
    186              conv[4] = DIGIMOD(xx, 10);
   \       0x60   0x4613             MOV      R3,R2
   \       0x62   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x66   0x4614             MOV      R4,R2
   \       0x68   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x6C   0xFB02 0x3414      MLS      R4,R2,R4,R3
   \       0x70   0x3430             ADDS     R4,R4,#+48
   \       0x72   0x7104             STRB     R4,[R0, #+4]
    187              conv[5] = '.';
   \       0x74   0x242E             MOVS     R4,#+46
   \       0x76   0x7144             STRB     R4,[R0, #+5]
    188              conv[6] = DIGIMOD(xx, 1);
   \       0x78   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x7C   0x3130             ADDS     R1,R1,#+48
   \       0x7E   0x7181             STRB     R1,[R0, #+6]
    189              return conv;
   \       0x80   0xBD10             POP      {R4,PC}          ;; return
    190            }
    191          
    192            // Convert signed float to string with +123.45 format

   \                                 In section .text, align 2, keep-with-next
    193            char* ftostr52sign(const float& x) {
   \                     _Z12ftostr52signRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    194              long xx = x * 100;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R0,??DataTable13_1  ;; 0x42c80000
   \        0x6   0x.... 0x....      BL       __aeabi_fmul
   \        0xA   0x.... 0x....      BL       __aeabi_f2iz
   \        0xE   0x0001             MOVS     R1,R0
    195              conv[0] = MINUSOR(xx, '+');
   \       0x10   0xD401             BMI.N    ??ftostr52sign_0
   \       0x12   0x222B             MOVS     R2,#+43
   \       0x14   0xE001             B.N      ??ftostr52sign_1
   \                     ??ftostr52sign_0: (+1)
   \       0x16   0x4249             RSBS     R1,R1,#+0
   \       0x18   0x222D             MOVS     R2,#+45
   \                     ??ftostr52sign_1: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable13
   \       0x1C   0x7002             STRB     R2,[R0, #+0]
    196              conv[1] = DIGIMOD(xx, 10000);
   \       0x1E   0xF242 0x7210      MOVW     R2,#+10000
   \       0x22   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x26   0x220A             MOVS     R2,#+10
   \       0x28   0x4614             MOV      R4,R2
   \       0x2A   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x2E   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x32   0x3330             ADDS     R3,R3,#+48
   \       0x34   0x7043             STRB     R3,[R0, #+1]
    197              conv[2] = DIGIMOD(xx, 1000);
   \       0x36   0xF44F 0x737A      MOV      R3,#+1000
   \       0x3A   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x3E   0x4614             MOV      R4,R2
   \       0x40   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x44   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x48   0x3330             ADDS     R3,R3,#+48
   \       0x4A   0x7083             STRB     R3,[R0, #+2]
    198              conv[3] = DIGIMOD(xx, 100);
   \       0x4C   0x2364             MOVS     R3,#+100
   \       0x4E   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x52   0x4614             MOV      R4,R2
   \       0x54   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x58   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x5C   0x3330             ADDS     R3,R3,#+48
   \       0x5E   0x70C3             STRB     R3,[R0, #+3]
    199              conv[4] = '.';
   \       0x60   0x232E             MOVS     R3,#+46
   \       0x62   0x7103             STRB     R3,[R0, #+4]
    200              conv[5] = DIGIMOD(xx, 10);
   \       0x64   0x4613             MOV      R3,R2
   \       0x66   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x6A   0x4614             MOV      R4,R2
   \       0x6C   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x70   0xFB02 0x3414      MLS      R4,R2,R4,R3
   \       0x74   0x3430             ADDS     R4,R4,#+48
   \       0x76   0x7144             STRB     R4,[R0, #+5]
    201              conv[6] = DIGIMOD(xx, 1);
   \       0x78   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x7C   0x3130             ADDS     R1,R1,#+48
   \       0x7E   0x7181             STRB     R1,[R0, #+6]
    202              return conv;
   \       0x80   0xBD10             POP      {R4,PC}          ;; return
    203            }
    204          
    205            // Convert unsigned float to string with 1234.56 format omitting trailing zeros

   \                                 In section .text, align 2, keep-with-next
    206            char* ftostr62rj(const float& x) {
   \                     _Z10ftostr62rjRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    207              const long xx = (x < 0 ? -x : x) * 100;
                                     ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6804             LDR      R4,[R0, #+0]
   \        0x4   0x4620             MOV      R0,R4
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x.... 0x....      BL       __aeabi_cfcmple
   \        0xC   0xD201             BCS.N    ??ftostr62rj_0
   \        0xE   0xF084 0x4400      EOR      R4,R4,#0x80000000
   \                     ??ftostr62rj_0: (+1)
   \       0x12   0x....             LDR.N    R0,??DataTable13_1  ;; 0x42c80000
   \       0x14   0x4621             MOV      R1,R4
   \       0x16   0x.... 0x....      BL       __aeabi_fmul
   \       0x1A   0x.... 0x....      BL       __aeabi_f2iz
   \       0x1E   0x4601             MOV      R1,R0
    208              conv[0] = RJDIGIT(xx, 100000);
   \       0x20   0x220A             MOVS     R2,#+10
   \       0x22   0x....             LDR.N    R0,??DataTable13_4  ;; 0x186a0
   \       0x24   0x4281             CMP      R1,R0
   \       0x26   0xDB08             BLT.N    ??ftostr62rj_1
   \       0x28   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \       0x2C   0x4613             MOV      R3,R2
   \       0x2E   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x32   0xFB02 0x0313      MLS      R3,R2,R3,R0
   \       0x36   0x3330             ADDS     R3,R3,#+48
   \       0x38   0xE000             B.N      ??ftostr62rj_2
   \                     ??ftostr62rj_1: (+1)
   \       0x3A   0x2320             MOVS     R3,#+32
   \                     ??ftostr62rj_2: (+1)
   \       0x3C   0x....             LDR.N    R0,??DataTable13
   \       0x3E   0x7003             STRB     R3,[R0, #+0]
    209              conv[1] = RJDIGIT(xx, 10000);
   \       0x40   0xF242 0x7310      MOVW     R3,#+10000
   \       0x44   0x4299             CMP      R1,R3
   \       0x46   0xDB08             BLT.N    ??ftostr62rj_3
   \       0x48   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \       0x4C   0x4613             MOV      R3,R2
   \       0x4E   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \       0x52   0xFB02 0x4313      MLS      R3,R2,R3,R4
   \       0x56   0x3330             ADDS     R3,R3,#+48
   \       0x58   0xE000             B.N      ??ftostr62rj_4
   \                     ??ftostr62rj_3: (+1)
   \       0x5A   0x2320             MOVS     R3,#+32
   \                     ??ftostr62rj_4: (+1)
   \       0x5C   0x7043             STRB     R3,[R0, #+1]
    210              conv[2] = RJDIGIT(xx, 1000);
   \       0x5E   0xF5B1 0x7F7A      CMP      R1,#+1000
   \       0x62   0xDB0A             BLT.N    ??ftostr62rj_5
   \       0x64   0xF44F 0x737A      MOV      R3,#+1000
   \       0x68   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \       0x6C   0x4613             MOV      R3,R2
   \       0x6E   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \       0x72   0xFB02 0x4313      MLS      R3,R2,R3,R4
   \       0x76   0x3330             ADDS     R3,R3,#+48
   \       0x78   0xE000             B.N      ??ftostr62rj_6
   \                     ??ftostr62rj_5: (+1)
   \       0x7A   0x2320             MOVS     R3,#+32
   \                     ??ftostr62rj_6: (+1)
   \       0x7C   0x7083             STRB     R3,[R0, #+2]
    211              conv[3] = DIGIMOD(xx, 100);
   \       0x7E   0x2364             MOVS     R3,#+100
   \       0x80   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x84   0x4614             MOV      R4,R2
   \       0x86   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x8A   0xFB02 0x3314      MLS      R3,R2,R4,R3
   \       0x8E   0x3330             ADDS     R3,R3,#+48
   \       0x90   0x70C3             STRB     R3,[R0, #+3]
    212              conv[4] = '.';
   \       0x92   0x232E             MOVS     R3,#+46
   \       0x94   0x7103             STRB     R3,[R0, #+4]
    213              conv[5] = DIGIMOD(xx, 10);
   \       0x96   0x4613             MOV      R3,R2
   \       0x98   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \       0x9C   0x4614             MOV      R4,R2
   \       0x9E   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0xA2   0xFB02 0x3414      MLS      R4,R2,R4,R3
   \       0xA6   0x3430             ADDS     R4,R4,#+48
   \       0xA8   0x7144             STRB     R4,[R0, #+5]
    214              conv[6] = DIGIMOD(xx, 1);
   \       0xAA   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0xAE   0x3130             ADDS     R1,R1,#+48
   \       0xB0   0x7181             STRB     R1,[R0, #+6]
    215              return conv;
   \       0xB2   0xBD10             POP      {R4,PC}          ;; return
    216            }
    217          
    218            // Convert signed float to space-padded string with -_23.4_ format

   \                                 In section .text, align 2, keep-with-next
    219            char* ftostr52sp(const float& x) {
   \                     _Z10ftostr52spRKf: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    220              long xx = x * 100;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R0,??DataTable13_1  ;; 0x42c80000
   \        0x6   0x.... 0x....      BL       __aeabi_fmul
   \        0xA   0x.... 0x....      BL       __aeabi_f2iz
    221              uint8_t dig;
    222              conv[1] = MINUSOR(xx, RJDIGIT(xx, 10000));
   \        0xE   0x210A             MOVS     R1,#+10
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD40E             BMI.N    ??ftostr52sp_0
   \       0x14   0xF242 0x7210      MOVW     R2,#+10000
   \       0x18   0x4290             CMP      R0,R2
   \       0x1A   0xDB08             BLT.N    ??ftostr52sp_1
   \       0x1C   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \       0x20   0x460B             MOV      R3,R1
   \       0x22   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \       0x26   0xFB01 0x2313      MLS      R3,R1,R3,R2
   \       0x2A   0x3330             ADDS     R3,R3,#+48
   \       0x2C   0xE003             B.N      ??ftostr52sp_2
   \                     ??ftostr52sp_1: (+1)
   \       0x2E   0x2320             MOVS     R3,#+32
   \       0x30   0xE001             B.N      ??ftostr52sp_2
   \                     ??ftostr52sp_0: (+1)
   \       0x32   0x4240             RSBS     R0,R0,#+0
   \       0x34   0x232D             MOVS     R3,#+45
   \                     ??ftostr52sp_2: (+1)
   \       0x36   0x....             LDR.N    R2,??DataTable13
   \       0x38   0x7053             STRB     R3,[R2, #+1]
    223              conv[2] = RJDIGIT(xx, 1000);
   \       0x3A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \       0x3E   0xDB0A             BLT.N    ??ftostr52sp_3
   \       0x40   0xF44F 0x737A      MOV      R3,#+1000
   \       0x44   0xFB90 0xF4F3      SDIV     R4,R0,R3
   \       0x48   0x460B             MOV      R3,R1
   \       0x4A   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \       0x4E   0xFB01 0x4313      MLS      R3,R1,R3,R4
   \       0x52   0x3330             ADDS     R3,R3,#+48
   \       0x54   0xE000             B.N      ??ftostr52sp_4
   \                     ??ftostr52sp_3: (+1)
   \       0x56   0x2320             MOVS     R3,#+32
   \                     ??ftostr52sp_4: (+1)
   \       0x58   0x7093             STRB     R3,[R2, #+2]
    224              conv[3] = DIGIMOD(xx, 100);
   \       0x5A   0x2364             MOVS     R3,#+100
   \       0x5C   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x60   0x460C             MOV      R4,R1
   \       0x62   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x66   0xFB01 0x3314      MLS      R3,R1,R4,R3
   \       0x6A   0x3330             ADDS     R3,R3,#+48
   \       0x6C   0x70D3             STRB     R3,[R2, #+3]
    225          
    226              if ((dig = xx % 10)) {          // second digit after decimal point?
   \       0x6E   0x460B             MOV      R3,R1
   \       0x70   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \       0x74   0xFB01 0x0013      MLS      R0,R1,R3,R0
   \       0x78   0x4604             MOV      R4,R0
   \       0x7A   0xB2E4             UXTB     R4,R4
   \       0x7C   0x2C00             CMP      R4,#+0
   \       0x7E   0xD00B             BEQ.N    ??ftostr52sp_5
    227                conv[4] = '.';
   \       0x80   0x242E             MOVS     R4,#+46
   \       0x82   0x7114             STRB     R4,[R2, #+4]
    228                conv[5] = DIGIMOD(xx, 10);
   \       0x84   0x460C             MOV      R4,R1
   \       0x86   0xFB93 0xF4F4      SDIV     R4,R3,R4
   \       0x8A   0xFB01 0x3114      MLS      R1,R1,R4,R3
   \       0x8E   0x3130             ADDS     R1,R1,#+48
   \       0x90   0x7151             STRB     R1,[R2, #+5]
    229                conv[6] = DIGIT(dig);
   \       0x92   0x3030             ADDS     R0,R0,#+48
   \       0x94   0x7190             STRB     R0,[R2, #+6]
   \       0x96   0xE012             B.N      ??ftostr52sp_6
    230              }
    231              else {
    232                if ((dig = (xx / 10) % 10)) { // first digit after decimal point?
   \                     ??ftostr52sp_5: (+1)
   \       0x98   0x4608             MOV      R0,R1
   \       0x9A   0xFB93 0xF0F0      SDIV     R0,R3,R0
   \       0x9E   0xFB01 0x3110      MLS      R1,R1,R0,R3
   \       0xA2   0x4608             MOV      R0,R1
   \       0xA4   0xB2C0             UXTB     R0,R0
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD004             BEQ.N    ??ftostr52sp_7
    233                  conv[4] = '.';
   \       0xAA   0x202E             MOVS     R0,#+46
   \       0xAC   0x7110             STRB     R0,[R2, #+4]
    234                  conv[5] = DIGIT(dig);
   \       0xAE   0x3130             ADDS     R1,R1,#+48
   \       0xB0   0x7151             STRB     R1,[R2, #+5]
   \       0xB2   0xE002             B.N      ??ftostr52sp_8
    235                }
    236                else                          // nothing after decimal point
    237                  conv[4] = conv[5] = ' ';
   \                     ??ftostr52sp_7: (+1)
   \       0xB4   0x2020             MOVS     R0,#+32
   \       0xB6   0x7150             STRB     R0,[R2, #+5]
   \       0xB8   0x7110             STRB     R0,[R2, #+4]
    238                conv[6] = ' ';
   \                     ??ftostr52sp_8: (+1)
   \       0xBA   0x2020             MOVS     R0,#+32
   \       0xBC   0x7190             STRB     R0,[R2, #+6]
    239              }
    240              return &conv[1];
   \                     ??ftostr52sp_6: (+1)
   \       0xBE   0x1C50             ADDS     R0,R2,#+1
   \       0xC0   0xBD10             POP      {R4,PC}          ;; return
    241            }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x....'....        DC32     conv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0x4120'0000        DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0x447A'0000        DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0x0001'86A0        DC32     0x186a0
    242          
    243          #endif // ULTRA_LCD

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ftostr12ns(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
         8 __aeabi_cfcmple
       8   ftostr32(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr41sign(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr43sign(float const &, char)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr51sign(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr52sign(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr52sp(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   ftostr5rj(float const &)
         8   -> __aeabi_f2iz
         8 __aeabi_cfcmple
       8   ftostr62rj(float const &)
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
         8 __aeabi_cfcmple
       4   itostr2(uint8_t const &)
       4   itostr3(int const &)
       8   itostr3left(int const &)
       4   itostr4sign(int const &)
       8   safe_delay(millis_t)
         8   -> HAL_Delay
         0   -> Temperature::manage_heater()
         8   -> Temperature::manage_heater()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       8  conv
      90  ftostr12ns(float const &)
     132  ftostr32(float const &)
     114  ftostr41sign(float const &)
     116  ftostr43sign(float const &, char)
     130  ftostr51sign(float const &)
     130  ftostr52sign(float const &)
     194  ftostr52sp(float const &)
     160  ftostr5rj(float const &)
     180  ftostr62rj(float const &)
      52  itostr2(uint8_t const &)
      90  itostr3(int const &)
      86  itostr3left(int const &)
     234  itostr4sign(int const &)
      36  safe_delay(millis_t)

 
     8 bytes in section .bss
 1 764 bytes in section .text
 
 1 764 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: 14
