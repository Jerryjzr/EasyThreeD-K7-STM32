###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_sbn1661_122x32.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW44BF.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_sbn1661_122x32.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_sbn1661_122x32.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_sbn1661_122x32.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_sbn1661_122x32.c
      1          /*
      2          
      3            u8g_dev_sbn1661_122x32.c
      4            
      5            WG12232 display with 2xSBN1661 / SED1520 controller (122x32 display)
      6            At the moment only available in the Arduino Environment
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2011, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37            
     38          */
     39          
     40          #include "u8g.h"
     41          
     42          #define WIDTH 122
     43          #define HEIGHT 32
     44          #define PAGE_HEIGHT 8
     45          
     46          

   \                                 In section .text, align 4, keep-with-next
     47          static const uint8_t u8g_dev_sbn1661_122x32_init_seq[] PROGMEM = {
   \                     u8g_dev_sbn1661_122x32_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 207, 255, 209, 175, 192, 160, 169, 255
   \              0xFF 0xE0    
   \              0xFF 0xCF    
   \              0xFF 0xD1    
   \              0xAF 0xC0    
   \              0xA0 0xA9    
   \              0xFF         
   \   0000000D   0xD2 0xAF          DC8 210, 175, 192, 160, 169, 255, 208, 255, 254, 0, 0
   \              0xC0 0xA0    
   \              0xA9 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
   \              0x00         
     48            U8G_ESC_CS(0),             /* disable chip */
     49            U8G_ESC_ADR(0),           /* instruction mode */
     50            U8G_ESC_RST(15),           /* do reset low pulse with (15*16)+2 milliseconds */
     51            U8G_ESC_CS(1),             /* enable chip 1 */
     52            0x0af,				/* display on */
     53            0x0c0,				/* display start at line 0 */
     54            0x0a0,				/* a0: ADC forward, a1: ADC reverse */
     55            0x0a9,				/* a8: 1/16, a9: 1/32 duty */
     56            U8G_ESC_CS(2),             /* enable chip 2 */
     57            0x0af,				/* display on */
     58            0x0c0,				/* display start at line 0 */
     59            0x0a0,				/* a0: ADC forward, a1: ADC reverse */
     60            0x0a9,				/* a8: 1/16, a9: 1/32 duty */
     61            
     62            U8G_ESC_CS(0),             /* disable chip */
     63            
     64            
     65            U8G_ESC_END                /* end of sequence */
     66          };
     67          

   \                                 In section .text, align 4, keep-with-next
     68          uint8_t u8g_dev_sbn1661_122x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     69          {
   \                     u8g_dev_sbn1661_122x32_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
     70            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD002             BEQ.N    ??u8g_dev_sbn1661_122x32_fn_0
   \   00000012   0x2815             CMP      R0,#+21
   \   00000014   0xD00A             BEQ.N    ??u8g_dev_sbn1661_122x32_fn_1
   \   00000016   0xE057             B.N      ??u8g_dev_sbn1661_122x32_fn_2
     71            {
     72              case U8G_DEV_MSG_INIT:
     73                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
   \                     ??u8g_dev_sbn1661_122x32_fn_0: (+1)
   \   00000018   0x22FF             MOVS     R2,#+255
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       u8g_InitCom
     74                u8g_WriteEscSeqP(u8g, dev, u8g_dev_sbn1661_122x32_init_seq);
   \   00000020   0x....             ADR.N    R2,u8g_dev_sbn1661_122x32_init_seq
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       u8g_WriteEscSeqP
     75                break;
   \   0000002A   0xE04D             B.N      ??u8g_dev_sbn1661_122x32_fn_2
     76              case U8G_DEV_MSG_STOP:
     77                break;
     78              case U8G_DEV_MSG_PAGE_NEXT:
     79                {
     80                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \                     ??u8g_dev_sbn1661_122x32_fn_1: (+1)
   \   0000002C   0xF8D5 0x8004      LDR      R8,[R5, #+4]
     81          	
     82                  u8g_SetAddress(u8g, dev, 0);           /* command mode */
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       u8g_SetAddress
     83                  u8g_SetChipSelect(u8g, dev, 1);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_SetChipSelect
     84                  u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (SBN1661/SED1520) */
   \   00000042   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000046   0xF042 0x02B8      ORR      R2,R2,#0xB8
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       u8g_WriteByte
     85                  u8g_WriteByte(u8g, dev, 0x000 ); /* set X address */
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       u8g_WriteByte
     86                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x4629             MOV      R1,R5
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       u8g_SetAddress
     87                  u8g_WriteSequence(u8g, dev, WIDTH/2, pb->buf);
   \   00000066   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   0000006A   0x223D             MOVS     R2,#+61
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       u8g_WriteSequence
     88          	
     89                  u8g_SetAddress(u8g, dev, 0);           /* command mode */
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x4629             MOV      R1,R5
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       u8g_SetAddress
     90                  u8g_SetChipSelect(u8g, dev, 2);
   \   0000007E   0x2202             MOVS     R2,#+2
   \   00000080   0x4629             MOV      R1,R5
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       u8g_SetChipSelect
     91                  u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (SBN1661/SED1520) */
   \   00000088   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   0000008C   0xF042 0x02B8      ORR      R2,R2,#0xB8
   \   00000090   0x4629             MOV      R1,R5
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       u8g_WriteByte
     92                  u8g_WriteByte(u8g, dev, 0x000 ); /* set X address */
   \   00000098   0x2200             MOVS     R2,#+0
   \   0000009A   0x4629             MOV      R1,R5
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       u8g_WriteByte
     93                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
   \   000000A2   0x2201             MOVS     R2,#+1
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_SetAddress
     94                  u8g_WriteSequence(u8g, dev, WIDTH/2, WIDTH/2+(uint8_t *)pb->buf);
   \   000000AC   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000B0   0xF100 0x033D      ADD      R3,R0,#+61
   \   000000B4   0x223D             MOVS     R2,#+61
   \   000000B6   0x4629             MOV      R1,R5
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       u8g_WriteSequence
     95          	
     96                  u8g_SetChipSelect(u8g, dev, 0);
   \   000000BE   0x2200             MOVS     R2,#+0
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       u8g_SetChipSelect
     97          	
     98                }
     99                break;
    100              case U8G_DEV_MSG_CONTRAST:
    101                break;
    102            }
    103            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_sbn1661_122x32_fn_2: (+1)
   \   000000C8   0x463B             MOV      R3,R7
   \   000000CA   0x4632             MOV      R2,R6
   \   000000CC   0x4629             MOV      R1,R5
   \   000000CE   0x4620             MOV      R0,R4
   \   000000D0   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000D4   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
    104          }
    105          
    106          /* u8g_com_arduino_sw_spi_fn does not work, too fast??? */

   \                                 In section .bss, align 4
    107          U8G_PB_DEV(u8g_dev_sbn1661_122x32 , WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_sbn1661_122x32_fn, u8g_com_arduino_no_en_parallel_fn);
   \                     u8g_dev_sbn1661_122x32_buf:
   \   00000000                      DS8 124

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_sbn1661_122x32_pb
   \                     u8g_dev_sbn1661_122x32_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 122, 0, 0
   \              0x00 0x00    
   \              0x00 0x7A    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_sbn1661_122x32_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_sbn1661_122x32
   \                     u8g_dev_sbn1661_122x32:
   \   00000000   0x........         DC32 u8g_dev_sbn1661_122x32_fn, u8g_dev_sbn1661_122x32_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_arduino_no_en_parallel_fn

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   u8g_dev_sbn1661_122x32_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
        24   -> u8g_WriteSequence
         0   -> u8g_dev_pb8v1_base_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  u8g_dev_sbn1661_122x32
     124  u8g_dev_sbn1661_122x32_buf
     216  u8g_dev_sbn1661_122x32_fn
      24  u8g_dev_sbn1661_122x32_init_seq
      12  u8g_dev_sbn1661_122x32_pb

 
 124 bytes in section .bss
  24 bytes in section .data
 240 bytes in section .text
 
 240 bytes of CODE memory
 148 bytes of DATA memory

Errors: none
Warnings: none
