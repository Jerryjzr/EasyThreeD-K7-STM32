###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Src\stm32f1xx_it.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EWA246.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Src\stm32f1xx_it.cpp -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\stm32f1xx_it.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\stm32f1xx_it.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Src\stm32f1xx_it.cpp
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f1xx_it.c
      4            * @brief   Interrupt Service Routines.
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2017 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32f1xx_hal.h"
     35          #include "stm32f1xx.h"
     36          #include "stm32f1xx_it.h"
     37          
     38          /* USER CODE BEGIN 0 */
     39          #include "main.h"
     40          #include "stm32f1xx_3dprinter_uart.h"
     41          #include "mks_fastio.h"

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     42          
     43          #include "serial.h"   

  #define UNUSED(x) (void) (x)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\macros.h",88  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 87 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver
          \Inc\stm32f1xx_hal_def.h")

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)
     44          #include "mks_test.h"

   \                                 In section .bss, align 4
     45          unsigned long timer2Cnt=0;
   \                     timer2Cnt:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     46          unsigned long timer4Cnt=0;
   \                     timer4Cnt:
   \        0x0                      DS8 4
     47          
     48          /* USER CODE END 0 */
     49          
     50          /* External variables --------------------------------------------------------*/
     51          extern DMA_HandleTypeDef hdma_adc1;
     52          extern ADC_HandleTypeDef hadc1;
     53          extern DMA_HandleTypeDef hdma_spi2_rx;
     54          extern DMA_HandleTypeDef hdma_spi2_tx;
     55          extern SPI_HandleTypeDef hspi2;
     56          extern TIM_HandleTypeDef htim1;
     57          extern TIM_HandleTypeDef htim2;
     58          extern TIM_HandleTypeDef htim3;
     59          extern TIM_HandleTypeDef htim4;
     60          extern UART_HandleTypeDef huart1;
     61          
     62          extern MarlinSerial customizedSerial;
     63          extern MarlinSerial serial2;
     64          
     65          
     66          
     67          /******************************************************************************/
     68          /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
     69          /******************************************************************************/
     70          
     71          /**
     72          * @brief This function handles Non maskable interrupt.
     73          */

   \                                 In section .text, align 2, keep-with-next
     74          void NMI_Handler(void)
     75          {
     76            /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
     77          
     78            /* USER CODE END NonMaskableInt_IRQn 0 */
     79            /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
     80          
     81            /* USER CODE END NonMaskableInt_IRQn 1 */
     82          }
   \                     NMI_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     83          
     84          /**
     85          * @brief This function handles Hard fault interrupt.
     86          */

   \                                 In section .text, align 2, keep-with-next
     87          void HardFault_Handler(void)
     88          {
     89            /* USER CODE BEGIN HardFault_IRQn 0 */
     90          
     91            /* USER CODE END HardFault_IRQn 0 */
     92            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??HardFault_Handler_0
     93            {
     94            }
     95            /* USER CODE BEGIN HardFault_IRQn 1 */
     96          
     97            /* USER CODE END HardFault_IRQn 1 */
     98          }
     99          
    100          /**
    101          * @brief This function handles Memory management fault.
    102          */

   \                                 In section .text, align 2, keep-with-next
    103          void MemManage_Handler(void)
    104          {
    105            /* USER CODE BEGIN MemoryManagement_IRQn 0 */
    106          
    107            /* USER CODE END MemoryManagement_IRQn 0 */
    108            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??MemManage_Handler_0
    109            {
    110            }
    111            /* USER CODE BEGIN MemoryManagement_IRQn 1 */
    112          
    113            /* USER CODE END MemoryManagement_IRQn 1 */
    114          }
    115          
    116          /**
    117          * @brief This function handles Prefetch fault, memory access fault.
    118          */

   \                                 In section .text, align 2, keep-with-next
    119          void BusFault_Handler(void)
    120          {
    121            /* USER CODE BEGIN BusFault_IRQn 0 */
    122          
    123            /* USER CODE END BusFault_IRQn 0 */
    124            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??BusFault_Handler_0
    125            {
    126            }
    127            /* USER CODE BEGIN BusFault_IRQn 1 */
    128          
    129            /* USER CODE END BusFault_IRQn 1 */
    130          }
    131          
    132          /**
    133          * @brief This function handles Undefined instruction or illegal state.
    134          */

   \                                 In section .text, align 2, keep-with-next
    135          void UsageFault_Handler(void)
    136          {
    137            /* USER CODE BEGIN UsageFault_IRQn 0 */
    138          
    139            /* USER CODE END UsageFault_IRQn 0 */
    140            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??UsageFault_Handler_0
    141            {
    142            }
    143            /* USER CODE BEGIN UsageFault_IRQn 1 */
    144          
    145            /* USER CODE END UsageFault_IRQn 1 */
    146          }
    147          
    148          /**
    149          * @brief This function handles System service call via SWI instruction.
    150          */

   \                                 In section .text, align 2, keep-with-next
    151          void SVC_Handler(void)
    152          {
    153            /* USER CODE BEGIN SVCall_IRQn 0 */
    154          
    155            /* USER CODE END SVCall_IRQn 0 */
    156            /* USER CODE BEGIN SVCall_IRQn 1 */
    157          
    158            /* USER CODE END SVCall_IRQn 1 */
    159          }
   \                     SVC_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    160          
    161          /**
    162          * @brief This function handles Debug monitor.
    163          */

   \                                 In section .text, align 2, keep-with-next
    164          void DebugMon_Handler(void)
    165          {
    166            /* USER CODE BEGIN DebugMonitor_IRQn 0 */
    167          
    168            /* USER CODE END DebugMonitor_IRQn 0 */
    169            /* USER CODE BEGIN DebugMonitor_IRQn 1 */
    170          
    171            /* USER CODE END DebugMonitor_IRQn 1 */
    172          }
   \                     DebugMon_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    173          
    174          /**
    175          * @brief This function handles Pendable request for system service.
    176          */

   \                                 In section .text, align 2, keep-with-next
    177          void PendSV_Handler(void)
    178          {
    179            /* USER CODE BEGIN PendSV_IRQn 0 */
    180          
    181            /* USER CODE END PendSV_IRQn 0 */
    182            /* USER CODE BEGIN PendSV_IRQn 1 */
    183          
    184            /* USER CODE END PendSV_IRQn 1 */
    185          }
   \                     PendSV_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    186          
    187          /**
    188          * @brief This function handles System tick timer.
    189          */

   \                                 In section .text, align 2, keep-with-next
    190          void SysTick_Handler(void)
    191          {
   \                     SysTick_Handler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    192            /* USER CODE BEGIN SysTick_IRQn 0 */
    193          
    194            /* USER CODE END SysTick_IRQn 0 */
    195            HAL_IncTick();
   \        0x2   0x.... 0x....      BL       HAL_IncTick
    196            HAL_SYSTICK_IRQHandler();
   \        0x6   0xE8BD 0x4001      POP      {R0,LR}
   \        0xA   0x.... 0x....      B.W      HAL_SYSTICK_IRQHandler
    197            /* USER CODE BEGIN SysTick_IRQn 1 */
    198          
    199            /* USER CODE END SysTick_IRQn 1 */
    200          }
    201          
    202          /******************************************************************************/
    203          /* STM32F1xx Peripheral Interrupt Handlers                                    */
    204          /* Add here the Interrupt Handlers for the used peripherals.                  */
    205          /* For the available peripheral interrupt handler names,                      */
    206          /* please refer to the startup file (startup_stm32f1xx.s).                    */
    207          /******************************************************************************/
    208          
    209          /**
    210          * @brief This function handles DMA1 channel1 global interrupt.
    211          */

   \                                 In section .text, align 2, keep-with-next
    212          void DMA1_Channel1_IRQHandler(void)
    213          {
    214            /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
    215          
    216            /* USER CODE END DMA1_Channel1_IRQn 0 */
    217            HAL_DMA_IRQHandler(&hdma_adc1);
   \                     DMA1_Channel1_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    218            /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
    219          
    220            /* USER CODE END DMA1_Channel1_IRQn 1 */
    221          }
    222          
    223          /**
    224          * @brief This function handles DMA1 channel4 global interrupt.
    225          */
    226          #if 1  //SPI_DMA

   \                                 In section .text, align 2, keep-with-next
    227          void DMA1_Channel4_IRQHandler(void)
    228          {
    229            /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
    230          
    231            /* USER CODE END DMA1_Channel4_IRQn 0 */
    232            HAL_DMA_IRQHandler(&hdma_spi2_rx);
   \                     _Z24DMA1_Channel4_IRQHandlerv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_1
   \        0x2   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    233            /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
    234          
    235            /* USER CODE END DMA1_Channel4_IRQn 1 */
    236          }
    237          
    238          /**
    239          * @brief This function handles DMA1 channel5 global interrupt.
    240          */

   \                                 In section .text, align 2, keep-with-next
    241          void DMA1_Channel5_IRQHandler(void)
    242          {
    243            /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
    244          
    245            /* USER CODE END DMA1_Channel5_IRQn 0 */
    246            HAL_DMA_IRQHandler(&hdma_spi2_tx);
   \                     _Z24DMA1_Channel5_IRQHandlerv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_2
   \        0x2   0x.... 0x....      B.W      HAL_DMA_IRQHandler
    247            /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
    248          
    249            /* USER CODE END DMA1_Channel5_IRQn 1 */
    250          }
    251          #endif
    252          /**
    253          * @brief This function handles ADC1 and ADC2 global interrupts.
    254          */

   \                                 In section .text, align 2, keep-with-next
    255          void ADC1_2_IRQHandler(void)
    256          {
    257            /* USER CODE BEGIN ADC1_2_IRQn 0 */
    258          
    259            /* USER CODE END ADC1_2_IRQn 0 */
    260            HAL_ADC_IRQHandler(&hadc1);
   \                     ADC1_2_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_3
   \        0x2   0x.... 0x....      B.W      HAL_ADC_IRQHandler
    261            /* USER CODE BEGIN ADC1_2_IRQn 1 */
    262          
    263            /* USER CODE END ADC1_2_IRQn 1 */
    264          }
    265          
    266          /**
    267          * @brief This function handles TIM1 break interrupt.
    268          */

   \                                 In section .text, align 2, keep-with-next
    269          void TIM1_BRK_IRQHandler(void)
    270          {
    271            /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
    272          
    273            /* USER CODE END TIM1_BRK_IRQn 0 */
    274            HAL_TIM_IRQHandler(&htim1);
   \                     TIM1_BRK_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_4
   \        0x2   0x.... 0x....      B.W      HAL_TIM_IRQHandler
    275            /* USER CODE BEGIN TIM1_BRK_IRQn 1 */
    276          
    277            /* USER CODE END TIM1_BRK_IRQn 1 */
    278          }
    279          
    280          /**
    281          * @brief This function handles TIM2 global interrupt.
    282          */

   \                                 In section .text, align 2, keep-with-next
    283          void TIM2_IRQHandler(void)
    284          {
   \                     TIM2_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    285            /* USER CODE BEGIN TIM2_IRQn 0 */
    286            //timer2Cnt++;
    287            //TEST_OP = timer2Cnt%2;         
    288          
    289          
    290            /* USER CODE END TIM2_IRQn 0 */
    291            HAL_TIM_IRQHandler(&htim2);
   \        0x2   0x....             LDR.N    R0,??DataTable11_5
   \        0x4   0x.... 0x....      BL       HAL_TIM_IRQHandler
    292            /* USER CODE BEGIN TIM2_IRQn 1 */
    293            if(mksTmp.cfg_hardware_test_enable)
   \        0x8   0x....             LDR.N    R0,??DataTable11_6
   \        0xA   0x7CC0             LDRB     R0,[R0, #+19]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD003             BEQ.N    ??TIM2_IRQHandler_0
    294              mksStepperTest();
   \       0x10   0xE8BD 0x4001      POP      {R0,LR}
   \       0x14   0x.... 0x....      B.W      mksStepperTest
    295            else
    296              IsrStepperHandler();
   \                     ??TIM2_IRQHandler_0: (+1)
   \       0x18   0xE8BD 0x4001      POP      {R0,LR}
   \       0x1C   0x.... 0x....      B.W      IsrStepperHandler
    297            /* USER CODE END TIM2_IRQn 1 */
    298          }
    299          
    300          /**
    301          * @brief This function handles TIM3 global interrupt.
    302          */

   \                                 In section .text, align 2, keep-with-next
    303          void TIM3_IRQHandler(void)
    304          {
    305            /* USER CODE BEGIN TIM3_IRQn 0 */
    306          
    307            /* USER CODE END TIM3_IRQn 0 */
    308            HAL_TIM_IRQHandler(&htim3);
   \                     TIM3_IRQHandler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_7
   \        0x2   0x.... 0x....      B.W      HAL_TIM_IRQHandler
    309            /* USER CODE BEGIN TIM3_IRQn 1 */
    310            /* USER CODE END TIM3_IRQn 1 */
    311          }
    312          
    313          /**
    314          * @brief This function handles TIM4 global interrupt.
    315          */

   \                                 In section .text, align 2, keep-with-next
    316          void TIM4_IRQHandler(void)
    317          {
   \                     TIM4_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    318            /* USER CODE BEGIN TIM4_IRQn 0 */
    319            //timer4Cnt++;
    320            //ESTEP_OP = timer4Cnt%2;      //PA6
    321          
    322            /* USER CODE END TIM4_IRQn 0 */
    323            HAL_TIM_IRQHandler(&htim4);
   \        0x2   0x....             LDR.N    R0,??DataTable11_8
   \        0x4   0x.... 0x....      BL       HAL_TIM_IRQHandler
    324            /* USER CODE BEGIN TIM4_IRQn 1 */
    325              IsrTemperatureHandler();
   \        0x8   0xE8BD 0x4001      POP      {R0,LR}
   \        0xC   0x.... 0x....      B.W      IsrTemperatureHandler
    326          
    327            /* USER CODE END TIM4_IRQn 1 */
    328          }
    329          
    330          /**
    331          * @brief This function handles SPI2 global interrupt.
    332          */
    333          #if 1  //SPI_DMA

   \                                 In section .text, align 2, keep-with-next
    334          void SPI2_IRQHandler(void)
    335          {
    336            /* USER CODE BEGIN SPI2_IRQn 0 */
    337          
    338            /* USER CODE END SPI2_IRQn 0 */
    339            HAL_SPI_IRQHandler(&hspi2);
   \                     _Z15SPI2_IRQHandlerv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11_9
   \        0x2   0x.... 0x....      B.W      HAL_SPI_IRQHandler
    340            /* USER CODE BEGIN SPI2_IRQn 1 */
    341          
    342            /* USER CODE END SPI2_IRQn 1 */
    343          }
    344          #endif
    345          
    346          
    347          /**
    348          * @brief This function handles USART1 global interrupt.
    349          */

   \                                 In section .text, align 2, keep-with-next
    350          void USART1_IRQHandler(void)
    351          {
   \                     USART1_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    352            /* USER CODE BEGIN USART1_IRQn 0 */
    353          
    354            /* USER CODE END USART1_IRQn 0 */
    355            //HAL_UART_IRQHandler(&huart1);
    356            /* USER CODE BEGIN USART1_IRQn 1 */
    357            HAL_UART_IRQHandler(customizedSerial.getUartStack()->pUart);
   \        0x2   0x....             LDR.N    R0,??DataTable11_10
   \        0x4   0x.... 0x....      BL       _ZN12MarlinSerial12getUartStackEv
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0xE8BD 0x4002      POP      {R1,LR}
   \        0xE   0x.... 0x....      B.W      HAL_UART_IRQHandler
    358            /* USER CODE END USART1_IRQn 1 */
    359          }
    360          
    361          /**
    362          * @brief This function handles USART2 global interrupt.
    363          */

   \                                 In section .text, align 2, keep-with-next
    364          void USART2_IRQHandler(void)
    365          {
   \                     USART2_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    366            /* USER CODE BEGIN USART1_IRQn 0 */
    367          
    368            /* USER CODE END USART1_IRQn 0 */
    369            //HAL_UART_IRQHandler(&huart1);
    370            /* USER CODE BEGIN USART1_IRQn 1 */
    371          #ifdef USE_MKS_WIFI 
    372            HAL_UART_IRQHandler(serial2.getUartStack()->pUart);
   \        0x2   0x....             LDR.N    R0,??DataTable11_11
   \        0x4   0x.... 0x....      BL       _ZN12MarlinSerial12getUartStackEv
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0x.... 0x....      BL       HAL_UART_IRQHandler
    373            WIFI_IO1_SET();
   \        0xE   0x2201             MOVS     R2,#+1
   \       0x10   0xF44F 0x6100      MOV      R1,#+2048
   \       0x14   0x....             LDR.N    R0,??DataTable11_12  ;; 0x40011000
   \       0x16   0xE8BD 0x4008      POP      {R3,LR}
   \       0x1A   0x.... 0x....      B.W      HAL_GPIO_WritePin
    374          #endif  
    375            /* USER CODE END USART1_IRQn 1 */
    376          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     hdma_adc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x....'....        DC32     hdma_spi2_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x....'....        DC32     hdma_spi2_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     hadc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x....'....        DC32     htim1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x....'....        DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x....'....        DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \        0x0   0x....'....        DC32     htim3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \        0x0   0x....'....        DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \        0x0   0x....'....        DC32     hspi2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \        0x0   0x....'....        DC32     serial2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \        0x0   0x4001'1000        DC32     0x40011000
    377          
    378          /* USER CODE BEGIN 1 */
    379          
    380          /* USER CODE END 1 */
    381          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADC1_2_IRQHandler
         0   -> HAL_ADC_IRQHandler
       0   BusFault_Handler
       0   DMA1_Channel1_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA1_Channel4_IRQHandler()
         0   -> HAL_DMA_IRQHandler
       0   DMA1_Channel5_IRQHandler()
         0   -> HAL_DMA_IRQHandler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SPI2_IRQHandler()
         0   -> HAL_SPI_IRQHandler
       0   SVC_Handler
       8   SysTick_Handler
         8   -> HAL_IncTick
         0   -> HAL_SYSTICK_IRQHandler
       0   TIM1_BRK_IRQHandler
         0   -> HAL_TIM_IRQHandler
       8   TIM2_IRQHandler
         8   -> HAL_TIM_IRQHandler
         0   -> IsrStepperHandler
         0   -> mksStepperTest
       0   TIM3_IRQHandler
         0   -> HAL_TIM_IRQHandler
       8   TIM4_IRQHandler
         8   -> HAL_TIM_IRQHandler
         0   -> IsrTemperatureHandler
       8   USART1_IRQHandler
         0   -> HAL_UART_IRQHandler
         8   -> MarlinSerial::getUartStack()
       8   USART2_IRQHandler
         0   -> HAL_GPIO_WritePin
         8   -> HAL_UART_IRQHandler
         8   -> MarlinSerial::getUartStack()
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       6  ADC1_2_IRQHandler
       2  BusFault_Handler
       6  DMA1_Channel1_IRQHandler
       6  DMA1_Channel4_IRQHandler()
       6  DMA1_Channel5_IRQHandler()
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       6  SPI2_IRQHandler()
       2  SVC_Handler
      14  SysTick_Handler
       6  TIM1_BRK_IRQHandler
      32  TIM2_IRQHandler
       6  TIM3_IRQHandler
      16  TIM4_IRQHandler
      18  USART1_IRQHandler
      30  USART2_IRQHandler
       2  UsageFault_Handler
       4  timer2Cnt
       4  timer4Cnt

 
   8 bytes in section .bss
 220 bytes in section .text
 
 220 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: 3
