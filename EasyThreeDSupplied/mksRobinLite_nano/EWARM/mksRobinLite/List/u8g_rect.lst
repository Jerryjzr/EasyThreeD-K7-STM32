###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rect.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5913.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rect.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_rect.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_rect.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_rect.c
      1          /*
      2          
      3            u8g_rect.c
      4            
      5            U8G high level interface for horizontal and vertical things
      6          
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2011, olikraus@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35            
     36            
     37          */
     38          
     39          #include "u8g.h"
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
     42          {
   \                     u8g_draw_hline: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
     43            uint8_t pixel = 0x0ff;
   \   0000000A   0xE00A             B.N      ??u8g_draw_hline_0
     44            while( w >= 8 )
     45            {
     46              u8g_Draw8Pixel(u8g, x, y, 0, pixel);
   \                     ??u8g_draw_hline_1: (+1)
   \   0000000C   0x20FF             MOVS     R0,#+255
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       u8g_Draw8Pixel
     47              w-=8;
   \   0000001E   0x3F08             SUBS     R7,R7,#+8
     48              x+=8;
   \   00000020   0x3508             ADDS     R5,R5,#+8
     49            }
   \                     ??u8g_draw_hline_0: (+1)
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2808             CMP      R0,#+8
   \   00000028   0xDAF0             BGE.N    ??u8g_draw_hline_1
     50            if ( w != 0 )
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD010             BEQ.N    ??u8g_draw_hline_2
     51            {
     52              w ^=7;
     53              w++;
     54              pixel <<= w&7;
     55              u8g_Draw8Pixel(u8g, x, y, 0, pixel);
   \   00000032   0x20FF             MOVS     R0,#+255
   \   00000034   0xF087 0x0707      EOR      R7,R7,#0x7
   \   00000038   0x1C7F             ADDS     R7,R7,#+1
   \   0000003A   0xF007 0x0707      AND      R7,R7,#0x7
   \   0000003E   0xFA00 0xF707      LSL      R7,R0,R7
   \   00000042   0xB2FF             UXTB     R7,R7
   \   00000044   0x9700             STR      R7,[SP, #+0]
   \   00000046   0x2300             MOVS     R3,#+0
   \   00000048   0x4632             MOV      R2,R6
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0xB2C9             UXTB     R1,R1
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_Draw8Pixel
     56            }
     57          }
   \                     ??u8g_draw_hline_2: (+1)
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
     60          {
   \                     u8g_draw_vline: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
     61            uint8_t pixel = 0x0ff;
   \   0000000A   0xE00A             B.N      ??u8g_draw_vline_0
     62            while( h >= 8 )
     63            {
     64              u8g_Draw8Pixel(u8g, x, y, 1, pixel);
   \                     ??u8g_draw_vline_1: (+1)
   \   0000000C   0x20FF             MOVS     R0,#+255
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0xB2D2             UXTB     R2,R2
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       u8g_Draw8Pixel
     65              h-=8;
   \   0000001E   0x3F08             SUBS     R7,R7,#+8
     66              y+=8;
   \   00000020   0x3608             ADDS     R6,R6,#+8
     67            }
   \                     ??u8g_draw_vline_0: (+1)
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2808             CMP      R0,#+8
   \   00000028   0xDAF0             BGE.N    ??u8g_draw_vline_1
     68            if ( h != 0 )
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD010             BEQ.N    ??u8g_draw_vline_2
     69            {
     70              h ^=7;
     71              h++;
     72              pixel <<= h&7;
     73              u8g_Draw8Pixel(u8g, x, y, 1, pixel);
   \   00000032   0x20FF             MOVS     R0,#+255
   \   00000034   0xF087 0x0707      EOR      R7,R7,#0x7
   \   00000038   0x1C7F             ADDS     R7,R7,#+1
   \   0000003A   0xF007 0x0707      AND      R7,R7,#0x7
   \   0000003E   0xFA00 0xF707      LSL      R7,R0,R7
   \   00000042   0xB2FF             UXTB     R7,R7
   \   00000044   0x9700             STR      R7,[SP, #+0]
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0x4632             MOV      R2,R6
   \   0000004A   0xB2D2             UXTB     R2,R2
   \   0000004C   0x4629             MOV      R1,R5
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_Draw8Pixel
     74            }
     75          }
   \                     ??u8g_draw_vline_2: (+1)
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void u8g_DrawHLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
     78          {
   \                     u8g_DrawHLine: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
     79            if ( u8g_IsBBXIntersection(u8g, x, y, w, 1) == 0 )
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD007             BEQ.N    ??u8g_DrawHLine_0
     80              return;
     81            u8g_draw_hline(u8g, x, y, w);
   \   00000018   0x463B             MOV      R3,R7
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xB001             ADD      SP,SP,#+4
   \   00000022   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000026   0x....             B.N      u8g_draw_hline
   \                     ??u8g_DrawHLine_0: (+1)
   \   00000028   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void u8g_DrawVLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
     85          {
   \                     u8g_DrawVLine: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
     86            if ( u8g_IsBBXIntersection(u8g, x, y, 1, w) == 0 )
   \   0000000A   0x4638             MOV      R0,R7
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD007             BEQ.N    ??u8g_DrawVLine_0
     87              return;
     88            u8g_draw_vline(u8g, x, y, w);
   \   0000001A   0x463B             MOV      R3,R7
   \   0000001C   0x4632             MOV      R2,R6
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB001             ADD      SP,SP,#+4
   \   00000024   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000028   0x....             B.N      u8g_draw_vline
   \                     ??u8g_DrawVLine_0: (+1)
   \   0000002A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     89          }
     90          
     91          /* restrictions: w > 0 && h > 0 */

   \                                 In section .text, align 2, keep-with-next
     92          void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
     93          {
   \                     u8g_DrawFrame: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
     94            u8g_uint_t xtmp = x;
     95            
     96            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD01E             BEQ.N    ??u8g_DrawFrame_0
     97              return;
     98          
     99            
    100            u8g_draw_hline(u8g, x, y, w);
   \   0000001C   0x4643             MOV      R3,R8
   \   0000001E   0x463A             MOV      R2,R7
   \   00000020   0x4631             MOV      R1,R6
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       u8g_draw_hline
    101            u8g_draw_vline(u8g, x, y, h);
   \   00000028   0x4623             MOV      R3,R4
   \   0000002A   0x463A             MOV      R2,R7
   \   0000002C   0x4631             MOV      R1,R6
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       u8g_draw_vline
    102            x+=w;
    103            x--;
    104            u8g_draw_vline(u8g, x, y, h);
   \   00000034   0x4623             MOV      R3,R4
   \   00000036   0x463A             MOV      R2,R7
   \   00000038   0xEB08 0x0006      ADD      R0,R8,R6
   \   0000003C   0x1E41             SUBS     R1,R0,#+1
   \   0000003E   0xB2C9             UXTB     R1,R1
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       u8g_draw_vline
    105            y+=h;
    106            y--;
    107            u8g_draw_hline(u8g, xtmp, y, w);
   \   00000046   0x4643             MOV      R3,R8
   \   00000048   0x19E7             ADDS     R7,R4,R7
   \   0000004A   0x1E7A             SUBS     R2,R7,#+1
   \   0000004C   0xB2D2             UXTB     R2,R2
   \   0000004E   0x4631             MOV      R1,R6
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0xB002             ADD      SP,SP,#+8
   \   00000054   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000058   0x....             B.N      u8g_draw_hline
   \                     ??u8g_DrawFrame_0: (+1)
   \   0000005A   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
    111          {
   \                     u8g_draw_box: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C06             LDR      R4,[SP, #+24]
    112            do
    113            { 
    114              u8g_draw_hline(u8g, x, y, w);
   \                     ??u8g_draw_box_0: (+1)
   \   0000000E   0x4643             MOV      R3,R8
   \   00000010   0x463A             MOV      R2,R7
   \   00000012   0xB2D2             UXTB     R2,R2
   \   00000014   0x4631             MOV      R1,R6
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       u8g_draw_hline
    115              y++;    
   \   0000001C   0x1C7F             ADDS     R7,R7,#+1
    116              h--;
   \   0000001E   0x1E64             SUBS     R4,R4,#+1
    117            } while( h != 0 );
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD1F2             BNE.N    ??u8g_draw_box_0
    118          }
   \   00000028   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    119          
    120          /* restrictions: h > 0 */

   \                                 In section .text, align 2, keep-with-next
    121          void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
    122          {
   \                     u8g_DrawBox: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    123            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD006             BEQ.N    ??u8g_DrawBox_0
    124              return;
    125            u8g_draw_box(u8g, x, y, w, h);
   \   0000001C   0x9400             STR      R4,[SP, #+0]
   \   0000001E   0x4643             MOV      R3,R8
   \   00000020   0x463A             MOV      R2,R7
   \   00000022   0x4631             MOV      R1,R6
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       u8g_draw_box
    126          }
   \                     ??u8g_DrawBox_0: (+1)
   \   0000002A   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    127          
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void u8g_DrawRFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
    130          {
   \                     u8g_DrawRFrame: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0C             LDR      R4,[SP, #+48]
    131            u8g_uint_t xl, yu;
    132          
    133            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD06D             BEQ.N    ??u8g_DrawRFrame_0
    134              return;
   \   0000001C   0xF8DD 0xA034      LDR      R10,[SP, #+52]
    135          
    136            xl = x;
    137            xl += r;
   \   00000020   0xEB0A 0x0B06      ADD      R11,R10,R6
    138            yu = y;
    139            yu += r;
   \   00000024   0xEB0A 0x0907      ADD      R9,R10,R7
    140           
    141            {
    142              u8g_uint_t yl, xr;
    143                
    144              xr = x;
    145              xr += w;
    146              xr -= r;
    147              xr -= 1;
   \   00000028   0xEB08 0x0006      ADD      R0,R8,R6
   \   0000002C   0xEBA0 0x000A      SUB      R0,R0,R10
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0xF88D 0x0005      STRB     R0,[SP, #+5]
    148              
    149              yl = y;
    150              yl += h;
    151              yl -= r; 
    152              yl -= 1;
   \   00000036   0x19E0             ADDS     R0,R4,R7
   \   00000038   0xEBA0 0x000A      SUB      R0,R0,R10
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    153          
    154              u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x4653             MOV      R3,R10
   \   00000048   0x464A             MOV      R2,R9
   \   0000004A   0xB2D2             UXTB     R2,R2
   \   0000004C   0x4659             MOV      R1,R11
   \   0000004E   0xB2C9             UXTB     R1,R1
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       u8g_draw_circle
    155              u8g_draw_circle(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x4653             MOV      R3,R10
   \   0000005C   0x464A             MOV      R2,R9
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       u8g_draw_circle
    156              u8g_draw_circle(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0x9000             STR      R0,[SP, #+0]
   \   0000006E   0x4653             MOV      R3,R10
   \   00000070   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000074   0x4659             MOV      R1,R11
   \   00000076   0xB2C9             UXTB     R1,R1
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x.... 0x....      BL       u8g_draw_circle
    157              u8g_draw_circle(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
   \   0000007E   0x2008             MOVS     R0,#+8
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x4653             MOV      R3,R10
   \   00000084   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000088   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000008C   0x4628             MOV      R0,R5
   \   0000008E   0x.... 0x....      BL       u8g_draw_circle
    158            }
    159          
    160            {
    161              u8g_uint_t ww, hh;
    162          
    163              ww = w;
    164              ww -= r;
    165              ww -= r;
    166              ww -= 2;
   \   00000092   0xEBA8 0x004A      SUB      R0,R8,R10, LSL #+1
   \   00000096   0x1E80             SUBS     R0,R0,#+2
   \   00000098   0xF88D 0x0000      STRB     R0,[SP, #+0]
    167              hh = h;
    168              hh -= r;
    169              hh -= r;
    170              hh -= 2;
   \   0000009C   0xEBA4 0x0A4A      SUB      R10,R4,R10, LSL #+1
   \   000000A0   0xF1AA 0x0A02      SUB      R10,R10,#+2
    171              
    172              xl++;
   \   000000A4   0xF10B 0x0B01      ADD      R11,R11,#+1
    173              yu++;
   \   000000A8   0xF109 0x0901      ADD      R9,R9,#+1
    174              h--;
    175              w--;
    176              u8g_draw_hline(u8g, xl, y, ww);
   \   000000AC   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   000000B0   0x463A             MOV      R2,R7
   \   000000B2   0x4659             MOV      R1,R11
   \   000000B4   0xB2C9             UXTB     R1,R1
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       u8g_draw_hline
    177              u8g_draw_hline(u8g, xl, y+h, ww);
   \   000000BC   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   000000C0   0x19E7             ADDS     R7,R4,R7
   \   000000C2   0x1E7A             SUBS     R2,R7,#+1
   \   000000C4   0xB2D2             UXTB     R2,R2
   \   000000C6   0x4659             MOV      R1,R11
   \   000000C8   0xB2C9             UXTB     R1,R1
   \   000000CA   0x4628             MOV      R0,R5
   \   000000CC   0x.... 0x....      BL       u8g_draw_hline
    178              u8g_draw_vline(u8g, x,         yu, hh);
   \   000000D0   0x4653             MOV      R3,R10
   \   000000D2   0xB2DB             UXTB     R3,R3
   \   000000D4   0x464A             MOV      R2,R9
   \   000000D6   0xB2D2             UXTB     R2,R2
   \   000000D8   0x4631             MOV      R1,R6
   \   000000DA   0x4628             MOV      R0,R5
   \   000000DC   0x.... 0x....      BL       u8g_draw_vline
    179              u8g_draw_vline(u8g, x+w, yu, hh);
   \   000000E0   0x4653             MOV      R3,R10
   \   000000E2   0xB2DB             UXTB     R3,R3
   \   000000E4   0x464A             MOV      R2,R9
   \   000000E6   0xB2D2             UXTB     R2,R2
   \   000000E8   0x4446             ADD      R6,R8,R6
   \   000000EA   0x1E71             SUBS     R1,R6,#+1
   \   000000EC   0xB2C9             UXTB     R1,R1
   \   000000EE   0x4628             MOV      R0,R5
   \   000000F0   0xB003             ADD      SP,SP,#+12
   \   000000F2   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000000F6   0x....             B.N      u8g_draw_vline
    180            }
   \                     ??u8g_DrawRFrame_0: (+1)
   \   000000F8   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    181          }
    182          

   \                                 In section .text, align 2, keep-with-next
    183          void u8g_DrawRBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
    184          {
   \                     u8g_DrawRBox: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C0C             LDR      R4,[SP, #+48]
    185            u8g_uint_t xl, yu;
    186              u8g_uint_t yl, xr;
    187          
    188            if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       u8g_IsBBXIntersection
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD069             BEQ.N    ??u8g_DrawRBox_0
    189              return;
   \   0000001C   0x9D0D             LDR      R5,[SP, #+52]
    190          
    191            xl = x;
    192            xl += r;
   \   0000001E   0xEB05 0x0B07      ADD      R11,R5,R7
    193            yu = y;
    194            yu += r;
   \   00000022   0xEB05 0x0A08      ADD      R10,R5,R8
    195           
    196            xr = x;
    197            xr += w;
    198            xr -= r;
    199            xr -= 1;
   \   00000026   0xEB09 0x0007      ADD      R0,R9,R7
   \   0000002A   0x1B40             SUBS     R0,R0,R5
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0xF88D 0x0005      STRB     R0,[SP, #+5]
    200            
    201            yl = y;
    202            yl += h;
    203            yl -= r; 
    204            yl -= 1;
   \   00000032   0xEB04 0x0008      ADD      R0,R4,R8
   \   00000036   0x1B40             SUBS     R0,R0,R5
   \   00000038   0x1E40             SUBS     R0,R0,#+1
   \   0000003A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    205          
    206            u8g_draw_disc(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x462B             MOV      R3,R5
   \   00000044   0x4652             MOV      R2,R10
   \   00000046   0xB2D2             UXTB     R2,R2
   \   00000048   0x4659             MOV      R1,R11
   \   0000004A   0xB2C9             UXTB     R1,R1
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x.... 0x....      BL       u8g_draw_disc
    207            u8g_draw_disc(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x462B             MOV      R3,R5
   \   00000058   0x4652             MOV      R2,R10
   \   0000005A   0xB2D2             UXTB     R2,R2
   \   0000005C   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0x.... 0x....      BL       u8g_draw_disc
    208            u8g_draw_disc(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x462B             MOV      R3,R5
   \   0000006C   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000070   0x4659             MOV      R1,R11
   \   00000072   0xB2C9             UXTB     R1,R1
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0x.... 0x....      BL       u8g_draw_disc
    209            u8g_draw_disc(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
   \   0000007A   0x2008             MOVS     R0,#+8
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0x462B             MOV      R3,R5
   \   00000080   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000084   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000088   0x4630             MOV      R0,R6
   \   0000008A   0x.... 0x....      BL       u8g_draw_disc
    210          
    211            {
    212              u8g_uint_t ww, hh;
    213          
    214              ww = w;
    215              ww -= r;
    216              ww -= r;
    217              ww -= 2;
   \   0000008E   0xEBA9 0x0045      SUB      R0,R9,R5, LSL #+1
   \   00000092   0x1E80             SUBS     R0,R0,#+2
   \   00000094   0xF88D 0x0005      STRB     R0,[SP, #+5]
    218              hh = h;
    219              hh -= r;
    220              hh -= r;
    221              hh -= 2;
    222              
    223              xl++;
   \   00000098   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   0000009C   0xF88D 0xB006      STRB     R11,[SP, #+6]
    224              yu++;
    225              h--;
    226              u8g_draw_box(u8g, xl, y, ww, r+1);
   \   000000A0   0xF105 0x0B01      ADD      R11,R5,#+1
   \   000000A4   0x4658             MOV      R0,R11
   \   000000A6   0xB2C0             UXTB     R0,R0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0xF89D 0x3005      LDRB     R3,[SP, #+5]
   \   000000AE   0x4642             MOV      R2,R8
   \   000000B0   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   000000B4   0x4630             MOV      R0,R6
   \   000000B6   0x.... 0x....      BL       u8g_draw_box
    227              u8g_draw_box(u8g, xl, yl, ww, r+1);
   \   000000BA   0xFA5F 0xFB8B      UXTB     R11,R11
   \   000000BE   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \   000000C2   0xF89D 0x3005      LDRB     R3,[SP, #+5]
   \   000000C6   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000000CA   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   000000CE   0x4630             MOV      R0,R6
   \   000000D0   0x.... 0x....      BL       u8g_draw_box
    228              //u8g_draw_hline(u8g, xl, y+h, ww);
    229              u8g_draw_box(u8g, x, yu, w, hh);
   \   000000D4   0xEBA4 0x0445      SUB      R4,R4,R5, LSL #+1
   \   000000D8   0x1EA0             SUBS     R0,R4,#+2
   \   000000DA   0xB2C0             UXTB     R0,R0
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0x464B             MOV      R3,R9
   \   000000E0   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000000E4   0x4652             MOV      R2,R10
   \   000000E6   0xB2D2             UXTB     R2,R2
   \   000000E8   0x4639             MOV      R1,R7
   \   000000EA   0x4630             MOV      R0,R6
   \   000000EC   0x.... 0x....      BL       u8g_draw_box
    230              //u8g_draw_vline(u8g, x+w, yu, hh);
    231            }
    232          }
   \                     ??u8g_DrawRBox_0: (+1)
   \   000000F0   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_DrawBox
        32   -> u8g_IsBBXIntersection
        32   -> u8g_draw_box
      32   u8g_DrawFrame
        32   -> u8g_IsBBXIntersection
         0   -> u8g_draw_hline
        32   -> u8g_draw_hline
        32   -> u8g_draw_vline
      24   u8g_DrawHLine
        24   -> u8g_IsBBXIntersection
         0   -> u8g_draw_hline
      48   u8g_DrawRBox
        48   -> u8g_IsBBXIntersection
        48   -> u8g_draw_box
        48   -> u8g_draw_disc
      48   u8g_DrawRFrame
        48   -> u8g_IsBBXIntersection
        48   -> u8g_draw_circle
        48   -> u8g_draw_hline
         0   -> u8g_draw_vline
        48   -> u8g_draw_vline
      24   u8g_DrawVLine
        24   -> u8g_IsBBXIntersection
         0   -> u8g_draw_vline
      24   u8g_draw_box
        24   -> u8g_draw_hline
      24   u8g_draw_hline
        24   -> u8g_Draw8Pixel
      24   u8g_draw_vline
        24   -> u8g_Draw8Pixel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      46  u8g_DrawBox
      94  u8g_DrawFrame
      42  u8g_DrawHLine
     244  u8g_DrawRBox
     252  u8g_DrawRFrame
      44  u8g_DrawVLine
      44  u8g_draw_box
      86  u8g_draw_hline
      86  u8g_draw_vline

 
 938 bytes in section .text
 
 938 bytes of CODE memory

Errors: none
Warnings: none
