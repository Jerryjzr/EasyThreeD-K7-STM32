###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1306_128x32.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW44C0.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1306_128x32.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_ssd1306_128x32.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_ssd1306_128x32.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ssd1306_128x32.c
      1          /*
      2          
      3            u8g_dev_ssd1306_128x32.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33          
     34            
     35            23 Feb 2013: Fixed, Issue 147
     36          
     37          */
     38          
     39          
     40          #include "u8g.h"
     41          
     42          #define WIDTH 128
     43          #define HEIGHT 32
     44          #define PAGE_HEIGHT 8
     45          
     46          
     47          /* init sequence adafruit 128x32 OLED (NOT TESTED) */
     48          static const uint8_t u8g_dev_ssd1306_128x32_adafruit1_init_seq[] PROGMEM = {
                                      ^
Warning[Pe177]: variable "u8g_dev_ssd1306_128x32_adafruit1_init_seq" was
          declared but never referenced
     49            U8G_ESC_CS(0),        /* disable chip */
     50            U8G_ESC_ADR(0),       /* instruction mode */
     51            U8G_ESC_RST(1),       /* do reset low pulse with (1*16)+2 milliseconds */
     52            U8G_ESC_CS(1),        /* enable chip */
     53          
     54            0x0ae,				/* display off, sleep mode */
     55            0x0d5, 0x080,			/* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
     56            0x0a8, 0x03f,			/* */
     57          
     58            0x0d3, 0x000,			/*  */
     59          
     60            0x040,				/* start line */
     61            
     62            0x08d, 0x010,			/* [1] charge pump setting (p62): 0x014 enable, 0x010 disable */
     63          
     64            0x020, 0x000,			/* */
     65            0x0a1,				/* segment remap a0/a1*/
     66            0x0c8,				/* c0: scan dir normal, c8: reverse */
     67            0x0da, 0x012,			/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
     68            0x081, 0x09f,			/* [1] set contrast control */
     69            0x0d9, 0x022,			/* [1] pre-charge period 0x022/f1*/
     70            0x0db, 0x040,			/* vcomh deselect level */
     71            
     72            0x02e,				/* 2012-05-27: Deactivate scroll */ 
     73            0x0a4,				/* output ram to display */
     74            0x0a6,				/* none inverted normal display mode */
     75            0x0af,				/* display on */
     76          
     77            U8G_ESC_CS(0),        /* disable chip */
     78            U8G_ESC_END           /* end of sequence */
     79          };
     80          
     81          
     82          /* init sequence adafruit 128x32 OLED (NOT TESTED) */
     83          static const uint8_t u8g_dev_ssd1306_128x32_adafruit2_init_seq[] PROGMEM = {
                                      ^
Warning[Pe177]: variable "u8g_dev_ssd1306_128x32_adafruit2_init_seq" was
          declared but never referenced
     84            U8G_ESC_CS(0),        /* disable chip */
     85            U8G_ESC_ADR(0),       /* instruction mode */
     86            U8G_ESC_RST(1),       /* do reset low pulse with (1*16)+2 milliseconds */
     87            U8G_ESC_CS(1),        /* enable chip */
     88          
     89            0x0ae,				/* display off, sleep mode */
     90            0x0d5, 0x080,			/* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
     91            0x0a8, 0x03f,			/* */
     92          
     93            0x0d3, 0x000,			/*  */
     94          
     95            0x040,				/* start line */
     96            
     97            0x08d, 0x014,			/* [2] charge pump setting (p62): 0x014 enable, 0x010 disable */
     98          
     99            0x020, 0x000,			/* */
    100            0x0a1,				/* segment remap a0/a1*/
    101            0x0c8,				/* c0: scan dir normal, c8: reverse */
    102            0x0da, 0x012,			/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
    103            0x081, 0x0cf,			/* [2] set contrast control */
    104            0x0d9, 0x0f1,			/* [2] pre-charge period 0x022/f1*/
    105            0x0db, 0x040,			/* vcomh deselect level */
    106            
    107            0x02e,				/* 2012-05-27: Deactivate scroll */ 
    108            0x0a4,				/* output ram to display */
    109            0x0a6,				/* none inverted normal display mode */
    110            0x0af,				/* display on */
    111          
    112            U8G_ESC_CS(0),        /* disable chip */
    113            U8G_ESC_END           /* end of sequence */
    114          };
    115          
    116          
    117          /* init sequence adafruit 128x32 OLED (TESTED - WORKING 23.02.13), like adafruit3, but with page addressing mode */

   \                                 In section .text, align 4, keep-with-next
    118          static const uint8_t u8g_dev_ssd1306_128x32_adafruit3_init_seq[] PROGMEM = {
   \                     u8g_dev_ssd1306_128x32_adafruit3_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 193, 255, 209, 174, 213, 128, 168, 31, 211
   \              0xFF 0xE0    
   \              0xFF 0xC1    
   \              0xFF 0xD1    
   \              0xAE 0xD5    
   \              0x80 0xA8    
   \              0x1F 0xD3    
   \   0000000E   0x00 0x40          DC8 0, 64, 141, 20, 32, 2, 161, 200, 218, 2, 129, 207, 217, 241, 219
   \              0x8D 0x14    
   \              0x20 0x02    
   \              0xA1 0xC8    
   \              0xDA 0x02    
   \              0x81 0xCF    
   \              0xD9 0xF1    
   \              0xDB         
   \   0000001D   0x40 0x2E          DC8 64, 46, 164, 166, 175, 255, 208, 255, 254, 0, 0
   \              0xA4 0xA6    
   \              0xAF 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
   \              0x00         
    119            U8G_ESC_CS(0),        /* disable chip */
    120            U8G_ESC_ADR(0),       /* instruction mode */
    121            U8G_ESC_RST(1),		/* do reset low pulse with (1*16)+2 milliseconds */
    122            U8G_ESC_CS(1),        /* enable chip */
    123          
    124            0x0ae,				/* display off, sleep mode */
    125            0x0d5, 0x080,			/* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
    126            0x0a8, 0x01f,			/* Feb 23, 2013: 128x32 OLED: 0x01f,  128x32 OLED 0x03f */
    127          
    128            0x0d3, 0x000,			/*  */
    129          
    130            0x040,				/* start line */
    131            
    132            0x08d, 0x014,			/* [2] charge pump setting (p62): 0x014 enable, 0x010 disable */ 
    133          
    134            0x020, 0x002,			/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5), Feb 23, 2013: 128x32 OLED: 0x002,  128x32 OLED 0x012 */
    135            0x0a1,				/* segment remap a0/a1*/
    136            0x0c8,				/* c0: scan dir normal, c8: reverse */
    137            0x0da, 0x002,			/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
    138            0x081, 0x0cf,			/* [2] set contrast control */
    139            0x0d9, 0x0f1,			/* [2] pre-charge period 0x022/f1*/
    140            0x0db, 0x040,			/* vcomh deselect level */
    141            
    142            0x02e,				/* 2012-05-27: Deactivate scroll */ 
    143            0x0a4,				/* output ram to display */
    144            0x0a6,				/* none inverted normal display mode */
    145            0x0af,				/* display on */
    146          
    147            U8G_ESC_CS(0),        /* disable chip */
    148            U8G_ESC_END           /* end of sequence */
    149          };
    150          
    151          
    152          /* init sequence Univision datasheet (NOT TESTED) */
    153          static const uint8_t u8g_dev_ssd1306_128x32_univision_init_seq[] PROGMEM = {
                                      ^
Warning[Pe177]: variable "u8g_dev_ssd1306_128x32_univision_init_seq" was
          declared but never referenced
    154            U8G_ESC_CS(0),        /* disable chip */
    155            U8G_ESC_ADR(0),       /* instruction mode */
    156            U8G_ESC_RST(1),       /* do reset low pulse with (1*16)+2 milliseconds */
    157            U8G_ESC_CS(1),        /* enable chip */
    158          
    159            0x0ae,				/* display off, sleep mode */
    160            0x0d5, 0x080,			/* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
    161            0x0a8, 0x03f,			/* multiplex ratio */
    162            0x0d3, 0x000,			/* display offset */
    163            0x040,				/* start line */
    164            0x08d, 0x010,			/* charge pump setting (p62): 0x014 enable, 0x010 disable */
    165            0x0a1,				/* segment remap a0/a1*/
    166            0x0c8,				/* c0: scan dir normal, c8: reverse */
    167            0x0da, 0x012,			/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
    168            0x081, 0x09f,			/* set contrast control */
    169            0x0d9, 0x022,			/* pre-charge period */
    170            0x0db, 0x040,			/* vcomh deselect level */
    171            0x022, 0x000,			/* page addressing mode WRONG: 3 byte cmd! */
    172            0x0a4,				/* output ram to display */
    173            0x0a6,				/* none inverted normal display mode */
    174            0x0af,				/* display on */
    175            U8G_ESC_CS(0),        /* disable chip */
    176            U8G_ESC_END           /* end of sequence */
    177          };
    178          
    179          
    180          /* select one init sequence here */
    181          //define u8g_dev_ssd1306_128x32_init_seq u8g_dev_ssd1306_128x32_univision_init_seq
    182          //define u8g_dev_ssd1306_128x32_init_seq u8g_dev_ssd1306_128x32_adafruit1_init_seq
    183          //define u8g_dev_ssd1306_128x32_init_seq u8g_dev_ssd1306_128x32_adafruit2_init_seq
    184          #define u8g_dev_ssd1306_128x32_init_seq u8g_dev_ssd1306_128x32_adafruit3_init_seq
    185          
    186          

   \                                 In section .text, align 4, keep-with-next
    187          static const uint8_t u8g_dev_ssd1306_128x32_data_start[] PROGMEM = {
   \                     u8g_dev_ssd1306_128x32_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 16, 0, 255, 254
   \              0xFF 0xD1    
   \              0x10 0x00    
   \              0xFF 0xFE    
    188            U8G_ESC_ADR(0),       /* instruction mode */
    189            U8G_ESC_CS(1),        /* enable chip */
    190            0x010,				/* set upper 4 bit of the col adr. to 0 */
    191            0x000,				/* set lower 4 bit of the col adr. to 4  */
    192            U8G_ESC_END           /* end of sequence */
    193          };
    194          

   \                                 In section .text, align 4, keep-with-next
    195          static const uint8_t u8g_dev_ssd13xx_sleep_on[] PROGMEM = {
   \                     u8g_dev_ssd13xx_sleep_on:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 174, 255, 208, 255, 254, 0, 0, 0
   \              0xFF 0xD1    
   \              0xAE 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
   \              0x00 0x00    
    196            U8G_ESC_ADR(0),           /* instruction mode */
    197            U8G_ESC_CS(1),             /* enable chip */
    198            0x0ae,		/* display off */      
    199            U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
    200            U8G_ESC_END                /* end of sequence */
    201          };
    202          

   \                                 In section .text, align 4, keep-with-next
    203          static const uint8_t u8g_dev_ssd13xx_sleep_off[] PROGMEM = {
   \                     u8g_dev_ssd13xx_sleep_off:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 175, 255, 50, 255, 208, 255, 254, 0
   \              0xFF 0xD1    
   \              0xAF 0xFF    
   \              0x32 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
    204            U8G_ESC_ADR(0),           /* instruction mode */
    205            U8G_ESC_CS(1),             /* enable chip */
    206            0x0af,		/* display on */      
    207            U8G_ESC_DLY(50),       /* delay 50 ms */
    208            U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
    209            U8G_ESC_END                /* end of sequence */
    210          };
    211          

   \                                 In section .text, align 4, keep-with-next
    212          uint8_t u8g_dev_ssd1306_128x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    213          {
   \                     u8g_dev_ssd1306_128x32_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    214            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD006             BEQ.N    ??u8g_dev_ssd1306_128x32_fn_0
   \   00000012   0x2810             CMP      R0,#+16
   \   00000014   0xD03A             BEQ.N    ??u8g_dev_ssd1306_128x32_fn_1
   \   00000016   0x2811             CMP      R0,#+17
   \   00000018   0xD03E             BEQ.N    ??u8g_dev_ssd1306_128x32_fn_2
   \   0000001A   0x2815             CMP      R0,#+21
   \   0000001C   0xD013             BEQ.N    ??u8g_dev_ssd1306_128x32_fn_3
   \   0000001E   0xE008             B.N      ??u8g_dev_ssd1306_128x32_fn_4
    215            {
    216              case U8G_DEV_MSG_INIT:
    217                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_ssd1306_128x32_fn_0: (+1)
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       u8g_InitCom
    218                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
   \   00000028   0x....             ADR.N    R2,u8g_dev_ssd1306_128x32_adafruit3_init_seq
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       u8g_WriteEscSeqP
    219                break;
    220              case U8G_DEV_MSG_STOP:
    221                break;
    222              case U8G_DEV_MSG_PAGE_NEXT:
    223                {
    224                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    225                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
    226                  u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page);	/* select current page (SSD1306) */
    227                  u8g_SetAddress(u8g, dev, 1);					/* data mode */
    228                  if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    229                    return 0;
    230                  u8g_SetChipSelect(u8g, dev, 0);
    231                }
    232                break;
    233              case U8G_DEV_MSG_SLEEP_ON:
    234                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    235                return 1;
    236              case U8G_DEV_MSG_SLEEP_OFF:
    237                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    238                return 1;
    239          }
    240            
    241            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ssd1306_128x32_fn_4: (+1)
   \   00000032   0x463B             MOV      R3,R7
   \   00000034   0x4632             MOV      R2,R6
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000003E   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
   \                     ??u8g_dev_ssd1306_128x32_fn_5: (+1)
   \   00000042   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_ssd1306_128x32_fn_3: (+1)
   \   00000046   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   0000004A   0xBF00             Nop      
   \   0000004C   0x....             ADR.N    R2,u8g_dev_ssd1306_128x32_data_start
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000054   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000058   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       u8g_WriteByte
   \   00000064   0x2201             MOVS     R2,#+1
   \   00000066   0x4629             MOV      R1,R5
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       u8g_SetAddress
   \   0000006E   0x462A             MOV      R2,R5
   \   00000070   0x4621             MOV      R1,R4
   \   00000072   0x4640             MOV      R0,R8
   \   00000074   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD101             BNE.N    ??u8g_dev_ssd1306_128x32_fn_6
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xE7E0             B.N      ??u8g_dev_ssd1306_128x32_fn_5
   \                     ??u8g_dev_ssd1306_128x32_fn_6: (+1)
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x4629             MOV      R1,R5
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000008A   0xE7D2             B.N      ??u8g_dev_ssd1306_128x32_fn_4
   \                     ??u8g_dev_ssd1306_128x32_fn_1: (+1)
   \   0000008C   0x....             ADR.N    R2,u8g_dev_ssd13xx_sleep_on
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0xE7D4             B.N      ??u8g_dev_ssd1306_128x32_fn_5
   \                     ??u8g_dev_ssd1306_128x32_fn_2: (+1)
   \   00000098   0x....             ADR.N    R2,u8g_dev_ssd13xx_sleep_off
   \   0000009A   0x4620             MOV      R0,R4
   \   0000009C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE7CE             B.N      ??u8g_dev_ssd1306_128x32_fn_5
    242          }
    243          

   \                                 In section .text, align 4, keep-with-next
    244          uint8_t u8g_dev_ssd1306_128x32_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    245          {
   \                     u8g_dev_ssd1306_128x32_2x_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    246            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD006             BEQ.N    ??u8g_dev_ssd1306_128x32_2x_fn_0
   \   00000012   0x2810             CMP      R0,#+16
   \   00000014   0xD061             BEQ.N    ??u8g_dev_ssd1306_128x32_2x_fn_1
   \   00000016   0x2811             CMP      R0,#+17
   \   00000018   0xD066             BEQ.N    ??u8g_dev_ssd1306_128x32_2x_fn_2
   \   0000001A   0x2815             CMP      R0,#+21
   \   0000001C   0xD014             BEQ.N    ??u8g_dev_ssd1306_128x32_2x_fn_3
   \   0000001E   0xE008             B.N      ??u8g_dev_ssd1306_128x32_2x_fn_4
    247            {
    248              case U8G_DEV_MSG_INIT:
    249                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_0: (+1)
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       u8g_InitCom
    250                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
   \   00000028   0x....             ADR.N    R2,u8g_dev_ssd1306_128x32_adafruit3_init_seq
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       u8g_WriteEscSeqP
    251                break;
    252              case U8G_DEV_MSG_STOP:
    253                break;
    254              case U8G_DEV_MSG_PAGE_NEXT:
    255                {
    256                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    257          	
    258                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
    259                  u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2));	/* select current page (SSD1306) */
    260                  u8g_SetAddress(u8g, dev, 1);					/* data mode */
    261          	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
    262                  u8g_SetChipSelect(u8g, dev, 0);
    263          	
    264                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
    265                  u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1));	/* select current page (SSD1306) */
    266                  u8g_SetAddress(u8g, dev, 1);					/* data mode */
    267          	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
    268                  u8g_SetChipSelect(u8g, dev, 0);
    269                }
    270                break;
    271              case U8G_DEV_MSG_SLEEP_ON:
    272                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    273                return 1;
    274              case U8G_DEV_MSG_SLEEP_OFF:
    275                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    276                return 1;
    277            }
    278            return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_4: (+1)
   \   00000032   0x463B             MOV      R3,R7
   \   00000034   0x4632             MOV      R2,R6
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xB001             ADD      SP,SP,#+4
   \   0000003C   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   00000040   0x.... 0x....      B.W      u8g_dev_pb16v1_base_fn
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_5: (+1)
   \   00000044   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_3: (+1)
   \   00000048   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   0000004C   0x.... 0x....      ADR.W    R9,u8g_dev_ssd1306_128x32_data_start
   \   00000050   0x464A             MOV      R2,R9
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000058   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   0000005C   0x0052             LSLS     R2,R2,#+1
   \   0000005E   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   00000062   0xB2D2             UXTB     R2,R2
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       u8g_WriteByte
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       u8g_SetAddress
   \   00000076   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   0000007A   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_WriteSequence
   \   00000086   0x2200             MOVS     R2,#+0
   \   00000088   0x4629             MOV      R1,R5
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000090   0x464A             MOV      R2,R9
   \   00000092   0x4629             MOV      R1,R5
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   0000009A   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   0000009E   0x0052             LSLS     R2,R2,#+1
   \   000000A0   0x1C52             ADDS     R2,R2,#+1
   \   000000A2   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   000000A6   0xB2D2             UXTB     R2,R2
   \   000000A8   0x4629             MOV      R1,R5
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       u8g_WriteByte
   \   000000B0   0x2201             MOVS     R2,#+1
   \   000000B2   0x4629             MOV      R1,R5
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       u8g_SetAddress
   \   000000BA   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   000000BE   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000C2   0x4611             MOV      R1,R2
   \   000000C4   0x1843             ADDS     R3,R0,R1
   \   000000C6   0x4629             MOV      R1,R5
   \   000000C8   0x4620             MOV      R0,R4
   \   000000CA   0x.... 0x....      BL       u8g_WriteSequence
   \   000000CE   0x2200             MOVS     R2,#+0
   \   000000D0   0x4629             MOV      R1,R5
   \   000000D2   0x4620             MOV      R0,R4
   \   000000D4   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000D8   0xE7AB             B.N      ??u8g_dev_ssd1306_128x32_2x_fn_4
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_1: (+1)
   \   000000DA   0xBF00             Nop      
   \   000000DC   0x....             ADR.N    R2,u8g_dev_ssd13xx_sleep_on
   \   000000DE   0x4620             MOV      R0,R4
   \   000000E0   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0xE7AD             B.N      ??u8g_dev_ssd1306_128x32_2x_fn_5
   \                     ??u8g_dev_ssd1306_128x32_2x_fn_2: (+1)
   \   000000E8   0x....             ADR.N    R2,u8g_dev_ssd13xx_sleep_off
   \   000000EA   0x4620             MOV      R0,R4
   \   000000EC   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0xE7A7             B.N      ??u8g_dev_ssd1306_128x32_2x_fn_5
    279          }
    280          

   \                                 In section .bss, align 4
    281          U8G_PB_DEV(u8g_dev_ssd1306_128x32_sw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ssd1306_128x32_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_ssd1306_128x32_sw_spi_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1306_128x32_sw_spi_pb
   \                     u8g_dev_ssd1306_128x32_sw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1306_128x32_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1306_128x32_sw_spi
   \                     u8g_dev_ssd1306_128x32_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_fn, u8g_dev_ssd1306_128x32_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    282          U8G_PB_DEV(u8g_dev_ssd1306_128x32_hw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ssd1306_128x32_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_ssd1306_128x32_hw_spi_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1306_128x32_hw_spi_pb
   \                     u8g_dev_ssd1306_128x32_hw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1306_128x32_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1306_128x32_hw_spi
   \                     u8g_dev_ssd1306_128x32_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_fn, u8g_dev_ssd1306_128x32_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    283          U8G_PB_DEV(u8g_dev_ssd1306_128x32_i2c, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ssd1306_128x32_fn, U8G_COM_SSD_I2C);
   \                     u8g_dev_ssd1306_128x32_i2c_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ssd1306_128x32_i2c_pb
   \                     u8g_dev_ssd1306_128x32_i2c_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1306_128x32_i2c_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ssd1306_128x32_i2c
   \                     u8g_dev_ssd1306_128x32_i2c:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_fn, u8g_dev_ssd1306_128x32_i2c_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    284          

   \                                 In section .bss, align 4
    285          uint8_t u8g_dev_ssd1306_128x32_2x_buf[WIDTH*2] U8G_NOCOMMON ; 
   \                     u8g_dev_ssd1306_128x32_2x_buf:
   \   00000000                      DS8 256

   \                                 In section .data, align 4
    286          u8g_pb_t u8g_dev_ssd1306_128x32_2x_pb = { {16, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_ssd1306_128x32_2x_buf}; 
   \                     u8g_dev_ssd1306_128x32_2x_pb:
   \   00000000   0x10 0x20          DC8 16, 32, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ssd1306_128x32_2x_buf

   \                                 In section .data, align 4
    287          u8g_dev_t u8g_dev_ssd1306_128x32_2x_sw_spi = { u8g_dev_ssd1306_128x32_2x_fn, &u8g_dev_ssd1306_128x32_2x_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_ssd1306_128x32_2x_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_2x_fn, u8g_dev_ssd1306_128x32_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    288          u8g_dev_t u8g_dev_ssd1306_128x32_2x_hw_spi = { u8g_dev_ssd1306_128x32_2x_fn, &u8g_dev_ssd1306_128x32_2x_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_ssd1306_128x32_2x_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_2x_fn, u8g_dev_ssd1306_128x32_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    289          u8g_dev_t u8g_dev_ssd1306_128x32_2x_i2c = { u8g_dev_ssd1306_128x32_2x_fn, &u8g_dev_ssd1306_128x32_2x_pb, U8G_COM_SSD_I2C };
   \                     u8g_dev_ssd1306_128x32_2x_i2c:
   \   00000000   0x........         DC32 u8g_dev_ssd1306_128x32_2x_fn, u8g_dev_ssd1306_128x32_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_dev_ssd1306_128x32_2x_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb16v1_base_fn
      24   u8g_dev_ssd1306_128x32_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8v1_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     256  u8g_dev_ssd1306_128x32_2x_buf
     244  u8g_dev_ssd1306_128x32_2x_fn
      12  u8g_dev_ssd1306_128x32_2x_hw_spi
      12  u8g_dev_ssd1306_128x32_2x_i2c
      12  u8g_dev_ssd1306_128x32_2x_pb
      12  u8g_dev_ssd1306_128x32_2x_sw_spi
      40  u8g_dev_ssd1306_128x32_adafruit3_init_seq
       8  u8g_dev_ssd1306_128x32_data_start
     164  u8g_dev_ssd1306_128x32_fn
      12  u8g_dev_ssd1306_128x32_hw_spi
     128  u8g_dev_ssd1306_128x32_hw_spi_buf
      12  u8g_dev_ssd1306_128x32_hw_spi_pb
      12  u8g_dev_ssd1306_128x32_i2c
     128  u8g_dev_ssd1306_128x32_i2c_buf
      12  u8g_dev_ssd1306_128x32_i2c_pb
      12  u8g_dev_ssd1306_128x32_sw_spi
     128  u8g_dev_ssd1306_128x32_sw_spi_buf
      12  u8g_dev_ssd1306_128x32_sw_spi_pb
      12  u8g_dev_ssd13xx_sleep_off
      12  u8g_dev_ssd13xx_sleep_on

 
 640 bytes in section .bss
 120 bytes in section .data
 480 bytes in section .text
 
 480 bytes of CODE memory
 760 bytes of DATA memory

Errors: none
Warnings: 3
