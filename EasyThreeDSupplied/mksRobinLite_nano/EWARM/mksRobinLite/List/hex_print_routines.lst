###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:04:59
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\hex_print_routines.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EW71F8.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\hex_print_routines.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\hex_print_routines.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\hex_print_routines.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\hex_print_routines.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          #include "Marlin.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(uint8_t)
   \                     _ZN12MarlinSerial5writeEh: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x.... 0x....      BL       BSP_UartIfQueueTxData
   \        0xA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void MarlinSerial::write(char const *)
   \                     _ZN12MarlinSerial5writeEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xB2D2             UXTB     R2,R2
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x18   0x.... 0x....      B.W      BSP_UartIfQueueTxData

   \                                 In section .text, align 4
   \   __interwork __softfp void MarlinSerial::print(char const *)
   \                     _ZN12MarlinSerial5printEPKc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD013             BEQ.N    ??print_1
   \       0x10   0x480A             LDR.N    R0,??print_0
   \       0x12   0x7800             LDRB     R0,[R0, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD105             BNE.N    ??print_2
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x20   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEPKc
   \                     ??print_2: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x.... 0x....      BL       strlen
   \       0x2A   0x4602             MOV      R2,R0
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0x2002             MOVS     R0,#+2
   \       0x30   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x34   0x.... 0x....      B.W      package_to_wifi
   \                     ??print_1: (+1)
   \       0x38   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \       0x3A   0xBF00             Nop      
   \                     ??print_0:
   \       0x3C   0x....'....        DC32     from_wifi_flag

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     23          //#if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(M100_FREE_MEMORY_WATCHER)
     24          #if 1
     25          #include "hex_print_routines.h"

   \                                 In section .text, align 2
   \   __interwork __softfp char hex_nybble(uint8_t)
   \                     _Z10hex_nybbleh: (+1)
   \        0x0   0x4601             MOV      R1,R0
   \        0x2   0xF001 0x010F      AND      R1,R1,#0xF
   \        0x6   0x290A             CMP      R1,#+10
   \        0x8   0xDA01             BGE.N    ??hex_nybble_0
   \        0xA   0x2130             MOVS     R1,#+48
   \        0xC   0xE000             B.N      ??hex_nybble_1
   \                     ??hex_nybble_0: (+1)
   \        0xE   0x2137             MOVS     R1,#+55
   \                     ??hex_nybble_1: (+1)
   \       0x10   0xF000 0x000F      AND      R0,R0,#0xF
   \       0x14   0x1808             ADDS     R0,R1,R0
   \       0x16   0x4770             BX       LR               ;; return
     26          

   \                                 In section .data, align 4
     27          static char _hex[7] = "0x0000";
   \                     _hex:
   \        0x0   0x30 0x78          DC8 "0x0000"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x00         
   \        0x7   0x00               DC8 0
     28          

   \                                 In section .text, align 2, keep-with-next
     29          char* hex_byte(const uint8_t b) {
   \                     _Z8hex_byteh: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     30            _hex[4] = hex_nybble(b >> 4);
   \        0x4   0x....             LDR.N    R5,??DataTable5
   \        0x6   0x0900             LSRS     R0,R0,#+4
   \        0x8   0x.... 0x....      BL       _Z10hex_nybbleh
   \        0xC   0x7128             STRB     R0,[R5, #+4]
     31            _hex[5] = hex_nybble(b);
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x.... 0x....      BL       _Z10hex_nybbleh
   \       0x14   0x7168             STRB     R0,[R5, #+5]
     32            return &_hex[4];
   \       0x16   0x1D28             ADDS     R0,R5,#+4
   \       0x18   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          char* hex_word(const uint16_t w) {
   \                     _Z8hex_wordt: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     36            _hex[2] = hex_nybble(w >> 12);
   \        0x4   0x....             LDR.N    R5,??DataTable5
   \        0x6   0x0B00             LSRS     R0,R0,#+12
   \        0x8   0x.... 0x....      BL       _Z10hex_nybbleh
   \        0xC   0x70A8             STRB     R0,[R5, #+2]
     37            _hex[3] = hex_nybble(w >> 8);
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x0A00             LSRS     R0,R0,#+8
   \       0x12   0x.... 0x....      BL       _Z10hex_nybbleh
   \       0x16   0x70E8             STRB     R0,[R5, #+3]
     38            _hex[4] = hex_nybble(w >> 4);
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x0900             LSRS     R0,R0,#+4
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x.... 0x....      BL       _Z10hex_nybbleh
   \       0x22   0x7128             STRB     R0,[R5, #+4]
     39            _hex[5] = hex_nybble(w);
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x.... 0x....      BL       _Z10hex_nybbleh
   \       0x2C   0x7168             STRB     R0,[R5, #+5]
     40            return &_hex[2];
   \       0x2E   0x1CA8             ADDS     R0,R5,#+2
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          char* hex_address(uint16_t w) {
   \                     _Z11hex_addresst: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     44            //(void)hex_word((uint16_t)w);
     45            (void)hex_word((uint16_t)w);
   \        0x2   0x.... 0x....      BL       _Z8hex_wordt
     46            return _hex;
   \        0x6   0x....             LDR.N    R0,??DataTable5
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void print_hex_nybble(const uint8_t n)       { SERIAL_CHAR(hex_nybble(n));  }
   \                     _Z16print_hex_nybbleh: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....             LDR.N    R1,??DataTable5_1
   \        0x4   0x7809             LDRB     R1,[R1, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD108             BNE.N    ??print_hex_nybble_0
   \        0xA   0x.... 0x....      BL       _Z10hex_nybbleh
   \        0xE   0x4601             MOV      R1,R0
   \       0x10   0xB2C9             UXTB     R1,R1
   \       0x12   0x....             LDR.N    R0,??DataTable5_2
   \       0x14   0xE8BD 0x4004      POP      {R2,LR}
   \       0x18   0x.... 0x....      B.W      _ZN12MarlinSerial5writeEh
   \                     ??print_hex_nybble_0: (+1)
   \       0x1C   0x.... 0x....      BL       _Z10hex_nybbleh
   \       0x20   0x2200             MOVS     R2,#+0
   \       0x22   0x4601             MOV      R1,R0
   \       0x24   0x....             LDR.N    R0,??DataTable5_3
   \       0x26   0xE8BD 0x4008      POP      {R3,LR}
   \       0x2A   0x.... 0x....      B.W      _ZN12MarlinSerial5printEci

   \                                 In section .text, align 2, keep-with-next
     50          void print_hex_byte(const uint8_t b)         { SERIAL_ECHO(hex_byte(b));    }
   \                     _Z14print_hex_byteh: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....             LDR.N    R1,??DataTable5_1
   \        0x4   0x7809             LDRB     R1,[R1, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD107             BNE.N    ??print_hex_byte_0
   \        0xA   0x.... 0x....      BL       _Z8hex_byteh
   \        0xE   0x4601             MOV      R1,R0
   \       0x10   0x....             LDR.N    R0,??DataTable5_2
   \       0x12   0xE8BD 0x4004      POP      {R2,LR}
   \       0x16   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc
   \                     ??print_hex_byte_0: (+1)
   \       0x1A   0x.... 0x....      BL       _Z8hex_byteh
   \       0x1E   0x4601             MOV      R1,R0
   \       0x20   0x....             LDR.N    R0,??DataTable5_3
   \       0x22   0xE8BD 0x4004      POP      {R2,LR}
   \       0x26   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc

   \                                 In section .text, align 2, keep-with-next
     51          void print_hex_word(const uint16_t w)        { SERIAL_ECHO(hex_word(w));    }
   \                     _Z14print_hex_wordt: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....             LDR.N    R1,??DataTable5_1
   \        0x4   0x7809             LDRB     R1,[R1, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD107             BNE.N    ??print_hex_word_0
   \        0xA   0x.... 0x....      BL       _Z8hex_wordt
   \        0xE   0x4601             MOV      R1,R0
   \       0x10   0x....             LDR.N    R0,??DataTable5_2
   \       0x12   0xE8BD 0x4004      POP      {R2,LR}
   \       0x16   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc
   \                     ??print_hex_word_0: (+1)
   \       0x1A   0x.... 0x....      BL       _Z8hex_wordt
   \       0x1E   0x4601             MOV      R1,R0
   \       0x20   0x....             LDR.N    R0,??DataTable5_3
   \       0x22   0xE8BD 0x4004      POP      {R2,LR}
   \       0x26   0x.... 0x....      B.W      _ZN12MarlinSerial5printEPKc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     _hex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     from_wifi_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     customizedSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     serial2
     52          //void print_hex_address(const void * const w) { SERIAL_ECHO(hex_address(w)); }
     53          
     54          #endif // AUTO_BED_LEVELING_UBL || M100_FREE_MEMORY_WATCHER

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MarlinSerial::print(char const *)
         0   -> MarlinSerial::write(char const *)
         0   -> package_to_wifi
        16   -> strlen
      16   MarlinSerial::write(char const *)
         0   -> BSP_UartIfQueueTxData
        16   -> strlen
       8   MarlinSerial::write(uint8_t)
         8   -> BSP_UartIfQueueTxData
       8   hex_address(uint16_t)
         8   -> hex_word(uint16_t)
      16   hex_byte(uint8_t)
        16   -> hex_nybble(uint8_t)
       0   hex_nybble(uint8_t)
      16   hex_word(uint16_t)
        16   -> hex_nybble(uint8_t)
       8   print_hex_byte(uint8_t)
         0   -> MarlinSerial::print(char const *)
         8   -> hex_byte(uint8_t)
       8   print_hex_nybble(uint8_t)
         0   -> MarlinSerial::print(char, int)
         0   -> MarlinSerial::write(uint8_t)
         8   -> hex_nybble(uint8_t)
       8   print_hex_word(uint16_t)
         0   -> MarlinSerial::print(char const *)
         8   -> hex_word(uint16_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      64  MarlinSerial::print(char const *)
      28  MarlinSerial::write(char const *)
      12  MarlinSerial::write(uint8_t)
       8  _hex
      10  hex_address(uint16_t)
      26  hex_byte(uint8_t)
      24  hex_nybble(uint8_t)
      50  hex_word(uint16_t)
      42  print_hex_byte(uint8_t)
      46  print_hex_nybble(uint8_t)
      42  print_hex_word(uint16_t)

 
   8 bytes in section .data
 360 bytes in section .text
 
 232 bytes of CODE memory (+ 128 bytes shared)
   8 bytes of DATA memory

Errors: none
Warnings: 3
