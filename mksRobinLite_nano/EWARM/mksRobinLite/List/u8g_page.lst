###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_page.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW5099.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_page.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_page.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_page.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_page.c
      1          /*
      2          
      3            u8g_page.c
      4            
      5            page helper functions, only called by the dev handler.
      6          
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2011, olikraus@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35            
     36            
     37          */
     38          
     39          #include "u8g.h"
     40          
     41          /*
     42            setup page count structure
     43            conditions: page_height <= total_height
     44          */

   \                                 In section .text, align 2, keep-with-next
     45          void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
     46          {
     47            p->page_height = page_height;
   \                     u8g_page_Init: (+1)
   \   00000000   0x7001             STRB     R1,[R0, #+0]
     48            p->total_height = total_height;
   \   00000002   0x7042             STRB     R2,[R0, #+1]
     49            p->page = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7101             STRB     R1,[R0, #+4]
     50            u8g_page_First(p);
   \   00000008                      REQUIRE u8g_page_First
   \   00000008                      ;; // Fall through to label u8g_page_First
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void u8g_page_First(u8g_page_t *p)
     54          {
     55            p->page_y0 = 0;
   \                     u8g_page_First: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7081             STRB     R1,[R0, #+2]
     56            p->page_y1 = p->page_height;
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x70C1             STRB     R1,[R0, #+3]
     57            p->page_y1--;
   \   00000008   0x1E49             SUBS     R1,R1,#+1
   \   0000000A   0x70C1             STRB     R1,[R0, #+3]
     58            p->page = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7101             STRB     R1,[R0, #+4]
     59          }
   \   00000010   0x4770             BX       LR               ;; return
     60          

   \                                 In section .text, align 2, keep-with-next
     61          uint8_t u8g_page_Next(u8g_page_t * p)
     62          {
   \                     u8g_page_Next: (+1)
   \   00000000   0xB410             PUSH     {R4}
     63            register u8g_uint_t y1;
     64            p->page_y0 += p->page_height;
   \   00000002   0x7882             LDRB     R2,[R0, #+2]
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x188A             ADDS     R2,R1,R2
   \   00000008   0x7082             STRB     R2,[R0, #+2]
     65            if ( p->page_y0 >= p->total_height )
   \   0000000A   0x7841             LDRB     R1,[R0, #+1]
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0x428A             CMP      R2,R1
   \   00000010   0xD301             BCC.N    ??u8g_page_Next_0
     66              return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE00E             B.N      ??u8g_page_Next_1
     67            p->page++;
   \                     ??u8g_page_Next_0: (+1)
   \   00000016   0x7901             LDRB     R1,[R0, #+4]
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \   0000001A   0x7101             STRB     R1,[R0, #+4]
     68            y1 = p->page_y1;
     69            y1 += p->page_height;
   \   0000001C   0x78C2             LDRB     R2,[R0, #+3]
   \   0000001E   0x7801             LDRB     R1,[R0, #+0]
   \   00000020   0x188A             ADDS     R2,R1,R2
     70            if ( y1 >= p->total_height )
   \   00000022   0x7841             LDRB     R1,[R0, #+1]
   \   00000024   0x4613             MOV      R3,R2
   \   00000026   0x460C             MOV      R4,R1
   \   00000028   0xB2DB             UXTB     R3,R3
   \   0000002A   0x42A3             CMP      R3,R4
   \   0000002C   0xD300             BCC.N    ??u8g_page_Next_2
     71            {
     72              y1 = p->total_height;
     73              y1--;
   \   0000002E   0x1E4A             SUBS     R2,R1,#+1
     74            }
     75            p->page_y1 = y1;
   \                     ??u8g_page_Next_2: (+1)
   \   00000030   0x70C2             STRB     R2,[R0, #+3]
     76            
     77            return 1;
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??u8g_page_Next_1: (+1)
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
     78          }
     79          
     80          
     81          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   u8g_page_First
       0   u8g_page_Init
         0   -> u8g_page_First
       4   u8g_page_Next


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  u8g_page_First
       8  u8g_page_Init
      56  u8g_page_Next

 
 82 bytes in section .text
 
 82 bytes of CODE memory

Errors: none
Warnings: none
