###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         07/Apr/2021  11:05:12
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\stopwatch.cpp
#    Command line =  
#        -f C:\Users\PLT\AppData\Local\Temp\EWA360.tmp
#        (C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\stopwatch.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lC
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List -lA
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Src\ -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/CMSIS/Include\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/l6474\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Drivers/BSP/MotorControl\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino\
#        -I
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Middlewares/arduino/avr\
#        -I C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM/../Inc/Logo\ -Om --c++
#        --no_exceptions --no_rtti -I "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I "D:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\List\stopwatch.lst
#    Object file  =  
#        C:\Users\PLT\Desktop\mksRobinLite_nano\EWARM\mksRobinLite\Obj\stopwatch.o
#
###############################################################################

C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\stopwatch.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "Marlin.h"

    #define SDSS   18
            ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marlin\pins_MKS_ROBIN_LITE.h",161  Warning[Pa181]: 
          incompatible redefinition of macro "SDSS" (declared at line 62)

  #define UNUSED(x) ((void)(x))
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pa181]: 
          incompatible redefinition of macro "UNUSED" (declared at line 88 of
          "C:\Users\PLT\Desktop\mksRobinLite_nano\Middlewares\Third_Party\Marl
          in\macros.h")

  #define PRINT_LED_PIN         PDout(2)
          ^
"C:\Users\PLT\Desktop\mksRobinLite_nano\Drivers\BSP\STM32MKS-3dPrinter\mks_fastio.h",14  Warning[Pa181]: 
          incompatible redefinition of macro "PRINT_LED_PIN" (declared at line
          146 of "C:\Users\PLT\Desktop\mksRobinLite_nano\Inc\main.h")
     24          #include "stopwatch.h"
     25          

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp Stopwatch::subobject Stopwatch()
   \                     _ZN9StopwatchC2Ev: (+1)
   \        0x0   0xBF00             Nop      
   \        0x2                      REQUIRE _ZN9StopwatchC1Ev
   \        0x2                      ;; // Fall through to label Stopwatch::Stopwatch()

   \                                 In section .text, align 2, keep-with-next
     26          Stopwatch::Stopwatch() {
   \                     _ZN9StopwatchC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     27            this->reset();
   \        0x4   0x.... 0x....      BL       _ZN9Stopwatch5resetEv
     28          }
   \        0x8   0x4620             MOV      R0,R4
   \        0xA   0xBD10             POP      {R4,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          bool Stopwatch::stop() {
   \                     _ZN9Stopwatch4stopEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     31            #if ENABLED(DEBUG_STOPWATCH)
     32              Stopwatch::debug(PSTR("stop"));
     33            #endif
     34          
     35            if (this->isRunning() || this->isPaused()) {
   \        0x4   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD104             BNE.N    ??stop_0
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD006             BEQ.N    ??stop_1
     36              this->state = STOPPED;
   \                     ??stop_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x7020             STRB     R0,[R4, #+0]
     37              this->stopTimestamp = millis();
   \       0x1A   0x.... 0x....      BL       HAL_GetTick
   \       0x1E   0x60E0             STR      R0,[R4, #+12]
     38              return true;
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0xBD10             POP      {R4,PC}
     39            }
     40            else return false;
   \                     ??stop_1: (+1)
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBD10             POP      {R4,PC}          ;; return
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          bool Stopwatch::pause() {
   \                     _ZN9Stopwatch5pauseEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     44            #if ENABLED(DEBUG_STOPWATCH)
     45              Stopwatch::debug(PSTR("pause"));
     46            #endif
     47          
     48            if (this->isRunning()) {
   \        0x4   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD006             BEQ.N    ??pause_0
     49              this->state = PAUSED;
   \        0xC   0x2002             MOVS     R0,#+2
   \        0xE   0x7020             STRB     R0,[R4, #+0]
     50              this->stopTimestamp = millis();
   \       0x10   0x.... 0x....      BL       HAL_GetTick
   \       0x14   0x60E0             STR      R0,[R4, #+12]
     51              return true;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xBD10             POP      {R4,PC}
     52            }
     53            else return false;
   \                     ??pause_0: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
     54          }
     55          

   \                                 In section .text, align 2, keep-with-next
     56          bool Stopwatch::start() {
   \                     _ZN9Stopwatch5startEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     57            #if ENABLED(DEBUG_STOPWATCH)
     58              Stopwatch::debug(PSTR("start"));
     59            #endif
     60          
     61            if (!this->isRunning()) {
   \        0x4   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD112             BNE.N    ??start_0
     62              if (this->isPaused()) this->accumulator = this->duration();
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0xD003             BEQ.N    ??start_1
   \       0x18   0x.... 0x....      BL       _ZN9Stopwatch8durationEv
   \       0x1C   0x6060             STR      R0,[R4, #+4]
   \       0x1E   0xE001             B.N      ??start_2
     63              else this->reset();
   \                     ??start_1: (+1)
   \       0x20   0x.... 0x....      BL       _ZN9Stopwatch5resetEv
     64          
     65              this->state = RUNNING;
   \                     ??start_2: (+1)
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x7020             STRB     R0,[R4, #+0]
     66              this->startTimestamp = millis();
   \       0x28   0x.... 0x....      BL       HAL_GetTick
   \       0x2C   0x60A0             STR      R0,[R4, #+8]
     67              return true;
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0xBD10             POP      {R4,PC}
     68            }
     69            else return false;
   \                     ??start_0: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
     70          }
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void Stopwatch::reset() {
     73            #if ENABLED(DEBUG_STOPWATCH)
     74              Stopwatch::debug(PSTR("reset"));
     75            #endif
     76          
     77            this->state = STOPPED;
   \                     _ZN9Stopwatch5resetEv: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x7001             STRB     R1,[R0, #+0]
     78            this->startTimestamp = 0;
   \        0x4   0x6081             STR      R1,[R0, #+8]
     79            this->stopTimestamp = 0;
   \        0x6   0x60C1             STR      R1,[R0, #+12]
     80            this->accumulator = 0;
   \        0x8   0x6041             STR      R1,[R0, #+4]
     81          }
   \        0xA   0x4770             BX       LR               ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          bool Stopwatch::isRunning() {
     84            return (this->state == RUNNING) ? true : false;
   \                     _ZN9Stopwatch9isRunningEv: (+1)
   \        0x0   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \        0x4   0x2801             CMP      R0,#+1
   \        0x6   0xD101             BNE.N    ??isRunning_0
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x4770             BX       LR
   \                     ??isRunning_0: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x4770             BX       LR               ;; return
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          bool Stopwatch::isPaused() {
     88            return (this->state == PAUSED) ? true : false;
   \                     _ZN9Stopwatch8isPausedEv: (+1)
   \        0x0   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \        0x4   0x2802             CMP      R0,#+2
   \        0x6   0xD101             BNE.N    ??isPaused_0
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x4770             BX       LR
   \                     ??isPaused_0: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x4770             BX       LR               ;; return
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          millis_t Stopwatch::duration() {
   \                     _ZN9Stopwatch8durationEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     92            return (((this->isRunning()) ? millis() : this->stopTimestamp)
     93                    - this->startTimestamp) / 1000UL + this->accumulator;
   \        0x4   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD002             BEQ.N    ??duration_0
   \        0xC   0x.... 0x....      BL       HAL_GetTick
   \       0x10   0xE000             B.N      ??duration_1
   \                     ??duration_0: (+1)
   \       0x12   0x68E0             LDR      R0,[R4, #+12]
   \                     ??duration_1: (+1)
   \       0x14   0x68A1             LDR      R1,[R4, #+8]
   \       0x16   0x1A40             SUBS     R0,R0,R1
   \       0x18   0xF44F 0x717A      MOV      R1,#+1000
   \       0x1C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x20   0x6861             LDR      R1,[R4, #+4]
   \       0x22   0x1808             ADDS     R0,R1,R0
   \       0x24   0xBD10             POP      {R4,PC}          ;; return
     94          }
     95          
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void Stopwatch::getTime(millis_t *accu,millis_t *startTime,millis_t *stopTime)
     98          {
   \                     _ZN9Stopwatch7getTimeEPmS0_S0_: (+1)
   \        0x0   0xB410             PUSH     {R4}
     99          	*accu = accumulator;
   \        0x2   0x6844             LDR      R4,[R0, #+4]
   \        0x4   0x600C             STR      R4,[R1, #+0]
    100          	*startTime = startTimestamp;
   \        0x6   0x6881             LDR      R1,[R0, #+8]
   \        0x8   0x6011             STR      R1,[R2, #+0]
    101          	*stopTime = stopTimestamp;
   \        0xA   0x68C0             LDR      R0,[R0, #+12]
   \        0xC   0x6018             STR      R0,[R3, #+0]
    102          }
   \        0xE   0xBC10             POP      {R4}
   \       0x10   0x4770             BX       LR               ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void Stopwatch::setTime(millis_t accu,millis_t startTime,millis_t stopTime)
    105          {
    106          	accumulator = accu;
   \                     _ZN9Stopwatch7setTimeEmmm: (+1)
   \        0x0   0x6041             STR      R1,[R0, #+4]
    107          	startTimestamp = startTime;
   \        0x2   0x6082             STR      R2,[R0, #+8]
    108          	stopTimestamp = stopTime;
   \        0x4   0x60C3             STR      R3,[R0, #+12]
    109          	state = PAUSED;
   \        0x6   0x2102             MOVS     R1,#+2
   \        0x8   0x7001             STRB     R1,[R0, #+0]
    110          }
   \        0xA   0x4770             BX       LR               ;; return
    111          
    112          
    113          #if ENABLED(DEBUG_STOPWATCH)
    114          
    115            void Stopwatch::debug(const char func[]) {
    116              if (DEBUGGING(INFO)) {
    117                SERIAL_ECHOPGM("Stopwatch::");
    118                serialprintPGM(func);
    119                SERIAL_ECHOLNPGM("()");
    120              }
    121            }
    122          
    123          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Stopwatch::Stopwatch()
         8   -> Stopwatch::reset()
       8   Stopwatch::duration()
         8   -> HAL_GetTick
         8   -> Stopwatch::isRunning()
       4   Stopwatch::getTime(millis_t *, millis_t *, millis_t *)
       0   Stopwatch::isPaused()
       0   Stopwatch::isRunning()
       8   Stopwatch::pause()
         8   -> HAL_GetTick
         8   -> Stopwatch::isRunning()
       0   Stopwatch::reset()
       0   Stopwatch::setTime(millis_t, millis_t, millis_t)
       8   Stopwatch::start()
         8   -> HAL_GetTick
         8   -> Stopwatch::duration()
         8   -> Stopwatch::isPaused()
         8   -> Stopwatch::isRunning()
         8   -> Stopwatch::reset()
       8   Stopwatch::stop()
         8   -> HAL_GetTick
         8   -> Stopwatch::isPaused()
         8   -> Stopwatch::isRunning()
       0   Stopwatch::subobject Stopwatch()
         0   -> Stopwatch::Stopwatch()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  Stopwatch::Stopwatch()
      38  Stopwatch::duration()
      18  Stopwatch::getTime(millis_t *, millis_t *, millis_t *)
      16  Stopwatch::isPaused()
      16  Stopwatch::isRunning()
      30  Stopwatch::pause()
      12  Stopwatch::reset()
      12  Stopwatch::setTime(millis_t, millis_t, millis_t)
      54  Stopwatch::start()
      40  Stopwatch::stop()
       2  Stopwatch::subobject Stopwatch()

 
 250 bytes in section .text
 
 250 bytes of CODE memory

Errors: none
Warnings: 3
