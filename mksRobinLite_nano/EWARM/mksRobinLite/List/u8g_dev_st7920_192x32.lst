###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7920_192x32.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4964.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7920_192x32.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_st7920_192x32.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_st7920_192x32.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7920_192x32.c
      1          /*
      2          
      3            u8g_dev_st7920_192x32.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          #define WIDTH 192
     40          #define HEIGHT 32
     41          
     42          
     43          /* init sequence from https://github.com/adafruit/ST7565-LCD/blob/master/ST7565/ST7565.cpp */

   \                                 In section .text, align 4, keep-with-next
     44          static const uint8_t u8g_dev_st7920_192x32_init_seq[] PROGMEM = {
   \                     u8g_dev_st7920_192x32_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 207, 255, 100, 255, 209, 255, 50, 56, 12
   \              0xFF 0xE0    
   \              0xFF 0xCF    
   \              0xFF 0x64    
   \              0xFF 0xD1    
   \              0xFF 0x32    
   \              0x38 0x0C    
   \   0000000E   0x06 0x02          DC8 6, 2, 1, 255, 100, 255, 208, 255, 254, 0
   \              0x01 0xFF    
   \              0x64 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
     45            U8G_ESC_CS(0),             /* disable chip */
     46            U8G_ESC_ADR(0),           /* instruction mode */
     47            U8G_ESC_RST(15),           /* do reset low pulse with (15*16)+2 milliseconds (=maximum delay)*/
     48            U8G_ESC_DLY(100),         /* 8 Dez 2012: additional delay 100 ms because of reset*/
     49            U8G_ESC_CS(1),             /* enable chip */
     50            U8G_ESC_DLY(50),         /* delay 50 ms */
     51          
     52            0x038,                                /* 8 Bit interface (DL=1), basic instruction set (RE=0) */
     53            0x00c,                                /* display on, cursor & blink off; 0x08: all off */
     54            0x006,                                /* Entry mode: Cursor move to right ,DDRAM address counter (AC) plus 1, no shift */
     55            0x002,                                /* disable scroll, enable CGRAM adress */
     56            0x001,                                /* clear RAM, needs 1.6 ms */
     57            U8G_ESC_DLY(100),               /* delay 10 ms */
     58            
     59            U8G_ESC_CS(0),             /* disable chip */
     60            U8G_ESC_END                /* end of sequence */
     61          };
     62          

   \                                 In section .text, align 4, keep-with-next
     63          uint8_t u8g_dev_st7920_192x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     64          {
   \                     u8g_dev_st7920_192x32_fn: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x461E             MOV      R6,R3
     65            switch(msg)
   \   0000000C   0x4638             MOV      R0,R7
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD002             BEQ.N    ??u8g_dev_st7920_192x32_fn_0
   \   00000012   0x2815             CMP      R0,#+21
   \   00000014   0xD00A             BEQ.N    ??u8g_dev_st7920_192x32_fn_1
   \   00000016   0xE04B             B.N      ??u8g_dev_st7920_192x32_fn_2
     66            {
     67              case U8G_DEV_MSG_INIT:
     68                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
   \                     ??u8g_dev_st7920_192x32_fn_0: (+1)
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       u8g_InitCom
     69                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_192x32_init_seq);
   \   00000020   0x....             ADR.N    R2,u8g_dev_st7920_192x32_init_seq
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       u8g_WriteEscSeqP
     70                break;
   \   0000002A   0xE041             B.N      ??u8g_dev_st7920_192x32_fn_2
     71              case U8G_DEV_MSG_STOP:
     72                break;
     73              case U8G_DEV_MSG_PAGE_NEXT:
     74                {
     75                  uint8_t y, i;
     76                  uint8_t *ptr;
     77                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \                     ??u8g_dev_st7920_192x32_fn_1: (+1)
   \   0000002C   0xF8D5 0x9004      LDR      R9,[R5, #+4]
     78                  
     79                  u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       u8g_SetAddress
     80                  u8g_SetChipSelect(u8g, dev, 1);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_SetChipSelect
     81                  y = pb->p.page_y0;
   \   00000042   0xF899 0x8002      LDRB     R8,[R9, #+2]
     82                  ptr = pb->buf;
   \   00000046   0xF8D9 0x9008      LDR      R9,[R9, #+8]
     83                  for( i = 0; i < 8; i ++ )
   \   0000004A   0xF04F 0x0A00      MOV      R10,#+0
   \   0000004E   0xE026             B.N      ??u8g_dev_st7920_192x32_fn_3
     84                  {
     85                    u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
   \                     ??u8g_dev_st7920_192x32_fn_4: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x4629             MOV      R1,R5
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       u8g_SetAddress
     86                    u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
   \   0000005A   0x223E             MOVS     R2,#+62
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       u8g_WriteByte
     87                    u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
   \   00000064   0xF048 0x0280      ORR      R2,R8,#0x80
   \   00000068   0xB2D2             UXTB     R2,R2
   \   0000006A   0x4629             MOV      R1,R5
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_WriteByte
     88                    u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/          
   \   00000072   0x2280             MOVS     R2,#+128
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       u8g_WriteByte
     89                    u8g_SetAddress(u8g, dev, 1);                  /* data mode */
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_SetAddress
     90                    u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
   \   00000086   0x464B             MOV      R3,R9
   \   00000088   0x2218             MOVS     R2,#+24
   \   0000008A   0x4629             MOV      R1,R5
   \   0000008C   0x4620             MOV      R0,R4
   \   0000008E   0x.... 0x....      BL       u8g_WriteSequence
     91                    ptr += WIDTH/8;
   \   00000092   0xF109 0x0918      ADD      R9,R9,#+24
     92                    y++;
   \   00000096   0xF108 0x0801      ADD      R8,R8,#+1
     93                  }
   \   0000009A   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_st7920_192x32_fn_3: (+1)
   \   0000009E   0x4650             MOV      R0,R10
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x2808             CMP      R0,#+8
   \   000000A4   0xDBD4             BLT.N    ??u8g_dev_st7920_192x32_fn_4
     94                  u8g_SetChipSelect(u8g, dev, 0);
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x4629             MOV      R1,R5
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       u8g_SetChipSelect
     95                }
     96                break;
     97            }
     98            return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_st7920_192x32_fn_2: (+1)
   \   000000B0   0x4633             MOV      R3,R6
   \   000000B2   0x463A             MOV      R2,R7
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   000000BC   0x.... 0x....      B.W      u8g_dev_pb8h1_base_fn
     99          }
    100          

   \                                 In section .text, align 4, keep-with-next
    101          uint8_t u8g_dev_st7920_192x32_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    102          {
   \                     u8g_dev_st7920_192x32_4x_fn: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x461E             MOV      R6,R3
    103            switch(msg)
   \   0000000C   0x4638             MOV      R0,R7
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD002             BEQ.N    ??u8g_dev_st7920_192x32_4x_fn_0
   \   00000012   0x2815             CMP      R0,#+21
   \   00000014   0xD00A             BEQ.N    ??u8g_dev_st7920_192x32_4x_fn_1
   \   00000016   0xE04B             B.N      ??u8g_dev_st7920_192x32_4x_fn_2
    104            {
    105              case U8G_DEV_MSG_INIT:
    106                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
   \                     ??u8g_dev_st7920_192x32_4x_fn_0: (+1)
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       u8g_InitCom
    107                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_192x32_init_seq);
   \   00000020   0x....             ADR.N    R2,u8g_dev_st7920_192x32_init_seq
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       u8g_WriteEscSeqP
    108                break;
   \   0000002A   0xE041             B.N      ??u8g_dev_st7920_192x32_4x_fn_2
    109              case U8G_DEV_MSG_STOP:
    110                break;
    111              case U8G_DEV_MSG_PAGE_NEXT:
    112                {
    113                  uint8_t y, i;
    114                  uint8_t *ptr;
    115                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \                     ??u8g_dev_st7920_192x32_4x_fn_1: (+1)
   \   0000002C   0xF8D5 0x9004      LDR      R9,[R5, #+4]
    116                  
    117                  u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       u8g_SetAddress
    118                  u8g_SetChipSelect(u8g, dev, 1);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_SetChipSelect
    119                  y = pb->p.page_y0;
   \   00000042   0xF899 0x8002      LDRB     R8,[R9, #+2]
    120                  ptr = pb->buf;
   \   00000046   0xF8D9 0x9008      LDR      R9,[R9, #+8]
    121                  for( i = 0; i < 32; i ++ )
   \   0000004A   0xF04F 0x0A00      MOV      R10,#+0
   \   0000004E   0xE026             B.N      ??u8g_dev_st7920_192x32_4x_fn_3
    122                  {
    123                    u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
   \                     ??u8g_dev_st7920_192x32_4x_fn_4: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x4629             MOV      R1,R5
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       u8g_SetAddress
    124                    u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
   \   0000005A   0x223E             MOVS     R2,#+62
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       u8g_WriteByte
    125                    u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
   \   00000064   0xF048 0x0280      ORR      R2,R8,#0x80
   \   00000068   0xB2D2             UXTB     R2,R2
   \   0000006A   0x4629             MOV      R1,R5
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_WriteByte
    126                    u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/          
   \   00000072   0x2280             MOVS     R2,#+128
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       u8g_WriteByte
    127                    u8g_SetAddress(u8g, dev, 1);                  /* data mode */
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       u8g_SetAddress
    128                    u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
   \   00000086   0x464B             MOV      R3,R9
   \   00000088   0x2218             MOVS     R2,#+24
   \   0000008A   0x4629             MOV      R1,R5
   \   0000008C   0x4620             MOV      R0,R4
   \   0000008E   0x.... 0x....      BL       u8g_WriteSequence
    129                    ptr += WIDTH/8;
   \   00000092   0xF109 0x0918      ADD      R9,R9,#+24
    130                    y++;
   \   00000096   0xF108 0x0801      ADD      R8,R8,#+1
    131                  }
   \   0000009A   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??u8g_dev_st7920_192x32_4x_fn_3: (+1)
   \   0000009E   0x4650             MOV      R0,R10
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x2820             CMP      R0,#+32
   \   000000A4   0xDBD4             BLT.N    ??u8g_dev_st7920_192x32_4x_fn_4
    132                  u8g_SetChipSelect(u8g, dev, 0);
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x4629             MOV      R1,R5
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       u8g_SetChipSelect
    133                }
    134                break;
    135            }
    136            return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_st7920_192x32_4x_fn_2: (+1)
   \   000000B0   0x4633             MOV      R3,R6
   \   000000B2   0x463A             MOV      R2,R7
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   000000BC   0x.... 0x....      B.W      u8g_dev_pb32h1_base_fn
    137          }
    138          
    139          

   \                                 In section .bss, align 4
    140          U8G_PB_DEV(u8g_dev_st7920_192x32_sw_spi, WIDTH, HEIGHT, 8, u8g_dev_st7920_192x32_fn, U8G_COM_ST7920_SW_SPI);
   \                     u8g_dev_st7920_192x32_sw_spi_buf:
   \   00000000                      DS8 192

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7920_192x32_sw_spi_pb
   \                     u8g_dev_st7920_192x32_sw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 192, 0, 0
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7920_192x32_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7920_192x32_sw_spi
   \                     u8g_dev_st7920_192x32_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_fn, u8g_dev_st7920_192x32_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    141          U8G_PB_DEV(u8g_dev_st7920_192x32_hw_spi, WIDTH, HEIGHT, 8, u8g_dev_st7920_192x32_fn, U8G_COM_ST7920_HW_SPI);
   \                     u8g_dev_st7920_192x32_hw_spi_buf:
   \   00000000                      DS8 192

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7920_192x32_hw_spi_pb
   \                     u8g_dev_st7920_192x32_hw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 192, 0, 0
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7920_192x32_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7920_192x32_hw_spi
   \                     u8g_dev_st7920_192x32_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_fn, u8g_dev_st7920_192x32_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    142          U8G_PB_DEV(u8g_dev_st7920_192x32_8bit, WIDTH, HEIGHT, 8, u8g_dev_st7920_192x32_fn, U8G_COM_FAST_PARALLEL);
   \                     u8g_dev_st7920_192x32_8bit_buf:
   \   00000000                      DS8 192

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7920_192x32_8bit_pb
   \                     u8g_dev_st7920_192x32_8bit_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 192, 0, 0
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7920_192x32_8bit_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7920_192x32_8bit
   \                     u8g_dev_st7920_192x32_8bit:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_fn, u8g_dev_st7920_192x32_8bit_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    143          
    144          
    145          #define QWIDTH (WIDTH*4)

   \                                 In section .bss, align 4
    146          uint8_t u8g_dev_st7920_192x32_4x_buf[QWIDTH] U8G_NOCOMMON ; 
   \                     u8g_dev_st7920_192x32_4x_buf:
   \   00000000                      DS8 768

   \                                 In section .data, align 4
    147          u8g_pb_t u8g_dev_st7920_192x32_4x_pb = { {32, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_st7920_192x32_4x_buf}; 
   \                     u8g_dev_st7920_192x32_4x_pb:
   \   00000000   0x20 0x20          DC8 32, 32, 0, 0, 0, 192, 0, 0
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7920_192x32_4x_buf

   \                                 In section .data, align 4
    148          u8g_dev_t u8g_dev_st7920_192x32_4x_sw_spi = { u8g_dev_st7920_192x32_4x_fn, &u8g_dev_st7920_192x32_4x_pb, U8G_COM_ST7920_SW_SPI };
   \                     u8g_dev_st7920_192x32_4x_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_4x_fn, u8g_dev_st7920_192x32_4x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    149          u8g_dev_t u8g_dev_st7920_192x32_4x_hw_spi = { u8g_dev_st7920_192x32_4x_fn, &u8g_dev_st7920_192x32_4x_pb, U8G_COM_ST7920_HW_SPI };
   \                     u8g_dev_st7920_192x32_4x_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_4x_fn, u8g_dev_st7920_192x32_4x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    150          u8g_dev_t u8g_dev_st7920_192x32_4x_8bit = { u8g_dev_st7920_192x32_4x_fn, &u8g_dev_st7920_192x32_4x_pb, U8G_COM_FAST_PARALLEL };
   \                     u8g_dev_st7920_192x32_4x_8bit:
   \   00000000   0x........         DC32 u8g_dev_st7920_192x32_4x_fn, u8g_dev_st7920_192x32_4x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    151          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_dev_st7920_192x32_4x_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb32h1_base_fn
      32   u8g_dev_st7920_192x32_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb8h1_base_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  u8g_dev_st7920_192x32_4x_8bit
     768  u8g_dev_st7920_192x32_4x_buf
     192  u8g_dev_st7920_192x32_4x_fn
      12  u8g_dev_st7920_192x32_4x_hw_spi
      12  u8g_dev_st7920_192x32_4x_pb
      12  u8g_dev_st7920_192x32_4x_sw_spi
      12  u8g_dev_st7920_192x32_8bit
     192  u8g_dev_st7920_192x32_8bit_buf
      12  u8g_dev_st7920_192x32_8bit_pb
     192  u8g_dev_st7920_192x32_fn
      12  u8g_dev_st7920_192x32_hw_spi
     192  u8g_dev_st7920_192x32_hw_spi_buf
      12  u8g_dev_st7920_192x32_hw_spi_pb
      24  u8g_dev_st7920_192x32_init_seq
      12  u8g_dev_st7920_192x32_sw_spi
     192  u8g_dev_st7920_192x32_sw_spi_buf
      12  u8g_dev_st7920_192x32_sw_spi_pb

 
 1 344 bytes in section .bss
   120 bytes in section .data
   408 bytes in section .text
 
   408 bytes of CODE memory
 1 464 bytes of DATA memory

Errors: none
Warnings: none
