###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7565_64128n.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4748.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7565_64128n.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_st7565_64128n.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_st7565_64128n.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_st7565_64128n.c
      1          /*
      2          
      3            u8g_dev_st7565_64128n.c (Displaytech)
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34            
     35          */
     36          
     37          #include "u8g.h"
     38          
     39          #define WIDTH 128
     40          #define HEIGHT 64
     41          #define PAGE_HEIGHT 8
     42          
     43          /* init sequence from https://github.com/adafruit/ST7565-LCD/blob/master/ST7565/ST7565.cpp */

   \                                 In section .text, align 4, keep-with-next
     44          static const uint8_t u8g_dev_st7565_64128n_init_seq[] PROGMEM = {
   \                     u8g_dev_st7565_64128n_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 209, 255, 207, 162, 160, 200, 64, 44, 255
   \              0xFF 0xE0    
   \              0xFF 0xD1    
   \              0xFF 0xCF    
   \              0xA2 0xA0    
   \              0xC8 0x40    
   \              0x2C 0xFF    
   \   0000000E   0x32 0x2E          DC8 50, 46, 255, 50, 47, 255, 50, 16, 166, 129, 30, 175, 255, 100, 165
   \              0xFF 0x32    
   \              0x2F 0xFF    
   \              0x32 0x10    
   \              0xA6 0x81    
   \              0x1E 0xAF    
   \              0xFF 0x64    
   \              0xA5         
   \   0000001D   0xFF 0x64          DC8 255, 100, 255, 100, 164, 255, 208, 255, 254, 0, 0
   \              0xFF 0x64    
   \              0xA4 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
   \              0x00         
     45           	 U8G_ESC_CS(0),            /* disable chip */
     46          	  U8G_ESC_ADR(0),          /* instruction mode */
     47          	  U8G_ESC_CS(1),           /* enable chip */
     48          	  U8G_ESC_RST(15),         /* do reset low pulse with (15*16)+2 milliseconds (=maximum delay)*/
     49          
     50          	  0x0A2,   				   /* 0x0a2: LCD bias 1/9 (according to Displaytech 64128N datasheet) */
     51          	  0x0A0,  				   /* Normal ADC Select (according to Displaytech 64128N datasheet) */
     52          
     53          	  0x0c8,                   /* common output mode: set scan direction normal operation/SHL Select, 0x0c0 --> SHL = 0, normal, 0x0c8 --> SHL = 1 */
     54          	  0x040,		           /* Display start line for Displaytech 64128N */
     55          
     56          	  0x028 | 0x04,            /* power control: turn on voltage converter */
     57          	  U8G_ESC_DLY(50),         /* delay 50 ms */
     58          
     59          	  0x028 | 0x06,            /* power control: turn on voltage regulator */
     60          	  U8G_ESC_DLY(50),         /* delay 50 ms */
     61          
     62          	  0x028 | 0x07,            /* power control: turn on voltage follower */
     63          	  U8G_ESC_DLY(50),         /* delay 50 ms */
     64          
     65          	  0x010,                   /* Set V0 voltage resistor ratio. Setting for controlling brightness of Displaytech 64128N */
     66          
     67          	  0x0a6,                   /* display normal, bit val 0: LCD pixel off. */
     68          
     69          	  0x081,      	           /* set contrast */
     70          	  0x01e,        	       /* Contrast value. Setting for controlling brightness of Displaytech 64128N */
     71          
     72          
     73          	  0x0af,		           /* display on */
     74          
     75          	  U8G_ESC_DLY(100),        /* delay 100 ms */
     76          	  0x0a5,		           /* display all points, ST7565 */
     77          	  U8G_ESC_DLY(100),        /* delay 100 ms */
     78          	  U8G_ESC_DLY(100),        /* delay 100 ms */
     79          	  0x0a4,		           /* normal display */
     80          	  U8G_ESC_CS(0),           /* disable chip */
     81          	  U8G_ESC_END              /* end of sequence */
     82          };
     83          

   \                                 In section .text, align 4, keep-with-next
     84          static const uint8_t u8g_dev_st7565_64128n_data_start[] PROGMEM = {
   \                     u8g_dev_st7565_64128n_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 16, 0, 255, 254
   \              0xFF 0xD1    
   \              0x10 0x00    
   \              0xFF 0xFE    
     85            U8G_ESC_ADR(0),           /* instruction mode */
     86            U8G_ESC_CS(1),            /* enable chip */
     87            0x010,	                /* set upper 4 bit of the col adr to 0x10 */
     88            0x000,		            /* set lower 4 bit of the col adr to 0x00. Changed for DisplayTech 64128N */      
     89            U8G_ESC_END               /* end of sequence */
     90          };
     91          

   \                                 In section .text, align 4, keep-with-next
     92          static const uint8_t u8g_dev_st7565_64128n_sleep_on[] PROGMEM = {
   \                     u8g_dev_st7565_64128n_sleep_on:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 172, 0, 174, 165, 255, 208, 255, 254
   \              0xFF 0xD1    
   \              0xAC 0x00    
   \              0xAE 0xA5    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
     93            U8G_ESC_ADR(0),           /* instruction mode */
     94            U8G_ESC_CS(1),             /* enable chip */
     95            0x0ac,		/* static indicator off */
     96            0x000,		                /* indicator register set (not sure if this is required) */
     97            0x0ae,		/* display off */      
     98            0x0a5,		/* all points on */      
     99            U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
    100            U8G_ESC_END                /* end of sequence */
    101          };
    102          

   \                                 In section .text, align 4, keep-with-next
    103          static const uint8_t u8g_dev_st7565_64128n_sleep_off[] PROGMEM = {
   \                     u8g_dev_st7565_64128n_sleep_off:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 164, 175, 255, 50, 255, 208, 255, 254
   \              0xFF 0xD1    
   \              0xA4 0xAF    
   \              0xFF 0x32    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
    104            U8G_ESC_ADR(0),           /* instruction mode */
    105            U8G_ESC_CS(1),             /* enable chip */
    106            0x0a4,		/* all points off */      
    107            0x0af,		/* display on */      
    108            U8G_ESC_DLY(50),       /* delay 50 ms */
    109            U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
    110            U8G_ESC_END                /* end of sequence */
    111          };
    112          

   \                                 In section .text, align 4, keep-with-next
    113          uint8_t u8g_dev_st7565_64128n_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    114          {
   \                     u8g_dev_st7565_64128n_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    115            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD008             BEQ.N    ??u8g_dev_st7565_64128n_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD03C             BEQ.N    ??u8g_dev_st7565_64128n_fn_1
   \   00000016   0x2810             CMP      R0,#+16
   \   00000018   0xD055             BEQ.N    ??u8g_dev_st7565_64128n_fn_2
   \   0000001A   0x2811             CMP      R0,#+17
   \   0000001C   0xD05A             BEQ.N    ??u8g_dev_st7565_64128n_fn_3
   \   0000001E   0x2815             CMP      R0,#+21
   \   00000020   0xD013             BEQ.N    ??u8g_dev_st7565_64128n_fn_4
   \   00000022   0xE008             B.N      ??u8g_dev_st7565_64128n_fn_5
    116            {
    117              case U8G_DEV_MSG_INIT:
    118                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
   \                     ??u8g_dev_st7565_64128n_fn_0: (+1)
   \   00000024   0x2203             MOVS     R2,#+3
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       u8g_InitCom
    119                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_init_seq);
   \   0000002C   0x....             ADR.N    R2,u8g_dev_st7565_64128n_init_seq
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       u8g_WriteEscSeqP
    120                break;
    121              case U8G_DEV_MSG_STOP:
    122                break;
    123              case U8G_DEV_MSG_PAGE_NEXT:
    124                {
    125                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    126                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_data_start);    
    127                  u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (ST7565R) */
    128                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    129                  if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    130                    return 0;
    131                  u8g_SetChipSelect(u8g, dev, 0);
    132                }
    133                break;
    134              case U8G_DEV_MSG_CONTRAST:
    135                u8g_SetChipSelect(u8g, dev, 1);
    136                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    137                u8g_WriteByte(u8g, dev, 0x081);
    138                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
    139                u8g_SetChipSelect(u8g, dev, 0);      
    140                return 1;
    141              case U8G_DEV_MSG_SLEEP_ON:
    142                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_on);    
    143                return 1;
    144              case U8G_DEV_MSG_SLEEP_OFF:
    145                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_off);    
    146                return 1;
    147            }
    148            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_st7565_64128n_fn_5: (+1)
   \   00000036   0x463B             MOV      R3,R7
   \   00000038   0x4632             MOV      R2,R6
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000042   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
   \                     ??u8g_dev_st7565_64128n_fn_6: (+1)
   \   00000046   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_st7565_64128n_fn_4: (+1)
   \   0000004A   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   0000004E   0xBF00             Nop      
   \   00000050   0x....             ADR.N    R2,u8g_dev_st7565_64128n_data_start
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000058   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   0000005C   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   00000060   0x4629             MOV      R1,R5
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       u8g_WriteByte
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x4629             MOV      R1,R5
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       u8g_SetAddress
   \   00000072   0x462A             MOV      R2,R5
   \   00000074   0x4621             MOV      R1,R4
   \   00000076   0x4640             MOV      R0,R8
   \   00000078   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD101             BNE.N    ??u8g_dev_st7565_64128n_fn_7
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE7E0             B.N      ??u8g_dev_st7565_64128n_fn_6
   \                     ??u8g_dev_st7565_64128n_fn_7: (+1)
   \   00000084   0x2200             MOVS     R2,#+0
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000008E   0xE7D2             B.N      ??u8g_dev_st7565_64128n_fn_5
   \                     ??u8g_dev_st7565_64128n_fn_1: (+1)
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000098   0x2200             MOVS     R2,#+0
   \   0000009A   0x4629             MOV      R1,R5
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       u8g_SetAddress
   \   000000A2   0x2281             MOVS     R2,#+129
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_WriteByte
   \   000000AC   0x783A             LDRB     R2,[R7, #+0]
   \   000000AE   0x0892             LSRS     R2,R2,#+2
   \   000000B0   0x4629             MOV      R1,R5
   \   000000B2   0x4620             MOV      R0,R4
   \   000000B4   0x.... 0x....      BL       u8g_WriteByte
   \   000000B8   0x2200             MOVS     R2,#+0
   \   000000BA   0x4629             MOV      R1,R5
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE7BF             B.N      ??u8g_dev_st7565_64128n_fn_6
   \                     ??u8g_dev_st7565_64128n_fn_2: (+1)
   \   000000C6   0xBF00             Nop      
   \   000000C8   0x....             ADR.N    R2,u8g_dev_st7565_64128n_sleep_on
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0xE7B8             B.N      ??u8g_dev_st7565_64128n_fn_6
   \                     ??u8g_dev_st7565_64128n_fn_3: (+1)
   \   000000D4   0x....             ADR.N    R2,u8g_dev_st7565_64128n_sleep_off
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xE7B2             B.N      ??u8g_dev_st7565_64128n_fn_6
    149          }
    150          

   \                                 In section .text, align 4, keep-with-next
    151          uint8_t u8g_dev_st7565_64128n_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    152          {
   \                     u8g_dev_st7565_64128n_2x_fn: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    153            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD00A             BEQ.N    ??u8g_dev_st7565_64128n_2x_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD065             BEQ.N    ??u8g_dev_st7565_64128n_2x_fn_1
   \   00000016   0x2810             CMP      R0,#+16
   \   00000018   0xF000 0x807E      BEQ.W    ??u8g_dev_st7565_64128n_2x_fn_2
   \   0000001C   0x2811             CMP      R0,#+17
   \   0000001E   0xF000 0x8081      BEQ.W    ??u8g_dev_st7565_64128n_2x_fn_3
   \   00000022   0x2815             CMP      R0,#+21
   \   00000024   0xD014             BEQ.N    ??u8g_dev_st7565_64128n_2x_fn_4
   \   00000026   0xE008             B.N      ??u8g_dev_st7565_64128n_2x_fn_5
    154            {
    155              case U8G_DEV_MSG_INIT:
    156                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
   \                     ??u8g_dev_st7565_64128n_2x_fn_0: (+1)
   \   00000028   0x2203             MOVS     R2,#+3
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       u8g_InitCom
    157                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_init_seq);
   \   00000030   0x....             ADR.N    R2,u8g_dev_st7565_64128n_init_seq
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       u8g_WriteEscSeqP
    158                break;
    159              case U8G_DEV_MSG_STOP:
    160                break;
    161              case U8G_DEV_MSG_PAGE_NEXT:
    162                {
    163                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    164          	
    165                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_data_start);    
    166                  u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
    167                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    168          	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
    169                  u8g_SetChipSelect(u8g, dev, 0);
    170          	
    171                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_data_start);    
    172                  u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
    173                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    174          	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
    175                  u8g_SetChipSelect(u8g, dev, 0);
    176                }
    177                break;
    178              case U8G_DEV_MSG_CONTRAST:
    179                u8g_SetChipSelect(u8g, dev, 1);
    180                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    181                u8g_WriteByte(u8g, dev, 0x081);
    182                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
    183                u8g_SetChipSelect(u8g, dev, 0);      
    184                return 1;
    185              case U8G_DEV_MSG_SLEEP_ON:
    186                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_on);    
    187                return 1;
    188              case U8G_DEV_MSG_SLEEP_OFF:
    189                u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_off);    
    190                return 1;
    191            }
    192            return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_st7565_64128n_2x_fn_5: (+1)
   \   0000003A   0x463B             MOV      R3,R7
   \   0000003C   0x4632             MOV      R2,R6
   \   0000003E   0x4629             MOV      R1,R5
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xB001             ADD      SP,SP,#+4
   \   00000044   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   00000048   0x.... 0x....      B.W      u8g_dev_pb16v1_base_fn
   \                     ??u8g_dev_st7565_64128n_2x_fn_6: (+1)
   \   0000004C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??u8g_dev_st7565_64128n_2x_fn_4: (+1)
   \   00000050   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   00000054   0x.... 0x....      ADR.W    R9,u8g_dev_st7565_64128n_data_start
   \   00000058   0x464A             MOV      R2,R9
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000060   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000064   0x0052             LSLS     R2,R2,#+1
   \   00000066   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   0000006A   0xB2D2             UXTB     R2,R2
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       u8g_WriteByte
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x4629             MOV      R1,R5
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       u8g_SetAddress
   \   0000007E   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   00000082   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       u8g_WriteSequence
   \   0000008E   0x2200             MOVS     R2,#+0
   \   00000090   0x4629             MOV      R1,R5
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000098   0x464A             MOV      R2,R9
   \   0000009A   0x4629             MOV      R1,R5
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000A2   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   000000A6   0x0052             LSLS     R2,R2,#+1
   \   000000A8   0x1C52             ADDS     R2,R2,#+1
   \   000000AA   0xF042 0x02B0      ORR      R2,R2,#0xB0
   \   000000AE   0xB2D2             UXTB     R2,R2
   \   000000B0   0x4629             MOV      R1,R5
   \   000000B2   0x4620             MOV      R0,R4
   \   000000B4   0x.... 0x....      BL       u8g_WriteByte
   \   000000B8   0x2201             MOVS     R2,#+1
   \   000000BA   0x4629             MOV      R1,R5
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       u8g_SetAddress
   \   000000C2   0xF898 0x2005      LDRB     R2,[R8, #+5]
   \   000000C6   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000CA   0x4611             MOV      R1,R2
   \   000000CC   0x1843             ADDS     R3,R0,R1
   \   000000CE   0x4629             MOV      R1,R5
   \   000000D0   0x4620             MOV      R0,R4
   \   000000D2   0x.... 0x....      BL       u8g_WriteSequence
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x4629             MOV      R1,R5
   \   000000DA   0x4620             MOV      R0,R4
   \   000000DC   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000E0   0xE7AB             B.N      ??u8g_dev_st7565_64128n_2x_fn_5
   \                     ??u8g_dev_st7565_64128n_2x_fn_1: (+1)
   \   000000E2   0x2201             MOVS     R2,#+1
   \   000000E4   0x4620             MOV      R0,R4
   \   000000E6   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0x4629             MOV      R1,R5
   \   000000EE   0x4620             MOV      R0,R4
   \   000000F0   0x.... 0x....      BL       u8g_SetAddress
   \   000000F4   0x2281             MOVS     R2,#+129
   \   000000F6   0x4629             MOV      R1,R5
   \   000000F8   0x4620             MOV      R0,R4
   \   000000FA   0x.... 0x....      BL       u8g_WriteByte
   \   000000FE   0x783A             LDRB     R2,[R7, #+0]
   \   00000100   0x0892             LSRS     R2,R2,#+2
   \   00000102   0x4629             MOV      R1,R5
   \   00000104   0x4620             MOV      R0,R4
   \   00000106   0x.... 0x....      BL       u8g_WriteByte
   \   0000010A   0x2200             MOVS     R2,#+0
   \   0000010C   0x4629             MOV      R1,R5
   \   0000010E   0x4620             MOV      R0,R4
   \   00000110   0x.... 0x....      BL       u8g_SetChipSelect
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0xE799             B.N      ??u8g_dev_st7565_64128n_2x_fn_6
   \                     ??u8g_dev_st7565_64128n_2x_fn_2: (+1)
   \   00000118   0x....             ADR.N    R2,u8g_dev_st7565_64128n_sleep_on
   \   0000011A   0x4620             MOV      R0,R4
   \   0000011C   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000120   0x2001             MOVS     R0,#+1
   \   00000122   0xE793             B.N      ??u8g_dev_st7565_64128n_2x_fn_6
   \                     ??u8g_dev_st7565_64128n_2x_fn_3: (+1)
   \   00000124   0x....             ADR.N    R2,u8g_dev_st7565_64128n_sleep_off
   \   00000126   0x4620             MOV      R0,R4
   \   00000128   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   0000012C   0x2001             MOVS     R0,#+1
   \   0000012E   0xE78D             B.N      ??u8g_dev_st7565_64128n_2x_fn_6
    193          }
    194          

   \                                 In section .bss, align 4
    195          U8G_PB_DEV(u8g_dev_st7565_64128n_sw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_st7565_64128n_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_st7565_64128n_sw_spi_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7565_64128n_sw_spi_pb
   \                     u8g_dev_st7565_64128n_sw_spi_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7565_64128n_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7565_64128n_sw_spi
   \                     u8g_dev_st7565_64128n_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_fn, u8g_dev_st7565_64128n_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    196          U8G_PB_DEV(u8g_dev_st7565_64128n_hw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_st7565_64128n_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_st7565_64128n_hw_spi_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7565_64128n_hw_spi_pb
   \                     u8g_dev_st7565_64128n_hw_spi_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7565_64128n_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7565_64128n_hw_spi
   \                     u8g_dev_st7565_64128n_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_fn, u8g_dev_st7565_64128n_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    197          U8G_PB_DEV(u8g_dev_st7565_64128n_parallel, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_st7565_64128n_fn, U8G_COM_PARALLEL);
   \                     u8g_dev_st7565_64128n_parallel_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_st7565_64128n_parallel_pb
   \                     u8g_dev_st7565_64128n_parallel_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7565_64128n_parallel_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_st7565_64128n_parallel
   \                     u8g_dev_st7565_64128n_parallel:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_fn, u8g_dev_st7565_64128n_parallel_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    198          

   \                                 In section .bss, align 4
    199          uint8_t u8g_dev_st7565_64128n_2x_buf[WIDTH*2] U8G_NOCOMMON ; 
   \                     u8g_dev_st7565_64128n_2x_buf:
   \   00000000                      DS8 256

   \                                 In section .data, align 4
    200          u8g_pb_t u8g_dev_st7565_64128n_2x_pb = { {16, HEIGHT, 0, 0, 0},  WIDTH, u8g_dev_st7565_64128n_2x_buf}; 
   \                     u8g_dev_st7565_64128n_2x_pb:
   \   00000000   0x10 0x40          DC8 16, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_st7565_64128n_2x_buf

   \                                 In section .data, align 4
    201          u8g_dev_t u8g_dev_st7565_64128n_2x_sw_spi = { u8g_dev_st7565_64128n_2x_fn, &u8g_dev_st7565_64128n_2x_pb, U8G_COM_SW_SPI };
   \                     u8g_dev_st7565_64128n_2x_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_2x_fn, u8g_dev_st7565_64128n_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    202          u8g_dev_t u8g_dev_st7565_64128n_2x_hw_spi = { u8g_dev_st7565_64128n_2x_fn, &u8g_dev_st7565_64128n_2x_pb, U8G_COM_HW_SPI };
   \                     u8g_dev_st7565_64128n_2x_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_2x_fn, u8g_dev_st7565_64128n_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .data, align 4
    203          u8g_dev_t u8g_dev_st7565_64128n_2x_hw_parallel = { u8g_dev_st7565_64128n_2x_fn, &u8g_dev_st7565_64128n_2x_pb, U8G_COM_PARALLEL };
   \                     u8g_dev_st7565_64128n_2x_hw_parallel:
   \   00000000   0x........         DC32 u8g_dev_st7565_64128n_2x_fn, u8g_dev_st7565_64128n_2x_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   u8g_dev_st7565_64128n_2x_fn
        32   -> u8g_InitCom
        32   -> u8g_SetAddress
        32   -> u8g_SetChipSelect
        32   -> u8g_WriteByte
        32   -> u8g_WriteEscSeqP
        32   -> u8g_WriteSequence
         0   -> u8g_dev_pb16v1_base_fn
      24   u8g_dev_st7565_64128n_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8v1_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     256  u8g_dev_st7565_64128n_2x_buf
     304  u8g_dev_st7565_64128n_2x_fn
      12  u8g_dev_st7565_64128n_2x_hw_parallel
      12  u8g_dev_st7565_64128n_2x_hw_spi
      12  u8g_dev_st7565_64128n_2x_pb
      12  u8g_dev_st7565_64128n_2x_sw_spi
       8  u8g_dev_st7565_64128n_data_start
     224  u8g_dev_st7565_64128n_fn
      12  u8g_dev_st7565_64128n_hw_spi
     128  u8g_dev_st7565_64128n_hw_spi_buf
      12  u8g_dev_st7565_64128n_hw_spi_pb
      40  u8g_dev_st7565_64128n_init_seq
      12  u8g_dev_st7565_64128n_parallel
     128  u8g_dev_st7565_64128n_parallel_buf
      12  u8g_dev_st7565_64128n_parallel_pb
      12  u8g_dev_st7565_64128n_sleep_off
      12  u8g_dev_st7565_64128n_sleep_on
      12  u8g_dev_st7565_64128n_sw_spi
     128  u8g_dev_st7565_64128n_sw_spi_buf
      12  u8g_dev_st7565_64128n_sw_spi_pb

 
 640 bytes in section .bss
 120 bytes in section .data
 600 bytes in section .text
 
 600 bytes of CODE memory
 760 bytes of DATA memory

Errors: none
Warnings: none
