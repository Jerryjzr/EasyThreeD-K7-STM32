###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ld7032_60x32.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW440F.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ld7032_60x32.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_ld7032_60x32.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_ld7032_60x32.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ld7032_60x32.c
      1          /*
      2          
      3            u8g_dev_ld7032_60x32.c
      4            
      5            60x32 OLED display
      6          
      7            Universal 8bit Graphics Library
      8            
      9            Copyright (c) 2011, olikraus@gmail.com
     10            All rights reserved.
     11          
     12            Redistribution and use in source and binary forms, with or without modification, 
     13            are permitted provided that the following conditions are met:
     14          
     15            * Redistributions of source code must retain the above copyright notice, this list 
     16              of conditions and the following disclaimer.
     17              
     18            * Redistributions in binary form must reproduce the above copyright notice, this 
     19              list of conditions and the following disclaimer in the documentation and/or other 
     20              materials provided with the distribution.
     21          
     22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     35            
     36            
     37          */
     38          
     39          #include "u8g.h"
     40          
     41          /* define width as 64, so that it is a multiple of 8 */
     42          #define WIDTH 64
     43          #define HEIGHT 32
     44          #define PAGE_HEIGHT 8
     45          

   \                                 In section .text, align 4, keep-with-next
     46          static const uint8_t u8g_dev_ld7032_60x32_init_seq[] PROGMEM = {
   \                     u8g_dev_ld7032_60x32_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 1, 255, 193, 255, 209, 255, 224, 2, 255
   \              0xFF 0xE0    
   \              0xFF 0x01    
   \              0xFF 0xC1    
   \              0xFF 0xD1    
   \              0xFF 0xE0    
   \              0x02 0xFF    
   \   0000000E   0xE1 0x01          DC8 225, 1, 255, 224, 20, 255, 225, 0, 255, 224, 26, 255, 225, 4, 255
   \              0xFF 0xE0    
   \              0x14 0xFF    
   \              0xE1 0x00    
   \              0xFF 0xE0    
   \              0x1A 0xFF    
   \              0xE1 0x04    
   \              0xFF         
   \   0000001D   0xE0 0x1D          DC8 224, 29, 255, 225, 0, 255, 224, 9, 255, 225, 0, 255, 224, 48, 255
   \              0xFF 0xE1    
   \              0x00 0xFF    
   \              0xE0 0x09    
   \              0xFF 0xE1    
   \              0x00 0xFF    
   \              0xE0 0x30    
   \              0xFF         
   \   0000002C   0xE1 0x00          DC8 225, 0, 59, 255, 224, 50, 255, 225, 0, 31, 255, 224, 16, 255, 225
   \              0x3B 0xFF    
   \              0xE0 0x32    
   \              0xFF 0xE1    
   \              0x00 0x1F    
   \              0xFF 0xE0    
   \              0x10 0xFF    
   \              0xE1         
   \   0000003B   0x00 0xFF          DC8 0, 255, 224, 22, 255, 225, 0, 255, 224, 18, 255, 225, 80, 255, 224
   \              0xE0 0x16    
   \              0xFF 0xE1    
   \              0x00 0xFF    
   \              0xE0 0x12    
   \              0xFF 0xE1    
   \              0x50 0xFF    
   \              0xE0         
   \   0000004A   0x18 0xFF          DC8 24, 255, 225, 3, 255, 224, 68, 255, 225, 2, 255, 224, 72, 255, 225
   \              0xE1 0x03    
   \              0xFF 0xE0    
   \              0x44 0xFF    
   \              0xE1 0x02    
   \              0xFF 0xE0    
   \              0x48 0xFF    
   \              0xE1         
   \   00000059   0x03 0xFF          DC8 3, 255, 224, 63, 255, 225, 17, 255, 224, 61, 255, 225, 0, 255, 224
   \              0xE0 0x3F    
   \              0xFF 0xE1    
   \              0x11 0xFF    
   \              0xE0 0x3D    
   \              0xFF 0xE1    
   \              0x00 0xFF    
   \              0xE0         
   \   00000068   0x02 0xFF          DC8 2, 255, 225, 1, 255, 224, 8, 255, 208, 255, 254, 0
   \              0xE1 0x01    
   \              0xFF 0xE0    
   \              0x08 0xFF    
   \              0xD0 0xFF    
   \              0xFE 0x00    
     47            U8G_ESC_CS(0),             /* disable chip */
     48            U8G_ESC_ADR(0),           /* instruction mode */
     49            U8G_ESC_DLY(1),       	/* delay 1 ms */
     50            U8G_ESC_RST(1),           /* do reset low pulse with (1*16)+2 milliseconds */
     51            U8G_ESC_CS(1),             /* enable chip */
     52            
     53            
     54            U8G_ESC_ADR(0),           /* instruction mode */
     55            0x002,				/* Dot Matrix Display ON/OFF */
     56            U8G_ESC_ADR(1),           /* data mode */
     57            0x001,				/* ON */
     58            
     59            U8G_ESC_ADR(0),           /* instruction mode */
     60            0x014,				/* Dot Matrix Display Stand-by ON/OFF */
     61            U8G_ESC_ADR(1),           /* data mode */
     62            0x000,				/* ON */
     63          
     64            U8G_ESC_ADR(0),           /* instruction mode */
     65            0x01a,				/* Dot Matrix Frame Rate */
     66            U8G_ESC_ADR(1),           /* data mode */
     67            0x004,				/* special value for this OLED from manual */
     68          
     69            U8G_ESC_ADR(0),           /* instruction mode */
     70            0x01d,				/* Graphics Memory Writing Direction */
     71            U8G_ESC_ADR(1),           /* data mode */
     72            0x000,				/* reset default (right down, horizontal) */
     73          
     74            U8G_ESC_ADR(0),           /* instruction mode */
     75            0x009,				/* Display Direction */
     76            U8G_ESC_ADR(1),           /* data mode */
     77            0x000,				/* reset default (x,y: min --> max) */
     78            
     79            U8G_ESC_ADR(0),           /* instruction mode */
     80            0x030,				/* Display Size X */
     81            U8G_ESC_ADR(1),           /* data mode */
     82            0x000,				/* Column Start Output */
     83            0x03b,				/* Column End Output */
     84          
     85            U8G_ESC_ADR(0),           /* instruction mode */
     86            0x032,				/* Display Size Y */
     87            U8G_ESC_ADR(1),           /* data mode */
     88            0x000,				/* Row Start Output */
     89            0x01f,				/* Row End Output */
     90            
     91            U8G_ESC_ADR(0),           /* instruction mode */
     92            0x010,				/* Peak Pulse Width Set */
     93            U8G_ESC_ADR(1),           /* data mode */
     94            0x000,				/* 0 SCLK */
     95            
     96            U8G_ESC_ADR(0),           /* instruction mode */
     97            0x016,				/* Peak Pulse Delay Set */
     98            U8G_ESC_ADR(1),           /* data mode */
     99            0x000,				/* 0 SCLK */
    100            
    101            U8G_ESC_ADR(0),           /* instruction mode */
    102            0x012,				/* Dot Matrix Current Level Set */
    103            U8G_ESC_ADR(1),           /* data mode */
    104            0x050,				/* 0x050 * 1 uA = 80 uA */
    105          
    106            U8G_ESC_ADR(0),           /* instruction mode */
    107            0x018,				/* Pre-Charge Pulse Width */
    108            U8G_ESC_ADR(1),           /* data mode */
    109            0x003,				/* 3 SCLK */
    110          
    111            U8G_ESC_ADR(0),           /* instruction mode */
    112            0x044,				/* Pre-Charge Mode */
    113            U8G_ESC_ADR(1),           /* data mode */
    114            0x002,				/* Every Time */
    115          
    116            U8G_ESC_ADR(0),           /* instruction mode */
    117            0x048,				/* Row overlap timing */
    118            U8G_ESC_ADR(1),           /* data mode */
    119            0x003,				/* Pre-Charge + Peak Delay + Peak boot Timing */
    120          
    121            U8G_ESC_ADR(0),           /* instruction mode */
    122            0x03f,				/* VCC_R_SEL */
    123            U8G_ESC_ADR(1),           /* data mode */
    124            0x011,				/* ??? */
    125          
    126            U8G_ESC_ADR(0),           /* instruction mode */
    127            0x03d,				/* VSS selection */
    128            U8G_ESC_ADR(1),           /* data mode */
    129            0x000,				/* 2.8V */
    130          
    131            U8G_ESC_ADR(0),           /* instruction mode */
    132            0x002,				/* Dot Matrix Display ON/OFF */
    133            U8G_ESC_ADR(1),           /* data mode */
    134            0x001,				/* ON */
    135          
    136            U8G_ESC_ADR(0),           /* instruction mode */
    137            0x008,				/* write data */
    138          
    139            U8G_ESC_CS(0),             /* disable chip */
    140            U8G_ESC_END                /* end of sequence */
    141          };
    142          
    143          /* use box commands to set start adr */

   \                                 In section .text, align 4, keep-with-next
    144          static const uint8_t u8g_dev_ld7032_60x32_data_start[] PROGMEM = {
   \                     u8g_dev_ld7032_60x32_data_start:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 255, 224, 52, 255, 225, 0, 255, 224, 53, 255
   \              0xFF 0xD1    
   \              0xFF 0xE0    
   \              0x34 0xFF    
   \              0xE1 0x00    
   \              0xFF 0xE0    
   \              0x35 0xFF    
   \   0000000E   0xE1 0x07          DC8 225, 7, 255, 224, 55, 255, 225, 31, 255, 224, 54, 255, 225, 255
   \              0xFF 0xE0    
   \              0x37 0xFF    
   \              0xE1 0x1F    
   \              0xFF 0xE0    
   \              0x36 0xFF    
   \              0xE1 0xFF    
   \   0000001C   0xFE 0x00          DC8 254, 0, 0, 0
   \              0x00 0x00    
    145            U8G_ESC_ADR(0),           /* instruction mode */
    146            U8G_ESC_CS(1),             /* enable chip */
    147            
    148            
    149            U8G_ESC_ADR(0),           /* instruction mode */
    150            0x034,				/* box x start */
    151            U8G_ESC_ADR(1),           /* data mode */
    152            0x000,				/* 0 */
    153          
    154            U8G_ESC_ADR(0),           /* instruction mode */
    155            0x035,				/* box x end */
    156            U8G_ESC_ADR(1),           /* data mode */
    157            0x007,				/*  */
    158          
    159            U8G_ESC_ADR(0),           /* instruction mode */
    160            0x037,				/* box y end */
    161            U8G_ESC_ADR(1),           /* data mode */
    162            0x01f,				/*  */
    163          
    164            U8G_ESC_ADR(0),           /* instruction mode */
    165            0x036,				/* box y start */
    166            U8G_ESC_ADR(1),           /* data mode */
    167          
    168            U8G_ESC_END                /* end of sequence */
    169          };
    170          

   \                                 In section .text, align 4, keep-with-next
    171          static const uint8_t u8g_dev_ld7032_60x32_sleep_on[] PROGMEM = {
   \                     u8g_dev_ld7032_60x32_sleep_on:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 255, 208, 255, 254
   \              0xFF 0xD1    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
    172            U8G_ESC_ADR(0),           /* instruction mode */
    173            U8G_ESC_CS(1),             /* enable chip */
    174            /* ... */
    175            U8G_ESC_CS(0),             /* disable chip */
    176            U8G_ESC_END                /* end of sequence */
    177          };
    178          

   \                                 In section .text, align 4, keep-with-next
    179          static const uint8_t u8g_dev_ld7032_60x32_sleep_off[] PROGMEM = {
   \                     u8g_dev_ld7032_60x32_sleep_off:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 209, 255, 50, 255, 208, 255, 254, 0, 0
   \              0xFF 0xD1    
   \              0xFF 0x32    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
   \              0x00 0x00    
    180            U8G_ESC_ADR(0),           /* instruction mode */
    181            U8G_ESC_CS(1),             /* enable chip */
    182            /* ... */
    183            U8G_ESC_DLY(50),       /* delay 50 ms */
    184            U8G_ESC_CS(0),             /* disable chip */
    185            U8G_ESC_END                /* end of sequence */
    186          };
    187          

   \                                 In section .text, align 4, keep-with-next
    188          uint8_t u8g_dev_ld7032_60x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
    189          {
   \                     u8g_dev_ld7032_60x32_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    190            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD008             BEQ.N    ??u8g_dev_ld7032_60x32_fn_0
   \   00000012   0x280F             CMP      R0,#+15
   \   00000014   0xD044             BEQ.N    ??u8g_dev_ld7032_60x32_fn_1
   \   00000016   0x2810             CMP      R0,#+16
   \   00000018   0xD05D             BEQ.N    ??u8g_dev_ld7032_60x32_fn_2
   \   0000001A   0x2811             CMP      R0,#+17
   \   0000001C   0xD062             BEQ.N    ??u8g_dev_ld7032_60x32_fn_3
   \   0000001E   0x2815             CMP      R0,#+21
   \   00000020   0xD013             BEQ.N    ??u8g_dev_ld7032_60x32_fn_4
   \   00000022   0xE008             B.N      ??u8g_dev_ld7032_60x32_fn_5
    191            {
    192              case U8G_DEV_MSG_INIT:
    193                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
   \                     ??u8g_dev_ld7032_60x32_fn_0: (+1)
   \   00000024   0x2203             MOVS     R2,#+3
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       u8g_InitCom
    194                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_init_seq);
   \   0000002C   0x....             ADR.N    R2,u8g_dev_ld7032_60x32_init_seq
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       u8g_WriteEscSeqP
    195                break;
    196              case U8G_DEV_MSG_STOP:
    197                break;
    198              case U8G_DEV_MSG_PAGE_NEXT:
    199                {
    200                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    201                  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_data_start);    
    202                  u8g_WriteByte(u8g, dev, pb->p.page_y0); /* y start */
    203          	u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    204          	u8g_WriteByte(u8g, dev, 0x008);
    205                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
    206                  if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    207                    return 0;
    208                  u8g_SetChipSelect(u8g, dev, 0);
    209                }
    210                break;
    211              case U8G_DEV_MSG_CONTRAST:
    212                u8g_SetChipSelect(u8g, dev, 1);
    213                u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
    214                u8g_WriteByte(u8g, dev, 0x081);
    215                u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
    216                u8g_SetChipSelect(u8g, dev, 0);      
    217                return 1;
    218              case U8G_DEV_MSG_SLEEP_ON:
    219                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_on);    
    220                return 1;
    221              case U8G_DEV_MSG_SLEEP_OFF:
    222                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_off);    
    223                return 1;
    224            }
    225            return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ld7032_60x32_fn_5: (+1)
   \   00000036   0x463B             MOV      R3,R7
   \   00000038   0x4632             MOV      R2,R6
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000042   0x.... 0x....      B.W      u8g_dev_pb8h1_base_fn
   \                     ??u8g_dev_ld7032_60x32_fn_6: (+1)
   \   00000046   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??u8g_dev_ld7032_60x32_fn_4: (+1)
   \   0000004A   0xF8D5 0x8004      LDR      R8,[R5, #+4]
   \   0000004E   0xBF00             Nop      
   \   00000050   0x....             ADR.N    R2,u8g_dev_ld7032_60x32_data_start
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   00000058   0xF898 0x2002      LDRB     R2,[R8, #+2]
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       u8g_WriteByte
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x4629             MOV      R1,R5
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       u8g_SetAddress
   \   0000006E   0x2208             MOVS     R2,#+8
   \   00000070   0x4629             MOV      R1,R5
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       u8g_WriteByte
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       u8g_SetAddress
   \   00000082   0x462A             MOV      R2,R5
   \   00000084   0x4621             MOV      R1,R4
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0x.... 0x....      BL       u8g_pb_WriteBuffer
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD101             BNE.N    ??u8g_dev_ld7032_60x32_fn_7
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xE7D8             B.N      ??u8g_dev_ld7032_60x32_fn_6
   \                     ??u8g_dev_ld7032_60x32_fn_7: (+1)
   \   00000094   0x2200             MOVS     R2,#+0
   \   00000096   0x4629             MOV      R1,R5
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       u8g_SetChipSelect
   \   0000009E   0xE7CA             B.N      ??u8g_dev_ld7032_60x32_fn_5
   \                     ??u8g_dev_ld7032_60x32_fn_1: (+1)
   \   000000A0   0x2201             MOVS     R2,#+1
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000A8   0x2200             MOVS     R2,#+0
   \   000000AA   0x4629             MOV      R1,R5
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       u8g_SetAddress
   \   000000B2   0x2281             MOVS     R2,#+129
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0x.... 0x....      BL       u8g_WriteByte
   \   000000BC   0x783A             LDRB     R2,[R7, #+0]
   \   000000BE   0x0892             LSRS     R2,R2,#+2
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       u8g_WriteByte
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x4629             MOV      R1,R5
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       u8g_SetChipSelect
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0xE7B7             B.N      ??u8g_dev_ld7032_60x32_fn_6
   \                     ??u8g_dev_ld7032_60x32_fn_2: (+1)
   \   000000D6   0xBF00             Nop      
   \   000000D8   0x....             ADR.N    R2,u8g_dev_ld7032_60x32_sleep_on
   \   000000DA   0x4620             MOV      R0,R4
   \   000000DC   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0xE7B0             B.N      ??u8g_dev_ld7032_60x32_fn_6
   \                     ??u8g_dev_ld7032_60x32_fn_3: (+1)
   \   000000E4   0x....             ADR.N    R2,u8g_dev_ld7032_60x32_sleep_off
   \   000000E6   0x4620             MOV      R0,R4
   \   000000E8   0x.... 0x....      BL       u8g_WriteEscSeqP
   \   000000EC   0x2001             MOVS     R0,#+1
   \   000000EE   0xE7AA             B.N      ??u8g_dev_ld7032_60x32_fn_6
    226          }
    227          

   \                                 In section .bss, align 4
    228          U8G_PB_DEV(u8g_dev_ld7032_60x32_sw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ld7032_60x32_fn, U8G_COM_SW_SPI);
   \                     u8g_dev_ld7032_60x32_sw_spi_buf:
   \   00000000                      DS8 64

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ld7032_60x32_sw_spi_pb
   \                     u8g_dev_ld7032_60x32_sw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ld7032_60x32_sw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ld7032_60x32_sw_spi
   \                     u8g_dev_ld7032_60x32_sw_spi:
   \   00000000   0x........         DC32 u8g_dev_ld7032_60x32_fn, u8g_dev_ld7032_60x32_sw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    229          U8G_PB_DEV(u8g_dev_ld7032_60x32_hw_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ld7032_60x32_fn, U8G_COM_HW_SPI);
   \                     u8g_dev_ld7032_60x32_hw_spi_buf:
   \   00000000                      DS8 64

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ld7032_60x32_hw_spi_pb
   \                     u8g_dev_ld7032_60x32_hw_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ld7032_60x32_hw_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ld7032_60x32_hw_spi
   \                     u8g_dev_ld7032_60x32_hw_spi:
   \   00000000   0x........         DC32 u8g_dev_ld7032_60x32_fn, u8g_dev_ld7032_60x32_hw_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    230          U8G_PB_DEV(u8g_dev_ld7032_60x32_parallel, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ld7032_60x32_fn, U8G_COM_PARALLEL);
   \                     u8g_dev_ld7032_60x32_parallel_buf:
   \   00000000                      DS8 64

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ld7032_60x32_parallel_pb
   \                     u8g_dev_ld7032_60x32_parallel_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ld7032_60x32_parallel_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ld7032_60x32_parallel
   \                     u8g_dev_ld7032_60x32_parallel:
   \   00000000   0x........         DC32 u8g_dev_ld7032_60x32_fn, u8g_dev_ld7032_60x32_parallel_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    231          U8G_PB_DEV(u8g_dev_ld7032_60x32_hw_usart_spi, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ld7032_60x32_fn, U8G_COM_HW_USART_SPI);
   \                     u8g_dev_ld7032_60x32_hw_usart_spi_buf:
   \   00000000                      DS8 64

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ld7032_60x32_hw_usart_spi_pb
   \                     u8g_dev_ld7032_60x32_hw_usart_spi_pb:
   \   00000000   0x08 0x20          DC8 8, 32, 0, 0, 0, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ld7032_60x32_hw_usart_spi_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ld7032_60x32_hw_usart_spi
   \                     u8g_dev_ld7032_60x32_hw_usart_spi:
   \   00000000   0x........         DC32 u8g_dev_ld7032_60x32_fn, u8g_dev_ld7032_60x32_hw_usart_spi_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    232          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   u8g_dev_ld7032_60x32_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
         0   -> u8g_dev_pb8h1_base_fn
        24   -> u8g_pb_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  u8g_dev_ld7032_60x32_data_start
     240  u8g_dev_ld7032_60x32_fn
      12  u8g_dev_ld7032_60x32_hw_spi
      64  u8g_dev_ld7032_60x32_hw_spi_buf
      12  u8g_dev_ld7032_60x32_hw_spi_pb
      12  u8g_dev_ld7032_60x32_hw_usart_spi
      64  u8g_dev_ld7032_60x32_hw_usart_spi_buf
      12  u8g_dev_ld7032_60x32_hw_usart_spi_pb
     116  u8g_dev_ld7032_60x32_init_seq
      12  u8g_dev_ld7032_60x32_parallel
      64  u8g_dev_ld7032_60x32_parallel_buf
      12  u8g_dev_ld7032_60x32_parallel_pb
      12  u8g_dev_ld7032_60x32_sleep_off
       8  u8g_dev_ld7032_60x32_sleep_on
      12  u8g_dev_ld7032_60x32_sw_spi
      64  u8g_dev_ld7032_60x32_sw_spi_buf
      12  u8g_dev_ld7032_60x32_sw_spi_pb

 
 256 bytes in section .bss
  96 bytes in section .data
 408 bytes in section .text
 
 408 bytes of CODE memory
 352 bytes of DATA memory

Errors: none
Warnings: none
