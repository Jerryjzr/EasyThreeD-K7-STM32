###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ks0108_128x64.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW42F1.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ks0108_128x64.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_dev_ks0108_128x64.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_dev_ks0108_128x64.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_dev_ks0108_128x64.c
      1          /*
      2          
      3            u8g_dev_ks0108_128x64.c
      4          
      5            Universal 8bit Graphics Library
      6            
      7            Copyright (c) 2011, olikraus@gmail.com
      8            All rights reserved.
      9          
     10            Redistribution and use in source and binary forms, with or without modification, 
     11            are permitted provided that the following conditions are met:
     12          
     13            * Redistributions of source code must retain the above copyright notice, this list 
     14              of conditions and the following disclaimer.
     15              
     16            * Redistributions in binary form must reproduce the above copyright notice, this 
     17              list of conditions and the following disclaimer in the documentation and/or other 
     18              materials provided with the distribution.
     19          
     20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     33            
     34          
     35            ADDRESS = 0   (Command Mode)
     36              0x03f       Display On
     37              0x0c0       Start Display at line 0
     38              0x040 | y   write to y address (y:0..63)
     39              0x0b8 | x   write to page [0..7]
     40          
     41          
     42            u8g_Init8Bit(u8g, dev, d0, d1, d2, d3, d4, d5, d6, d7, en, cs1, cs2, di, rw, reset)
     43            u8g_Init8Bit(u8g, dev,  8,    9, 10, 11,   4,   5,   6,   7, 18, 14, 15, 17, 16, U8G_PIN_NONE)
     44            
     45          */
     46          
     47          #include "u8g.h"
     48          
     49          #define WIDTH 128
     50          #define HEIGHT 64
     51          #define PAGE_HEIGHT 8
     52          

   \                                 In section .text, align 4, keep-with-next
     53          static const uint8_t u8g_dev_ks0108_128x64_init_seq[] PROGMEM = {
   \                     u8g_dev_ks0108_128x64_init_seq:
   \   00000000   0xFF 0xD0          DC8 255, 208, 255, 224, 255, 193, 255, 209, 63, 192, 255, 20, 255, 210
   \              0xFF 0xE0    
   \              0xFF 0xC1    
   \              0xFF 0xD1    
   \              0x3F 0xC0    
   \              0xFF 0x14    
   \              0xFF 0xD2    
   \   0000000E   0x3F 0xC0          DC8 63, 192, 255, 20, 255, 208, 255, 254, 0, 0
   \              0xFF 0x14    
   \              0xFF 0xD0    
   \              0xFF 0xFE    
   \              0x00 0x00    
     54            U8G_ESC_CS(0),             /* disable chip */
     55            U8G_ESC_ADR(0),           /* instruction mode */
     56            U8G_ESC_RST(1),           /* do reset low pulse with (1*16)+2 milliseconds */
     57            U8G_ESC_CS(1),             /* enable chip 1 */
     58            0x03f,		                /* display on */
     59            0x0c0,		                /* start at line 0 */
     60            U8G_ESC_DLY(20),         /* delay 20 ms */
     61            U8G_ESC_CS(2),             /* enable chip 2 */
     62            0x03f,		                /* display on */
     63            0x0c0,		                /* start at line 0 */
     64            U8G_ESC_DLY(20),         /* delay 20 ms */
     65            U8G_ESC_CS(0),             /* disable all chips */
     66            U8G_ESC_END                /* end of sequence */
     67          };
     68          
     69          

   \                                 In section .text, align 4, keep-with-next
     70          uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
     71          {
   \                     u8g_dev_ks0108_128x64_fn: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
     72            
     73            switch(msg)
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD002             BEQ.N    ??u8g_dev_ks0108_128x64_fn_0
   \   00000012   0x2815             CMP      R0,#+21
   \   00000014   0xD00A             BEQ.N    ??u8g_dev_ks0108_128x64_fn_1
   \   00000016   0xE05C             B.N      ??u8g_dev_ks0108_128x64_fn_2
     74            {
     75              case U8G_DEV_MSG_INIT:
     76                u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
   \                     ??u8g_dev_ks0108_128x64_fn_0: (+1)
   \   00000018   0x22FF             MOVS     R2,#+255
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       u8g_InitCom
     77                u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
   \   00000020   0x....             ADR.N    R2,u8g_dev_ks0108_128x64_init_seq
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       u8g_WriteEscSeqP
     78                break;
   \   0000002A   0xE052             B.N      ??u8g_dev_ks0108_128x64_fn_2
     79              case U8G_DEV_MSG_STOP:
     80                break;
     81              case U8G_DEV_MSG_PAGE_NEXT:
     82                {
     83                  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   \                     ??u8g_dev_ks0108_128x64_fn_1: (+1)
   \   0000002C   0xF8D5 0x8004      LDR      R8,[R5, #+4]
     84                  
     85                  u8g_SetAddress(u8g, dev, 0);           /* command mode */
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       u8g_SetAddress
     86                  u8g_SetChipSelect(u8g, dev, 2);
   \   00000038   0x2202             MOVS     R2,#+2
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       u8g_SetChipSelect
     87                  u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
   \   00000042   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000046   0xF042 0x02B8      ORR      R2,R2,#0xB8
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       u8g_WriteByte
     88                  u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
   \   00000052   0x2240             MOVS     R2,#+64
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       u8g_WriteByte
     89                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x4629             MOV      R1,R5
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       u8g_SetAddress
     90                  u8g_WriteSequence(u8g, dev, 64, pb->buf);
   \   00000066   0xF8D8 0x3008      LDR      R3,[R8, #+8]
   \   0000006A   0x2240             MOVS     R2,#+64
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       u8g_WriteSequence
     91                  u8g_SetChipSelect(u8g, dev, 0);
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x4629             MOV      R1,R5
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       u8g_SetChipSelect
     92                  
     93                  u8g_SetAddress(u8g, dev, 0);           /* command mode */
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x4629             MOV      R1,R5
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       u8g_SetAddress
     94                  u8g_SetChipSelect(u8g, dev, 1);
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x4629             MOV      R1,R5
   \   0000008C   0x4620             MOV      R0,R4
   \   0000008E   0x.... 0x....      BL       u8g_SetChipSelect
     95                  u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
   \   00000092   0xF898 0x2004      LDRB     R2,[R8, #+4]
   \   00000096   0xF042 0x02B8      ORR      R2,R2,#0xB8
   \   0000009A   0x4629             MOV      R1,R5
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       u8g_WriteByte
     96                  u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
   \   000000A2   0x2240             MOVS     R2,#+64
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       u8g_WriteByte
     97                  u8g_SetAddress(u8g, dev, 1);           /* data mode */
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       u8g_SetAddress
     98                  u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
   \   000000B6   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000000BA   0xF100 0x0340      ADD      R3,R0,#+64
   \   000000BE   0x2240             MOVS     R2,#+64
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       u8g_WriteSequence
     99                  u8g_SetChipSelect(u8g, dev, 0);
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x4629             MOV      R1,R5
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       u8g_SetChipSelect
    100                  
    101                }
    102                break;
    103            }
    104            return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
   \                     ??u8g_dev_ks0108_128x64_fn_2: (+1)
   \   000000D2   0x463B             MOV      R3,R7
   \   000000D4   0x4632             MOV      R2,R6
   \   000000D6   0x4629             MOV      R1,R5
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000DE   0x.... 0x....      B.W      u8g_dev_pb8v1_base_fn
    105          }
    106          

   \                                 In section .bss, align 4
    107          U8G_PB_DEV(u8g_dev_ks0108_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ks0108_128x64_fn, U8G_COM_PARALLEL);
   \                     u8g_dev_ks0108_128x64_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ks0108_128x64_pb
   \                     u8g_dev_ks0108_128x64_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ks0108_128x64_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ks0108_128x64
   \                     u8g_dev_ks0108_128x64:
   \   00000000   0x........         DC32 u8g_dev_ks0108_128x64_fn, u8g_dev_ks0108_128x64_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn

   \                                 In section .bss, align 4
    108          U8G_PB_DEV(u8g_dev_ks0108_128x64_fast, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_ks0108_128x64_fn, U8G_COM_FAST_PARALLEL);
   \                     u8g_dev_ks0108_128x64_fast_buf:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
   \   __absolute u8g_pb_t u8g_dev_ks0108_128x64_fast_pb
   \                     u8g_dev_ks0108_128x64_fast_pb:
   \   00000000   0x08 0x40          DC8 8, 64, 0, 0, 0, 128, 0, 0
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x00 0x00    
   \   00000008   0x........         DC32 u8g_dev_ks0108_128x64_fast_buf

   \                                 In section .data, align 4
   \   __absolute u8g_dev_t u8g_dev_ks0108_128x64_fast
   \                     u8g_dev_ks0108_128x64_fast:
   \   00000000   0x........         DC32 u8g_dev_ks0108_128x64_fn, u8g_dev_ks0108_128x64_fast_pb
   \              0x........   
   \   00000008   0x........         DC32 u8g_com_null_fn
    109          
    110          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   u8g_dev_ks0108_128x64_fn
        24   -> u8g_InitCom
        24   -> u8g_SetAddress
        24   -> u8g_SetChipSelect
        24   -> u8g_WriteByte
        24   -> u8g_WriteEscSeqP
        24   -> u8g_WriteSequence
         0   -> u8g_dev_pb8v1_base_fn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  u8g_dev_ks0108_128x64
     128  u8g_dev_ks0108_128x64_buf
      12  u8g_dev_ks0108_128x64_fast
     128  u8g_dev_ks0108_128x64_fast_buf
      12  u8g_dev_ks0108_128x64_fast_pb
     226  u8g_dev_ks0108_128x64_fn
      24  u8g_dev_ks0108_128x64_init_seq
      12  u8g_dev_ks0108_128x64_pb

 
 256 bytes in section .bss
  48 bytes in section .data
 250 bytes in section .text
 
 250 bytes of CODE memory
 304 bytes of DATA memory

Errors: none
Warnings: none
