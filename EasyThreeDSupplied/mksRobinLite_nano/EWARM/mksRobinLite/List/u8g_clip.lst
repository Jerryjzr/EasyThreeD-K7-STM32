###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       28/Dec/2020  21:37:06
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_clip.c
#    Command line =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4024.tmp
#        (F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_clip.c -D
#        USE_HAL_DRIVER -D STM32F103xE -D MKS_ROBIN -D MARLIN -D __arm__ -D
#        USE_MKS_WIFI --preprocess=s F:\nano\EWARM\mksRobinLite\List -lC
#        F:\nano\EWARM\mksRobinLite\List -lA F:\nano\EWARM\mksRobinLite\List
#        --diag_suppress Pa050 -o F:\nano\EWARM\mksRobinLite\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --char_is_signed --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I F:\nano\EWARM/../Inc\ -I
#        F:\nano\EWARM/../Src\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\ -I
#        F:\nano\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/Inc\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\ -I
#        F:\nano\EWARM/../Drivers/CMSIS/Include\ -I
#        F:\nano\EWARM/../Drivers/BSP/STM32MKS-3dPrinter\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/Common\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/l6474\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/at24cxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/Components/w25qxx\ -I
#        F:\nano\EWARM/../Drivers/BSP/MotorControl\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/Marlin\ -I
#        F:\nano\EWARM/../Middlewares/Third_Party/u8glib_arm_v1.17/src\ -I
#        F:\nano\EWARM/../Middlewares/arduino\ -I
#        F:\nano\EWARM/../Middlewares/arduino/avr\ -I
#        F:\nano\EWARM/../Inc/Logo\ -Om --use_c++_inline -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  F:\nano\EWARM\mksRobinLite\List\u8g_clip.lst
#    Object file  =  F:\nano\EWARM\mksRobinLite\Obj\u8g_clip.o
#
###############################################################################

F:\nano\Middlewares\Third_Party\u8glib_arm_v1.17\src\u8g_clip.c
      1          /*
      2          
      3            u8g_clip.c
      4            
      5            procedures for clipping
      6            taken over from procs in u8g_pb.c
      7          
      8            Universal 8bit Graphics Library
      9            
     10            Copyright (c) 2012, olikraus@gmail.com
     11            All rights reserved.
     12          
     13            Redistribution and use in source and binary forms, with or without modification, 
     14            are permitted provided that the following conditions are met:
     15          
     16            * Redistributions of source code must retain the above copyright notice, this list 
     17              of conditions and the following disclaimer.
     18              
     19            * Redistributions in binary form must reproduce the above copyright notice, this 
     20              list of conditions and the following disclaimer in the documentation and/or other 
     21              materials provided with the distribution.
     22          
     23            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
     24            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
     26            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
     27            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
     28            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     29            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
     30            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
     31            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
     32            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     33            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
     34            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
     35            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
     36            
     37            Notes
     38            
     39            This is one of the most critical parts of u8glib. It must be fast, but still reliable.
     40            Based on the intersection program (see tools folder), there is minimized version of
     41            the condition for the intersaction test:
     42              minimized version
     43              ---1----0 1             b1 <= a2 && b1 > b2
     44              -----1--0 1             b2 >= a1 && b1 > b2
     45              ---1-1--- 1             b1 <= a2 && b2 >= a1
     46            It includes the assumption, that a1 <= a2 is always true (correct, because
     47            a1, a2 are the page dimensions.
     48          
     49            The direct implementation of the above result is done in:
     50            uint8_t u8g_is_intersection_boolean(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1)
     51            However, this is slower than a decision tree version:  
     52            static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
     53            Also suprising is, that the macro implementation is slower than the inlined version.
     54            
     55            The decision tree is based on the expansion of the truth table.
     56            
     57          */
     58          
     59          #include "u8g.h"
     60          
     61          #ifdef __GNUC__
     62          #define U8G_ALWAYS_INLINE __inline__ __attribute__((always_inline))
     63          #else
     64          #define U8G_ALWAYS_INLINE
     65           #endif 
     66          
     67          /*
     68            intersection assumptions:
     69              a1 <= a2 is always true    
     70              
     71              minimized version
     72              ---1----0 1             b1 <= a2 && b1 > b2
     73              -----1--0 1             b2 >= a1 && b1 > b2
     74              ---1-1--- 1             b1 <= a2 && b2 >= a1
     75            */
     76          
     77          #ifdef OLD_CODE_WHICH_IS_TOO_SLOW
     78          static uint8_t u8g_is_intersection_boolean(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1)
     79          {
     80            uint8_t c1, c2, c3, tmp;
     81            c1 = v0 <= a1;
     82            c2 = v1 >= a0;
     83            c3 = v0 > v1;
     84            
     85            tmp = c1;
     86            c1 &= c2;
     87            c2 &= c3;
     88            c3 &= tmp;
     89            c1 |= c2;
     90            c1 |= c3;
     91            return c1 & 1;
     92          }
     93          #endif
     94          
     95          #define U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1) ((uint8_t)( (v0) <= (a1) ) ? ( ( (v1) >= (a0) ) ? ( 1 ) : ( (v0) > (v1) ) ) : ( ( (v1) >= (a0) ) ? ( (v0) > (v1) ) : ( 0 ) ))
     96          
     97          //static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;

   \                                 In section .text, align 2, keep-with-next
     98          static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
     99          {
   \                     u8g_is_intersection_decision_tree: (+1)
   \   00000000   0xB410             PUSH     {R4}
    100            /* surprisingly the macro leads to larger code */
    101            /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
    102            if ( v0 <= a1 )
   \   00000002   0x4614             MOV      R4,R2
   \   00000004   0x42A1             CMP      R1,R4
   \   00000006   0x4619             MOV      R1,R3
   \   00000008   0xD307             BCC.N    ??u8g_is_intersection_decision_tree_0
    103            {
    104              if ( v1 >= a0 )
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xD301             BCC.N    ??u8g_is_intersection_decision_tree_1
    105              {
    106                return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE00A             B.N      ??u8g_is_intersection_decision_tree_2
    107              }
    108              else
    109              {
    110                if ( v0 > v1 )
   \                     ??u8g_is_intersection_decision_tree_1: (+1)
   \   00000012   0x4293             CMP      R3,R2
   \   00000014   0x4180             SBCS     R0,R0,R0
   \   00000016   0x0FC0             LSRS     R0,R0,#+31
    111                {
    112          	return 1;
   \   00000018   0xE006             B.N      ??u8g_is_intersection_decision_tree_2
    113                }
    114                else
    115                {
    116          	return 0;
    117                }
    118              }
    119            }
    120            else
    121            {
    122              if ( v1 >= a0 )
   \                     ??u8g_is_intersection_decision_tree_0: (+1)
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xD303             BCC.N    ??u8g_is_intersection_decision_tree_3
    123              {
    124                if ( v0 > v1 )
   \   0000001E   0x4293             CMP      R3,R2
   \   00000020   0x4180             SBCS     R0,R0,R0
   \   00000022   0x0FC0             LSRS     R0,R0,#+31
    125                {
    126          	return 1;
   \   00000024   0xE000             B.N      ??u8g_is_intersection_decision_tree_2
    127                }
    128                else
    129                {
    130          	return 0;
    131                }
    132              }
    133              else
    134              {
    135                return 0;
   \                     ??u8g_is_intersection_decision_tree_3: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??u8g_is_intersection_decision_tree_2: (+1)
   \   00000028   0xBC10             POP      {R4}
   \   0000002A   0x4770             BX       LR               ;; return
    136              }
    137            }
    138          }
    139          
    140          

   \                                 In section .text, align 2, keep-with-next
    141          uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
    142          {
   \                     u8g_IsBBXIntersection: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x461D             MOV      R5,R3
   \   00000006   0x9904             LDR      R1,[SP, #+16]
    143            register u8g_uint_t tmp;
    144            tmp = y;
    145            tmp += h;
    146            tmp--;
    147            if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
   \   00000008   0xF100 0x0648      ADD      R6,R0,#+72
   \   0000000C   0x1889             ADDS     R1,R1,R2
   \   0000000E   0x1E4B             SUBS     R3,R1,#+1
   \   00000010   0xB2DB             UXTB     R3,R3
   \   00000012   0x78F1             LDRB     R1,[R6, #+3]
   \   00000014   0x7870             LDRB     R0,[R6, #+1]
   \   00000016   0x.... 0x....      BL       u8g_is_intersection_decision_tree
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD101             BNE.N    ??u8g_IsBBXIntersection_0
    148              return 0; 
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD70             POP      {R4-R6,PC}
    149            
    150            tmp = x;
    151            tmp += w;
    152            tmp--;
    153            return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
   \                     ??u8g_IsBBXIntersection_0: (+1)
   \   00000022   0x192D             ADDS     R5,R5,R4
   \   00000024   0x1E6B             SUBS     R3,R5,#+1
   \   00000026   0xB2DB             UXTB     R3,R3
   \   00000028   0x4622             MOV      R2,R4
   \   0000002A   0x78B1             LDRB     R1,[R6, #+2]
   \   0000002C   0x7830             LDRB     R0,[R6, #+0]
   \   0000002E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000032   0x....             B.N      u8g_is_intersection_decision_tree
    154          }
    155          
    156          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   u8g_IsBBXIntersection
         0   -> u8g_is_intersection_decision_tree
        16   -> u8g_is_intersection_decision_tree
       4   u8g_is_intersection_decision_tree


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  u8g_IsBBXIntersection
      44  u8g_is_intersection_decision_tree

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none
